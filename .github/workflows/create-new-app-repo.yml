name: Create New Web App Repository

on:
  workflow_dispatch:
    inputs:
      project_name:
        description: 'Project name for new web app'
        required: true
        type: string
        default: 'my-new-app'
      template_type:
        description: 'Template to use'
        required: true
        type: choice
        in: choice
        options:
          - nextjs-basic
          - nextjs-fullstack
          - react-vite
          - vanilla-js
          - node-express
        default: 'nextjs-basic'
      is_private:
        description: 'Make repository private'
        required: false
        type: boolean
        default: false

jobs:
  create-repository:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      actions: write
      issues: write
      pull-requests: write
      repository-projects: write
    outputs:
      repo_url: ${{ steps.create_repo.outputs.repo_url }}
      repo_name: ${{ steps.create_repo.outputs.repo_name }}

    steps:
      - name: Checkout ATOM templates
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Generate repository details
        id: repo_info
        run: |
          SAFE_NAME=$(echo "${{ github.event.inputs.project_name }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/--*/-/g' | sed 's/^-//' | sed 's/-$//')
          REPO_NAME="${SAFE_NAME}-$(date +%s)"
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "safe_name=$SAFE_NAME" >> $GITHUB_OUTPUT

      - name: Authenticate and get user info
        id: user_info
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          USER_LOGIN=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/user | jq -r '.login')
          echo "user_login=$USER_LOGIN" >> $GITHUB_OUTPUT

      - name: Create new repository
        id: create_repo
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO_NAME="${{ steps.repo_info.outputs.repo_name }}"

          # Create the repository using curl - properly escaped
          curl -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            https://api.github.com/user/repos \
            -d "{\"name\":\"$REPO_NAME\",\"description\":\"Web app created via ATOM AI conversation\",\"private\":${{ toJSON(github.event.inputs.is_private) }},\"auto_init\":true,\"gitignore_template\":\"Node\",\"license_template\":\"mit\"}"

          echo "repo_url=https://github.com/${{ github.repository_owner }}/$REPO_NAME" >> $GITHUB_OUTPUT
          echo "✅ Created repository: $REPO_NAME"

      - name: Setup repository structure
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO_NAME="${{ steps.repo_info.outputs.repo_name }}"
          SAFE_NAME="${{ steps.repo_info.outputs.safe_name }}"

          # Clone the new repo
          git clone "https://x-access-token:$GITHUB_TOKEN@github.com/${{ steps.user_info.outputs.user_login }}/$REPO_NAME.git"
          cd "$REPO_NAME"

          # Configure git
          git config user.name "ATOM AI Bot"
          git config user.email "atom@github-actions[bot]"

          # Create template-specific content based on selection
          case "${{ github.event.inputs.template_type }}" in
            nextjs-basic|nextjs-fullstack)
              echo '{"name":"'${SAFE_NAME}'","version":"0.1.0","private":true,"scripts":{"dev":"next dev","build":"next build","start":"next start"},"dependencies":{"next":"14.0.4","react":"^18","react-dom":"^18"},"devDependencies":{"@types/node":"^20","@types/react":"^18","autoprefixer":"^10.0.1","eslint":"^8","eslint-config-next":"14.0.4","postcss":"^8","tailwindcss":"^3.3.0","typescript":"^5"}}' > package.json

              mkdir -p pages
              cat > pages/index.tsx << 'EOF'
          import Head from 'next/head'

          export default function Home() {
            return (
              <>
                <Head>
                  <title>ATOM Generated App</title>
                  <meta name="description" content="Built with ATOM AI" />
                  <meta name="viewport" content="width=device-width, initial-scale=1" />
                </Head>
                <main className="min-h-screen bg-gray-50 flex items-center justify-center">
                  <div className="text-center">
                    <h1 className="text-4xl font-bold text-gray-900 mb-4">
                      Welcome to ${SAFE_NAME}
                    </h1>
                    <p className="text-xl text-gray-600">
                      This is your new ATOM-generated web application
                    </p>
                  </div>
              </main>
            </>
          )
        }
        EOF
            mkdir -p .github/workflows
            cat > .github/workflows/deploy.yml << 'EOF'
        name: Deploy to Production
        on:
          push:
            branches: [ main ]
          pull_request:
            branches: [ main ]
        jobs:
          deploy:
            runs-on: ubuntu-latest
            steps:
              - uses: actions/checkout@v4
              - uses: actions/setup-node@v4
                with:
                  node-version: '18'
              - run: npm ci
              - run: npm run build
              - uses: amondnet/vercel-action@v25
                with:
                  vercel-token: ${{ secrets.VERCEL_TOKEN }}
                  vercel-org-id: ${{ secrets.ORG_ID }}
                  vercel-project-id: ${{ secrets.PROJECT_ID }}
                  vercel-args: '--prod'
        EOF
            ;;
          react-vite)
            # Create Vite template
            curl -o vite.config.js https://raw.githubusercontent.com/vitejs/vite/main/packages/create-vite/template-vanilla-ts/vite.config.ts
            ;;
          vanilla-js)
            # Create basic HTML/JS template
            mkdir -p src
            cat > index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>ATOM Generated App</title>
        </head>
        <body>
          <h1>Welcome to ${SAFE_NAME}</h1>
          <p>This is your new ATOM-generated web application</p>
          <script src="src/index.js"></script>
        </body>
        </html>
        EOF
            cat > src/index.js << 'EOF'
        console.log('ATOM-generated app started');
        EOF
            ;;
          node-express)
            cat > package.json << 'EOF'
        {
          "name": "${SAFE_NAME}",
          "version": "1.0.0",
          "description": "ATOM-generated Node.js app",
          "main": "server.js",
          "scripts": {
            "start": "node server.js",
            "dev": "nodemon server.js"
          },
          "dependencies": {
            "express": "^4.18.0"
          },
          "devDependencies": {
            "nodemon": "^3.0.0"
          }
        }
        EOF
            cat > server.js << 'EOF'
        const express = require('express');
        const app = express();
        const PORT = process.env.PORT || 3000;
        app.get('/', (req, res) => {
          res.json({ message: 'Welcome to ${SAFE_NAME} - Generated by ATOM' });
        });
        app.listen(PORT, () => {
          console.log(`Server running on port ${PORT}`);
        });
        EOF
            ;;
        esac

        # Create README
        cat > README.md << EOF
        # ${SAFE_NAME}

        **Generated by ATOM AI** 🚀

        Template: ${SAFE_NAME}

        ## Quick Start

        \`\`\`bash
        npm install
        npm run dev
        \`\`\`

        ## Deployment

        This repository includes GitHub Actions for automatic deployment to Vercel.

        ## Development

        - **Local**: \`npm run dev\`
        - **Build**: \`npm run build\`
        - **Preview**: Automatic Vercel deployment on push

        ---
        *Created via ATOM AI workflow - ${SAFE_NAME}*
        EOF

        # Commit and push
        git add .
        git commit -m "Initial commit: ATOM-generated ${SAFE_NAME} app"
        git push origin main

        echo "✅ Repository populated with ${SAFE_NAME} template"

    - name: Enable GitHub Pages
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        REPO_NAME="${{ steps.repo_info.outputs.repo_name }}"

        curl -X PUT \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ steps.user_info.outputs.user_login }}/$REPO_NAME/pages" \
          -d '{
            "source": {
              "branch": "main",
              "path": "/"
            }
          }'

    - name: Output results
      run: |
        echo "🎉 New web app repository created!"
        echo "📁 Repository: ${{ steps.create_repo.outputs.repo_name }}"
        echo "🔗 GitHub URL: ${{ steps.create_repo.outputs.repo_url }}"
        echo
