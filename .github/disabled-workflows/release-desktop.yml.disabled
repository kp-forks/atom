name: Release Desktop Applications

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.create_release.outputs.tag_name }}
    permissions:
      contents: write
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version || github.ref_name }}
          release_name: Release ${{ github.event.inputs.version || github.ref_name }}
          draft: false
          prerelease: false
          body: |
            ðŸŽ¯ ATOM AI Web Development Studio ${{ github.event.inputs.version || github.ref_name }}

            ## What's New
            - Complete conversational web development workflow
            - Zero local setup required
            - Cloud-only build pipeline with live previews
            - 9-agent AI team for every build

            ## Downloads
            - Windows: .exe installer
            - macOS: .dmg & .app universal
            - Linux: .deb & .AppImage

            ## Installation
            1. Download for your platform
            2. Install/run the app
            3. Start building via conversation!

  build-desktop:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            desktop/tauri/package-lock.json
            atomic-docker/app_build_docker/package-lock.json

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install dependencies (Desktop)
        run: |
          cd desktop/tauri
          npm ci

      - name: Install dependencies (Next.js)
        run: |
          cd atomic-docker/app_build_docker
          npm ci

      - name: Build Next.js for production
        run: |
          cd atomic-docker/app_build_docker
+          npm run build
+          npm run export

+      - name: Build Windows App
+        if: matrix.os == 'windows-latest'
+        working-directory: desktop/tauri
+        run: |
+          npm run build
+          npm run tauri build -- --target ${{ matrix.target }}

+      - name: Build Linux App
+        if: matrix.os == 'ubuntu-latest'
+        working-directory: desktop/tauri
+        env:
+          PKG_CONFIG_ALLOW_CROSS: 1
+        run: |
+          sudo apt-get update
+          sudo apt-get install -y libwebkit2gtk-4.0-dev build-essential curl wget libssl-dev libgtk-3-dev libayatana-appindicator3-1-dev librsvg2-dev
+          npm run build
+          npm run tauri build -- --target ${{ matrix.target }}

+      - name: Build macOS App
+        if: matrix.os == 'macos-latest'
+        working-directory: desktop/tauri
+        env:
+          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
+          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
+          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
+          APPLE_ID: ${{ secrets.APPLE_ID }}
+          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
+        run: |
+          npm run build
+          npm run tauri build -- --target ${{ matrix.target }}

+      - name: Upload Linux artifacts
+        if: matrix.os == 'ubuntu-latest'
+        uses: actions/upload-release-asset@v1
+        env:
+          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
+        with:
+          upload_url: ${{ needs.create-release.outputs.upload_url }}
