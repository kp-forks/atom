"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.zoomPassKey = exports.zoomIVForPass = exports.zoomSaltForPass = exports.appUrl = exports.zoomAuthUrl = exports.handshakeUrl = exports.zoomResourceName = exports.googleRedirectUrl = exports.googleClientIdWeb = exports.googleClientSecretWeb = exports.googleTokenUrl = exports.hasuraAdminSecret = exports.hasuraGraphUrl = exports.IS_PRODUCTION = void 0;
const dayjs_1 = __importDefault(require("dayjs"));
const isoWeek_1 = __importDefault(require("dayjs/plugin/isoWeek"));
const duration_1 = __importDefault(require("dayjs/plugin/duration"));
const isBetween_1 = __importDefault(require("dayjs/plugin/isBetween"));
const timezone_1 = __importDefault(require("dayjs/plugin/timezone"));
const utc_1 = __importDefault(require("dayjs/plugin/utc"));
dayjs_1.default.extend(isoWeek_1.default);
dayjs_1.default.extend(duration_1.default);
dayjs_1.default.extend(isBetween_1.default);
dayjs_1.default.extend(timezone_1.default);
dayjs_1.default.extend(utc_1.default);
exports.IS_PRODUCTION = process.env.NODE_ENV === 'production';
exports.hasuraGraphUrl = process.env.HASURA_GRAPHQL_GRAPHQL_URL;
exports.hasuraAdminSecret = process.env.HASURA_GRAPHQL_ADMIN_SECRET;
exports.googleTokenUrl = 'https://oauth2.googleapis.com/token';
exports.googleClientSecretWeb = process.env.GOOGLE_CLIENT_SECRET_WEB;
exports.googleClientIdWeb = process.env.GOOGLE_CLIENT_ID_WEB;
exports.googleRedirectUrl = process.env.GOOGLE_REDIRECT_URL;
exports.zoomResourceName = 'zoom';
exports.handshakeUrl = process.env.HANDSHAKE_URL;
exports.zoomAuthUrl = 'https://zoom.us/oauth/authorize';
exports.appUrl = process.env.NEXT_PUBLIC_APP_URL;
exports.zoomSaltForPass = process.env.ZOOM_SALT_FOR_PASS;
exports.zoomIVForPass = process.env.ZOOM_IV_FOR_PASS;
exports.zoomPassKey = process.env.ZOOM_PASS_KEY;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29uc3RhbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLGtEQUEwQjtBQUMxQixtRUFBMkM7QUFDM0MscUVBQTZDO0FBQzdDLHVFQUErQztBQUMvQyxxRUFBNkM7QUFDN0MsMkRBQW1DO0FBRW5DLGVBQUssQ0FBQyxNQUFNLENBQUMsaUJBQU8sQ0FBQyxDQUFDO0FBQ3RCLGVBQUssQ0FBQyxNQUFNLENBQUMsa0JBQVEsQ0FBQyxDQUFDO0FBQ3ZCLGVBQUssQ0FBQyxNQUFNLENBQUMsbUJBQVMsQ0FBQyxDQUFDO0FBQ3hCLGVBQUssQ0FBQyxNQUFNLENBQUMsa0JBQVEsQ0FBQyxDQUFDO0FBQ3ZCLGVBQUssQ0FBQyxNQUFNLENBQUMsYUFBRyxDQUFDLENBQUM7QUFFTCxRQUFBLGFBQWEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxZQUFZLENBQUM7QUFFdEQsUUFBQSxjQUFjLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBb0MsQ0FBQztBQUVsRSxRQUFBLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLENBQUM7QUFDNUQsUUFBQSxjQUFjLEdBQUcscUNBQXFDLENBQUM7QUFDdkQsUUFBQSxxQkFBcUIsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDO0FBQzdELFFBQUEsaUJBQWlCLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQztBQUNyRCxRQUFBLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUM7QUFFcEQsUUFBQSxnQkFBZ0IsR0FBRyxNQUFNLENBQUM7QUFFMUIsUUFBQSxZQUFZLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUM7QUFFekMsUUFBQSxXQUFXLEdBQUcsaUNBQWlDLENBQUM7QUFFaEQsUUFBQSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQztBQUV6QyxRQUFBLGVBQWUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUE0QixDQUFDO0FBRTNELFFBQUEsYUFBYSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQTBCLENBQUM7QUFFdkQsUUFBQSxXQUFXLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUF1QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdjQgYXMgdXVpZCB9IGZyb20gJ3V1aWQnO1xuaW1wb3J0IGRheWpzIGZyb20gJ2RheWpzJztcbmltcG9ydCBpc29XZWVrIGZyb20gJ2RheWpzL3BsdWdpbi9pc29XZWVrJztcbmltcG9ydCBkdXJhdGlvbiBmcm9tICdkYXlqcy9wbHVnaW4vZHVyYXRpb24nO1xuaW1wb3J0IGlzQmV0d2VlbiBmcm9tICdkYXlqcy9wbHVnaW4vaXNCZXR3ZWVuJztcbmltcG9ydCB0aW1lem9uZSBmcm9tICdkYXlqcy9wbHVnaW4vdGltZXpvbmUnO1xuaW1wb3J0IHV0YyBmcm9tICdkYXlqcy9wbHVnaW4vdXRjJztcblxuZGF5anMuZXh0ZW5kKGlzb1dlZWspO1xuZGF5anMuZXh0ZW5kKGR1cmF0aW9uKTtcbmRheWpzLmV4dGVuZChpc0JldHdlZW4pO1xuZGF5anMuZXh0ZW5kKHRpbWV6b25lKTtcbmRheWpzLmV4dGVuZCh1dGMpO1xuXG5leHBvcnQgY29uc3QgSVNfUFJPRFVDVElPTiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG5cbmV4cG9ydCBjb25zdCBoYXN1cmFHcmFwaFVybCA9IHByb2Nlc3MuZW52LkhBU1VSQV9HUkFQSFFMX0dSQVBIUUxfVVJMIGFzIHN0cmluZztcblxuZXhwb3J0IGNvbnN0IGhhc3VyYUFkbWluU2VjcmV0ID0gcHJvY2Vzcy5lbnYuSEFTVVJBX0dSQVBIUUxfQURNSU5fU0VDUkVUO1xuZXhwb3J0IGNvbnN0IGdvb2dsZVRva2VuVXJsID0gJ2h0dHBzOi8vb2F1dGgyLmdvb2dsZWFwaXMuY29tL3Rva2VuJztcbmV4cG9ydCBjb25zdCBnb29nbGVDbGllbnRTZWNyZXRXZWIgPSBwcm9jZXNzLmVudi5HT09HTEVfQ0xJRU5UX1NFQ1JFVF9XRUI7XG5leHBvcnQgY29uc3QgZ29vZ2xlQ2xpZW50SWRXZWIgPSBwcm9jZXNzLmVudi5HT09HTEVfQ0xJRU5UX0lEX1dFQjtcbmV4cG9ydCBjb25zdCBnb29nbGVSZWRpcmVjdFVybCA9IHByb2Nlc3MuZW52LkdPT0dMRV9SRURJUkVDVF9VUkw7XG5cbmV4cG9ydCBjb25zdCB6b29tUmVzb3VyY2VOYW1lID0gJ3pvb20nO1xuXG5leHBvcnQgY29uc3QgaGFuZHNoYWtlVXJsID0gcHJvY2Vzcy5lbnYuSEFORFNIQUtFX1VSTDtcblxuZXhwb3J0IGNvbnN0IHpvb21BdXRoVXJsID0gJ2h0dHBzOi8vem9vbS51cy9vYXV0aC9hdXRob3JpemUnO1xuXG5leHBvcnQgY29uc3QgYXBwVXJsID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQVBQX1VSTDtcblxuZXhwb3J0IGNvbnN0IHpvb21TYWx0Rm9yUGFzcyA9IHByb2Nlc3MuZW52LlpPT01fU0FMVF9GT1JfUEFTUyBhcyBzdHJpbmc7XG5cbmV4cG9ydCBjb25zdCB6b29tSVZGb3JQYXNzID0gcHJvY2Vzcy5lbnYuWk9PTV9JVl9GT1JfUEFTUyBhcyBzdHJpbmc7XG5cbmV4cG9ydCBjb25zdCB6b29tUGFzc0tleSA9IHByb2Nlc3MuZW52LlpPT01fUEFTU19LRVkgYXMgc3RyaW5nO1xuIl19