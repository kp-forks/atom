"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = handler;
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
const api_helper_1 = require("@lib/api-helper");
async function handler(req, res) {
    try {
        const body = req.body;
        if (body?.method === 'updateZoomIntegration') {
            const { id, appAccountId, appEmail, appId, token, refreshToken, expiresIn, contactFirstName, contactLastName, phoneCountry, // 'US'
            phoneNumber, // '+1 1234567891'
            enabled, } = body?.variables;
            await (0, api_helper_1.updateZoomIntegration)(id, appAccountId, appEmail, appId, token, expiresIn, refreshToken, contactFirstName, contactLastName, phoneCountry, // 'US'
            phoneNumber, // '+1 1234567891'
            enabled);
            return res.status(204).end();
        }
        return res.status(404).end();
    }
    catch (e) {
        console.log(e, ' unable to process');
        res.status(404).end();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9iaWxlLWNhbGxiYWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9iaWxlLWNhbGxiYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBa0NBLDBCQTZDQztBQS9FRCw2RUFBNkU7QUFDN0UsZ0RBR3lCO0FBOEJWLEtBQUssVUFBVSxPQUFPLENBQ25DLEdBQW1CLEVBQ25CLEdBQXlEO0lBRXpELElBQUksQ0FBQztRQUNILE1BQU0sSUFBSSxHQUFxQyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBRXhELElBQUksSUFBSSxFQUFFLE1BQU0sS0FBSyx1QkFBdUIsRUFBRSxDQUFDO1lBQzdDLE1BQU0sRUFDSixFQUFFLEVBQ0YsWUFBWSxFQUNaLFFBQVEsRUFDUixLQUFLLEVBQ0wsS0FBSyxFQUNMLFlBQVksRUFDWixTQUFTLEVBQ1QsZ0JBQWdCLEVBQ2hCLGVBQWUsRUFDZixZQUFZLEVBQUUsT0FBTztZQUNyQixXQUFXLEVBQUUsa0JBQWtCO1lBQy9CLE9BQU8sR0FDUixHQUFHLElBQUksRUFBRSxTQUFTLENBQUM7WUFDcEIsTUFBTSxJQUFBLGtDQUFxQixFQUN6QixFQUFFLEVBQ0YsWUFBWSxFQUNaLFFBQVEsRUFDUixLQUFLLEVBQ0wsS0FBSyxFQUNMLFNBQVMsRUFDVCxZQUFZLEVBQ1osZ0JBQWdCLEVBQ2hCLGVBQWUsRUFDZixZQUFZLEVBQUUsT0FBTztZQUNyQixXQUFXLEVBQUUsa0JBQWtCO1lBQy9CLE9BQU8sQ0FDUixDQUFDO1lBRUYsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQy9CLENBQUM7UUFFRCxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO1FBQ3JDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDeEIsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBOZXh0LmpzIEFQSSByb3V0ZSBzdXBwb3J0OiBodHRwczovL25leHRqcy5vcmcvZG9jcy9hcGktcm91dGVzL2ludHJvZHVjdGlvblxuaW1wb3J0IHtcbiAgZ2V0TWluaW1hbENhbGVuZGFySW50ZWdyYXRpb24sXG4gIHVwZGF0ZVpvb21JbnRlZ3JhdGlvbixcbn0gZnJvbSAnQGxpYi9hcGktaGVscGVyJztcbmltcG9ydCB7IENhbGVuZGFySW50ZWdyYXRpb25UeXBlIH0gZnJvbSAnQGxpYi90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IE5leHRBcGlSZXF1ZXN0LCBOZXh0QXBpUmVzcG9uc2UgfSBmcm9tICduZXh0JztcblxuLy8gdHlwZSBSZXF1ZXN0TWluaW1hbENhbGVuZGFySW50ZWdyYXRpb25UeXBlID0ge1xuLy8gICAgIG1ldGhvZDogJ2dldE1pbmltYWxDYWxlbmRhckludGVncmF0aW9uJyxcbi8vICAgICB2YXJpYWJsZXM6IHtcbi8vICAgICAgICAgdXNlcklkOiBzdHJpbmcsXG4vLyAgICAgICAgIHJlc291cmNlOiBzdHJpbmcsXG4vLyAgICAgfVxuLy8gfVxuXG50eXBlIFJlcXVlc3RVcGRhdGVab29tSW50ZWdyYXRpb25UeXBlID0ge1xuICBtZXRob2Q6ICd1cGRhdGVab29tSW50ZWdyYXRpb24nO1xuICB2YXJpYWJsZXM6IHtcbiAgICBpZDogc3RyaW5nO1xuICAgIGFwcEFjY291bnRJZDogc3RyaW5nO1xuICAgIGFwcEVtYWlsOiBzdHJpbmc7XG4gICAgYXBwSWQ6IHN0cmluZztcbiAgICB0b2tlbjogc3RyaW5nIHwgbnVsbDtcbiAgICBleHBpcmVzSW46IG51bWJlciB8IG51bGw7XG4gICAgcmVmcmVzaFRva2VuPzogc3RyaW5nO1xuICAgIGNvbnRhY3RGaXJzdE5hbWU/OiBzdHJpbmc7XG4gICAgY29udGFjdExhc3ROYW1lPzogc3RyaW5nO1xuICAgIHBob25lQ291bnRyeT86IHN0cmluZzsgLy8gJ1VTJ1xuICAgIHBob25lTnVtYmVyPzogc3RyaW5nOyAvLyAnKzEgMTIzNDU2Nzg5MSdcbiAgICBlbmFibGVkPzogYm9vbGVhbjtcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIoXG4gIHJlcTogTmV4dEFwaVJlcXVlc3QsXG4gIHJlczogTmV4dEFwaVJlc3BvbnNlPENhbGVuZGFySW50ZWdyYXRpb25UeXBlIHwgdW5kZWZpbmVkPlxuKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgYm9keTogUmVxdWVzdFVwZGF0ZVpvb21JbnRlZ3JhdGlvblR5cGUgPSByZXEuYm9keTtcblxuICAgIGlmIChib2R5Py5tZXRob2QgPT09ICd1cGRhdGVab29tSW50ZWdyYXRpb24nKSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGlkLFxuICAgICAgICBhcHBBY2NvdW50SWQsXG4gICAgICAgIGFwcEVtYWlsLFxuICAgICAgICBhcHBJZCxcbiAgICAgICAgdG9rZW4sXG4gICAgICAgIHJlZnJlc2hUb2tlbixcbiAgICAgICAgZXhwaXJlc0luLFxuICAgICAgICBjb250YWN0Rmlyc3ROYW1lLFxuICAgICAgICBjb250YWN0TGFzdE5hbWUsXG4gICAgICAgIHBob25lQ291bnRyeSwgLy8gJ1VTJ1xuICAgICAgICBwaG9uZU51bWJlciwgLy8gJysxIDEyMzQ1Njc4OTEnXG4gICAgICAgIGVuYWJsZWQsXG4gICAgICB9ID0gYm9keT8udmFyaWFibGVzO1xuICAgICAgYXdhaXQgdXBkYXRlWm9vbUludGVncmF0aW9uKFxuICAgICAgICBpZCxcbiAgICAgICAgYXBwQWNjb3VudElkLFxuICAgICAgICBhcHBFbWFpbCxcbiAgICAgICAgYXBwSWQsXG4gICAgICAgIHRva2VuLFxuICAgICAgICBleHBpcmVzSW4sXG4gICAgICAgIHJlZnJlc2hUb2tlbixcbiAgICAgICAgY29udGFjdEZpcnN0TmFtZSxcbiAgICAgICAgY29udGFjdExhc3ROYW1lLFxuICAgICAgICBwaG9uZUNvdW50cnksIC8vICdVUydcbiAgICAgICAgcGhvbmVOdW1iZXIsIC8vICcrMSAxMjM0NTY3ODkxJ1xuICAgICAgICBlbmFibGVkXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDQpLmVuZCgpO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuZW5kKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlLCAnIHVuYWJsZSB0byBwcm9jZXNzJyk7XG4gICAgcmVzLnN0YXR1cyg0MDQpLmVuZCgpO1xuICB9XG59XG4iXX0=