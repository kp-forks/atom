"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const constants_1 = require("@lib/constants");
const react_1 = require("@chakra-ui/react");
const react_2 = require("react");
const router_1 = require("next/router");
const ZoomIcon = (props) => ((0, jsx_runtime_1.jsxs)(react_1.Icon, { viewBox: "0 0 1329.08 1329.08", ...props, children: [(0, jsx_runtime_1.jsx)("path", { d: "M664.54 0c367.02 0 664.54 297.52 664.54 664.54s-297.52 664.54-664.54 664.54S0 1031.56 0 664.54 297.52 0 664.54 0z", fill: "#e5e5e4", fillRule: "nonzero" }), (0, jsx_runtime_1.jsx)("path", { className: "fil1", d: "M664.54 12.94c359.87 0 651.6 291.73 651.6 651.6s-291.73 651.6-651.6 651.6-651.6-291.73-651.6-651.6 291.74-651.6 651.6-651.6z" }), (0, jsx_runtime_1.jsx)("path", { d: "M664.54 65.21c331 0 599.33 268.33 599.33 599.33 0 331-268.33 599.33-599.33 599.33-331 0-599.33-268.33-599.33-599.33 0-331 268.33-599.33 599.33-599.33z", fill: "#4a8cff", fillRule: "nonzero" }), (0, jsx_runtime_1.jsx)("path", { className: "fil1", d: "M273.53 476.77v281.65c.25 63.69 52.27 114.95 115.71 114.69h410.55c11.67 0 21.06-9.39 21.06-20.81V570.65c-.25-63.69-52.27-114.95-115.7-114.69H294.6c-11.67 0-21.06 9.39-21.06 20.81zm573.45 109.87l169.5-123.82c14.72-12.18 26.13-9.14 26.13 12.94v377.56c0 25.12-13.96 22.08-26.13 12.94l-169.5-123.57V586.64z" })] }));
const ZoomMobileStart = () => {
    const [url, setUrl] = (0, react_2.useState)('');
    const router = (0, router_1.useRouter)();
    const userId = router?.query?.userId;
    const path = router?.query?.path;
    (0, react_2.useEffect)(() => {
        const makeLink = () => {
            const newUrl = new URL(constants_1.zoomAuthUrl);
            newUrl.searchParams.set('response_type', 'code');
            // dev only
            newUrl.searchParams.set('redirect_uri', process.env.NEXT_PUBLIC_ZOOM_REDIRECT_URL);
            // prod - ZOOM_REDIRECT_URI
            newUrl.searchParams.set('client_id', process.env.NEXT_PUBLIC_ZOOM_CLIENT_ID);
            if (path?.length > 0) {
                newUrl.searchParams.set('state', `${userId}#${path}`);
            }
            else {
                newUrl.searchParams.set('state', userId);
            }
            setUrl(newUrl.href);
        };
        makeLink();
    }, [path, userId]);
    const routeToZoomAuth = (e) => {
        e?.preventDefault();
        // https://zoom.us/oauth/authorize?response_type=code&client_id=OrxpodmORP2eDHug8x0jbQ&redirect_uri=https://oauth.atomiclife.app/api/integrations/zoomvideo/callback
        const newUrl = new URL(constants_1.zoomAuthUrl);
        newUrl.searchParams.set('response_type', 'code');
        // dev only
        newUrl.searchParams.set('redirect_uri', process.env.NEXT_PUBLIC_ZOOM_REDIRECT_URL);
        newUrl.searchParams.set('client_id', process.env.NEXT_PUBLIC_ZOOM_CLIENT_ID);
        if (path?.length > 0) {
            newUrl.searchParams.set('state', `${userId}#${path}`);
        }
        else {
            newUrl.searchParams.set('state', userId);
        }
        window.location.href = newUrl.href;
    };
    return ((0, jsx_runtime_1.jsx)("div", { className: "flex justify-center items-center h-screen w-full dark:bg-black", children: (0, jsx_runtime_1.jsx)("a", { href: url, onClick: routeToZoomAuth, children: (0, jsx_runtime_1.jsx)(react_1.Button, { leftIcon: (0, jsx_runtime_1.jsx)(ZoomIcon, {}), colorScheme: 'messenger', variant: 'solid', children: "Start Zoom OAuth" }) }) }));
};
exports.default = ZoomMobileStart;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9iaWxlLXN0YXJ0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9iaWxlLXN0YXJ0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBNEM7QUFDNUMsNENBQStDO0FBQy9DLGlDQUEyQztBQUUzQyx3Q0FBdUM7QUFHdkMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxLQUFVLEVBQUUsRUFBRSxDQUFDLENBQzdCLHdCQUFDLFlBQUksSUFBQyxPQUFPLEVBQUMscUJBQXFCLEtBQUssS0FBSyxhQUN6QyxpQ0FBTSxDQUFDLEVBQUMsbUhBQW1ILEVBQUMsSUFBSSxFQUFDLFNBQVMsRUFBQyxRQUFRLEVBQUMsU0FBUyxHQUFHLEVBQUEsaUNBQU0sU0FBUyxFQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUMsOEhBQThILEdBQUcsRUFBQSxpQ0FBTSxDQUFDLEVBQUMsd0pBQXdKLEVBQUMsSUFBSSxFQUFDLFNBQVMsRUFBQyxRQUFRLEVBQUMsU0FBUyxHQUFHLEVBQUEsaUNBQU0sU0FBUyxFQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUMsZ1RBQWdULEdBQUcsSUFDeDBCLENBQ1YsQ0FBQTtBQUNELE1BQU0sZUFBZSxHQUFhLEdBQUcsRUFBRTtJQUNuQyxNQUFNLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxHQUFHLElBQUEsZ0JBQVEsRUFBQyxFQUFFLENBQUMsQ0FBQTtJQUNsQyxNQUFNLE1BQU0sR0FBRyxJQUFBLGtCQUFTLEdBQUUsQ0FBQTtJQUUxQixNQUFNLE1BQU0sR0FBRyxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQWdCLENBQUE7SUFDOUMsTUFBTSxJQUFJLEdBQUcsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFjLENBQUE7SUFFMUMsSUFBQSxpQkFBUyxFQUFDLEdBQUcsRUFBRTtRQUNYLE1BQU0sUUFBUSxHQUFHLEdBQUcsRUFBRTtZQUNsQixNQUFNLE1BQU0sR0FBRyxJQUFJLEdBQUcsQ0FBQyx1QkFBVyxDQUFDLENBQUE7WUFDbkMsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxDQUFBO1lBQ2hELFdBQVc7WUFDWCxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2QkFBdUMsQ0FBQyxDQUFBO1lBQzVGLDJCQUEyQjtZQUMzQixNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBb0MsQ0FBQyxDQUFBO1lBQ3RGLElBQUksSUFBSSxFQUFFLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztnQkFDbkIsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEdBQUcsTUFBTSxJQUFJLElBQUksRUFBRSxDQUFDLENBQUE7WUFDekQsQ0FBQztpQkFBTSxDQUFDO2dCQUNKLE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQTtZQUM1QyxDQUFDO1lBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUN2QixDQUFDLENBQUE7UUFDRCxRQUFRLEVBQUUsQ0FBQTtJQUNkLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFBO0lBRWxCLE1BQU0sZUFBZSxHQUFHLENBQUMsQ0FBaUMsRUFBRSxFQUFFO1FBQzFELENBQUMsRUFBRSxjQUFjLEVBQUUsQ0FBQTtRQUNuQixvS0FBb0s7UUFDcEssTUFBTSxNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsdUJBQVcsQ0FBQyxDQUFBO1FBQ25DLE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUNoRCxXQUFXO1FBQ1gsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkJBQXVDLENBQUMsQ0FBQTtRQUM1RixNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBb0MsQ0FBQyxDQUFBO1FBQ3RGLElBQUksSUFBSSxFQUFFLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUNuQixNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxNQUFNLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQTtRQUN6RCxDQUFDO2FBQU0sQ0FBQztZQUNKLE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUM1QyxDQUFDO1FBQ0QsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQTtJQUN0QyxDQUFDLENBQUE7SUFFRCxPQUFPLENBQ0gsZ0NBQUssU0FBUyxFQUFDLGdFQUFnRSxZQUMzRSw4QkFBRyxJQUFJLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxlQUFlLFlBQ2xDLHVCQUFDLGNBQU0sSUFBQyxRQUFRLEVBQUUsdUJBQUMsUUFBUSxLQUFHLEVBQUUsV0FBVyxFQUFDLFdBQVcsRUFBQyxPQUFPLEVBQUMsT0FBTyxpQ0FFOUQsR0FDVCxHQUNGLENBQ1QsQ0FBQTtBQUVMLENBQUMsQ0FBQTtBQUVELGtCQUFlLGVBQWUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHpvb21BdXRoVXJsIH0gZnJvbSBcIkBsaWIvY29uc3RhbnRzXCJcbmltcG9ydCB7IEljb24sIEJ1dHRvbiB9IGZyb20gJ0BjaGFrcmEtdWkvcmVhY3QnXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IE5leHRQYWdlIH0gZnJvbSBcIm5leHRcIlxuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSBcIm5leHQvcm91dGVyXCJcblxuXG5jb25zdCBab29tSWNvbiA9IChwcm9wczogYW55KSA9PiAoXG4gICAgPEljb24gdmlld0JveD1cIjAgMCAxMzI5LjA4IDEzMjkuMDhcIiB7Li4ucHJvcHN9PlxuICAgICAgICA8cGF0aCBkPVwiTTY2NC41NCAwYzM2Ny4wMiAwIDY2NC41NCAyOTcuNTIgNjY0LjU0IDY2NC41NHMtMjk3LjUyIDY2NC41NC02NjQuNTQgNjY0LjU0UzAgMTAzMS41NiAwIDY2NC41NCAyOTcuNTIgMCA2NjQuNTQgMHpcIiBmaWxsPVwiI2U1ZTVlNFwiIGZpbGxSdWxlPVwibm9uemVyb1wiIC8+PHBhdGggY2xhc3NOYW1lPVwiZmlsMVwiIGQ9XCJNNjY0LjU0IDEyLjk0YzM1OS44NyAwIDY1MS42IDI5MS43MyA2NTEuNiA2NTEuNnMtMjkxLjczIDY1MS42LTY1MS42IDY1MS42LTY1MS42LTI5MS43My02NTEuNi02NTEuNiAyOTEuNzQtNjUxLjYgNjUxLjYtNjUxLjZ6XCIgLz48cGF0aCBkPVwiTTY2NC41NCA2NS4yMWMzMzEgMCA1OTkuMzMgMjY4LjMzIDU5OS4zMyA1OTkuMzMgMCAzMzEtMjY4LjMzIDU5OS4zMy01OTkuMzMgNTk5LjMzLTMzMSAwLTU5OS4zMy0yNjguMzMtNTk5LjMzLTU5OS4zMyAwLTMzMSAyNjguMzMtNTk5LjMzIDU5OS4zMy01OTkuMzN6XCIgZmlsbD1cIiM0YThjZmZcIiBmaWxsUnVsZT1cIm5vbnplcm9cIiAvPjxwYXRoIGNsYXNzTmFtZT1cImZpbDFcIiBkPVwiTTI3My41MyA0NzYuNzd2MjgxLjY1Yy4yNSA2My42OSA1Mi4yNyAxMTQuOTUgMTE1LjcxIDExNC42OWg0MTAuNTVjMTEuNjcgMCAyMS4wNi05LjM5IDIxLjA2LTIwLjgxVjU3MC42NWMtLjI1LTYzLjY5LTUyLjI3LTExNC45NS0xMTUuNy0xMTQuNjlIMjk0LjZjLTExLjY3IDAtMjEuMDYgOS4zOS0yMS4wNiAyMC44MXptNTczLjQ1IDEwOS44N2wxNjkuNS0xMjMuODJjMTQuNzItMTIuMTggMjYuMTMtOS4xNCAyNi4xMyAxMi45NHYzNzcuNTZjMCAyNS4xMi0xMy45NiAyMi4wOC0yNi4xMyAxMi45NGwtMTY5LjUtMTIzLjU3VjU4Ni42NHpcIiAvPlxuICAgIDwvSWNvbj5cbilcbmNvbnN0IFpvb21Nb2JpbGVTdGFydDogTmV4dFBhZ2UgPSAoKSA9PiB7XG4gICAgY29uc3QgW3VybCwgc2V0VXJsXSA9IHVzZVN0YXRlKCcnKVxuICAgIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpXG5cbiAgICBjb25zdCB1c2VySWQgPSByb3V0ZXI/LnF1ZXJ5Py51c2VySWQgYXMgc3RyaW5nXG4gICAgY29uc3QgcGF0aCA9IHJvdXRlcj8ucXVlcnk/LnBhdGggYXMgc3RyaW5nXG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zdCBtYWtlTGluayA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1VybCA9IG5ldyBVUkwoem9vbUF1dGhVcmwpXG4gICAgICAgICAgICBuZXdVcmwuc2VhcmNoUGFyYW1zLnNldCgncmVzcG9uc2VfdHlwZScsICdjb2RlJylcbiAgICAgICAgICAgIC8vIGRldiBvbmx5XG4gICAgICAgICAgICBuZXdVcmwuc2VhcmNoUGFyYW1zLnNldCgncmVkaXJlY3RfdXJpJywgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfWk9PTV9SRURJUkVDVF9VUkwgYXMgc3RyaW5nKVxuICAgICAgICAgICAgLy8gcHJvZCAtIFpPT01fUkVESVJFQ1RfVVJJXG4gICAgICAgICAgICBuZXdVcmwuc2VhcmNoUGFyYW1zLnNldCgnY2xpZW50X2lkJywgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfWk9PTV9DTElFTlRfSUQgYXMgc3RyaW5nKVxuICAgICAgICAgICAgaWYgKHBhdGg/Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBuZXdVcmwuc2VhcmNoUGFyYW1zLnNldCgnc3RhdGUnLCBgJHt1c2VySWR9IyR7cGF0aH1gKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXdVcmwuc2VhcmNoUGFyYW1zLnNldCgnc3RhdGUnLCB1c2VySWQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHNldFVybChuZXdVcmwuaHJlZilcbiAgICAgICAgfVxuICAgICAgICBtYWtlTGluaygpXG4gICAgfSwgW3BhdGgsIHVzZXJJZF0pXG5cbiAgICBjb25zdCByb3V0ZVRvWm9vbUF1dGggPSAoZTogeyBwcmV2ZW50RGVmYXVsdDogKCkgPT4gdm9pZCB9KSA9PiB7XG4gICAgICAgIGU/LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgLy8gaHR0cHM6Ly96b29tLnVzL29hdXRoL2F1dGhvcml6ZT9yZXNwb25zZV90eXBlPWNvZGUmY2xpZW50X2lkPU9yeHBvZG1PUlAyZURIdWc4eDBqYlEmcmVkaXJlY3RfdXJpPWh0dHBzOi8vb2F1dGguYXRvbWljbGlmZS5hcHAvYXBpL2ludGVncmF0aW9ucy96b29tdmlkZW8vY2FsbGJhY2tcbiAgICAgICAgY29uc3QgbmV3VXJsID0gbmV3IFVSTCh6b29tQXV0aFVybClcbiAgICAgICAgbmV3VXJsLnNlYXJjaFBhcmFtcy5zZXQoJ3Jlc3BvbnNlX3R5cGUnLCAnY29kZScpXG4gICAgICAgIC8vIGRldiBvbmx5XG4gICAgICAgIG5ld1VybC5zZWFyY2hQYXJhbXMuc2V0KCdyZWRpcmVjdF91cmknLCBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19aT09NX1JFRElSRUNUX1VSTCBhcyBzdHJpbmcpXG4gICAgICAgIG5ld1VybC5zZWFyY2hQYXJhbXMuc2V0KCdjbGllbnRfaWQnLCBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19aT09NX0NMSUVOVF9JRCBhcyBzdHJpbmcpXG4gICAgICAgIGlmIChwYXRoPy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBuZXdVcmwuc2VhcmNoUGFyYW1zLnNldCgnc3RhdGUnLCBgJHt1c2VySWR9IyR7cGF0aH1gKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3VXJsLnNlYXJjaFBhcmFtcy5zZXQoJ3N0YXRlJywgdXNlcklkKVxuICAgICAgICB9XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gbmV3VXJsLmhyZWZcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgganVzdGlmeS1jZW50ZXIgaXRlbXMtY2VudGVyIGgtc2NyZWVuIHctZnVsbCBkYXJrOmJnLWJsYWNrXCI+XG4gICAgICAgICAgICA8YSBocmVmPXt1cmx9IG9uQ2xpY2s9e3JvdXRlVG9ab29tQXV0aH0+XG4gICAgICAgICAgICAgICAgPEJ1dHRvbiBsZWZ0SWNvbj17PFpvb21JY29uIC8+fSBjb2xvclNjaGVtZT0nbWVzc2VuZ2VyJyB2YXJpYW50PSdzb2xpZCc+XG4gICAgICAgICAgICAgICAgICAgIFN0YXJ0IFpvb20gT0F1dGhcbiAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9kaXY+XG4gICAgKVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFpvb21Nb2JpbGVTdGFydFxuIl19