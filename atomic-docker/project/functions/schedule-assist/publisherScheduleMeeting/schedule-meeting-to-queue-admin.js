import { Kafka, logLevel } from 'kafkajs';
import { kafkaScheduleAssistGroupId, kafkaScheduleAssistTopic, } from '../_libs/constants';
const kafka = new Kafka({
    logLevel: logLevel.DEBUG,
    brokers: [`kafka1:29092`],
    clientId: 'atomic',
    // ssl: true,
    sasl: {
        mechanism: 'plain', // scram-sha-256 or scram-sha-512
        username: process.env.KAFKA_USERNAME,
        password: process.env.KAFKA_PASSWORD,
    },
});
const publisher = async (req, res) => {
    const producer = kafka.producer({ maxInFlightRequests: 1, idempotent: true });
    await producer.connect();
    const transaction = await producer.transaction();
    try {
        const eventItem = req.body;
        const response = await transaction.send({
            topic: kafkaScheduleAssistTopic,
            messages: [{ value: JSON.stringify(eventItem) }],
        });
        const admin = kafka.admin();
        await admin.connect();
        const partitions = await admin.fetchOffsets({
            groupId: kafkaScheduleAssistGroupId,
            topics: [kafkaScheduleAssistTopic],
        });
        console.log(partitions);
        await admin.disconnect();
        await transaction.sendOffsets({
            consumerGroupId: kafkaScheduleAssistGroupId,
            topics: [
                {
                    topic: kafkaScheduleAssistTopic,
                    partitions: partitions?.[0]?.partitions,
                },
            ],
        });
        await transaction.commit();
        console.log(response, ' response successfully added to queue inside features-worker-queue-admin');
        res.status(202).send('succesfully created day schedule');
    }
    catch (e) {
        console.log(e, ' unable to process message');
        await transaction.abort();
        res.status(400).json(e);
    }
};
export default publisher;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGUtbWVldGluZy10by1xdWV1ZS1hZG1pbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNjaGVkdWxlLW1lZXRpbmctdG8tcXVldWUtYWRtaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFHMUMsT0FBTyxFQUNMLDBCQUEwQixFQUMxQix3QkFBd0IsR0FDekIsTUFBTSxvQkFBb0IsQ0FBQztBQUU1QixNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQztJQUN0QixRQUFRLEVBQUUsUUFBUSxDQUFDLEtBQUs7SUFDeEIsT0FBTyxFQUFFLENBQUMsY0FBYyxDQUFDO0lBQ3pCLFFBQVEsRUFBRSxRQUFRO0lBQ2xCLGFBQWE7SUFDYixJQUFJLEVBQUU7UUFDSixTQUFTLEVBQUUsT0FBTyxFQUFFLGlDQUFpQztRQUNyRCxRQUFRLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjO1FBQ3BDLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWM7S0FDckM7Q0FDRixDQUFDLENBQUM7QUFFSCxNQUFNLFNBQVMsR0FBRyxLQUFLLEVBQUUsR0FBWSxFQUFFLEdBQWEsRUFBRSxFQUFFO0lBQ3RELE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxtQkFBbUIsRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDOUUsTUFBTSxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7SUFFekIsTUFBTSxXQUFXLEdBQUcsTUFBTSxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDakQsSUFBSSxDQUFDO1FBQ0gsTUFBTSxTQUFTLEdBQTJDLEdBQUcsQ0FBQyxJQUFJLENBQUM7UUFFbkUsTUFBTSxRQUFRLEdBQUcsTUFBTSxXQUFXLENBQUMsSUFBSSxDQUFDO1lBQ3RDLEtBQUssRUFBRSx3QkFBd0I7WUFDL0IsUUFBUSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO1NBQ2pELENBQUMsQ0FBQztRQUVILE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUU1QixNQUFNLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN0QixNQUFNLFVBQVUsR0FBRyxNQUFNLEtBQUssQ0FBQyxZQUFZLENBQUM7WUFDMUMsT0FBTyxFQUFFLDBCQUEwQjtZQUNuQyxNQUFNLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQztTQUNuQyxDQUFDLENBQUM7UUFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBRXpCLE1BQU0sV0FBVyxDQUFDLFdBQVcsQ0FBQztZQUM1QixlQUFlLEVBQUUsMEJBQTBCO1lBQzNDLE1BQU0sRUFBRTtnQkFDTjtvQkFDRSxLQUFLLEVBQUUsd0JBQXdCO29CQUMvQixVQUFVLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsVUFBVTtpQkFDeEM7YUFDRjtTQUNGLENBQUMsQ0FBQztRQUVILE1BQU0sV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRTNCLE9BQU8sQ0FBQyxHQUFHLENBQ1QsUUFBUSxFQUNSLDBFQUEwRSxDQUMzRSxDQUFDO1FBRUYsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsa0NBQWtDLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUNYLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLDRCQUE0QixDQUFDLENBQUM7UUFFN0MsTUFBTSxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDMUIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsQ0FBQztBQUNILENBQUMsQ0FBQztBQUVGLGVBQWUsU0FBUyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCB7IEthZmthLCBsb2dMZXZlbCB9IGZyb20gJ2thZmthanMnO1xuaW1wb3J0IGlwIGZyb20gJ2lwJztcbmltcG9ydCB7IFNjaGVkdWxlQXNzaXN0V2l0aE1lZXRpbmdRdWV1ZUJvZHlUeXBlIH0gZnJvbSAnQHNjaGVkdWxlX2Fzc2lzdC9fbGlicy90eXBlcy9zY2hlZHVsZU1lZXRpbmdXb3JrZXIvdHlwZXMnO1xuaW1wb3J0IHtcbiAga2Fma2FTY2hlZHVsZUFzc2lzdEdyb3VwSWQsXG4gIGthZmthU2NoZWR1bGVBc3Npc3RUb3BpYyxcbn0gZnJvbSAnLi4vX2xpYnMvY29uc3RhbnRzJztcblxuY29uc3Qga2Fma2EgPSBuZXcgS2Fma2Eoe1xuICBsb2dMZXZlbDogbG9nTGV2ZWwuREVCVUcsXG4gIGJyb2tlcnM6IFtga2Fma2ExOjI5MDkyYF0sXG4gIGNsaWVudElkOiAnYXRvbWljJyxcbiAgLy8gc3NsOiB0cnVlLFxuICBzYXNsOiB7XG4gICAgbWVjaGFuaXNtOiAncGxhaW4nLCAvLyBzY3JhbS1zaGEtMjU2IG9yIHNjcmFtLXNoYS01MTJcbiAgICB1c2VybmFtZTogcHJvY2Vzcy5lbnYuS0FGS0FfVVNFUk5BTUUsXG4gICAgcGFzc3dvcmQ6IHByb2Nlc3MuZW52LktBRktBX1BBU1NXT1JELFxuICB9LFxufSk7XG5cbmNvbnN0IHB1Ymxpc2hlciA9IGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcbiAgY29uc3QgcHJvZHVjZXIgPSBrYWZrYS5wcm9kdWNlcih7IG1heEluRmxpZ2h0UmVxdWVzdHM6IDEsIGlkZW1wb3RlbnQ6IHRydWUgfSk7XG4gIGF3YWl0IHByb2R1Y2VyLmNvbm5lY3QoKTtcblxuICBjb25zdCB0cmFuc2FjdGlvbiA9IGF3YWl0IHByb2R1Y2VyLnRyYW5zYWN0aW9uKCk7XG4gIHRyeSB7XG4gICAgY29uc3QgZXZlbnRJdGVtOiBTY2hlZHVsZUFzc2lzdFdpdGhNZWV0aW5nUXVldWVCb2R5VHlwZSA9IHJlcS5ib2R5O1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0cmFuc2FjdGlvbi5zZW5kKHtcbiAgICAgIHRvcGljOiBrYWZrYVNjaGVkdWxlQXNzaXN0VG9waWMsXG4gICAgICBtZXNzYWdlczogW3sgdmFsdWU6IEpTT04uc3RyaW5naWZ5KGV2ZW50SXRlbSkgfV0sXG4gICAgfSk7XG5cbiAgICBjb25zdCBhZG1pbiA9IGthZmthLmFkbWluKCk7XG5cbiAgICBhd2FpdCBhZG1pbi5jb25uZWN0KCk7XG4gICAgY29uc3QgcGFydGl0aW9ucyA9IGF3YWl0IGFkbWluLmZldGNoT2Zmc2V0cyh7XG4gICAgICBncm91cElkOiBrYWZrYVNjaGVkdWxlQXNzaXN0R3JvdXBJZCxcbiAgICAgIHRvcGljczogW2thZmthU2NoZWR1bGVBc3Npc3RUb3BpY10sXG4gICAgfSk7XG4gICAgY29uc29sZS5sb2cocGFydGl0aW9ucyk7XG4gICAgYXdhaXQgYWRtaW4uZGlzY29ubmVjdCgpO1xuXG4gICAgYXdhaXQgdHJhbnNhY3Rpb24uc2VuZE9mZnNldHMoe1xuICAgICAgY29uc3VtZXJHcm91cElkOiBrYWZrYVNjaGVkdWxlQXNzaXN0R3JvdXBJZCxcbiAgICAgIHRvcGljczogW1xuICAgICAgICB7XG4gICAgICAgICAgdG9waWM6IGthZmthU2NoZWR1bGVBc3Npc3RUb3BpYyxcbiAgICAgICAgICBwYXJ0aXRpb25zOiBwYXJ0aXRpb25zPy5bMF0/LnBhcnRpdGlvbnMsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAgYXdhaXQgdHJhbnNhY3Rpb24uY29tbWl0KCk7XG5cbiAgICBjb25zb2xlLmxvZyhcbiAgICAgIHJlc3BvbnNlLFxuICAgICAgJyByZXNwb25zZSBzdWNjZXNzZnVsbHkgYWRkZWQgdG8gcXVldWUgaW5zaWRlIGZlYXR1cmVzLXdvcmtlci1xdWV1ZS1hZG1pbidcbiAgICApO1xuXG4gICAgcmVzLnN0YXR1cygyMDIpLnNlbmQoJ3N1Y2Nlc2Z1bGx5IGNyZWF0ZWQgZGF5IHNjaGVkdWxlJyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlLCAnIHVuYWJsZSB0byBwcm9jZXNzIG1lc3NhZ2UnKTtcblxuICAgIGF3YWl0IHRyYW5zYWN0aW9uLmFib3J0KCk7XG4gICAgcmVzLnN0YXR1cyg0MDApLmpzb24oZSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHB1Ymxpc2hlcjtcbiJdfQ==