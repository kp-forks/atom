import { Kafka, logLevel } from 'kafkajs';
import { kafkaScheduleAssistGroupId, kafkaScheduleAssistTopic, } from '../_libs/constants';
const kafka = new Kafka({
    logLevel: logLevel.DEBUG,
    brokers: [`kafka1:29092`],
    clientId: 'atomic',
    // ssl: true,
    sasl: {
        mechanism: 'plain', // scram-sha-256 or scram-sha-512
        username: process.env.KAFKA_USERNAME,
        password: process.env.KAFKA_PASSWORD,
    },
});
const publisher = async (req, res) => {
    const producer = kafka.producer({ maxInFlightRequests: 1, idempotent: true });
    await producer.connect();
    const transaction = await producer.transaction();
    try {
        const eventItem = req.body;
        const response = await transaction.send({
            topic: kafkaScheduleAssistTopic,
            messages: [{ value: JSON.stringify(eventItem) }],
        });
        const admin = kafka.admin();
        await admin.connect();
        const partitions = await admin.fetchOffsets({
            groupId: kafkaScheduleAssistGroupId,
            topics: [kafkaScheduleAssistTopic],
        });
        console.log(partitions);
        await admin.disconnect();
        await transaction.sendOffsets({
            consumerGroupId: kafkaScheduleAssistGroupId,
            topics: [
                {
                    topic: kafkaScheduleAssistTopic,
                    partitions: partitions?.[0]?.partitions,
                },
            ],
        });
        await transaction.commit();
        console.log(response, ' response successfully added to queue inside features-worker-queue-admin');
        res.status(202).send('succesfully created day schedule');
    }
    catch (e) {
        console.log(e, ' unable to process message');
        await transaction.abort();
        res.status(400).json(e);
    }
};
export default publisher;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGUtbWVldGluZy10by1xdWV1ZS1hdXRoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2NoZWR1bGUtbWVldGluZy10by1xdWV1ZS1hdXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRzFDLE9BQU8sRUFDTCwwQkFBMEIsRUFDMUIsd0JBQXdCLEdBQ3pCLE1BQU0sb0JBQW9CLENBQUM7QUFFNUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUM7SUFDdEIsUUFBUSxFQUFFLFFBQVEsQ0FBQyxLQUFLO0lBQ3hCLE9BQU8sRUFBRSxDQUFDLGNBQWMsQ0FBQztJQUN6QixRQUFRLEVBQUUsUUFBUTtJQUNsQixhQUFhO0lBQ2IsSUFBSSxFQUFFO1FBQ0osU0FBUyxFQUFFLE9BQU8sRUFBRSxpQ0FBaUM7UUFDckQsUUFBUSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYztRQUNwQyxRQUFRLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjO0tBQ3JDO0NBQ0YsQ0FBQyxDQUFDO0FBRUgsTUFBTSxTQUFTLEdBQUcsS0FBSyxFQUFFLEdBQVksRUFBRSxHQUFhLEVBQUUsRUFBRTtJQUN0RCxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzlFLE1BQU0sUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBRXpCLE1BQU0sV0FBVyxHQUFHLE1BQU0sUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2pELElBQUksQ0FBQztRQUNILE1BQU0sU0FBUyxHQUEyQyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBRW5FLE1BQU0sUUFBUSxHQUFHLE1BQU0sV0FBVyxDQUFDLElBQUksQ0FBQztZQUN0QyxLQUFLLEVBQUUsd0JBQXdCO1lBQy9CLFFBQVEsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztTQUNqRCxDQUFDLENBQUM7UUFFSCxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFNUIsTUFBTSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDdEIsTUFBTSxVQUFVLEdBQUcsTUFBTSxLQUFLLENBQUMsWUFBWSxDQUFDO1lBQzFDLE9BQU8sRUFBRSwwQkFBMEI7WUFDbkMsTUFBTSxFQUFFLENBQUMsd0JBQXdCLENBQUM7U0FDbkMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN4QixNQUFNLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUV6QixNQUFNLFdBQVcsQ0FBQyxXQUFXLENBQUM7WUFDNUIsZUFBZSxFQUFFLDBCQUEwQjtZQUMzQyxNQUFNLEVBQUU7Z0JBQ047b0JBQ0UsS0FBSyxFQUFFLHdCQUF3QjtvQkFDL0IsVUFBVSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLFVBQVU7aUJBQ3hDO2FBQ0Y7U0FDRixDQUFDLENBQUM7UUFFSCxNQUFNLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUUzQixPQUFPLENBQUMsR0FBRyxDQUNULFFBQVEsRUFDUiwwRUFBMEUsQ0FDM0UsQ0FBQztRQUVGLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSw0QkFBNEIsQ0FBQyxDQUFDO1FBRTdDLE1BQU0sV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzFCLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLENBQUM7QUFDSCxDQUFDLENBQUM7QUFFRixlQUFlLFNBQVMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBLYWZrYSwgbG9nTGV2ZWwgfSBmcm9tICdrYWZrYWpzJztcbmltcG9ydCBpcCBmcm9tICdpcCc7XG5pbXBvcnQgeyBTY2hlZHVsZUFzc2lzdFdpdGhNZWV0aW5nUXVldWVCb2R5VHlwZSB9IGZyb20gJ0BzY2hlZHVsZV9hc3Npc3QvX2xpYnMvdHlwZXMvc2NoZWR1bGVNZWV0aW5nV29ya2VyL3R5cGVzJztcbmltcG9ydCB7XG4gIGthZmthU2NoZWR1bGVBc3Npc3RHcm91cElkLFxuICBrYWZrYVNjaGVkdWxlQXNzaXN0VG9waWMsXG59IGZyb20gJy4uL19saWJzL2NvbnN0YW50cyc7XG5cbmNvbnN0IGthZmthID0gbmV3IEthZmthKHtcbiAgbG9nTGV2ZWw6IGxvZ0xldmVsLkRFQlVHLFxuICBicm9rZXJzOiBbYGthZmthMToyOTA5MmBdLFxuICBjbGllbnRJZDogJ2F0b21pYycsXG4gIC8vIHNzbDogdHJ1ZSxcbiAgc2FzbDoge1xuICAgIG1lY2hhbmlzbTogJ3BsYWluJywgLy8gc2NyYW0tc2hhLTI1NiBvciBzY3JhbS1zaGEtNTEyXG4gICAgdXNlcm5hbWU6IHByb2Nlc3MuZW52LktBRktBX1VTRVJOQU1FLFxuICAgIHBhc3N3b3JkOiBwcm9jZXNzLmVudi5LQUZLQV9QQVNTV09SRCxcbiAgfSxcbn0pO1xuXG5jb25zdCBwdWJsaXNoZXIgPSBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XG4gIGNvbnN0IHByb2R1Y2VyID0ga2Fma2EucHJvZHVjZXIoeyBtYXhJbkZsaWdodFJlcXVlc3RzOiAxLCBpZGVtcG90ZW50OiB0cnVlIH0pO1xuICBhd2FpdCBwcm9kdWNlci5jb25uZWN0KCk7XG5cbiAgY29uc3QgdHJhbnNhY3Rpb24gPSBhd2FpdCBwcm9kdWNlci50cmFuc2FjdGlvbigpO1xuICB0cnkge1xuICAgIGNvbnN0IGV2ZW50SXRlbTogU2NoZWR1bGVBc3Npc3RXaXRoTWVldGluZ1F1ZXVlQm9keVR5cGUgPSByZXEuYm9keTtcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdHJhbnNhY3Rpb24uc2VuZCh7XG4gICAgICB0b3BpYzoga2Fma2FTY2hlZHVsZUFzc2lzdFRvcGljLFxuICAgICAgbWVzc2FnZXM6IFt7IHZhbHVlOiBKU09OLnN0cmluZ2lmeShldmVudEl0ZW0pIH1dLFxuICAgIH0pO1xuXG4gICAgY29uc3QgYWRtaW4gPSBrYWZrYS5hZG1pbigpO1xuXG4gICAgYXdhaXQgYWRtaW4uY29ubmVjdCgpO1xuICAgIGNvbnN0IHBhcnRpdGlvbnMgPSBhd2FpdCBhZG1pbi5mZXRjaE9mZnNldHMoe1xuICAgICAgZ3JvdXBJZDoga2Fma2FTY2hlZHVsZUFzc2lzdEdyb3VwSWQsXG4gICAgICB0b3BpY3M6IFtrYWZrYVNjaGVkdWxlQXNzaXN0VG9waWNdLFxuICAgIH0pO1xuICAgIGNvbnNvbGUubG9nKHBhcnRpdGlvbnMpO1xuICAgIGF3YWl0IGFkbWluLmRpc2Nvbm5lY3QoKTtcblxuICAgIGF3YWl0IHRyYW5zYWN0aW9uLnNlbmRPZmZzZXRzKHtcbiAgICAgIGNvbnN1bWVyR3JvdXBJZDoga2Fma2FTY2hlZHVsZUFzc2lzdEdyb3VwSWQsXG4gICAgICB0b3BpY3M6IFtcbiAgICAgICAge1xuICAgICAgICAgIHRvcGljOiBrYWZrYVNjaGVkdWxlQXNzaXN0VG9waWMsXG4gICAgICAgICAgcGFydGl0aW9uczogcGFydGl0aW9ucz8uWzBdPy5wYXJ0aXRpb25zLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIGF3YWl0IHRyYW5zYWN0aW9uLmNvbW1pdCgpO1xuXG4gICAgY29uc29sZS5sb2coXG4gICAgICByZXNwb25zZSxcbiAgICAgICcgcmVzcG9uc2Ugc3VjY2Vzc2Z1bGx5IGFkZGVkIHRvIHF1ZXVlIGluc2lkZSBmZWF0dXJlcy13b3JrZXItcXVldWUtYWRtaW4nXG4gICAgKTtcblxuICAgIHJlcy5zdGF0dXMoMjAyKS5zZW5kKCdzdWNjZXNmdWxseSBjcmVhdGVkIGRheSBzY2hlZHVsZScpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coZSwgJyB1bmFibGUgdG8gcHJvY2VzcyBtZXNzYWdlJyk7XG5cbiAgICBhd2FpdCB0cmFuc2FjdGlvbi5hYm9ydCgpO1xuICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKGUpO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwdWJsaXNoZXI7XG4iXX0=