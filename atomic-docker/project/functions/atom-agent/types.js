// Main types for Atom agent
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"types.js","sourceRoot":"","sources":["types.ts"],"names":[],"mappings":"AAAA,4BAA4B","sourcesContent":["// Main types for Atom agent\n\nexport interface AtomMessage {\n  id: string;\n  text: string;\n  // Potentially add a timestamp, sender, etc.\n}\n\n// --- Generic OAuth2 Token Type ---\n// This type is compatible with googleapis and can be used for other OAuth2 providers.\nexport interface OAuth2Token {\n  access_token: string;\n  refresh_token?: string | null; // Refresh tokens are not always present\n  scope?: string;\n  token_type?: string; // e.g., \"Bearer\"\n  expiry_date?: number | null; // Timestamp (milliseconds since epoch) when the access token expires\n  id_token?: string | null; // Present in OpenID Connect flows\n  // Allow any other properties that might come from the provider\n  [key: string]: any;\n}\n\n// --- Generic Skill Error and Response Types ---\nexport interface SkillError {\n  code: string; // e.g., 'AUTH_TOKEN_INVALID', 'API_ERROR', 'VALIDATION_ERROR', 'NOT_FOUND', 'CONFIG_ERROR'\n  message: string;\n  details?: any; // Additional details, like the original error object or validation specifics\n}\n\n// Generic response structure for Calendar skills.\nexport interface CalendarSkillResponse<T> {\n  ok: boolean;\n  data?: T;\n  error?: SkillError;\n}\n\n// Generic response structure for HubSpot skills.\nexport interface HubSpotSkillResponse<T> {\n  ok: boolean;\n  data?: T; // Data will be null if ok:true but contact not found for getHubSpotContactByEmail\n  error?: SkillError;\n}\n\n// Generic response structure for Slack skills.\nexport interface SlackSkillResponse<T> {\n  ok: boolean;\n  data?: T;\n  error?: SkillError;\n}\n\n// Generic response structure for Zoom skills.\nexport interface ZoomSkillResponse<T> {\n  ok: boolean;\n  data?: T;\n  error?: SkillError;\n}\n\n// Generic response structure for Microsoft Graph skills.\nexport interface GraphSkillResponse<T> {\n  ok: boolean;\n  data?: T;\n  error?: SkillError;\n}\n\n// Generic response structure for Stripe skills.\nexport interface StripeSkillResponse<T> {\n  ok: boolean;\n  data?: T;\n  error?: SkillError;\n}\n\n// Generic response structure for QuickBooks Online skills.\nexport interface QBSkillResponse<T> {\n  ok: boolean;\n  data?: T;\n  error?: SkillError;\n}\n\n// Generic response structure for Web Research skills.\nexport interface WebResearchSkillResponse<T> {\n  ok: boolean;\n  data?: T;\n  error?: SkillError;\n}\n\n// --- Python Service API Call Types ---\n\n/**\n * Represents the structure of an error payload from the Python Flask services.\n */\nexport interface PythonErrorPayload {\n  code: string; // e.g., \"PYTHON_ERROR_CONFIG_ERROR\", \"PYTHON_ERROR_NOTION_API_ERROR\"\n  message: string;\n  details?: any;\n}\n\n/**\n * Generic type for responses from the Python Flask services.\n * These services should return a JSON object with an \"ok\" boolean field,\n * and either \"data\" on success or \"error\" on failure.\n */\nexport interface PythonApiResponse<T> {\n  ok: boolean;\n  data?: T;\n  error?: PythonErrorPayload;\n}\n\n// Specific data types for Python API responses (matching Python's return dicts)\n\n// For initiateResearch (data field of PythonApiResponse)\nexport interface InitiateResearchData {\n  project_page_id: string;\n  task_page_ids: string[];\n}\n\n// For processResearchQueue (data field of PythonApiResponse)\nexport interface ProcessResearchQueueData {\n  message: string;\n  processed_tasks: number;\n  failed_tasks: number;\n  synthesis_outcome?: any;\n}\n\n// For createNotionNote and createAudioNoteFromUrl (data field of PythonApiResponse)\nexport interface CreateNoteData {\n  page_id: string;\n  url?: string;\n  summary?: string;\n  key_points?: string;\n}\n\n// For searchNotionNotes (data field of PythonApiResponse)\nexport interface NotionSearchResultData {\n  // This is an item in the array returned by searchNotionNotes\n  id: string;\n  title?: string; // Title property from Notion\n  url?: string;\n  content?: string; // Main content snippet or ContentText property\n  // other properties from Notion page summary (e.g., Source, Linked Task ID)\n  [key: string]: any;\n}\n\n// For searchSimilarNotionNotes skill (based on Python's NoteSearchResult)\nexport interface NotionSimilarNoteResult {\n  note_id: string;\n  score: number; // Similarity score (distance)\n  updated_at?: string; // ISO date string\n  user_id?: string;\n  // Potentially add title or snippet if fetched by Python service in future\n}\n\n// --- Calendar Types ---\nexport interface CalendarEvent {\n  id: string;\n  summary: string;\n  description?: string;\n  startTime: string; // ISO 8601 date-time string\n  endTime: string; // ISO 8601 date-time string\n  location?: string;\n  htmlLink?: string; // Link to the event in Google Calendar\n  conferenceData?: ConferenceData; // Added for Google Meet details\n  // Potential future additions: attendees, recurrence rules etc.\n}\n\n// --- Google Meet / Calendar Conference Types ---\nexport interface ConferenceSolution {\n  key?: { type?: string; [key: string]: any }; // e.g., { type: \"hangoutsMeet\" }\n  name?: string; // e.g., \"Google Meet\"\n  iconUri?: string;\n  [key: string]: any;\n}\n\nexport interface ConferenceEntryPoint {\n  entryPointType?: 'video' | 'phone' | 'sip' | 'more';\n  uri?: string; // e.g., \"https://meet.google.com/abc-def-ghi\" or \"tel:+1234567890,,,12345#\"\n  label?: string;\n  pin?: string; // PIN for phone entry point\n  accessCode?: string;\n  meetingCode?: string; // e.g., \"abc-def-ghi\"\n  passcode?: string;\n  password?: string;\n  [key: string]: any;\n}\n\nexport interface ConferenceData {\n  createRequest?: {\n    requestId?: string;\n    conferenceSolutionKey?: { type?: string };\n    status?: { statusCode?: 'success' | 'failure' | 'pending' };\n    [key: string]: any;\n  };\n  entryPoints?: ConferenceEntryPoint[];\n  conferenceSolution?: ConferenceSolution;\n  conferenceId?: string; // e.g., \"abc-def-ghi\"\n  signature?: string;\n  notes?: string;\n  [key: string]: any;\n}\n\nexport interface CreateEventResponse {\n  success: boolean;\n  eventId?: string;\n  message: string;\n  htmlLink?: string;\n}\n\nexport interface SkillResponse<T = any> {\n  // Default T to any if not specified\n  ok: boolean;\n  data?: T;\n  error?: SkillError;\n}\n\n// --- Email Types ---\nexport interface Email {\n  id: string;\n  sender: string;\n  recipient: string;\n  subject: string;\n  body: string;\n  timestamp: string;\n  read: boolean;\n}\n\nexport interface SendEmailResponse {\n  success: boolean;\n  emailId?: string;\n  message: string;\n}\n\nexport interface ReadEmailResponse {\n  success: boolean;\n  email?: Email;\n  message?: string;\n}\n\n// --- Web Research Types ---\nexport interface SearchResult {\n  title: string;\n  link: string;\n  snippet: string;\n}\n\n// --- Zapier Types ---\nexport interface ZapTriggerResponse {\n  success: boolean;\n  zapName?: string;\n  runId?: string;\n  message: string;\n}\n\n// --- HubSpot Types ---\nexport interface HubSpotContactProperties {\n  email: string;\n  firstname?: string;\n  lastname?: string;\n  company?: string;\n}\n\nexport interface HubSpotContact {\n  id: string;\n  properties: {\n    hs_object_id: string;\n    createdate: string;\n    lastmodifieddate: string;\n    email?: string;\n    firstname?: string;\n    lastname?: string;\n    company?: string;\n    [key: string]: any;\n  };\n  createdAt: string;\n  updatedAt: string;\n  archived: boolean;\n}\n\nexport interface CreateHubSpotContactResponse {\n  success: boolean;\n  contactId?: string;\n  message?: string;\n  hubSpotContact?: HubSpotContact;\n}\n\nexport interface HubSpotEmailEngagementProperties {\n  activityTimestamp: number;\n  subject: string;\n  htmlBody: string;\n  direction?: 'INCOMING' | 'OUTGOING';\n}\n\nexport interface HubSpotEngagementAssociation {\n  to: { id: string };\n  types: { associationCategory: string; associationTypeId: number }[];\n}\n\nexport interface HubSpotEngagement {\n  id: string;\n  properties: {\n    hs_object_id: string;\n    hs_engagement_type: 'EMAIL' | 'MEETING' | 'CALL' | 'NOTE' | 'TASK';\n    hs_timestamp?: string;\n    hs_body_preview?: string;\n    hs_email_subject?: string;\n    hs_email_direction?: 'INCOMING' | 'OUTGOING';\n    createdate?: string;\n    lastmodifieddate?: string;\n    [key: string]: any;\n  };\n  associations?: {\n    contacts?: { results: { id: string; type: string }[] };\n    companies?: { results: { id: string; type: string }[] };\n  };\n  createdAt: string;\n  updatedAt: string;\n  archived: boolean;\n}\n\nexport interface LogEngagementResponse {\n  success: boolean;\n  engagementId?: string;\n  message: string;\n  hubSpotEngagement?: HubSpotEngagement;\n}\n\nexport interface GetContactActivitiesResponse {\n  success: boolean;\n  activities: HubSpotEngagement[];\n  message?: string;\n  nextPage?: string;\n}\n\n// --- Slack Types ---\nexport interface SlackChannel {\n  id: string;\n  name?: string;\n  is_channel?: boolean;\n  is_group?: boolean;\n  is_im?: boolean;\n  is_mpim?: boolean;\n  is_private?: boolean;\n  is_archived?: boolean;\n  is_general?: boolean;\n  num_members?: number;\n  topic?: { value: string; creator: string; last_set: number };\n  purpose?: { value: string; creator: string; last_set: number };\n  created?: number;\n  creator?: string;\n}\n\nexport interface SlackMessageData {\n  ts?: string;\n  channel?: string;\n  message?: {\n    text?: string;\n    user?: string;\n    bot_id?: string;\n    ts?: string;\n    type?: string;\n    subtype?: string;\n    [key: string]: any;\n  };\n}\n\nexport interface SlackMessageResponse {\n  // Added this type\n  ok: boolean;\n  ts?: string;\n  channel?: string;\n  error?: string; // Matches WebClient's possible error response structure\n}\n\nexport interface ListSlackChannelsData {\n  channels?: SlackChannel[];\n  nextPageCursor?: string;\n}\n\n// --- Calendly Types ---\nexport interface CalendlyUser {\n  uri: string;\n  name: string;\n  slug: string;\n  email: string;\n  scheduling_url: string;\n  timezone: string;\n  avatar_url?: string | null;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface CalendlyEventType {\n  uri: string;\n  name: string;\n  active: boolean;\n  slug: string;\n  scheduling_url: string;\n  duration: number;\n  kind: 'solo' | 'group';\n  pooling_type?: 'round_robin' | 'collective' | null;\n  type: string;\n  color: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface CalendlyScheduledEventLocation {\n  type:\n    | 'physical'\n    | 'inbound_call'\n    | 'outbound_call'\n    | 'custom'\n    | 'google_conference'\n    | 'gotomeeting_conference'\n    | 'microsoft_teams_conference'\n    | 'zoom_conference'\n    | string;\n  location?: string | null;\n}\n\nexport interface CalendlyInvitee {\n  uri: string;\n  email: string;\n  name: string;\n  first_name?: string | null;\n  last_name?: string | null;\n  status: 'active' | 'canceled';\n  questions_and_answers: {\n    question: string;\n    answer: string;\n    position: number;\n  }[];\n  timezone: string;\n  event_uri: string;\n  cancel_url: string;\n  reschedule_url: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface CalendlyScheduledEvent {\n  uri: string;\n  name: string;\n  status: 'active' | 'canceled';\n  start_time: string;\n  end_time: string;\n  event_type: string;\n  location: CalendlyScheduledEventLocation;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface CalendlyPagination {\n  count: number;\n  next_page?: string | null;\n  previous_page?: string | null;\n  next_page_token?: string | null;\n  previous_page_token?: string | null;\n}\n\n// --- NLU Service Types ---\nexport interface NLUResponseData {\n  intent: string | null;\n  entities: Record<string, any>;\n  confidence?: number;\n  recognized_phrase?: string;\n  clarification_question?: string;\n  partially_understood_intent?: string;\n  sub_tasks?: Array<{\n    intent: string;\n    entities: Record<string, any>;\n    summary_for_sub_task?: string;\n  }>;\n  original_query?: string;\n}\n\nexport interface ProcessedNLUResponse extends NLUResponseData {\n  originalMessage: string; // Changed from originalMessage?: string to ensure it's always present\n  error?: string;\n  requires_clarification?: boolean;\n  clarification_question?: string;\n  conversation_context?: any; // Consider making this more specific if possible\n  sub_tasks?: Array<{\n    intent: string | null;\n    entities: Record<string, any>;\n    summary_for_sub_task?: string;\n  }>;\n}\n\n// --- QuickBooks Online (QBO) Types ---\nexport interface QuickBooksAuthTokens {\n  accessToken: string;\n  refreshToken: string;\n  realmId: string;\n  accessTokenExpiresAt: number; // Milliseconds since epoch\n  refreshTokenExpiresAt: number; // Milliseconds since epoch\n  tokenCreatedAt: number; // Milliseconds since epoch when these tokens (or the original ones they were refreshed from) were created\n}\n\nexport interface ListQBInvoicesData {\n  invoices: QuickBooksInvoice[];\n  queryResponse?: any; // Raw response from QB for pagination etc.\n}\n\nexport interface QuickBooksInvoice {\n  Id: string;\n  DocNumber?: string;\n  TxnDate?: string; // YYYY-MM-DD\n  DueDate?: string; // YYYY-MM-DD\n  CustomerRef?: { value: string; name?: string };\n  BillEmail?: { Address: string };\n  TotalAmt?: number;\n  Balance?: number;\n  CurrencyRef?: { value: string; name?: string }; // e.g., { value: \"USD\", name: \"United States Dollar\" }\n  Line?: any[]; // Can be complex, define further if needed\n  PrivateNote?: string;\n  CustomerMemo?: string;\n  EmailStatus?: 'EmailSent' | 'NotSet' | string; // Other statuses like 'Pending', 'Void' might exist\n  [key: string]: any; // Allow other properties\n}\n\n// --- Stripe Types ---\nexport interface ListStripePaymentsData {\n  payments: StripePaymentIntent[];\n  has_more: boolean;\n}\n\nexport interface StripeCharge {\n  id: string;\n  amount: number;\n  currency: string;\n  status: 'succeeded' | 'pending' | 'failed';\n  created: number; // Unix timestamp\n  receipt_url?: string | null;\n  description?: string | null;\n}\n\nexport interface StripePaymentIntent {\n  id: string;\n  amount: number;\n  currency: string;\n  status:\n    | 'succeeded'\n    | 'requires_payment_method'\n    | 'requires_confirmation'\n    | 'requires_action'\n    | 'processing'\n    | 'canceled';\n  created: number; // Unix timestamp\n  customer?: string | null; // Customer ID\n  description?: string | null;\n  latest_charge?: StripeCharge | string | null; // Can be an ID or an expanded object\n}\n\n// --- Slack Message Type for Agent ---\nexport interface SlackMessageFile {\n  id: string;\n  created: number;\n  timestamp: number;\n  name: string;\n  title: string;\n  mimetype: string;\n  filetype: string;\n  pretty_type: string;\n  user?: string; // User ID of uploader\n  editable?: boolean; // Optional as not all file objects might have it\n  size: number;\n  mode?: string; // Optional\n  is_external?: boolean; // Optional\n  external_type?: string; // Optional\n  is_public?: boolean; // Optional\n  public_url_shared?: boolean; // Optional\n  display_as_bot?: boolean; // Optional\n  username?: string; // Optional\n  url_private?: string;\n  url_private_download?: string;\n  permalink?: string;\n  permalink_public?: string;\n  // Potentially more fields like 'thumb_64', 'thumb_80', etc. for images\n}\n\nexport interface SlackMessageReaction {\n  name: string; // Emoji name, e.g., \"thumbsup\"\n  users: string[]; // Array of user IDs who reacted\n  count: number;\n}\n\nexport interface SlackMessage {\n  id: string; // Slack message 'ts' (timestamp) is used as the primary ID\n  threadId?: string; // 'thread_ts' if part of a thread\n  userId?: string; // User ID of the sender (e.g., \"U012ABCDEF\")\n  userName?: string; // User's display name or real name (needs resolution or comes from API)\n  botId?: string; // Bot ID if message is from a bot\n  channelId?: string; // Channel ID (e.g., \"C012AB3CD\")\n  channelName?: string; // Channel name (e.g., \"general\") (needs resolution or comes from API)\n  text?: string; // Message text content\n  blocks?: any[]; // Slack Block Kit structure, if present\n  files?: SlackMessageFile[]; // Array of attached files\n  reactions?: SlackMessageReaction[]; // Array of reactions\n  timestamp: string; // ISO 8601 string representation of the 'ts'\n  permalink?: string; // Permalink to the message\n  raw?: any; // Store the original raw Slack message object for extensibility\n}\n\n// --- Microsoft Graph / Teams Types ---\nexport interface ListMSTeamsMeetingsData {\n  // Renamed from ListMSGraphEventsData for clarity\n  events: MSGraphEvent[];\n  nextLink?: string;\n}\n\nexport interface MSGraphDateTimeTimeZone {\n  dateTime: string; // ISO 8601 format\n  timeZone: string; // e.g., \"Pacific Standard Time\"\n}\n\nexport interface MSGraphOnlineMeetingInfo {\n  joinUrl?: string | null;\n  conferenceId?: string | null;\n  tollNumber?: string | null;\n  [key: string]: any; // Allow other properties\n}\n\nexport interface MSGraphEvent {\n  id: string;\n  subject?: string | null;\n  bodyPreview?: string | null;\n  body?: { contentType?: 'html' | 'text'; content?: string | null } | null;\n  start?: MSGraphDateTimeTimeZone | null;\n  end?: MSGraphDateTimeTimeZone | null;\n  isOnlineMeeting?: boolean | null;\n  onlineMeetingProvider?:\n    | 'teamsForBusiness'\n    | 'skypeForBusiness'\n    | 'skypeForConsumer'\n    | string\n    | null;\n  onlineMeeting?: MSGraphOnlineMeetingInfo | null;\n  webLink?: string | null;\n  attendees?: {\n    emailAddress?: { address?: string | null; name?: string | null };\n    type?: 'required' | 'optional' | 'resource';\n    status?: { response?: string; time?: string };\n  }[];\n  location?: {\n    displayName?: string | null;\n    locationType?:\n      | 'default'\n      | 'conferenceRoom'\n      | 'homeAddress'\n      | 'businessAddress'\n      | string;\n    uniqueId?: string | null;\n    address?: any;\n    coordinates?: any;\n  } | null;\n  locations?: any[];\n  organizer?: {\n    emailAddress?: { name?: string | null; address?: string | null };\n  } | null;\n  [key: string]: any; // Allow other properties\n}\n\nexport interface MSGraphTokenResponse {\n  token_type: string;\n  expires_in: number; // Seconds\n  ext_expires_in?: number; // Seconds\n  access_token: string;\n}\n\n// --- Microsoft Teams Message Types for Agent ---\nexport interface MSTeamsMessageAttachment {\n  id: string;\n  name?: string | null;\n  contentType?: string | null;\n  contentUrl?: string | null; // Direct link to the content if available\n  size?: number | null;\n  // Add other relevant fields from Graph API's attachment resource type if needed\n}\n\nexport interface MSTeamsMessageMentionedUser {\n  id?: string | null; // User's AAD ID if available from mention object\n  displayName?: string | null;\n  userIdentityType?: string | null; // e.g., \"aadUser\"\n}\nexport interface MSTeamsMessageMention {\n  id: number; // The ID of the mention in the message.\n  mentionText?: string | null; // The display text of the mention.\n  mentioned?: {\n    // Details of the entity mentioned.\n    user?: MSTeamsMessageMentionedUser | null;\n    application?: any | null; // if an app is mentioned\n    conversation?: any | null; // if a channel/chat is mentioned\n    tag?: any | null; // if a tag is mentioned\n  } | null;\n}\n\nexport interface MSTeamsMessage {\n  id: string; // Message ID from Graph API\n  chatId?: string | null; // ID of the 1:1 or group chat (if applicable)\n  teamId?: string | null; // ID of the Team (if a channel message)\n  channelId?: string | null; // ID of the Channel (if a channel message)\n  replyToId?: string | null; // ID of the parent message if this is a reply\n  userId?: string | null; // Sender's AAD User ID\n  userName?: string | null; // Sender's display name\n  content: string; // Message body content (HTML or text)\n  contentType: 'html' | 'text';\n  createdDateTime: string; // ISO 8601 timestamp\n  lastModifiedDateTime?: string | null; // ISO 8601 timestamp\n  webUrl?: string | null; // Permalink to the message\n  attachments?: MSTeamsMessageAttachment[] | null;\n  mentions?: MSTeamsMessageMention[] | null;\n  raw?: any; // Store the original raw Graph API message object for extensibility\n}\n\n// --- Zoom Types ---\nexport interface ZoomTokenResponse {\n  access_token: string;\n  token_type: string; // Typically \"bearer\"\n  expires_in: number; // Typically 3600 seconds (1 hour)\n  scope: string; // e.g., \"meeting:read meeting:write user:read\"\n}\n\nexport interface ListZoomMeetingsData {\n  meetings: ZoomMeeting[];\n  page_count?: number;\n  page_number?: number;\n  page_size?: number;\n  total_records?: number;\n  next_page_token?: string;\n}\n\nexport interface ZoomMeeting {\n  uuid: string;\n  id: string; // Numeric meeting ID\n  host_id?: string;\n  topic: string;\n  type: number; // 1: Instant, 2: Scheduled, 3: Recurring no fixed time, 8: Recurring fixed time\n  start_time?: string; // ISO 8601 date-time string\n  duration?: number; // In minutes\n  timezone?: string;\n  agenda?: string;\n  created_at: string; // ISO 8601 date-time string\n  join_url: string;\n  [key: string]: any; // Allow other properties\n}\n\n// --- Notion Task Management Types ---\n\nexport type NotionTaskStatus =\n  | 'To Do'\n  | 'In Progress'\n  | 'Done'\n  | 'Blocked'\n  | 'Cancelled';\n\nexport type NotionTaskPriority = 'High' | 'Medium' | 'Low';\n\nexport interface NotionTask {\n  id: string; // Notion Page ID\n  description: string;\n  dueDate?: string | null; // ISO date string or null\n  status: NotionTaskStatus;\n  priority?: NotionTaskPriority | null;\n  listName?: string | null; // Corresponds to a custom \"List\" or \"Project\" property in Notion\n  createdDate: string; // ISO date string (from Notion's created_time)\n  url: string; // Notion page URL\n  notes?: string | null; // Additional text content or a summary from the page body\n  last_edited_time?: string; // ISO 8601 string, from Notion's last_edited_time\n}\n\nexport interface CreateNotionTaskParams {\n  description: string;\n  dueDate?: string | null;\n  status?: NotionTaskStatus;\n  priority?: NotionTaskPriority | null;\n  listName?: string | null;\n  notes?: string | null;\n  notionTasksDbId: string; // ID of the Notion database for tasks\n  parentId?: string | null;\n}\n\nexport interface NotionTaskResponse {\n  // Kept for potential direct Notion API calls, but Python responses are preferred\n  success: boolean;\n  message: string;\n  taskId?: string;\n  taskUrl?: string;\n  error?: string;\n}\n\nexport interface QueryNotionTasksParams {\n  status?: NotionTaskStatus | NotionTaskStatus[]; // Allow single or multiple statuses\n  dueDateBefore?: string | null; // ISO Date string\n  dueDateAfter?: string | null; // ISO Date string\n  dateQuery?: string | null; // For NLU like \"today\", \"next week\" to be parsed by backend\n  priority?: NotionTaskPriority | null;\n  listName?: string | null;\n  descriptionContains?: string | null;\n  notionTasksDbId: string; // ID of the Notion database for tasks\n  limit?: number;\n}\n\nexport interface TaskQueryResponse {\n  // This is returned by the queryNotionTasks skill\n  success: boolean;\n  tasks: NotionTask[];\n  message?: string;\n  error?: string; // Error message if success is false\n}\n\nexport interface UpdateNotionTaskParams {\n  taskId: string; // Notion Page ID of the task to update\n  description?: string;\n  dueDate?: string | null;\n  status?: NotionTaskStatus;\n  priority?: NotionTaskPriority | null;\n  listName?: string | null;\n  notes?: string | null;\n  // notionTasksDbId: string; // Usually not needed for page update by ID\n}\n\n// Specific data types for responses from Python backend for task operations\n// These align with the 'data' field within PythonApiResponse<T>\n\nexport interface CreateTaskData {\n  taskId: string; // Notion Page ID of the created task\n  taskUrl: string; // URL to the Notion task page\n  message?: string; // Optional success message from backend\n}\n\nexport interface UpdateTaskData {\n  taskId: string; // Notion Page ID of the updated task\n  updatedProperties: string[]; // List of properties that were actually changed\n  message?: string; // Optional success message from backend\n}\n// Add EmailActionType if not already defined\nexport type EmailActionType =\n  | 'FIND_SPECIFIC_INFO'\n  | 'GET_SENDER'\n  | 'GET_SUBJECT'\n  | 'GET_DATE'\n  | 'GET_FULL_CONTENT'\n  | 'SUMMARIZE_EMAIL';\n\n// --- Contact / Attendee Resolution Types ---\nexport interface ResolvedAttendee {\n  email: string; // Mandatory\n  name?: string;\n  userId?: string; // Atom user ID, if applicable\n  source:\n    | 'atom_user'\n    | 'google_contact'\n    | 'hubspot_contact'\n    | 'email_direct'\n    | 'unresolved';\n  status?: 'found' | 'not_found' | 'error_resolving';\n  errorMessage?: string;\n}\n\nexport interface ContactSkillResponse<T> {\n  ok: boolean;\n  data?: T;\n  error?: SkillError;\n}\n\n// --- User Availability Types (for OptaPlanner) ---\nexport interface UserWorkTime {\n  dayOfWeek:\n    | 'MONDAY'\n    | 'TUESDAY'\n    | 'WEDNESDAY'\n    | 'THURSDAY'\n    | 'FRIDAY'\n    | 'SATURDAY'\n    | 'SUNDAY';\n  startTime: string; // Format: HH:MM or HH:MM:SS\n  endTime: string; // Format: HH:MM or HH:MM:SS\n  // userId?: string; // Link to user, might be implicit if nested under UserAvailability\n}\n\nexport interface UserAvailability {\n  userId: string;\n  workTimes: UserWorkTime[];\n  calendarEvents: CalendarEvent[]; // Existing events in the queried window\n}\n\n// --- Smart Meeting Preparation Types ---\nexport interface NotionPageContext {\n  id: string;\n  title: string;\n  url?: string; // Notion page URL\n  briefSnippet?: string; // A short relevant snippet from the page content\n}\n\nexport interface EmailContext {\n  id: string; // Email message ID\n  subject: string;\n  sender?: string; // Sender's email or name\n  receivedDate?: string; // ISO 8601 string\n  url?: string; // URL to view the email if available (e.g., Gmail link)\n  briefSnippet?: string; // Short snippet from the email body\n}\n\nexport interface TaskContext {\n  id: string; // Notion Task Page ID\n  description: string;\n  dueDate?: string | null; // ISO date string or null\n  status?: NotionTaskStatus;\n  url?: string; // URL to the Notion task page\n}\n\nexport interface MeetingPreparationData {\n  targetMeeting: CalendarEvent; // The meeting being prepared for\n  relatedNotionPages?: NotionPageContext[];\n  relatedEmails?: EmailContext[];\n  relatedTasks?: TaskContext[];\n  keyPointsFromLastMeeting?: string; // Optional: summary from previous similar meeting\n  errorMessage?: string; // If preparation is partial or fails (e.g., \"Could not fetch Notion documents.\")\n}\n\n// Response for the PrepareForMeeting skill\nexport interface PrepareForMeetingResponse\n  extends SkillResponse<MeetingPreparationData> {}\n\n// NLU Entities expected for the PrepareForMeeting intent\nexport interface PrepareForMeetingEntities {\n  meeting_identifier?: string; // e.g., \"Project Alpha discussion\", \"next meeting\", \"call with John\"\n  meeting_date_time?: string; // e.g., \"tomorrow\", \"2024-07-15T14:00:00Z\", \"next Monday at 3pm\"\n  // Future: could include specific attendees to focus on, or types of info (e.g., \"only show tasks\")\n}\n\n// --- Automated Weekly Digest Types ---\nexport interface WeeklyDigestData {\n  periodStart: string; // ISO Date string\n  periodEnd: string; // ISO Date string\n  completedTasks: NotionTask[]; // Using existing NotionTask type\n  attendedMeetings: CalendarEvent[]; // Using existing CalendarEvent type\n  // For attendedMeetings, consider adding a briefOutcome?: string if V2 summarization is done\n  upcomingCriticalTasks: NotionTask[];\n  upcomingCriticalMeetings: CalendarEvent[];\n  errorMessage?: string;\n}\n\n// Response for the GenerateWeeklyDigest skill\nexport interface GenerateWeeklyDigestResponse\n  extends SkillResponse<{\n    digest: WeeklyDigestData;\n    formattedSummary: string; // The user-facing text summary\n  }> {}\n\n// NLU Entities expected for the GenerateWeeklyDigest intent\nexport interface GenerateWeeklyDigestEntities {\n  time_period?: 'this week' | 'last week' | string; // Allow specific date ranges in future if NLU supports\n}\n\n// --- Intelligent Follow-up Suggester Types ---\nexport type PotentialFollowUpType =\n  | 'action_item'\n  | 'decision'\n  | 'question'\n  | 'information';\n\nexport interface PotentialFollowUp {\n  type: PotentialFollowUpType;\n  description: string; // The text of the action, decision, or question\n  suggestedAssignee?: string; // If an action item and an assignee is suggested by LLM\n  sourceContext?: string; // e.g., \"From meeting notes: Project Phoenix Q1 Review\"\n  existingTaskFound?: boolean;\n  existingTaskId?: string;\n  existingTaskUrl?: string;\n  // priority?: \"High\" | \"Medium\" | \"Low\"; // Optional: Could be set by LLM or user later\n}\n\n// Data structure returned by the LLM analysis (conceptual)\nexport interface ExtractedFollowUpItems {\n  action_items: Array<{ description: string; assignee?: string }>;\n  decisions: Array<{ description: string }>;\n  questions: Array<{ description: string }>;\n  // general_info_points?: Array<{ description: string }>; // Optional for other key info\n}\n\nexport interface FollowUpSuggestionData {\n  contextName: string; // e.g., \"Project Phoenix Meeting - July 26\" or \"Client Onboarding Project\"\n  sourceDocumentSummary?: string; // Brief summary or link to the source document analyzed\n  suggestions: PotentialFollowUp[];\n  errorMessage?: string;\n}\n\n// Response for the SuggestFollowUps skill\nexport interface SuggestFollowUpsResponse\n  extends SkillResponse<FollowUpSuggestionData> {}\n\n// NLU Entities expected for the SuggestFollowUps intent\nexport interface SuggestFollowUpsEntities {\n  context_identifier: string; // e.g., \"Project Phoenix meeting\", \"Client Onboarding project\", \"my last meeting\"\n  context_type?: 'meeting' | 'project' | string; // Helps skill narrow down search for context\n}\n\n// --- Meeting Preparation Use Case Types ---\n\n/**\n * Represents the parsed entities from the NLU service for a RequestMeetingPreparation intent.\n * This should align with the 'entities' structure defined for intent #35 in nluService.ts.\n */\nexport interface MeetingPrepNluEntities {\n  meeting_reference: string;\n  information_requests: InformationRequest[];\n  overall_lookback_period?: string;\n}\n\n/**\n * Defines a single information request within a meeting preparation task.\n */\nexport interface InformationRequest {\n  source: 'gmail' | 'slack' | 'notion' | 'calendar_events';\n  search_parameters:\n    | GmailSearchParameters\n    | SlackSearchParameters\n    | NotionSearchParameters\n    | CalendarEventsSearchParameters;\n}\n\n// Parameter types for each source, aligning with NLU output for RequestMeetingPreparation\nexport interface GmailSearchParameters {\n  from_sender?: string;\n  subject_keywords?: string;\n  body_keywords?: string;\n  date_query?: string;\n  has_attachment_only?: boolean;\n}\n\nexport interface SlackSearchParameters {\n  channel_name?: string;\n  from_user?: string;\n  text_keywords?: string;\n  date_query?: string;\n  mentions_user?: string;\n}\n\nexport interface NotionSearchParameters {\n  database_name_or_id?: string;\n  page_title_keywords?: string;\n  content_keywords?: string;\n  filter_by_meeting_reference_context?: boolean;\n}\n\nexport interface CalendarEventsSearchParameters {\n  related_to_attendees_of_meeting_reference?: boolean;\n  keywords_in_summary_or_description?: string;\n  date_query_lookback?: string;\n  type_filter?: 'past_events' | 'future_events' | 'all_related_events';\n}\n\n/**\n * Represents the aggregated results from all information requests for meeting preparation.\n * This is what the meeting preparation skill would aim to construct.\n */\nexport interface AggregatedPrepResults {\n  meeting_reference_identified: string; // The meeting_reference string from NLU\n  identified_calendar_event?: CalendarEventSummary; // Details if the meeting_reference was resolved to a specific calendar event\n  results_by_source: PrepResultSourceEntry[];\n  overall_summary_notes?: string; // Optional AI-generated summary of all findings\n  errors_encountered?: PrepErrorMessage[]; // List of errors encountered during the process\n}\n\nexport interface PrepResultSourceEntry {\n  source: 'gmail' | 'slack' | 'notion' | 'calendar_events';\n  search_parameters_used:\n    | GmailSearchParameters\n    | SlackSearchParameters\n    | NotionSearchParameters\n    | CalendarEventsSearchParameters;\n  // Results can be an array of specific types based on the source.\n  // Using more specific types than 'any[]' for better type safety.\n  results:\n    | GmailMessageSnippet[]\n    | SlackMessageSnippet[]\n    | NotionPageSummary[]\n    | CalendarEventSummary[];\n  error_message?: string; // If an error occurred fetching from this specific source\n  count: number; // Number of items found\n  search_query_executed?: string; // Optional: the actual query string run against the source API\n}\n\nexport interface PrepErrorMessage {\n  source_attempted?:\n    | 'gmail'\n    | 'slack'\n    | 'notion'\n    | 'calendar_events'\n    | 'overall_process'\n    | 'nlu_parsing'\n    | 'calendar_lookup';\n  message: string;\n  details?: string; // Stringified version of any underlying error object or additional context\n}\n\n// Specific result item types (re-declaring here for clarity if not already globally available or slightly different context)\n// If these are identical to global ones, they can be imported. Assuming for now they might have slight variations or are good to have co-located.\n\nexport interface GmailMessageSnippet {\n  // Consistent with previous definition if it exists\n  id: string;\n  threadId?: string;\n  subject?: string;\n  from?: string;\n  date?: string; // ISO string\n  snippet?: string;\n  link?: string;\n}\n\nexport interface SlackMessageSnippet {\n  // Consistent with previous definition\n  ts: string; // Using 'ts' as the primary ID for Slack messages\n  channel?: { id: string; name?: string };\n  user?: { id: string; name?: string };\n  text?: string;\n  permalink?: string;\n  files?: any[];\n  reactions?: any[];\n  thread_ts?: string; // To know if it's part of a thread\n}\n\nexport interface NotionPageSummary {\n  // Consistent with previous definition\n  id: string;\n  title?: string;\n  url?: string;\n  last_edited_time?: string;\n  created_time?: string;\n  preview_text?: string;\n  icon?: {\n    type: string;\n    emoji?: string;\n    external?: { url: string };\n    file?: { url: string; expiry_time: string };\n  } | null;\n}\n\nexport interface CalendarEventSummary {\n  // Consistent with previous definition\n  id: string;\n  summary?: string;\n  description?: string;\n  start?: string; // ISO string\n  end?: string; // ISO string\n  htmlLink?: string;\n  attendees?: Array<{\n    email?: string;\n    displayName?: string;\n    responseStatus?: string;\n  }>;\n  organizer?: { email?: string; displayName?: string };\n}\n\n// --- Automated Post-Meeting Workflow Use Case Types ---\n\n/**\n * Represents the parsed entities from the NLU service for a ProcessMeetingOutcomes intent.\n * Aligns with intent #36 in nluService.ts.\n */\nexport interface ProcessMeetingOutcomesNluEntities {\n  meeting_reference: string;\n  source_document_id?: string;\n  outcome_source_type?:\n    | 'transcript'\n    | 'meeting_notes'\n    | 'audio_recording_summary';\n  requested_actions: Array<\n    | 'SUMMARIZE_KEY_DECISIONS'\n    | 'EXTRACT_ACTION_ITEMS'\n    | 'DRAFT_FOLLOW_UP_EMAIL'\n    | 'CREATE_TASKS_IN_NOTION'\n  >;\n  email_draft_details?: {\n    recipients: string[] | string; // e.g., [\"attendees\", \"manager@example.com\"] or \"all meeting attendees\"\n    additional_instructions?: string;\n  };\n  task_creation_details?: {\n    notion_database_id?: string;\n    default_assignee?: string; // e.g., \"me\" or a user ID/email\n  };\n}\n\n/**\n * Represents structured information extracted from meeting outcomes.\n * This would be an interim result after an LLM processes the source document.\n */\nexport interface ExtractedMeetingInsights {\n  meeting_title_or_reference: string; // From the source or NLU\n  source_document_id_processed?: string;\n  key_decisions?: string[];\n  action_items?: Array<{\n    description: string;\n    suggested_assignee?: string; // Name or email\n    suggested_due_date?: string; // Natural language or ISO\n  }>;\n  overall_summary?: string; // A general summary if not just decisions\n}\n\n/**\n * Represents the results of performing the requested post-meeting actions.\n */\nexport interface PostMeetingActionsResults {\n  processed_meeting_reference: string;\n  summary_of_decisions?: string; // Result of SUMMARIZE_KEY_DECISIONS\n  extracted_action_items_summary?: string; // Narrative summary of extracted action items\n  drafted_email_content?: {\n    to?: string[]; // Resolved recipients\n    cc?: string[];\n    subject?: string;\n    body?: string;\n  };\n  created_notion_tasks?: Array<{\n    taskId: string; // Notion page ID\n    taskUrl: string;\n    description: string;\n    assignee?: string;\n    dueDate?: string;\n  }>;\n  errors_encountered?: Array<{\n    action_attempted:\n      | 'SUMMARIZE_KEY_DECISIONS'\n      | 'EXTRACT_ACTION_ITEMS'\n      | 'DRAFT_FOLLOW_UP_EMAIL'\n      | 'CREATE_TASKS_IN_NOTION'\n      | 'SOURCE_PROCESSING';\n    message: string;\n    details?: string;\n  }>;\n}\n\n// Potential structure for the skill's output\nexport interface ProcessMeetingOutcomesSkillResponse\n  extends SkillResponse<PostMeetingActionsResults> {}\n\n// --- Unified Priority Dashboard (Daily Briefing) Use Case Types ---\n\n/**\n * Represents the parsed entities from the NLU service for a GetDailyPriorityBriefing intent.\n * Aligns with intent #37 in nluService.ts.\n */\nexport interface GetDailyPriorityBriefingNluEntities {\n  date_context?: string; // e.g., \"today\", \"tomorrow\"\n  focus_areas?: Array<\n    | 'tasks'\n    | 'meetings'\n    | 'urgent_emails'\n    | 'urgent_slack_messages'\n    | 'urgent_teams_messages'\n  >;\n  project_filter?: string;\n  urgency_level?: 'high' | 'critical' | 'all';\n}\n\n/**\n * Represents a summarized item for the daily briefing.\n * Generic enough to hold different types of priority items.\n */\nexport interface BriefingItem {\n  type: 'task' | 'meeting' | 'email' | 'slack_message' | 'teams_message';\n  title: string; // e.g., Task description, Meeting summary, Email subject\n  details?: string; // e.g., Due date, Meeting time, Sender info\n  urgency_score?: number; // Calculated score to help with sorting (0-100)\n  source_id?: string; // Original ID from the source system\n  link?: string; // Direct link to the item if available\n  // Storing the original item allows for richer display or actions later\n  raw_item?:\n    | NotionTask\n    | CalendarEventSummary\n    | GmailMessageSnippet\n    | SlackMessageSnippet\n    | MSTeamsMessage;\n}\n\n/**\n * Represents the consolidated data for the daily priority briefing.\n * This is what the skill would construct.\n */\nexport interface DailyBriefingData {\n  briefing_date: string; // ISO date for which the briefing is generated\n  user_id: string;\n  priority_items: BriefingItem[];\n  overall_summary_message?: string; // e.g., \"You have 3 high-priority tasks and 2 important meetings today.\"\n  errors_encountered?: Array<{\n    source_area:\n      | 'tasks'\n      | 'meetings'\n      | 'emails'\n      | 'slack'\n      | 'teams'\n      | 'overall';\n    message: string;\n    details?: string;\n  }>;\n}\n\n// Potential structure for the skill's output\nexport interface GetDailyPriorityBriefingSkillResponse\n  extends SkillResponse<DailyBriefingData> {}\n\n// --- Smart Task Creation from Chat Message Use Case Types ---\n\n/**\n * Represents the parsed entities from the NLU service for a CreateTaskFromChatMessage intent.\n * Aligns with intent #38 in nluService.ts.\n */\nexport interface CreateTaskFromChatMessageNluEntities {\n  chat_message_reference: string;\n  source_platform: 'slack' | 'msteams' | 'gmail_thread_item'; // Reflects enum in NLU\n  task_description_override?: string;\n  target_task_list_or_project?: string;\n  assignee?: string;\n  due_date?: string;\n  priority?: 'high' | 'medium' | 'low';\n}\n\n/**\n * Represents the fetched content of a chat message from Slack, Teams, or a Gmail item.\n * This structure would be populated by a skill that retrieves the message.\n */\nexport interface ChatMessageContent {\n  platform: 'slack' | 'msteams' | 'gmail_thread_item';\n  message_id?: string; // Original message ID from the platform (e.g., Slack ts, Teams message ID, Gmail message ID)\n  channel_id?: string; // Optional, e.g., Slack channel ID, Teams channel/chat ID\n  thread_id?: string; // Optional, if it's part of a thread\n  sender_id?: string;\n  sender_name?: string;\n  text_content: string; // The main textual content of the message\n  html_content?: string; // Optional HTML version\n  message_url?: string; // Permalink to the message/item\n  timestamp: string; // ISO 8601 timestamp of when the message was sent\n  attachments?: Array<{ name?: string; url?: string; type?: string }>; // Simplified attachment info\n}\n\n/**\n * Represents the result of attempting to create a task.\n * This would be part of the skill's output.\n */\nexport interface TaskCreationResultFromMessage {\n  success: boolean;\n  message: string; // e.g., \"Task created successfully\" or error message\n  taskId?: string; // Notion Page ID or ID from other task system\n  taskUrl?: string; // Link to the created task\n  taskTitle?: string; // The actual title/description used for the task\n  original_message_link_included?: boolean;\n}\n\n// Potential structure for the skill's output for this use case\nexport interface CreateTaskFromChatMessageSkillResponse\n  extends SkillResponse<TaskCreationResultFromMessage> {}\n\n// --- Complex Task Orchestration Types (e.g., for Use Case 5: Voice-Activated Info & Action Relay) ---\n\n/**\n * Represents the NLU structure for a sub-task within a ComplexTask.\n * This is already part of ProcessedNLUResponse's sub_tasks definition,\n * but defined here for clarity in the context of execution results.\n */\nexport interface ComplexTaskSubTaskNlu {\n  intent: string | null;\n  entities: Record<string, any>;\n  summary_for_sub_task?: string;\n}\n\n/**\n * Represents the result of executing a single sub-task identified within a ComplexTask.\n */\nexport interface ExecutedSubTaskResult {\n  sub_task_nlu: ComplexTaskSubTaskNlu;\n  execution_order: number;\n  status: 'success' | 'failure' | 'skipped' | 'partial_success';\n  message_from_handler?: string; // User-facing message from the specific handler for this sub-task\n  error_details?: string;\n  returned_data?: any; // Data returned by the sub-task's handler (e.g., an ID, a list of items)\n}\n\n/**\n * Represents the overall report of an orchestrated ComplexTask execution.\n * This would be constructed by the logic handling the main ComplexTask intent.\n */\nexport interface OrchestratedComplexTaskReport {\n  original_user_query: string;\n  overall_status:\n    | 'completed_fully'\n    | 'completed_partially'\n    | 'failed_entirely'\n    | 'clarification_needed_mid_sequence';\n  final_summary_message_for_user?: string; // Overall summary message for the user\n  sub_task_results: ExecutedSubTaskResult[];\n  // Optional context passed between tasks, managed by the orchestrator.\n  // Example: output of sub-task 1 (e.g., an email ID) could be stored here to be used as input for sub-task 2.\n  inter_task_context?: Record<string, any>;\n}\n\n// --- Agent Skill Context and Client Command Types (centralized from handler.ts) ---\n\n/**\n * Defines the structure of commands sent from the agent to the client (e.g., via WebSocket)\n * This should align with the command structure expected by the frontend client.\n */\nexport interface AgentClientCommand {\n  command_id: string; // Unique ID for tracking the command\n  action:\n    | 'START_RECORDING_SESSION'\n    | 'STOP_RECORDING_SESSION'\n    | 'CANCEL_RECORDING_SESSION'; // Specific actions client can perform\n  payload?: {\n    suggestedTitle?: string;\n    linkedEventId?: string;\n    // Other relevant parameters for the client action, e.g. recording quality hints\n  };\n}\n\n/**\n * Defines the context object that will be passed to agent skills.\n * It includes common utilities or functions that skills might need.\n */\nexport interface AgentSkillContext {\n  userId: string;\n  // Function to send a command to the connected client.\n  // The actual implementation of this function is expected to be injected by the calling environment (e.g., WebSocket handler in server.ts).\n  sendCommandToClient: (\n    userId: string,\n    command: AgentClientCommand\n  ) => Promise<boolean>;\n  // Potentially add other context items:\n  // - Access to LTM/STM (though memoryManager functions are currently imported directly)\n  // - User preferences relevant to skills\n  // - API clients if they are not globally available or need user-specific configuration\n}\n\n// --- LanceDB Semantic Search Types ---\nexport type SearchResultSourceType =\n  | 'document_chunk'\n  | 'email_snippet'\n  | 'notion_summary';\n\nexport interface UniversalSearchResultItem {\n  // Common fields\n  id: string;\n  user_id: string;\n  source_type: SearchResultSourceType;\n  title: string;\n  snippet: string;\n  vector_score: number;\n  original_url_or_link?: string;\n  created_at?: string; // ISO 8601\n  last_modified_at?: string; // ISO 8601\n  ingested_at?: string; // ISO 8601\n\n  // For \"document_chunk\"\n  document_id?: string;\n  parent_document_title?: string;\n  chunk_sequence?: number;\n  document_source_uri?: string;\n  document_doc_type?: string;\n\n  // For \"email_snippet\"\n  email_thread_id?: string;\n  email_from_sender?: string;\n  email_date?: string; // ISO 8601\n\n  // For \"notion_summary\"\n  notion_icon_json?: string;\n\n  metadata_json?: string;\n}\n\n// --- Hybrid Search Types ---\nexport type HybridMatchSource = 'semantic' | 'keyword';\n\n/**\n * Represents a unified search result item from the hybrid search backend.\n * Mirrors the `UnifiedSearchResultItem` Pydantic model in `hybrid_search_service.py`.\n */\nexport interface HybridSearchResultItem {\n  doc_id: string;\n  user_id: string;\n  title?: string | null;\n  snippet?: string | null;\n  source_uri?: string | null;\n  doc_type?: string | null;\n  created_at_source?: string | null; // ISO datetime string\n  last_modified_source?: string | null; // ISO datetime string\n  ingested_at: string; // ISO datetime string\n  score?: number | null; // Original score from the source system\n  match_type: HybridMatchSource; // 'semantic' or 'keyword'\n  extracted_text_preview?: string | null;\n  additional_properties?: Record<string, any> | null;\n}\n\n/**\n * Defines the structure for the filters object used in hybrid search.\n * This should be constructed by the frontend and passed to the search skill.\n */\nexport interface HybridSearchFilters {\n  doc_types?: string[];\n  date_after?: string; // ISO 8601 string\n  date_before?: string; // ISO 8601 string\n  date_field_to_filter?:\n    | 'ingested_at'\n    | 'created_at_source'\n    | 'last_modified_source';\n  metadata_properties?: Record<string, string>;\n}\n\n// --- Dropbox Integration Types ---\nexport interface DropboxConnectionStatusInfo {\n  isConnected: boolean;\n  email?: string;\n  reason?: string;\n}\n\nexport interface DropboxFile {\n  type: 'file' | 'folder';\n  name: string;\n  id: string;\n  path_lower?: string;\n  size?: number;\n  server_modified?: string; // ISO 8601 string\n}\n\nexport interface TrelloBoard {\n  id: string;\n  name: string;\n  url: string;\n}\n\nexport interface TrelloList {\n  id: string;\n  name: string;\n}\n\nexport interface TrelloCard {\n  id: string;\n  name: string;\n  desc: string;\n  url: string;\n}\n\nexport interface SalesforceContact {\n  Id: string;\n  Name: string;\n  Email?: string;\n}\n\nexport interface SalesforceAccount {\n  Id: string;\n  Name: string;\n}\n\nexport interface SalesforceOpportunity {\n  Id: string;\n  Name: string;\n  StageName: string;\n  Amount?: number;\n  CloseDate: string;\n}\n\nexport interface ShopifyProduct {\n  id: number;\n  title: string;\n  vendor: string;\n  product_type: string;\n  status: 'active' | 'archived' | 'draft';\n  variants: Array<{\n    id: number;\n    price: string;\n    sku: string;\n    inventory_quantity: number;\n  }>;\n}\n\nexport interface ShopifyOrder {\n  id: number;\n  name: string; // The order name, e.g., \"#1001\"\n  email: string;\n  total_price: string;\n  financial_status:\n    | 'pending'\n    | 'authorized'\n    | 'partially_paid'\n    | 'paid'\n    | 'partially_refunded'\n    | 'refunded'\n    | 'voided';\n  fulfillment_status: 'fulfilled' | 'unfulfilled' | 'partial' | null;\n  line_items: Array<{\n    id: number;\n    name: string;\n    sku: string;\n    quantity: number;\n    price: string;\n  }>;\n}\n\nexport interface XeroInvoice {\n  InvoiceID: string;\n  InvoiceNumber?: string;\n  Contact: {\n    ContactID: string;\n    Name: string;\n  };\n  DateString: string;\n  DueDateString: string;\n  Total: number;\n  AmountDue: number;\n  Status: string;\n}\n\nexport interface XeroBill {\n  InvoiceID: string;\n  InvoiceNumber?: string;\n  Contact: {\n    ContactID: string;\n    Name: string;\n  };\n  DateString: string;\n  DueDateString: string;\n  Total: number;\n  AmountDue: number;\n  Status: string;\n}\n\nexport interface XeroContact {\n  ContactID: string;\n  Name: string;\n  EmailAddress?: string;\n}\n\nexport interface Tweet {\n  id_str: string;\n  text: string;\n  user: {\n    name: string;\n    screen_name: string;\n  };\n  created_at: string;\n}\n\n// --- Schedule Skill Activation Types ---\nexport interface ScheduleSkillActivationEntities {\n  skill_to_schedule: string;\n  activation_time: string;\n  skill_entities: Record<string, any>;\n}\n"]}