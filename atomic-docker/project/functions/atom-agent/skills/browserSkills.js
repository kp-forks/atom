const { chromium } = require('playwright');
class BrowserSkill {
    constructor() {
        this.browser = null;
        this.page = null;
    }
    async start() {
        this.browser = await chromium.launch();
        this.page = await this.browser.newPage();
    }
    async stop() {
        await this.browser.close();
    }
    async goto(url) {
        await this.page.goto(url);
    }
    async click(selector) {
        await this.page.click(selector);
    }
    async type(selector, text) {
        await this.page.type(selector, text);
    }
    async extract(selector, attribute) {
        const element = await this.page.$(selector);
        if (attribute) {
            return await element.getAttribute(attribute);
        }
        return await element.textContent();
    }
    async screenshot(path) {
        await this.page.screenshot({ path });
    }
}
export async function handleBrowser(entities) {
    let textResponse;
    try {
        const browserSkill = new BrowserSkill();
        await browserSkill.start();
        const { action, url, selector, text, path } = entities;
        switch (action) {
            case 'goto':
                await browserSkill.goto(url);
                textResponse = `Navigated to ${url}`;
                break;
            case 'click':
                await browserSkill.click(selector);
                textResponse = `Clicked on ${selector}`;
                break;
            case 'type':
                await browserSkill.type(selector, text);
                textResponse = `Typed "${text}" into ${selector}`;
                break;
            case 'extract':
                const extractedText = await browserSkill.extract(selector);
                textResponse = `Extracted text: ${extractedText}`;
                break;
            case 'screenshot':
                await browserSkill.screenshot(path);
                textResponse = `Took a screenshot and saved it to ${path}`;
                break;
            default:
                textResponse = "Sorry, I don't know how to do that with the browser.";
        }
        await browserSkill.stop();
    }
    catch (error) {
        console.error(`Error in NLU Intent "Browser":`, error.message, error.stack);
        textResponse = 'Sorry, an error occurred while controlling the browser.';
    }
    return textResponse;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvd3NlclNraWxscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJyb3dzZXJTa2lsbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUUzQyxNQUFNLFlBQVk7SUFDaEI7UUFDRSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNuQixDQUFDO0lBRUQsS0FBSyxDQUFDLEtBQUs7UUFDVCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzNDLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBSTtRQUNSLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHO1FBQ1osTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRO1FBQ2xCLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUk7UUFDdkIsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFNBQVM7UUFDL0IsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1QyxJQUFJLFNBQVMsRUFBRSxDQUFDO1lBQ2QsT0FBTyxNQUFNLE9BQU8sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDL0MsQ0FBQztRQUNELE9BQU8sTUFBTSxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckMsQ0FBQztJQUVELEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSTtRQUNuQixNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN2QyxDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLGFBQWEsQ0FBQyxRQUFhO0lBQy9DLElBQUksWUFBb0IsQ0FBQztJQUN6QixJQUFJLENBQUM7UUFDSCxNQUFNLFlBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3hDLE1BQU0sWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzNCLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsUUFBUSxDQUFDO1FBQ3ZELFFBQVEsTUFBTSxFQUFFLENBQUM7WUFDZixLQUFLLE1BQU07Z0JBQ1QsTUFBTSxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUM3QixZQUFZLEdBQUcsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO2dCQUNyQyxNQUFNO1lBQ1IsS0FBSyxPQUFPO2dCQUNWLE1BQU0sWUFBWSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDbkMsWUFBWSxHQUFHLGNBQWMsUUFBUSxFQUFFLENBQUM7Z0JBQ3hDLE1BQU07WUFDUixLQUFLLE1BQU07Z0JBQ1QsTUFBTSxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDeEMsWUFBWSxHQUFHLFVBQVUsSUFBSSxVQUFVLFFBQVEsRUFBRSxDQUFDO2dCQUNsRCxNQUFNO1lBQ1IsS0FBSyxTQUFTO2dCQUNaLE1BQU0sYUFBYSxHQUFHLE1BQU0sWUFBWSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDM0QsWUFBWSxHQUFHLG1CQUFtQixhQUFhLEVBQUUsQ0FBQztnQkFDbEQsTUFBTTtZQUNSLEtBQUssWUFBWTtnQkFDZixNQUFNLFlBQVksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3BDLFlBQVksR0FBRyxxQ0FBcUMsSUFBSSxFQUFFLENBQUM7Z0JBQzNELE1BQU07WUFDUjtnQkFDRSxZQUFZLEdBQUcsc0RBQXNELENBQUM7UUFDMUUsQ0FBQztRQUNELE1BQU0sWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1RSxZQUFZLEdBQUcseURBQXlELENBQUM7SUFDM0UsQ0FBQztJQUNELE9BQU8sWUFBWSxDQUFDO0FBQ3RCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IGNocm9taXVtIH0gPSByZXF1aXJlKCdwbGF5d3JpZ2h0Jyk7XG5cbmNsYXNzIEJyb3dzZXJTa2lsbCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYnJvd3NlciA9IG51bGw7XG4gICAgdGhpcy5wYWdlID0gbnVsbDtcbiAgfVxuXG4gIGFzeW5jIHN0YXJ0KCkge1xuICAgIHRoaXMuYnJvd3NlciA9IGF3YWl0IGNocm9taXVtLmxhdW5jaCgpO1xuICAgIHRoaXMucGFnZSA9IGF3YWl0IHRoaXMuYnJvd3Nlci5uZXdQYWdlKCk7XG4gIH1cblxuICBhc3luYyBzdG9wKCkge1xuICAgIGF3YWl0IHRoaXMuYnJvd3Nlci5jbG9zZSgpO1xuICB9XG5cbiAgYXN5bmMgZ290byh1cmwpIHtcbiAgICBhd2FpdCB0aGlzLnBhZ2UuZ290byh1cmwpO1xuICB9XG5cbiAgYXN5bmMgY2xpY2soc2VsZWN0b3IpIHtcbiAgICBhd2FpdCB0aGlzLnBhZ2UuY2xpY2soc2VsZWN0b3IpO1xuICB9XG5cbiAgYXN5bmMgdHlwZShzZWxlY3RvciwgdGV4dCkge1xuICAgIGF3YWl0IHRoaXMucGFnZS50eXBlKHNlbGVjdG9yLCB0ZXh0KTtcbiAgfVxuXG4gIGFzeW5jIGV4dHJhY3Qoc2VsZWN0b3IsIGF0dHJpYnV0ZSkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBhd2FpdCB0aGlzLnBhZ2UuJChzZWxlY3Rvcik7XG4gICAgaWYgKGF0dHJpYnV0ZSkge1xuICAgICAgcmV0dXJuIGF3YWl0IGVsZW1lbnQuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCBlbGVtZW50LnRleHRDb250ZW50KCk7XG4gIH1cblxuICBhc3luYyBzY3JlZW5zaG90KHBhdGgpIHtcbiAgICBhd2FpdCB0aGlzLnBhZ2Uuc2NyZWVuc2hvdCh7IHBhdGggfSk7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUJyb3dzZXIoZW50aXRpZXM6IGFueSk6IFByb21pc2U8c3RyaW5nPiB7XG4gIGxldCB0ZXh0UmVzcG9uc2U6IHN0cmluZztcbiAgdHJ5IHtcbiAgICBjb25zdCBicm93c2VyU2tpbGwgPSBuZXcgQnJvd3NlclNraWxsKCk7XG4gICAgYXdhaXQgYnJvd3NlclNraWxsLnN0YXJ0KCk7XG4gICAgY29uc3QgeyBhY3Rpb24sIHVybCwgc2VsZWN0b3IsIHRleHQsIHBhdGggfSA9IGVudGl0aWVzO1xuICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICBjYXNlICdnb3RvJzpcbiAgICAgICAgYXdhaXQgYnJvd3NlclNraWxsLmdvdG8odXJsKTtcbiAgICAgICAgdGV4dFJlc3BvbnNlID0gYE5hdmlnYXRlZCB0byAke3VybH1gO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2NsaWNrJzpcbiAgICAgICAgYXdhaXQgYnJvd3NlclNraWxsLmNsaWNrKHNlbGVjdG9yKTtcbiAgICAgICAgdGV4dFJlc3BvbnNlID0gYENsaWNrZWQgb24gJHtzZWxlY3Rvcn1gO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3R5cGUnOlxuICAgICAgICBhd2FpdCBicm93c2VyU2tpbGwudHlwZShzZWxlY3RvciwgdGV4dCk7XG4gICAgICAgIHRleHRSZXNwb25zZSA9IGBUeXBlZCBcIiR7dGV4dH1cIiBpbnRvICR7c2VsZWN0b3J9YDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdleHRyYWN0JzpcbiAgICAgICAgY29uc3QgZXh0cmFjdGVkVGV4dCA9IGF3YWl0IGJyb3dzZXJTa2lsbC5leHRyYWN0KHNlbGVjdG9yKTtcbiAgICAgICAgdGV4dFJlc3BvbnNlID0gYEV4dHJhY3RlZCB0ZXh0OiAke2V4dHJhY3RlZFRleHR9YDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzY3JlZW5zaG90JzpcbiAgICAgICAgYXdhaXQgYnJvd3NlclNraWxsLnNjcmVlbnNob3QocGF0aCk7XG4gICAgICAgIHRleHRSZXNwb25zZSA9IGBUb29rIGEgc2NyZWVuc2hvdCBhbmQgc2F2ZWQgaXQgdG8gJHtwYXRofWA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGV4dFJlc3BvbnNlID0gXCJTb3JyeSwgSSBkb24ndCBrbm93IGhvdyB0byBkbyB0aGF0IHdpdGggdGhlIGJyb3dzZXIuXCI7XG4gICAgfVxuICAgIGF3YWl0IGJyb3dzZXJTa2lsbC5zdG9wKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihgRXJyb3IgaW4gTkxVIEludGVudCBcIkJyb3dzZXJcIjpgLCBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjayk7XG4gICAgdGV4dFJlc3BvbnNlID0gJ1NvcnJ5LCBhbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBjb250cm9sbGluZyB0aGUgYnJvd3Nlci4nO1xuICB9XG4gIHJldHVybiB0ZXh0UmVzcG9uc2U7XG59XG4iXX0=