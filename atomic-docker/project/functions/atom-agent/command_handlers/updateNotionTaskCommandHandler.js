import { handleUpdateNotionTask } from '../skills/notionTaskSkills'; // The actual skill
import { logger } from '../../_utils/logger';
/**
 * Handles the "UpdateTask" intent.
 * Calls the skill to update a Notion task and formats the result for the user.
 *
 * @param userId The ID of the user.
 * @param entities The NLU entities extracted for the UpdateTask intent.
 * @returns A promise that resolves to a user-facing string response.
 */
export async function handleUpdateTaskRequest(userId, entities) {
    logger.info(`[UpdateNotionTaskCmdHandler] Handling request for user ${userId} to update task.`);
    logger.debug(`[UpdateNotionTaskCmdHandler] Received NLU entities: ${JSON.stringify(entities)}`);
    if (!entities.task_identifier_text) {
        logger.warn(`[UpdateNotionTaskCmdHandler] Missing task_identifier_text.`);
        return 'Please specify which task you want to update (e.g., by its name or part of its description).';
    }
    // If a specific update_action is "complete", ensure new_status_text reflects "Done"
    // NLU should ideally handle this mapping, but we can enforce it here.
    let finalEntities = { ...entities };
    if (entities.update_action === 'complete' &&
        entities.new_status_text?.toLowerCase() !== 'done') {
        logger.info(`[UpdateNotionTaskCmdHandler] 'complete' action detected, overriding status to 'Done'.`);
        finalEntities.new_status_text = 'Done';
    }
    try {
        const skillResponse = await handleUpdateNotionTask(userId, {
            task_identifier_text: finalEntities.task_identifier_text,
            new_status_text: finalEntities.new_status_text,
            new_due_date_text: finalEntities.new_due_date_text,
            new_priority_text: finalEntities.new_priority_text,
            new_list_name_text: finalEntities.new_list_name_text,
            new_description_text: finalEntities.new_description_text,
        });
        if (skillResponse.ok && skillResponse.data?.userMessage) {
            logger.info(`[UpdateNotionTaskCmdHandler] Task update successful: ${skillResponse.data.userMessage}`);
            return skillResponse.data.userMessage;
        }
        else {
            // If the error was about ambiguity, the skill itself returns a userMessage for clarification
            if (skillResponse.error?.code === 'AMBIGUOUS_TASK' &&
                skillResponse.data?.userMessage) {
                logger.warn(`[UpdateNotionTaskCmdHandler] Task update ambiguous: ${skillResponse.data.userMessage}`);
                return skillResponse.data.userMessage;
            }
            const errorMsg = skillResponse.error?.message ||
                skillResponse.data?.userMessage ||
                'Unknown error from skill';
            logger.error(`[UpdateNotionTaskCmdHandler] Skill execution failed or task update unsuccessful: ${errorMsg}`, skillResponse.error);
            return `I couldn't update the task. ${errorMsg}`;
        }
    }
    catch (error) {
        logger.error(`[UpdateNotionTaskCmdHandler] Critical error handling request: ${error.message}`, error);
        return `I encountered an unexpected critical error while trying to update the task: ${error.message}.`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlTm90aW9uVGFza0NvbW1hbmRIYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidXBkYXRlTm90aW9uVGFza0NvbW1hbmRIYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDLENBQUMsbUJBQW1CO0FBQ3hGLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQW9CN0M7Ozs7Ozs7R0FPRztBQUNILE1BQU0sQ0FBQyxLQUFLLFVBQVUsdUJBQXVCLENBQzNDLE1BQWMsRUFDZCxRQUFzQztJQUV0QyxNQUFNLENBQUMsSUFBSSxDQUNULDBEQUEwRCxNQUFNLGtCQUFrQixDQUNuRixDQUFDO0lBQ0YsTUFBTSxDQUFDLEtBQUssQ0FDVix1REFBdUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUNsRixDQUFDO0lBRUYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1FBQ25DLE1BQU0sQ0FBQyxJQUFJLENBQUMsNERBQTRELENBQUMsQ0FBQztRQUMxRSxPQUFPLDhGQUE4RixDQUFDO0lBQ3hHLENBQUM7SUFFRCxvRkFBb0Y7SUFDcEYsc0VBQXNFO0lBQ3RFLElBQUksYUFBYSxHQUFHLEVBQUUsR0FBRyxRQUFRLEVBQUUsQ0FBQztJQUNwQyxJQUNFLFFBQVEsQ0FBQyxhQUFhLEtBQUssVUFBVTtRQUNyQyxRQUFRLENBQUMsZUFBZSxFQUFFLFdBQVcsRUFBRSxLQUFLLE1BQU0sRUFDbEQsQ0FBQztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQ1QsdUZBQXVGLENBQ3hGLENBQUM7UUFDRixhQUFhLENBQUMsZUFBZSxHQUFHLE1BQU0sQ0FBQztJQUN6QyxDQUFDO0lBRUQsSUFBSSxDQUFDO1FBQ0gsTUFBTSxhQUFhLEdBRWYsTUFBTSxzQkFBc0IsQ0FBQyxNQUFNLEVBQUU7WUFDdkMsb0JBQW9CLEVBQUUsYUFBYSxDQUFDLG9CQUFvQjtZQUN4RCxlQUFlLEVBQUUsYUFBYSxDQUFDLGVBQWU7WUFDOUMsaUJBQWlCLEVBQUUsYUFBYSxDQUFDLGlCQUFpQjtZQUNsRCxpQkFBaUIsRUFBRSxhQUFhLENBQUMsaUJBQWlCO1lBQ2xELGtCQUFrQixFQUFFLGFBQWEsQ0FBQyxrQkFBa0I7WUFDcEQsb0JBQW9CLEVBQUUsYUFBYSxDQUFDLG9CQUFvQjtTQUN6RCxDQUFDLENBQUM7UUFFSCxJQUFJLGFBQWEsQ0FBQyxFQUFFLElBQUksYUFBYSxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsQ0FBQztZQUN4RCxNQUFNLENBQUMsSUFBSSxDQUNULHdEQUF3RCxhQUFhLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUN6RixDQUFDO1lBQ0YsT0FBTyxhQUFhLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUN4QyxDQUFDO2FBQU0sQ0FBQztZQUNOLDZGQUE2RjtZQUM3RixJQUNFLGFBQWEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxLQUFLLGdCQUFnQjtnQkFDOUMsYUFBYSxDQUFDLElBQUksRUFBRSxXQUFXLEVBQy9CLENBQUM7Z0JBQ0QsTUFBTSxDQUFDLElBQUksQ0FDVCx1REFBdUQsYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FDeEYsQ0FBQztnQkFDRixPQUFPLGFBQWEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO1lBQ3hDLENBQUM7WUFDRCxNQUFNLFFBQVEsR0FDWixhQUFhLENBQUMsS0FBSyxFQUFFLE9BQU87Z0JBQzVCLGFBQWEsQ0FBQyxJQUFJLEVBQUUsV0FBVztnQkFDL0IsMEJBQTBCLENBQUM7WUFDN0IsTUFBTSxDQUFDLEtBQUssQ0FDVixvRkFBb0YsUUFBUSxFQUFFLEVBQzlGLGFBQWEsQ0FBQyxLQUFLLENBQ3BCLENBQUM7WUFDRixPQUFPLCtCQUErQixRQUFRLEVBQUUsQ0FBQztRQUNuRCxDQUFDO0lBQ0gsQ0FBQztJQUFDLE9BQU8sS0FBVSxFQUFFLENBQUM7UUFDcEIsTUFBTSxDQUFDLEtBQUssQ0FDVixpRUFBaUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUNoRixLQUFLLENBQ04sQ0FBQztRQUNGLE9BQU8sK0VBQStFLEtBQUssQ0FBQyxPQUFPLEdBQUcsQ0FBQztJQUN6RyxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFNraWxsUmVzcG9uc2UsXG4gIFVwZGF0ZVRhc2tEYXRhLFxuICAvLyBDb25jZXB0dWFsIE5MVSBlbnRpdHkgdHlwZXNcbn0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgaGFuZGxlVXBkYXRlTm90aW9uVGFzayB9IGZyb20gJy4uL3NraWxscy9ub3Rpb25UYXNrU2tpbGxzJzsgLy8gVGhlIGFjdHVhbCBza2lsbFxuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi4vLi4vX3V0aWxzL2xvZ2dlcic7XG5cbi8vIE5MVSBFbnRpdGllcyBleHBlY3RlZCBieSB0aGlzIGhhbmRsZXIgZm9yIFwiVXBkYXRlVGFza1wiIGludGVudFxuaW50ZXJmYWNlIFVwZGF0ZVRhc2tIYW5kbGVyTmx1RW50aXRpZXMge1xuICB0YXNrX2lkZW50aWZpZXJfdGV4dDogc3RyaW5nOyAvLyBUZXh0IHRvIGhlbHAgaWRlbnRpZnkgdGhlIHRhc2tcbiAgbmV3X3N0YXR1c190ZXh0Pzogc3RyaW5nO1xuICBuZXdfZHVlX2RhdGVfdGV4dD86IHN0cmluZztcbiAgbmV3X3ByaW9yaXR5X3RleHQ/OiBzdHJpbmc7XG4gIG5ld19saXN0X25hbWVfdGV4dD86IHN0cmluZztcbiAgbmV3X2Rlc2NyaXB0aW9uX3RleHQ/OiBzdHJpbmc7XG4gIC8vIFRoaXMgZW50aXR5IGhlbHBzIGRpZmZlcmVudGlhdGUgc2ltcGxlIHVwZGF0ZXMgZnJvbSBzcGVjaWZpYyBhY3Rpb25zIGxpa2UgXCJtYXJrIGFzIGNvbXBsZXRlXCJcbiAgdXBkYXRlX2FjdGlvbj86XG4gICAgfCAnY29tcGxldGUnXG4gICAgfCAnc2V0X2R1ZV9kYXRlJ1xuICAgIHwgJ2NoYW5nZV9wcmlvcml0eSdcbiAgICB8ICdyZW5hbWUnXG4gICAgfCAnbW92ZV9saXN0J1xuICAgIHwgJ2FkZF9ub3Rlcyc7XG59XG5cbi8qKlxuICogSGFuZGxlcyB0aGUgXCJVcGRhdGVUYXNrXCIgaW50ZW50LlxuICogQ2FsbHMgdGhlIHNraWxsIHRvIHVwZGF0ZSBhIE5vdGlvbiB0YXNrIGFuZCBmb3JtYXRzIHRoZSByZXN1bHQgZm9yIHRoZSB1c2VyLlxuICpcbiAqIEBwYXJhbSB1c2VySWQgVGhlIElEIG9mIHRoZSB1c2VyLlxuICogQHBhcmFtIGVudGl0aWVzIFRoZSBOTFUgZW50aXRpZXMgZXh0cmFjdGVkIGZvciB0aGUgVXBkYXRlVGFzayBpbnRlbnQuXG4gKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIHVzZXItZmFjaW5nIHN0cmluZyByZXNwb25zZS5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZVVwZGF0ZVRhc2tSZXF1ZXN0KFxuICB1c2VySWQ6IHN0cmluZyxcbiAgZW50aXRpZXM6IFVwZGF0ZVRhc2tIYW5kbGVyTmx1RW50aXRpZXNcbik6IFByb21pc2U8c3RyaW5nPiB7XG4gIGxvZ2dlci5pbmZvKFxuICAgIGBbVXBkYXRlTm90aW9uVGFza0NtZEhhbmRsZXJdIEhhbmRsaW5nIHJlcXVlc3QgZm9yIHVzZXIgJHt1c2VySWR9IHRvIHVwZGF0ZSB0YXNrLmBcbiAgKTtcbiAgbG9nZ2VyLmRlYnVnKFxuICAgIGBbVXBkYXRlTm90aW9uVGFza0NtZEhhbmRsZXJdIFJlY2VpdmVkIE5MVSBlbnRpdGllczogJHtKU09OLnN0cmluZ2lmeShlbnRpdGllcyl9YFxuICApO1xuXG4gIGlmICghZW50aXRpZXMudGFza19pZGVudGlmaWVyX3RleHQpIHtcbiAgICBsb2dnZXIud2FybihgW1VwZGF0ZU5vdGlvblRhc2tDbWRIYW5kbGVyXSBNaXNzaW5nIHRhc2tfaWRlbnRpZmllcl90ZXh0LmApO1xuICAgIHJldHVybiAnUGxlYXNlIHNwZWNpZnkgd2hpY2ggdGFzayB5b3Ugd2FudCB0byB1cGRhdGUgKGUuZy4sIGJ5IGl0cyBuYW1lIG9yIHBhcnQgb2YgaXRzIGRlc2NyaXB0aW9uKS4nO1xuICB9XG5cbiAgLy8gSWYgYSBzcGVjaWZpYyB1cGRhdGVfYWN0aW9uIGlzIFwiY29tcGxldGVcIiwgZW5zdXJlIG5ld19zdGF0dXNfdGV4dCByZWZsZWN0cyBcIkRvbmVcIlxuICAvLyBOTFUgc2hvdWxkIGlkZWFsbHkgaGFuZGxlIHRoaXMgbWFwcGluZywgYnV0IHdlIGNhbiBlbmZvcmNlIGl0IGhlcmUuXG4gIGxldCBmaW5hbEVudGl0aWVzID0geyAuLi5lbnRpdGllcyB9O1xuICBpZiAoXG4gICAgZW50aXRpZXMudXBkYXRlX2FjdGlvbiA9PT0gJ2NvbXBsZXRlJyAmJlxuICAgIGVudGl0aWVzLm5ld19zdGF0dXNfdGV4dD8udG9Mb3dlckNhc2UoKSAhPT0gJ2RvbmUnXG4gICkge1xuICAgIGxvZ2dlci5pbmZvKFxuICAgICAgYFtVcGRhdGVOb3Rpb25UYXNrQ21kSGFuZGxlcl0gJ2NvbXBsZXRlJyBhY3Rpb24gZGV0ZWN0ZWQsIG92ZXJyaWRpbmcgc3RhdHVzIHRvICdEb25lJy5gXG4gICAgKTtcbiAgICBmaW5hbEVudGl0aWVzLm5ld19zdGF0dXNfdGV4dCA9ICdEb25lJztcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3Qgc2tpbGxSZXNwb25zZTogU2tpbGxSZXNwb25zZTxcbiAgICAgIFVwZGF0ZVRhc2tEYXRhICYgeyB1c2VyTWVzc2FnZTogc3RyaW5nIH1cbiAgICA+ID0gYXdhaXQgaGFuZGxlVXBkYXRlTm90aW9uVGFzayh1c2VySWQsIHtcbiAgICAgIHRhc2tfaWRlbnRpZmllcl90ZXh0OiBmaW5hbEVudGl0aWVzLnRhc2tfaWRlbnRpZmllcl90ZXh0LFxuICAgICAgbmV3X3N0YXR1c190ZXh0OiBmaW5hbEVudGl0aWVzLm5ld19zdGF0dXNfdGV4dCxcbiAgICAgIG5ld19kdWVfZGF0ZV90ZXh0OiBmaW5hbEVudGl0aWVzLm5ld19kdWVfZGF0ZV90ZXh0LFxuICAgICAgbmV3X3ByaW9yaXR5X3RleHQ6IGZpbmFsRW50aXRpZXMubmV3X3ByaW9yaXR5X3RleHQsXG4gICAgICBuZXdfbGlzdF9uYW1lX3RleHQ6IGZpbmFsRW50aXRpZXMubmV3X2xpc3RfbmFtZV90ZXh0LFxuICAgICAgbmV3X2Rlc2NyaXB0aW9uX3RleHQ6IGZpbmFsRW50aXRpZXMubmV3X2Rlc2NyaXB0aW9uX3RleHQsXG4gICAgfSk7XG5cbiAgICBpZiAoc2tpbGxSZXNwb25zZS5vayAmJiBza2lsbFJlc3BvbnNlLmRhdGE/LnVzZXJNZXNzYWdlKSB7XG4gICAgICBsb2dnZXIuaW5mbyhcbiAgICAgICAgYFtVcGRhdGVOb3Rpb25UYXNrQ21kSGFuZGxlcl0gVGFzayB1cGRhdGUgc3VjY2Vzc2Z1bDogJHtza2lsbFJlc3BvbnNlLmRhdGEudXNlck1lc3NhZ2V9YFxuICAgICAgKTtcbiAgICAgIHJldHVybiBza2lsbFJlc3BvbnNlLmRhdGEudXNlck1lc3NhZ2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIHRoZSBlcnJvciB3YXMgYWJvdXQgYW1iaWd1aXR5LCB0aGUgc2tpbGwgaXRzZWxmIHJldHVybnMgYSB1c2VyTWVzc2FnZSBmb3IgY2xhcmlmaWNhdGlvblxuICAgICAgaWYgKFxuICAgICAgICBza2lsbFJlc3BvbnNlLmVycm9yPy5jb2RlID09PSAnQU1CSUdVT1VTX1RBU0snICYmXG4gICAgICAgIHNraWxsUmVzcG9uc2UuZGF0YT8udXNlck1lc3NhZ2VcbiAgICAgICkge1xuICAgICAgICBsb2dnZXIud2FybihcbiAgICAgICAgICBgW1VwZGF0ZU5vdGlvblRhc2tDbWRIYW5kbGVyXSBUYXNrIHVwZGF0ZSBhbWJpZ3VvdXM6ICR7c2tpbGxSZXNwb25zZS5kYXRhLnVzZXJNZXNzYWdlfWBcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHNraWxsUmVzcG9uc2UuZGF0YS51c2VyTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVycm9yTXNnID1cbiAgICAgICAgc2tpbGxSZXNwb25zZS5lcnJvcj8ubWVzc2FnZSB8fFxuICAgICAgICBza2lsbFJlc3BvbnNlLmRhdGE/LnVzZXJNZXNzYWdlIHx8XG4gICAgICAgICdVbmtub3duIGVycm9yIGZyb20gc2tpbGwnO1xuICAgICAgbG9nZ2VyLmVycm9yKFxuICAgICAgICBgW1VwZGF0ZU5vdGlvblRhc2tDbWRIYW5kbGVyXSBTa2lsbCBleGVjdXRpb24gZmFpbGVkIG9yIHRhc2sgdXBkYXRlIHVuc3VjY2Vzc2Z1bDogJHtlcnJvck1zZ31gLFxuICAgICAgICBza2lsbFJlc3BvbnNlLmVycm9yXG4gICAgICApO1xuICAgICAgcmV0dXJuIGBJIGNvdWxkbid0IHVwZGF0ZSB0aGUgdGFzay4gJHtlcnJvck1zZ31gO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgIGxvZ2dlci5lcnJvcihcbiAgICAgIGBbVXBkYXRlTm90aW9uVGFza0NtZEhhbmRsZXJdIENyaXRpY2FsIGVycm9yIGhhbmRsaW5nIHJlcXVlc3Q6ICR7ZXJyb3IubWVzc2FnZX1gLFxuICAgICAgZXJyb3JcbiAgICApO1xuICAgIHJldHVybiBgSSBlbmNvdW50ZXJlZCBhbiB1bmV4cGVjdGVkIGNyaXRpY2FsIGVycm9yIHdoaWxlIHRyeWluZyB0byB1cGRhdGUgdGhlIHRhc2s6ICR7ZXJyb3IubWVzc2FnZX0uYDtcbiAgfVxufVxuIl19