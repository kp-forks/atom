import { handleQueryNotionTasks } from '../skills/notionTaskSkills'; // The actual skill
import { logger } from '../../_utils/logger';
/**
 * Handles the "QueryTasks" intent.
 * Calls the skill to query Notion tasks and formats the result for the user.
 *
 * @param userId The ID of the user.
 * @param entities The NLU entities extracted for the QueryTasks intent.
 * @returns A promise that resolves to a user-facing string response.
 */
export async function handleQueryTasksRequest(userId, entities) {
    logger.info(`[QueryNotionTasksCmdHandler] Handling request for user ${userId} to query tasks.`);
    logger.debug(`[QueryNotionTasksCmdHandler] Received NLU entities: ${JSON.stringify(entities)}`);
    try {
        const skillResponse = await handleQueryNotionTasks(userId, {
            date_condition_text: entities.date_condition_text,
            priority_text: entities.priority_text,
            list_name_text: entities.list_name_text,
            status_text: entities.status_text,
            description_contains_text: entities.description_contains_text,
            sort_by_text: entities.sort_by_text,
            sort_order_text: entities.sort_order_text,
            limit_number: entities.limit_number,
        });
        if (skillResponse.ok && skillResponse.data?.userMessage) {
            logger.info(`[QueryNotionTasksCmdHandler] Task query successful.`);
            return skillResponse.data.userMessage;
        }
        else {
            const errorMsg = skillResponse.error?.message ||
                skillResponse.data?.userMessage ||
                'Unknown error from skill';
            logger.error(`[QueryNotionTasksCmdHandler] Skill execution failed or task query unsuccessful: ${errorMsg}`, skillResponse.error);
            return `I couldn't query tasks. ${errorMsg}`;
        }
    }
    catch (error) {
        logger.error(`[QueryNotionTasksCmdHandler] Critical error handling request: ${error.message}`, error);
        return `I encountered an unexpected critical error while trying to query tasks: ${error.message}.`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnlOb3Rpb25UYXNrc0NvbW1hbmRIYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicXVlcnlOb3Rpb25UYXNrc0NvbW1hbmRIYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDLENBQUMsbUJBQW1CO0FBQ3hGLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQWU3Qzs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxDQUFDLEtBQUssVUFBVSx1QkFBdUIsQ0FDM0MsTUFBYyxFQUNkLFFBQXNDO0lBRXRDLE1BQU0sQ0FBQyxJQUFJLENBQ1QsMERBQTBELE1BQU0sa0JBQWtCLENBQ25GLENBQUM7SUFDRixNQUFNLENBQUMsS0FBSyxDQUNWLHVEQUF1RCxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQ2xGLENBQUM7SUFFRixJQUFJLENBQUM7UUFDSCxNQUFNLGFBQWEsR0FHZCxNQUFNLHNCQUFzQixDQUFDLE1BQU0sRUFBRTtZQUN4QyxtQkFBbUIsRUFBRSxRQUFRLENBQUMsbUJBQW1CO1lBQ2pELGFBQWEsRUFBRSxRQUFRLENBQUMsYUFBYTtZQUNyQyxjQUFjLEVBQUUsUUFBUSxDQUFDLGNBQWM7WUFDdkMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxXQUFXO1lBQ2pDLHlCQUF5QixFQUFFLFFBQVEsQ0FBQyx5QkFBeUI7WUFDN0QsWUFBWSxFQUFFLFFBQVEsQ0FBQyxZQUFZO1lBQ25DLGVBQWUsRUFBRSxRQUFRLENBQUMsZUFBZTtZQUN6QyxZQUFZLEVBQUUsUUFBUSxDQUFDLFlBQVk7U0FDcEMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxhQUFhLENBQUMsRUFBRSxJQUFJLGFBQWEsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLENBQUM7WUFDeEQsTUFBTSxDQUFDLElBQUksQ0FBQyxxREFBcUQsQ0FBQyxDQUFDO1lBQ25FLE9BQU8sYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDeEMsQ0FBQzthQUFNLENBQUM7WUFDTixNQUFNLFFBQVEsR0FDWixhQUFhLENBQUMsS0FBSyxFQUFFLE9BQU87Z0JBQzVCLGFBQWEsQ0FBQyxJQUFJLEVBQUUsV0FBVztnQkFDL0IsMEJBQTBCLENBQUM7WUFDN0IsTUFBTSxDQUFDLEtBQUssQ0FDVixtRkFBbUYsUUFBUSxFQUFFLEVBQzdGLGFBQWEsQ0FBQyxLQUFLLENBQ3BCLENBQUM7WUFDRixPQUFPLDJCQUEyQixRQUFRLEVBQUUsQ0FBQztRQUMvQyxDQUFDO0lBQ0gsQ0FBQztJQUFDLE9BQU8sS0FBVSxFQUFFLENBQUM7UUFDcEIsTUFBTSxDQUFDLEtBQUssQ0FDVixpRUFBaUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUNoRixLQUFLLENBQ04sQ0FBQztRQUNGLE9BQU8sMkVBQTJFLEtBQUssQ0FBQyxPQUFPLEdBQUcsQ0FBQztJQUNyRyxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFNraWxsUmVzcG9uc2UsXG4gIE5vdGlvblRhc2ssXG4gIC8vIENvbmNlcHR1YWwgTkxVIGVudGl0eSB0eXBlc1xufSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBoYW5kbGVRdWVyeU5vdGlvblRhc2tzIH0gZnJvbSAnLi4vc2tpbGxzL25vdGlvblRhc2tTa2lsbHMnOyAvLyBUaGUgYWN0dWFsIHNraWxsXG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuLi8uLi9fdXRpbHMvbG9nZ2VyJztcblxuLy8gTkxVIEVudGl0aWVzIGV4cGVjdGVkIGJ5IHRoaXMgaGFuZGxlciBmb3IgXCJRdWVyeVRhc2tzXCIgaW50ZW50XG5pbnRlcmZhY2UgUXVlcnlUYXNrc0hhbmRsZXJObHVFbnRpdGllcyB7XG4gIGRhdGVfY29uZGl0aW9uX3RleHQ/OiBzdHJpbmc7XG4gIHByaW9yaXR5X3RleHQ/OiBzdHJpbmc7XG4gIGxpc3RfbmFtZV90ZXh0Pzogc3RyaW5nO1xuICBzdGF0dXNfdGV4dD86IHN0cmluZztcbiAgZGVzY3JpcHRpb25fY29udGFpbnNfdGV4dD86IHN0cmluZztcbiAgc29ydF9ieV90ZXh0PzogJ2R1ZURhdGUnIHwgJ3ByaW9yaXR5JyB8ICdjcmVhdGVkRGF0ZSc7XG4gIHNvcnRfb3JkZXJfdGV4dD86ICdhc2NlbmRpbmcnIHwgJ2Rlc2NlbmRpbmcnO1xuICBsaW1pdF9udW1iZXI/OiBudW1iZXI7XG4gIC8vIGFueSBvdGhlciBlbnRpdGllcyBOTFUgbWlnaHQgcHJvdmlkZVxufVxuXG4vKipcbiAqIEhhbmRsZXMgdGhlIFwiUXVlcnlUYXNrc1wiIGludGVudC5cbiAqIENhbGxzIHRoZSBza2lsbCB0byBxdWVyeSBOb3Rpb24gdGFza3MgYW5kIGZvcm1hdHMgdGhlIHJlc3VsdCBmb3IgdGhlIHVzZXIuXG4gKlxuICogQHBhcmFtIHVzZXJJZCBUaGUgSUQgb2YgdGhlIHVzZXIuXG4gKiBAcGFyYW0gZW50aXRpZXMgVGhlIE5MVSBlbnRpdGllcyBleHRyYWN0ZWQgZm9yIHRoZSBRdWVyeVRhc2tzIGludGVudC5cbiAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgdXNlci1mYWNpbmcgc3RyaW5nIHJlc3BvbnNlLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlUXVlcnlUYXNrc1JlcXVlc3QoXG4gIHVzZXJJZDogc3RyaW5nLFxuICBlbnRpdGllczogUXVlcnlUYXNrc0hhbmRsZXJObHVFbnRpdGllc1xuKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgbG9nZ2VyLmluZm8oXG4gICAgYFtRdWVyeU5vdGlvblRhc2tzQ21kSGFuZGxlcl0gSGFuZGxpbmcgcmVxdWVzdCBmb3IgdXNlciAke3VzZXJJZH0gdG8gcXVlcnkgdGFza3MuYFxuICApO1xuICBsb2dnZXIuZGVidWcoXG4gICAgYFtRdWVyeU5vdGlvblRhc2tzQ21kSGFuZGxlcl0gUmVjZWl2ZWQgTkxVIGVudGl0aWVzOiAke0pTT04uc3RyaW5naWZ5KGVudGl0aWVzKX1gXG4gICk7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBza2lsbFJlc3BvbnNlOiBTa2lsbFJlc3BvbnNlPHtcbiAgICAgIHRhc2tzOiBOb3Rpb25UYXNrW107XG4gICAgICB1c2VyTWVzc2FnZTogc3RyaW5nO1xuICAgIH0+ID0gYXdhaXQgaGFuZGxlUXVlcnlOb3Rpb25UYXNrcyh1c2VySWQsIHtcbiAgICAgIGRhdGVfY29uZGl0aW9uX3RleHQ6IGVudGl0aWVzLmRhdGVfY29uZGl0aW9uX3RleHQsXG4gICAgICBwcmlvcml0eV90ZXh0OiBlbnRpdGllcy5wcmlvcml0eV90ZXh0LFxuICAgICAgbGlzdF9uYW1lX3RleHQ6IGVudGl0aWVzLmxpc3RfbmFtZV90ZXh0LFxuICAgICAgc3RhdHVzX3RleHQ6IGVudGl0aWVzLnN0YXR1c190ZXh0LFxuICAgICAgZGVzY3JpcHRpb25fY29udGFpbnNfdGV4dDogZW50aXRpZXMuZGVzY3JpcHRpb25fY29udGFpbnNfdGV4dCxcbiAgICAgIHNvcnRfYnlfdGV4dDogZW50aXRpZXMuc29ydF9ieV90ZXh0LFxuICAgICAgc29ydF9vcmRlcl90ZXh0OiBlbnRpdGllcy5zb3J0X29yZGVyX3RleHQsXG4gICAgICBsaW1pdF9udW1iZXI6IGVudGl0aWVzLmxpbWl0X251bWJlcixcbiAgICB9KTtcblxuICAgIGlmIChza2lsbFJlc3BvbnNlLm9rICYmIHNraWxsUmVzcG9uc2UuZGF0YT8udXNlck1lc3NhZ2UpIHtcbiAgICAgIGxvZ2dlci5pbmZvKGBbUXVlcnlOb3Rpb25UYXNrc0NtZEhhbmRsZXJdIFRhc2sgcXVlcnkgc3VjY2Vzc2Z1bC5gKTtcbiAgICAgIHJldHVybiBza2lsbFJlc3BvbnNlLmRhdGEudXNlck1lc3NhZ2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGVycm9yTXNnID1cbiAgICAgICAgc2tpbGxSZXNwb25zZS5lcnJvcj8ubWVzc2FnZSB8fFxuICAgICAgICBza2lsbFJlc3BvbnNlLmRhdGE/LnVzZXJNZXNzYWdlIHx8XG4gICAgICAgICdVbmtub3duIGVycm9yIGZyb20gc2tpbGwnO1xuICAgICAgbG9nZ2VyLmVycm9yKFxuICAgICAgICBgW1F1ZXJ5Tm90aW9uVGFza3NDbWRIYW5kbGVyXSBTa2lsbCBleGVjdXRpb24gZmFpbGVkIG9yIHRhc2sgcXVlcnkgdW5zdWNjZXNzZnVsOiAke2Vycm9yTXNnfWAsXG4gICAgICAgIHNraWxsUmVzcG9uc2UuZXJyb3JcbiAgICAgICk7XG4gICAgICByZXR1cm4gYEkgY291bGRuJ3QgcXVlcnkgdGFza3MuICR7ZXJyb3JNc2d9YDtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICBsb2dnZXIuZXJyb3IoXG4gICAgICBgW1F1ZXJ5Tm90aW9uVGFza3NDbWRIYW5kbGVyXSBDcml0aWNhbCBlcnJvciBoYW5kbGluZyByZXF1ZXN0OiAke2Vycm9yLm1lc3NhZ2V9YCxcbiAgICAgIGVycm9yXG4gICAgKTtcbiAgICByZXR1cm4gYEkgZW5jb3VudGVyZWQgYW4gdW5leHBlY3RlZCBjcml0aWNhbCBlcnJvciB3aGlsZSB0cnlpbmcgdG8gcXVlcnkgdGFza3M6ICR7ZXJyb3IubWVzc2FnZX0uYDtcbiAgfVxufVxuIl19