import { understandSlackSearchQueryLLM, } from '../skills/llm_slack_query_understander';
import { buildSlackSearchQuery } from '../skills/nlu_slack_helper';
import { searchMySlackMessages, readSlackMessage, extractInformationFromSlackMessage, getSlackMessagePermalink, } from '../skills/slackSkills';
import { logger } from '../../_utils/logger';
/**
 * Handles a generic Slack inquiry: understands the search query using an LLM,
 * finds a message, and performs an action on it (e.g., extracts info, gets content, gets link).
 */
export async function handleSlackInquiry(request) {
    const { userId, rawSlackSearchQuery, actionRequested, targetChannelId, targetMessageTs, } = request;
    let messageToUser = '';
    logger.debug(`[SlackCommandHandler] Handling Slack inquiry for user ${userId}:`, request);
    try {
        let targetMessage = null;
        // Step 1: Obtain the target message (either by ID/TS or by searching)
        if (targetChannelId && targetMessageTs) {
            logger.info(`[SlackCommandHandler] Attempting to read specified Slack message: Channel ${targetChannelId}, TS ${targetMessageTs}`);
            targetMessage = await readSlackMessage(userId, targetChannelId, targetMessageTs);
            if (!targetMessage) {
                messageToUser = `Sorry, I couldn't find or read the specific Slack message you referred to (Channel: ${targetChannelId}, TS: ${targetMessageTs}).`;
                logger.warn(`[SlackCommandHandler] Failed to read specific message: ${messageToUser}`);
                return messageToUser;
            }
        }
        else {
            logger.info(`[SlackCommandHandler] Understanding Slack search query: "${rawSlackSearchQuery}"`);
            const structuredSearchParams = await understandSlackSearchQueryLLM(rawSlackSearchQuery);
            if (Object.keys(structuredSearchParams).length === 0 &&
                !rawSlackSearchQuery.toLowerCase().includes('latest')) {
                // If LLM returns empty and it's not a query for "latest" (which might imply broad search)
                messageToUser =
                    "I couldn't determine specific search criteria from your Slack request. Could you be more precise?";
                logger.warn(`[SlackCommandHandler] LLM returned empty search params for query: "${rawSlackSearchQuery}"`);
                return messageToUser;
            }
            const slackApiQueryString = buildSlackSearchQuery(structuredSearchParams);
            logger.info(`[SlackCommandHandler] Searching Slack messages with LLM-derived query: "${slackApiQueryString}" (Limit 5)`);
            // TODO: The limit for searchMySlackMessages might need to be adjusted based on context or NLU.
            // If the user asks for "the latest message from X", limit should be 1.
            const messagesFound = await searchMySlackMessages(userId, slackApiQueryString, 5);
            if (!messagesFound || messagesFound.length === 0) {
                messageToUser =
                    "I couldn't find any Slack messages matching your criteria based on my understanding of your request.";
                logger.info(`[SlackCommandHandler] No messages found for query: "${slackApiQueryString}"`);
                return messageToUser;
            }
            if (messagesFound.length > 1 &&
                actionRequested.actionType !== 'FIND_INFO_IN_SLACK_MESSAGE') {
                // If multiple messages found and the action isn't a broad search for info (which might process multiple), ask for clarification.
                // For FIND_INFO_IN_SLACK_MESSAGE, we might iterate or pick the most relevant one later.
                messageToUser =
                    'I found a few Slack messages matching your criteria:\n';
                messagesFound.slice(0, 3).forEach((msg, index) => {
                    const msgTextPreview = msg.text
                        ? msg.text.length > 50
                            ? msg.text.substring(0, 47) + '...'
                            : msg.text
                        : 'No text content';
                    messageToUser += `${index + 1}. From ${msg.userName || msg.userId || 'Unknown User'} in ${msg.channelName || msg.channelId || 'Unknown Channel'}: "${msgTextPreview}" (TS: ...${msg.id.slice(-6)})\n`;
                });
                if (messagesFound.length > 3) {
                    messageToUser += `And ${messagesFound.length - 3} more.\n`;
                }
                messageToUser +=
                    'Which one are you interested in? You can tell me the number or provide more details (like its timestamp).';
                logger.info(`[SlackCommandHandler] Multiple messages found, clarification needed.`);
                return messageToUser;
            }
            // If one message found, or if the action is FIND_INFO and we'll process the first/most_relevant one.
            targetMessage = messagesFound[0];
            logger.info(`[SlackCommandHandler] Single message identified for processing. TS: ${targetMessage.id}`);
            // Ensure full content is loaded if it was a search result (might be partial)
            if (targetMessage.channelId &&
                targetMessage.id &&
                !targetMessage.raw?.blocks) {
                // Heuristic: if blocks are missing, it might be a summary
                logger.debug(`[SlackCommandHandler] Search result for ${targetMessage.id} seems partial, fetching full content.`);
                const fullMessage = await readSlackMessage(userId, targetMessage.channelId, targetMessage.id);
                if (fullMessage)
                    targetMessage = fullMessage;
                else
                    logger.warn(`[SlackCommandHandler] Failed to fetch full content for partial message ${targetMessage.id}`);
            }
        }
        if (!targetMessage) {
            messageToUser =
                "I couldn't identify a specific Slack message to process with the information provided.";
            logger.warn(`[SlackCommandHandler] No target message identified after search/direct lookup.`);
            return messageToUser;
        }
        // Step 2: Perform the requested action on the targetMessage
        const messageDescForResponse = `the message from ${targetMessage.userName || targetMessage.userId || 'Unknown User'}` +
            (targetMessage.channelName
                ? ` in ${targetMessage.channelName}`
                : targetMessage.channelId
                    ? ` in channel ${targetMessage.channelId}`
                    : '');
        switch (actionRequested.actionType) {
            case 'GET_SLACK_MESSAGE_CONTENT':
                const bodyPreview = targetMessage.text
                    ? targetMessage.text.length > 200
                        ? targetMessage.text.substring(0, 197) + '...'
                        : targetMessage.text
                    : 'it appears to have no readable text content.';
                messageToUser = `The content of ${messageDescForResponse} (TS: ...${targetMessage.id.slice(-6)}) starts with: "${bodyPreview}".`;
                break;
            case 'FIND_INFO_IN_SLACK_MESSAGE':
                if (!targetMessage.text) {
                    messageToUser = `${messageDescForResponse} (TS: ...${targetMessage.id.slice(-6)}) doesn't seem to have any text content for me to analyze.`;
                    break;
                }
                const keywordsToExtract = actionRequested.infoKeywords || [];
                // const nlQuestion = actionRequested.naturalLanguageQuestion; // For future enhancement
                if (keywordsToExtract.length === 0) {
                    messageToUser = `You asked me to find specific information in ${messageDescForResponse}, but didn't specify what to look for.`;
                    break;
                }
                logger.info(`[SlackCommandHandler] Extracting info for keywords [${keywordsToExtract.join(', ')}] from message TS ${targetMessage.id}`);
                const extractedInfo = await extractInformationFromSlackMessage(targetMessage.text, keywordsToExtract);
                let foundAny = false;
                let responseParts = [
                    `Regarding ${messageDescForResponse} (TS: ...${targetMessage.id.slice(-6)}):`,
                ];
                for (const keyword of keywordsToExtract) {
                    const resultValue = extractedInfo[keyword];
                    if (resultValue) {
                        responseParts.push(`- For "${keyword}", I found: ${resultValue}.`);
                        foundAny = true;
                    }
                    else {
                        responseParts.push(`- I couldn't find specific information about "${keyword}".`);
                    }
                }
                if (!foundAny && keywordsToExtract.length > 0) {
                    messageToUser = `I scanned ${messageDescForResponse} (TS: ...${targetMessage.id.slice(-6)}) for information related to "${keywordsToExtract.join(', ')}", but couldn't find those specific details.`;
                }
                else {
                    messageToUser = responseParts.join('\n');
                }
                break;
            case 'GET_SLACK_MESSAGE_LINK':
                if (!targetMessage.channelId || !targetMessage.id) {
                    messageToUser = `I'm sorry, I don't have enough information (channel ID or message ID) to get a link for ${messageDescForResponse}.`;
                    break;
                }
                logger.info(`[SlackCommandHandler] Getting permalink for message TS ${targetMessage.id} in channel ${targetMessage.channelId}`);
                const permalink = await getSlackMessagePermalink(userId, targetMessage.channelId, targetMessage.id);
                if (permalink) {
                    messageToUser = `Here's the link to ${messageDescForResponse} (TS: ...${targetMessage.id.slice(-6)}): ${permalink}`;
                }
                else {
                    messageToUser = `I tried, but I couldn't get a direct link for ${messageDescForResponse} (TS: ...${targetMessage.id.slice(-6)}).`;
                }
                break;
            case 'SUMMARIZE_SLACK_MESSAGE':
                // TODO: Implement LLM-based summarization skill call for Slack messages
                messageToUser = `I can't summarize Slack messages yet, but I found ${messageDescForResponse} (TS: ...${targetMessage.id.slice(-6)}). Its content starts with: "${targetMessage.text?.substring(0, 100)}..."`;
                break;
            default:
                // @ts-expect-error actionType might be an unexpected value
                messageToUser = `I found ${messageDescForResponse} (TS: ...${targetMessage.id.slice(-6)}). I'm not sure how to handle the action: ${actionRequested.actionType}.`;
                logger.warn(`[SlackCommandHandler] Unknown actionType: ${actionRequested.actionType}`);
        }
        logger.info(`[SlackCommandHandler] Final response to user: "${messageToUser.substring(0, 100)}..."`);
        return messageToUser;
    }
    catch (error) {
        logger.error(`[SlackCommandHandler] Critical error in handleSlackInquiry for user ${userId}:`, error);
        messageToUser = `I encountered an issue while processing your Slack request: ${error.message || 'Unknown error'}. Please try again.`;
        return messageToUser;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xhY2tfY29tbWFuZF9oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2xhY2tfY29tbWFuZF9oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCw2QkFBNkIsR0FDOUIsTUFBTSx3Q0FBd0MsQ0FBQztBQUNoRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNuRSxPQUFPLEVBQ0wscUJBQXFCLEVBQ3JCLGdCQUFnQixFQUNoQixrQ0FBa0MsRUFDbEMsd0JBQXdCLEdBQ3pCLE1BQU0sdUJBQXVCLENBQUM7QUFFL0IsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBc0I3Qzs7O0dBR0c7QUFDSCxNQUFNLENBQUMsS0FBSyxVQUFVLGtCQUFrQixDQUN0QyxPQUE4QjtJQUU5QixNQUFNLEVBQ0osTUFBTSxFQUNOLG1CQUFtQixFQUNuQixlQUFlLEVBQ2YsZUFBZSxFQUNmLGVBQWUsR0FDaEIsR0FBRyxPQUFPLENBQUM7SUFDWixJQUFJLGFBQWEsR0FBRyxFQUFFLENBQUM7SUFFdkIsTUFBTSxDQUFDLEtBQUssQ0FDVix5REFBeUQsTUFBTSxHQUFHLEVBQ2xFLE9BQU8sQ0FDUixDQUFDO0lBRUYsSUFBSSxDQUFDO1FBQ0gsSUFBSSxhQUFhLEdBQXdCLElBQUksQ0FBQztRQUU5QyxzRUFBc0U7UUFDdEUsSUFBSSxlQUFlLElBQUksZUFBZSxFQUFFLENBQUM7WUFDdkMsTUFBTSxDQUFDLElBQUksQ0FDVCw2RUFBNkUsZUFBZSxRQUFRLGVBQWUsRUFBRSxDQUN0SCxDQUFDO1lBQ0YsYUFBYSxHQUFHLE1BQU0sZ0JBQWdCLENBQ3BDLE1BQU0sRUFDTixlQUFlLEVBQ2YsZUFBZSxDQUNoQixDQUFDO1lBQ0YsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO2dCQUNuQixhQUFhLEdBQUcsdUZBQXVGLGVBQWUsU0FBUyxlQUFlLElBQUksQ0FBQztnQkFDbkosTUFBTSxD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QUFDLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FDeEYsQ0FBQztRQUNGLE9BQU8sYUFBYSxDQUFDO0lBQ3ZCLENBQUM7SUFBQyxPQUFPLEtBQVUsRUFBRSxDQUFDO1FBQ3BCLE1BQU0sQ0FBQyxLQUFLLENBQ1YsdUVBQXVFLE1BQU0sR0FBRyxFQUNoRixLQUFLLENBQ04sQ0FBQztRQUNGLGFBQWEsR0FBRywrREFBK0QsS0FBSyxDQUFDLE9BQU8sSUFBSSxlQUFlLHFCQUFxQixDQUFDO1FBQ3JJLE9BQU8sYUFBYSxDQUFDO0lBQ3ZCLENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgU3RydWN0dXJlZFNsYWNrUXVlcnksXG4gIHVuZGVyc3RhbmRTbGFja1NlYXJjaFF1ZXJ5TExNLFxufSBmcm9tICcuLi9za2lsbHMvbGxtX3NsYWNrX3F1ZXJ5X3VuZGVyc3RhbmRlcic7XG5pbXBvcnQgeyBidWlsZFNsYWNrU2VhcmNoUXVlcnkgfSBmcm9tICcuLi9za2lsbHMvbmx1X3NsYWNrX2hlbHBlcic7XG5pbXBvcnQge1xuICBzZWFyY2hNeVNsYWNrTWVzc2FnZXMsXG4gIHJlYWRTbGFja01lc3NhZ2UsXG4gIGV4dHJhY3RJbmZvcm1hdGlvbkZyb21TbGFja01lc3NhZ2UsXG4gIGdldFNsYWNrTWVzc2FnZVBlcm1hbGluayxcbn0gZnJvbSAnLi4vc2tpbGxzL3NsYWNrU2tpbGxzJztcbmltcG9ydCB7IFNsYWNrTWVzc2FnZSB9IGZyb20gJy4uL3R5cGVzJzsgLy8gQXNzdW1pbmcgU2xhY2tNZXNzYWdlIGlzIGluIGdsb2JhbCB0eXBlc1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi4vLi4vX3V0aWxzL2xvZ2dlcic7XG5cbmV4cG9ydCB0eXBlIFNsYWNrQWN0aW9uVHlwZSA9XG4gIHwgJ0dFVF9TTEFDS19NRVNTQUdFX0NPTlRFTlQnXG4gIHwgJ0ZJTkRfSU5GT19JTl9TTEFDS19NRVNTQUdFJ1xuICB8ICdHRVRfU0xBQ0tfTUVTU0FHRV9MSU5LJ1xuICB8ICdTVU1NQVJJWkVfU0xBQ0tfTUVTU0FHRSc7IC8vIEZ1dHVyZSBjYXBhYmlsaXR5XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2xhY2tBY3Rpb25SZXF1ZXN0IHtcbiAgYWN0aW9uVHlwZTogU2xhY2tBY3Rpb25UeXBlO1xuICBpbmZvS2V5d29yZHM/OiBzdHJpbmdbXTsgLy8gRm9yIEZJTkRfSU5GT19JTl9TTEFDS19NRVNTQUdFXG4gIG5hdHVyYWxMYW5ndWFnZVF1ZXN0aW9uPzogc3RyaW5nOyAvLyBDb3VsZCBiZSB1c2VkIGJ5IExMTSBmb3IgbW9yZSBudWFuY2VkIGV4dHJhY3Rpb25cbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXJzZWRObHVTbGFja1JlcXVlc3Qge1xuICB1c2VySWQ6IHN0cmluZztcbiAgcmF3U2xhY2tTZWFyY2hRdWVyeTogc3RyaW5nOyAvLyBlLmcuLCBcIm1lc3NhZ2VzIGZyb20gSmFuZSBhYm91dCBRMyByZXBvcnQgbGFzdCB3ZWVrIGluICNnZW5lcmFsXCJcbiAgYWN0aW9uUmVxdWVzdGVkOiBTbGFja0FjdGlvblJlcXVlc3Q7XG4gIHRhcmdldENoYW5uZWxJZD86IHN0cmluZzsgLy8gT3B0aW9uYWw6IGlmIE5MVSBpZGVudGlmaWVkIGEgc3BlY2lmaWMgY2hhbm5lbCBJRFxuICB0YXJnZXRNZXNzYWdlVHM/OiBzdHJpbmc7IC8vIE9wdGlvbmFsOiBpZiBOTFUgaWRlbnRpZmllZCBhIHNwZWNpZmljIG1lc3NhZ2UgVFNcbn1cblxuLyoqXG4gKiBIYW5kbGVzIGEgZ2VuZXJpYyBTbGFjayBpbnF1aXJ5OiB1bmRlcnN0YW5kcyB0aGUgc2VhcmNoIHF1ZXJ5IHVzaW5nIGFuIExMTSxcbiAqIGZpbmRzIGEgbWVzc2FnZSwgYW5kIHBlcmZvcm1zIGFuIGFjdGlvbiBvbiBpdCAoZS5nLiwgZXh0cmFjdHMgaW5mbywgZ2V0cyBjb250ZW50LCBnZXRzIGxpbmspLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlU2xhY2tJbnF1aXJ5KFxuICByZXF1ZXN0OiBQYXJzZWRObHVTbGFja1JlcXVlc3Rcbik6IFByb21pc2U8c3RyaW5nPiB7XG4gIGNvbnN0IHtcbiAgICB1c2VySWQsXG4gICAgcmF3U2xhY2tTZWFyY2hRdWVyeSxcbiAgICBhY3Rpb25SZXF1ZXN0ZWQsXG4gICAgdGFyZ2V0Q2hhbm5lbElkLFxuICAgIHRhcmdldE1lc3NhZ2VUcyxcbiAgfSA9IHJlcXVlc3Q7XG4gIGxldCBtZXNzYWdlVG9Vc2VyID0gJyc7XG5cbiAgbG9nZ2VyLmRlYnVnKFxuICAgIGBbU2xhY2tDb21tYW5kSGFuZGxlcl0gSGFuZGxpbmcgU2xhY2sgaW5xdWlyeSBmb3IgdXNlciAke3VzZXJJZH06YCxcbiAgICByZXF1ZXN0XG4gICk7XG5cbiAgdHJ5IHtcbiAgICBsZXQgdGFyZ2V0TWVzc2FnZTogU2xhY2tNZXNzYWdlIHwgbnVsbCA9IG51bGw7XG5cbiAgICAvLyBTdGVwIDE6IE9idGFpbiB0aGUgdGFyZ2V0IG1lc3NhZ2UgKGVpdGhlciBieSBJRC9UUyBvciBieSBzZWFyY2hpbmcpXG4gICAgaWYgKHRhcmdldENoYW5uZWxJZCAmJiB0YXJnZXRNZXNzYWdlVHMpIHtcbiAgICAgIGxvZ2dlci5pbmZvKFxuICAgICAgICBgW1NsYWNrQ29tbWFuZEhhbmRsZXJdIEF0dGVtcHRpbmcgdG8gcmVhZCBzcGVjaWZpZWQgU2xhY2sgbWVzc2FnZTogQ2hhbm5lbCAke3RhcmdldENoYW5uZWxJZH0sIFRTICR7dGFyZ2V0TWVzc2FnZVRzfWBcbiAgICAgICk7XG4gICAgICB0YXJnZXRNZXNzYWdlID0gYXdhaXQgcmVhZFNsYWNrTWVzc2FnZShcbiAgICAgICAgdXNlcklkLFxuICAgICAgICB0YXJnZXRDaGFubmVsSWQsXG4gICAgICAgIHRhcmdldE1lc3NhZ2VUc1xuICAgICAgKTtcbiAgICAgIGlmICghdGFyZ2V0TWVzc2FnZSkge1xuICAgICAgICBtZXNzYWdlVG9Vc2VyID0gYFNvcnJ5LCBJIGNvdWxkbid0IGZpbmQgb3IgcmVhZCB0aGUgc3BlY2lmaWMgU2xhY2sgbWVzc2FnZSB5b3UgcmVmZXJyZWQgdG8gKENoYW5uZWw6ICR7dGFyZ2V0Q2hhbm5lbElkfSwgVFM6ICR7dGFyZ2V0TWVzc2FnZVRzfSkuYDtcbiAgICAgICAgbG9nZ2VyLndhcm4oXG4gICAgICAgICAgYFtTbGFja0NvbW1hbmRIYW5kbGVyXSBGYWlsZWQgdG8gcmVhZCBzcGVjaWZpYyBtZXNzYWdlOiAke21lc3NhZ2VUb1VzZXJ9YFxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gbWVzc2FnZVRvVXNlcjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbG9nZ2VyLmluZm8oXG4gICAgICAgIGBbU2xhY2tDb21tYW5kSGFuZGxlcl0gVW5kZXJzdGFuZGluZyBTbGFjayBzZWFyY2ggcXVlcnk6IFwiJHtyYXdTbGFja1NlYXJjaFF1ZXJ5fVwiYFxuICAgICAgKTtcbiAgICAgIGNvbnN0IHN0cnVjdHVyZWRTZWFyY2hQYXJhbXM6IFBhcnRpYWw8U3RydWN0dXJlZFNsYWNrUXVlcnk+ID1cbiAgICAgICAgYXdhaXQgdW5kZXJzdGFuZFNsYWNrU2VhcmNoUXVlcnlMTE0ocmF3U2xhY2tTZWFyY2hRdWVyeSk7XG5cbiAgICAgIGlmIChcbiAgICAgICAgT2JqZWN0LmtleXMoc3RydWN0dXJlZFNlYXJjaFBhcmFtcykubGVuZ3RoID09PSAwICYmXG4gICAgICAgICFyYXdTbGFja1NlYXJjaFF1ZXJ5LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2xhdGVzdCcpXG4gICAgICApIHtcbiAgICAgICAgLy8gSWYgTExNIHJldHVybnMgZW1wdHkgYW5kIGl0J3Mgbm90IGEgcXVlcnkgZm9yIFwibGF0ZXN0XCIgKHdoaWNoIG1pZ2h0IGltcGx5IGJyb2FkIHNlYXJjaClcbiAgICAgICAgbWVzc2FnZVRvVXNlciA9XG4gICAgICAgICAgXCJJIGNvdWxkbid0IGRldGVybWluZSBzcGVjaWZpYyBzZWFyY2ggY3JpdGVyaWEgZnJvbSB5b3VyIFNsYWNrIHJlcXVlc3QuIENvdWxkIHlvdSBiZSBtb3JlIHByZWNpc2U/XCI7XG4gICAgICAgIGxvZ2dlci53YXJuKFxuICAgICAgICAgIGBbU2xhY2tDb21tYW5kSGFuZGxlcl0gTExNIHJldHVybmVkIGVtcHR5IHNlYXJjaCBwYXJhbXMgZm9yIHF1ZXJ5OiBcIiR7cmF3U2xhY2tTZWFyY2hRdWVyeX1cImBcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2VUb1VzZXI7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNsYWNrQXBpUXVlcnlTdHJpbmcgPSBidWlsZFNsYWNrU2VhcmNoUXVlcnkoc3RydWN0dXJlZFNlYXJjaFBhcmFtcyk7XG4gICAgICBsb2dnZXIuaW5mbyhcbiAgICAgICAgYFtTbGFja0NvbW1hbmRIYW5kbGVyXSBTZWFyY2hpbmcgU2xhY2sgbWVzc2FnZXMgd2l0aCBMTE0tZGVyaXZlZCBxdWVyeTogXCIke3NsYWNrQXBpUXVlcnlTdHJpbmd9XCIgKExpbWl0IDUpYFxuICAgICAgKTtcbiAgICAgIC8vIFRPRE86IFRoZSBsaW1pdCBmb3Igc2VhcmNoTXlTbGFja01lc3NhZ2VzIG1pZ2h0IG5lZWQgdG8gYmUgYWRqdXN0ZWQgYmFzZWQgb24gY29udGV4dCBvciBOTFUuXG4gICAgICAvLyBJZiB0aGUgdXNlciBhc2tzIGZvciBcInRoZSBsYXRlc3QgbWVzc2FnZSBmcm9tIFhcIiwgbGltaXQgc2hvdWxkIGJlIDEuXG4gICAgICBjb25zdCBtZXNzYWdlc0ZvdW5kID0gYXdhaXQgc2VhcmNoTXlTbGFja01lc3NhZ2VzKFxuICAgICAgICB1c2VySWQsXG4gICAgICAgIHNsYWNrQXBpUXVlcnlTdHJpbmcsXG4gICAgICAgIDVcbiAgICAgICk7XG5cbiAgICAgIGlmICghbWVzc2FnZXNGb3VuZCB8fCBtZXNzYWdlc0ZvdW5kLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBtZXNzYWdlVG9Vc2VyID1cbiAgICAgICAgICBcIkkgY291bGRuJ3QgZmluZCBhbnkgU2xhY2sgbWVzc2FnZXMgbWF0Y2hpbmcgeW91ciBjcml0ZXJpYSBiYXNlZCBvbiBteSB1bmRlcnN0YW5kaW5nIG9mIHlvdXIgcmVxdWVzdC5cIjtcbiAgICAgICAgbG9nZ2VyLmluZm8oXG4gICAgICAgICAgYFtTbGFja0NvbW1hbmRIYW5kbGVyXSBObyBtZXNzYWdlcyBmb3VuZCBmb3IgcXVlcnk6IFwiJHtzbGFja0FwaVF1ZXJ5U3RyaW5nfVwiYFxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gbWVzc2FnZVRvVXNlcjtcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBtZXNzYWdlc0ZvdW5kLmxlbmd0aCA+IDEgJiZcbiAgICAgICAgYWN0aW9uUmVxdWVzdGVkLmFjdGlvblR5cGUgIT09ICdGSU5EX0lORk9fSU5fU0xBQ0tfTUVTU0FHRSdcbiAgICAgICkge1xuICAgICAgICAvLyBJZiBtdWx0aXBsZSBtZXNzYWdlcyBmb3VuZCBhbmQgdGhlIGFjdGlvbiBpc24ndCBhIGJyb2FkIHNlYXJjaCBmb3IgaW5mbyAod2hpY2ggbWlnaHQgcHJvY2VzcyBtdWx0aXBsZSksIGFzayBmb3IgY2xhcmlmaWNhdGlvbi5cbiAgICAgICAgLy8gRm9yIEZJTkRfSU5GT19JTl9TTEFDS19NRVNTQUdFLCB3ZSBtaWdodCBpdGVyYXRlIG9yIHBpY2sgdGhlIG1vc3QgcmVsZXZhbnQgb25lIGxhdGVyLlxuICAgICAgICBtZXNzYWdlVG9Vc2VyID1cbiAgICAgICAgICAnSSBmb3VuZCBhIGZldyBTbGFjayBtZXNzYWdlcyBtYXRjaGluZyB5b3VyIGNyaXRlcmlhOlxcbic7XG4gICAgICAgIG1lc3NhZ2VzRm91bmQuc2xpY2UoMCwgMykuZm9yRWFjaCgobXNnLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGNvbnN0IG1zZ1RleHRQcmV2aWV3ID0gbXNnLnRleHRcbiAgICAgICAgICAgID8gbXNnLnRleHQubGVuZ3RoID4gNTBcbiAgICAgICAgICAgICAgPyBtc2cudGV4dC5zdWJzdHJpbmcoMCwgNDcpICsgJy4uLidcbiAgICAgICAgICAgICAgOiBtc2cudGV4dFxuICAgICAgICAgICAgOiAnTm8gdGV4dCBjb250ZW50JztcbiAgICAgICAgICBtZXNzYWdlVG9Vc2VyICs9IGAke2luZGV4ICsgMX0uIEZyb20gJHttc2cudXNlck5hbWUgfHwgbXNnLnVzZXJJZCB8fCAnVW5rbm93biBVc2VyJ30gaW4gJHttc2cuY2hhbm5lbE5hbWUgfHwgbXNnLmNoYW5uZWxJZCB8fCAnVW5rbm93biBDaGFubmVsJ306IFwiJHttc2dUZXh0UHJldmlld31cIiAoVFM6IC4uLiR7bXNnLmlkLnNsaWNlKC02KX0pXFxuYDtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChtZXNzYWdlc0ZvdW5kLmxlbmd0aCA+IDMpIHtcbiAgICAgICAgICBtZXNzYWdlVG9Vc2VyICs9IGBBbmQgJHttZXNzYWdlc0ZvdW5kLmxlbmd0aCAtIDN9IG1vcmUuXFxuYDtcbiAgICAgICAgfVxuICAgICAgICBtZXNzYWdlVG9Vc2VyICs9XG4gICAgICAgICAgJ1doaWNoIG9uZSBhcmUgeW91IGludGVyZXN0ZWQgaW4/IFlvdSBjYW4gdGVsbCBtZSB0aGUgbnVtYmVyIG9yIHByb3ZpZGUgbW9yZSBkZXRhaWxzIChsaWtlIGl0cyB0aW1lc3RhbXApLic7XG4gICAgICAgIGxvZ2dlci5pbmZvKFxuICAgICAgICAgIGBbU2xhY2tDb21tYW5kSGFuZGxlcl0gTXVsdGlwbGUgbWVzc2FnZXMgZm91bmQsIGNsYXJpZmljYXRpb24gbmVlZGVkLmBcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2VUb1VzZXI7XG4gICAgICB9XG4gICAgICAvLyBJZiBvbmUgbWVzc2FnZSBmb3VuZCwgb3IgaWYgdGhlIGFjdGlvbiBpcyBGSU5EX0lORk8gYW5kIHdlJ2xsIHByb2Nlc3MgdGhlIGZpcnN0L21vc3RfcmVsZXZhbnQgb25lLlxuICAgICAgdGFyZ2V0TWVzc2FnZSA9IG1lc3NhZ2VzRm91bmRbMF07XG4gICAgICBsb2dnZXIuaW5mbyhcbiAgICAgICAgYFtTbGFja0NvbW1hbmRIYW5kbGVyXSBTaW5nbGUgbWVzc2FnZSBpZGVudGlmaWVkIGZvciBwcm9jZXNzaW5nLiBUUzogJHt0YXJnZXRNZXNzYWdlLmlkfWBcbiAgICAgICk7XG4gICAgICAvLyBFbnN1cmUgZnVsbCBjb250ZW50IGlzIGxvYWRlZCBpZiBpdCB3YXMgYSBzZWFyY2ggcmVzdWx0IChtaWdodCBiZSBwYXJ0aWFsKVxuICAgICAgaWYgKFxuICAgICAgICB0YXJnZXRNZXNzYWdlLmNoYW5uZWxJZCAmJlxuICAgICAgICB0YXJnZXRNZXNzYWdlLmlkICYmXG4gICAgICAgICF0YXJnZXRNZXNzYWdlLnJhdz8uYmxvY2tzXG4gICAgICApIHtcbiAgICAgICAgLy8gSGV1cmlzdGljOiBpZiBibG9ja3MgYXJlIG1pc3NpbmcsIGl0IG1pZ2h0IGJlIGEgc3VtbWFyeVxuICAgICAgICBsb2dnZXIuZGVidWcoXG4gICAgICAgICAgYFtTbGFja0NvbW1hbmRIYW5kbGVyXSBTZWFyY2ggcmVzdWx0IGZvciAke3RhcmdldE1lc3NhZ2UuaWR9IHNlZW1zIHBhcnRpYWwsIGZldGNoaW5nIGZ1bGwgY29udGVudC5gXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGZ1bGxNZXNzYWdlID0gYXdhaXQgcmVhZFNsYWNrTWVzc2FnZShcbiAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgdGFyZ2V0TWVzc2FnZS5jaGFubmVsSWQsXG4gICAgICAgICAgdGFyZ2V0TWVzc2FnZS5pZFxuICAgICAgICApO1xuICAgICAgICBpZiAoZnVsbE1lc3NhZ2UpIHRhcmdldE1lc3NhZ2UgPSBmdWxsTWVzc2FnZTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGxvZ2dlci53YXJuKFxuICAgICAgICAgICAgYFtTbGFja0NvbW1hbmRIYW5kbGVyXSBGYWlsZWQgdG8gZmV0Y2ggZnVsbCBjb250ZW50IGZvciBwYXJ0aWFsIG1lc3NhZ2UgJHt0YXJnZXRNZXNzYWdlLmlkfWBcbiAgICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdGFyZ2V0TWVzc2FnZSkge1xuICAgICAgbWVzc2FnZVRvVXNlciA9XG4gICAgICAgIFwiSSBjb3VsZG4ndCBpZGVudGlmeSBhIHNwZWNpZmljIFNsYWNrIG1lc3NhZ2UgdG8gcHJvY2VzcyB3aXRoIHRoZSBpbmZvcm1hdGlvbiBwcm92aWRlZC5cIjtcbiAgICAgIGxvZ2dlci53YXJuKFxuICAgICAgICBgW1NsYWNrQ29tbWFuZEhhbmRsZXJdIE5vIHRhcmdldCBtZXNzYWdlIGlkZW50aWZpZWQgYWZ0ZXIgc2VhcmNoL2RpcmVjdCBsb29rdXAuYFxuICAgICAgKTtcbiAgICAgIHJldHVybiBtZXNzYWdlVG9Vc2VyO1xuICAgIH1cblxuICAgIC8vIFN0ZXAgMjogUGVyZm9ybSB0aGUgcmVxdWVzdGVkIGFjdGlvbiBvbiB0aGUgdGFyZ2V0TWVzc2FnZVxuICAgIGNvbnN0IG1lc3NhZ2VEZXNjRm9yUmVzcG9uc2UgPVxuICAgICAgYHRoZSBtZXNzYWdlIGZyb20gJHt0YXJnZXRNZXNzYWdlLnVzZXJOYW1lIHx8IHRhcmdldE1lc3NhZ2UudXNlcklkIHx8ICdVbmtub3duIFVzZXInfWAgK1xuICAgICAgKHRhcmdldE1lc3NhZ2UuY2hhbm5lbE5hbWVcbiAgICAgICAgPyBgIGluICR7dGFyZ2V0TWVzc2FnZS5jaGFubmVsTmFtZX1gXG4gICAgICAgIDogdGFyZ2V0TWVzc2FnZS5jaGFubmVsSWRcbiAgICAgICAgICA/IGAgaW4gY2hhbm5lbCAke3RhcmdldE1lc3NhZ2UuY2hhbm5lbElkfWBcbiAgICAgICAgICA6ICcnKTtcblxuICAgIHN3aXRjaCAoYWN0aW9uUmVxdWVzdGVkLmFjdGlvblR5cGUpIHtcbiAgICAgIGNhc2UgJ0dFVF9TTEFDS19NRVNTQUdFX0NPTlRFTlQnOlxuICAgICAgICBjb25zdCBib2R5UHJldmlldyA9IHRhcmdldE1lc3NhZ2UudGV4dFxuICAgICAgICAgID8gdGFyZ2V0TWVzc2FnZS50ZXh0Lmxlbmd0aCA+IDIwMFxuICAgICAgICAgICAgPyB0YXJnZXRNZXNzYWdlLnRleHQuc3Vic3RyaW5nKDAsIDE5NykgKyAnLi4uJ1xuICAgICAgICAgICAgOiB0YXJnZXRNZXNzYWdlLnRleHRcbiAgICAgICAgICA6ICdpdCBhcHBlYXJzIHRvIGhhdmUgbm8gcmVhZGFibGUgdGV4dCBjb250ZW50Lic7XG4gICAgICAgIG1lc3NhZ2VUb1VzZXIgPSBgVGhlIGNvbnRlbnQgb2YgJHttZXNzYWdlRGVzY0ZvclJlc3BvbnNlfSAoVFM6IC4uLiR7dGFyZ2V0TWVzc2FnZS5pZC5zbGljZSgtNil9KSBzdGFydHMgd2l0aDogXCIke2JvZHlQcmV2aWV3fVwiLmA7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdGSU5EX0lORk9fSU5fU0xBQ0tfTUVTU0FHRSc6XG4gICAgICAgIGlmICghdGFyZ2V0TWVzc2FnZS50ZXh0KSB7XG4gICAgICAgICAgbWVzc2FnZVRvVXNlciA9IGAke21lc3NhZ2VEZXNjRm9yUmVzcG9uc2V9IChUUzogLi4uJHt0YXJnZXRNZXNzYWdlLmlkLnNsaWNlKC02KX0pIGRvZXNuJ3Qgc2VlbSB0byBoYXZlIGFueSB0ZXh0IGNvbnRlbnQgZm9yIG1lIHRvIGFuYWx5emUuYDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBrZXl3b3Jkc1RvRXh0cmFjdCA9IGFjdGlvblJlcXVlc3RlZC5pbmZvS2V5d29yZHMgfHwgW107XG4gICAgICAgIC8vIGNvbnN0IG5sUXVlc3Rpb24gPSBhY3Rpb25SZXF1ZXN0ZWQubmF0dXJhbExhbmd1YWdlUXVlc3Rpb247IC8vIEZvciBmdXR1cmUgZW5oYW5jZW1lbnRcblxuICAgICAgICBpZiAoa2V5d29yZHNUb0V4dHJhY3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgbWVzc2FnZVRvVXNlciA9IGBZb3UgYXNrZWQgbWUgdG8gZmluZCBzcGVjaWZpYyBpbmZvcm1hdGlvbiBpbiAke21lc3NhZ2VEZXNjRm9yUmVzcG9uc2V9LCBidXQgZGlkbid0IHNwZWNpZnkgd2hhdCB0byBsb29rIGZvci5gO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGxvZ2dlci5pbmZvKFxuICAgICAgICAgIGBbU2xhY2tDb21tYW5kSGFuZGxlcl0gRXh0cmFjdGluZyBpbmZvIGZvciBrZXl3b3JkcyBbJHtrZXl3b3Jkc1RvRXh0cmFjdC5qb2luKCcsICcpfV0gZnJvbSBtZXNzYWdlIFRTICR7dGFyZ2V0TWVzc2FnZS5pZH1gXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGV4dHJhY3RlZEluZm8gPSBhd2FpdCBleHRyYWN0SW5mb3JtYXRpb25Gcm9tU2xhY2tNZXNzYWdlKFxuICAgICAgICAgIHRhcmdldE1lc3NhZ2UudGV4dCxcbiAgICAgICAgICBrZXl3b3Jkc1RvRXh0cmFjdFxuICAgICAgICApO1xuICAgICAgICBsZXQgZm91bmRBbnkgPSBmYWxzZTtcbiAgICAgICAgbGV0IHJlc3BvbnNlUGFydHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgIGBSZWdhcmRpbmcgJHttZXNzYWdlRGVzY0ZvclJlc3BvbnNlfSAoVFM6IC4uLiR7dGFyZ2V0TWVzc2FnZS5pZC5zbGljZSgtNil9KTpgLFxuICAgICAgICBdO1xuXG4gICAgICAgIGZvciAoY29uc3Qga2V5d29yZCBvZiBrZXl3b3Jkc1RvRXh0cmFjdCkge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdFZhbHVlID0gZXh0cmFjdGVkSW5mb1trZXl3b3JkXTtcbiAgICAgICAgICBpZiAocmVzdWx0VmFsdWUpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlUGFydHMucHVzaChgLSBGb3IgXCIke2tleXdvcmR9XCIsIEkgZm91bmQ6ICR7cmVzdWx0VmFsdWV9LmApO1xuICAgICAgICAgICAgZm91bmRBbnkgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNwb25zZVBhcnRzLnB1c2goXG4gICAgICAgICAgICAgIGAtIEkgY291bGRuJ3QgZmluZCBzcGVjaWZpYyBpbmZvcm1hdGlvbiBhYm91dCBcIiR7a2V5d29yZH1cIi5gXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZvdW5kQW55ICYmIGtleXdvcmRzVG9FeHRyYWN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBtZXNzYWdlVG9Vc2VyID0gYEkgc2Nhbm5lZCAke21lc3NhZ2VEZXNjRm9yUmVzcG9uc2V9IChUUzogLi4uJHt0YXJnZXRNZXNzYWdlLmlkLnNsaWNlKC02KX0pIGZvciBpbmZvcm1hdGlvbiByZWxhdGVkIHRvIFwiJHtrZXl3b3Jkc1RvRXh0cmFjdC5qb2luKCcsICcpfVwiLCBidXQgY291bGRuJ3QgZmluZCB0aG9zZSBzcGVjaWZpYyBkZXRhaWxzLmA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWVzc2FnZVRvVXNlciA9IHJlc3BvbnNlUGFydHMuam9pbignXFxuJyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ0dFVF9TTEFDS19NRVNTQUdFX0xJTksnOlxuICAgICAgICBpZiAoIXRhcmdldE1lc3NhZ2UuY2hhbm5lbElkIHx8ICF0YXJnZXRNZXNzYWdlLmlkKSB7XG4gICAgICAgICAgbWVzc2FnZVRvVXNlciA9IGBJJ20gc29ycnksIEkgZG9uJ3QgaGF2ZSBlbm91Z2ggaW5mb3JtYXRpb24gKGNoYW5uZWwgSUQgb3IgbWVzc2FnZSBJRCkgdG8gZ2V0IGEgbGluayBmb3IgJHttZXNzYWdlRGVzY0ZvclJlc3BvbnNlfS5gO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGxvZ2dlci5pbmZvKFxuICAgICAgICAgIGBbU2xhY2tDb21tYW5kSGFuZGxlcl0gR2V0dGluZyBwZXJtYWxpbmsgZm9yIG1lc3NhZ2UgVFMgJHt0YXJnZXRNZXNzYWdlLmlkfSBpbiBjaGFubmVsICR7dGFyZ2V0TWVzc2FnZS5jaGFubmVsSWR9YFxuICAgICAgICApO1xuICAgICAgICBjb25zdCBwZXJtYWxpbmsgPSBhd2FpdCBnZXRTbGFja01lc3NhZ2VQZXJtYWxpbmsoXG4gICAgICAgICAgdXNlcklkLFxuICAgICAgICAgIHRhcmdldE1lc3NhZ2UuY2hhbm5lbElkLFxuICAgICAgICAgIHRhcmdldE1lc3NhZ2UuaWRcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHBlcm1hbGluaykge1xuICAgICAgICAgIG1lc3NhZ2VUb1VzZXIgPSBgSGVyZSdzIHRoZSBsaW5rIHRvICR7bWVzc2FnZURlc2NGb3JSZXNwb25zZX0gKFRTOiAuLi4ke3RhcmdldE1lc3NhZ2UuaWQuc2xpY2UoLTYpfSk6ICR7cGVybWFsaW5rfWA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWVzc2FnZVRvVXNlciA9IGBJIHRyaWVkLCBidXQgSSBjb3VsZG4ndCBnZXQgYSBkaXJlY3QgbGluayBmb3IgJHttZXNzYWdlRGVzY0ZvclJlc3BvbnNlfSAoVFM6IC4uLiR7dGFyZ2V0TWVzc2FnZS5pZC5zbGljZSgtNil9KS5gO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdTVU1NQVJJWkVfU0xBQ0tfTUVTU0FHRSc6XG4gICAgICAgIC8vIFRPRE86IEltcGxlbWVudCBMTE0tYmFzZWQgc3VtbWFyaXphdGlvbiBza2lsbCBjYWxsIGZvciBTbGFjayBtZXNzYWdlc1xuICAgICAgICBtZXNzYWdlVG9Vc2VyID0gYEkgY2FuJ3Qgc3VtbWFyaXplIFNsYWNrIG1lc3NhZ2VzIHlldCwgYnV0IEkgZm91bmQgJHttZXNzYWdlRGVzY0ZvclJlc3BvbnNlfSAoVFM6IC4uLiR7dGFyZ2V0TWVzc2FnZS5pZC5zbGljZSgtNil9KS4gSXRzIGNvbnRlbnQgc3RhcnRzIHdpdGg6IFwiJHt0YXJnZXRNZXNzYWdlLnRleHQ/LnN1YnN0cmluZygwLCAxMDApfS4uLlwiYDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgYWN0aW9uVHlwZSBtaWdodCBiZSBhbiB1bmV4cGVjdGVkIHZhbHVlXG4gICAgICAgIG1lc3NhZ2VUb1VzZXIgPSBgSSBmb3VuZCAke21lc3NhZ2VEZXNjRm9yUmVzcG9uc2V9IChUUzogLi4uJHt0YXJnZXRNZXNzYWdlLmlkLnNsaWNlKC02KX0pLiBJJ20gbm90IHN1cmUgaG93IHRvIGhhbmRsZSB0aGUgYWN0aW9uOiAke2FjdGlvblJlcXVlc3RlZC5hY3Rpb25UeXBlfS5gO1xuICAgICAgICBsb2dnZXIud2FybihcbiAgICAgICAgICBgW1NsYWNrQ29tbWFuZEhhbmRsZXJdIFVua25vd24gYWN0aW9uVHlwZTogJHthY3Rpb25SZXF1ZXN0ZWQuYWN0aW9uVHlwZX1gXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgbG9nZ2VyLmluZm8oXG4gICAgICBgW1NsYWNrQ29tbWFuZEhhbmRsZXJdIEZpbmFsIHJlc3BvbnNlIHRvIHVzZXI6IFwiJHttZXNzYWdlVG9Vc2VyLnN1YnN0cmluZygwLCAxMDApfS4uLlwiYFxuICAgICk7XG4gICAgcmV0dXJuIG1lc3NhZ2VUb1VzZXI7XG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICBsb2dnZXIuZXJyb3IoXG4gICAgICBgW1NsYWNrQ29tbWFuZEhhbmRsZXJdIENyaXRpY2FsIGVycm9yIGluIGhhbmRsZVNsYWNrSW5xdWlyeSBmb3IgdXNlciAke3VzZXJJZH06YCxcbiAgICAgIGVycm9yXG4gICAgKTtcbiAgICBtZXNzYWdlVG9Vc2VyID0gYEkgZW5jb3VudGVyZWQgYW4gaXNzdWUgd2hpbGUgcHJvY2Vzc2luZyB5b3VyIFNsYWNrIHJlcXVlc3Q6ICR7ZXJyb3IubWVzc2FnZSB8fCAnVW5rbm93biBlcnJvcid9LiBQbGVhc2UgdHJ5IGFnYWluLmA7XG4gICAgcmV0dXJuIG1lc3NhZ2VUb1VzZXI7XG4gIH1cbn1cbiJdfQ==