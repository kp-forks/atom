import { handleCreateNotionTask } from '../skills/notionTaskSkills'; // The actual skill implementation
import { logger } from '../../_utils/logger';
/**
 * Handles the "CreateTask" intent.
 * Calls the skill to create a Notion task and formats the result for the user.
 *
 * @param userId The ID of the user.
 * @param entities The NLU entities extracted for the CreateTask intent.
 * @returns A promise that resolves to a user-facing string response.
 */
export async function handleCreateTaskRequest(userId, nluEntities, integrations) {
    logger.info(`[CreateNotionTaskCmdHandler] Handling request for user ${userId} to create task.`);
    logger.debug(`[CreateNotionTaskCmdHandler] Received NLU entities: ${JSON.stringify(entities)}`);
    if (!entities.task_description) {
        logger.warn(`[CreateNotionTaskCmdHandler] Missing task_description.`);
        return 'Please provide a description for the task you want to create.';
    }
    try {
        // The skill `handleCreateNotionTask` expects entities matching its internal CreateTaskNluEntities.
        // Ensure the structure passed matches.
        const skillResponse = await handleCreateNotionTask(userId, {
            task_description: entities.task_description,
            due_date_text: entities.due_date_text,
            priority_text: entities.priority_text,
            list_name_text: entities.list_name_text,
        }, integrations);
        if (skillResponse.ok && skillResponse.data?.userMessage) {
            logger.info(`[CreateNotionTaskCmdHandler] Task creation successful: ${skillResponse.data.userMessage}`);
            return skillResponse.data.userMessage;
        }
        else {
            const errorMsg = skillResponse.error?.message ||
                skillResponse.data?.userMessage ||
                'Unknown error from skill';
            logger.error(`[CreateNotionTaskCmdHandler] Skill execution failed or task creation unsuccessful: ${errorMsg}`, skillResponse.error);
            return `I couldn't create the task. ${errorMsg}`;
        }
    }
    catch (error) {
        logger.error(`[CreateNotionTaskCmdHandler] Critical error handling request: ${error.message}`, error);
        return `I encountered an unexpected critical error while trying to create the task: ${error.message}.`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlTm90aW9uVGFza0NvbW1hbmRIYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY3JlYXRlTm90aW9uVGFza0NvbW1hbmRIYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDLENBQUMsa0NBQWtDO0FBQ3ZHLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQVk3Qzs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxDQUFDLEtBQUssVUFBVSx1QkFBdUIsQ0FDM0MsTUFBYyxFQUNkLFdBQXlDLEVBQ3pDLFlBQWlCO0lBRWpCLE1BQU0sQ0FBQyxJQUFJLENBQ1QsMERBQTBELE1BQU0sa0JBQWtCLENBQ25GLENBQUM7SUFDRixNQUFNLENBQUMsS0FBSyxDQUNWLHVEQUF1RCxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQ2xGLENBQUM7SUFFRixJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDL0IsTUFBTSxDQUFDLElBQUksQ0FBQyx3REFBd0QsQ0FBQyxDQUFDO1FBQ3RFLE9BQU8sK0RBQStELENBQUM7SUFDekUsQ0FBQztJQUVELElBQUksQ0FBQztRQUNILG1HQUFtRztRQUNuRyx1Q0FBdUM7UUFDdkMsTUFBTSxhQUFhLEdBRWYsTUFBTSxzQkFBc0IsQ0FDOUIsTUFBTSxFQUNOO1lBQ0UsZ0JBQWdCLEVBQUUsUUFBUSxDQUFDLGdCQUFnQjtZQUMzQyxhQUFhLEVBQUUsUUFBUSxDQUFDLGFBQWE7WUFDckMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxhQUFhO1lBQ3JDLGNBQWMsRUFBRSxRQUFRLENBQUMsY0FBYztTQUN4QyxFQUNELFlBQVksQ0FDYixDQUFDO1FBRUYsSUFBSSxhQUFhLENBQUMsRUFBRSxJQUFJLGFBQWEsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLENBQUM7WUFDeEQsTUFBTSxDQUFDLElBQUksQ0FDVCwwREFBMEQsYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FDM0YsQ0FBQztZQUNGLE9BQU8sYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDeEMsQ0FBQzthQUFNLENBQUM7WUFDTixNQUFNLFFBQVEsR0FDWixhQUFhLENBQUMsS0FBSyxFQUFFLE9BQU87Z0JBQzVCLGFBQWEsQ0FBQyxJQUFJLEVBQUUsV0FBVztnQkFDL0IsMEJBQTBCLENBQUM7WUFDN0IsTUFBTSxDQUFDLEtBQUssQ0FDVixzRkFBc0YsUUFBUSxFQUFFLEVBQ2hHLGFBQWEsQ0FBQyxLQUFLLENBQ3BCLENBQUM7WUFDRixPQUFPLCtCQUErQixRQUFRLEVBQUUsQ0FBQztRQUNuRCxDQUFDO0lBQ0gsQ0FBQztJQUFDLE9BQU8sS0FBVSxFQUFFLENBQUM7UUFDcEIsTUFBTSxDQUFDLEtBQUssQ0FDVixpRUFBaUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUNoRixLQUFLLENBQ04sQ0FBQztRQUNGLE9BQU8sK0VBQStFLEtBQUssQ0FBQyxPQUFPLEdBQUcsQ0FBQztJQUN6RyxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIC8vIEFzc3VtaW5nIE5MVSBlbnRpdGllcyBmb3IgZ2VuZXJhbCB0YXNrIGNyZWF0aW9uIHdpbGwgYmUgc2ltaWxhciBvciBhIG5ldyB0eXBlLlxuICAvLyBGb3Igbm93LCB1c2luZyBhIGdlbmVyaWMgUmVjb3JkPHN0cmluZywgYW55PiBhbmQgd2lsbCBjYXN0L3ZhbGlkYXRlIGluc2lkZS5cbiAgLy8gSWRlYWxseSwgYSBDcmVhdGVUYXNrTmx1RW50aXRpZXMgdHlwZSB3b3VsZCBiZSBkZWZpbmVkIGluIHR5cGVzLnRzXG4gIFNraWxsUmVzcG9uc2UsXG4gIENyZWF0ZVRhc2tEYXRhLFxufSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBoYW5kbGVDcmVhdGVOb3Rpb25UYXNrIH0gZnJvbSAnLi4vc2tpbGxzL25vdGlvblRhc2tTa2lsbHMnOyAvLyBUaGUgYWN0dWFsIHNraWxsIGltcGxlbWVudGF0aW9uXG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuLi8uLi9fdXRpbHMvbG9nZ2VyJztcblxuLy8gTkxVIEVudGl0aWVzIGV4cGVjdGVkIGJ5IHRoaXMgaGFuZGxlciAoc2hvdWxkIGFsaWduIHdpdGggd2hhdCBOTFUgcHJvdmlkZXMgZm9yIFwiQ3JlYXRlVGFza1wiIGludGVudClcbi8vIFRoaXMgaXMgYmFzZWQgb24gdGhlIGNvbmNlcHR1YWwgQ3JlYXRlVGFza05sdUVudGl0aWVzIGZyb20gbm90aW9uVGFza1NraWxscy50c1xuaW50ZXJmYWNlIENyZWF0ZVRhc2tIYW5kbGVyTmx1RW50aXRpZXMge1xuICB0YXNrX2Rlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIGR1ZV9kYXRlX3RleHQ/OiBzdHJpbmc7XG4gIHByaW9yaXR5X3RleHQ/OiBzdHJpbmc7XG4gIGxpc3RfbmFtZV90ZXh0Pzogc3RyaW5nO1xuICAvLyBhbnkgb3RoZXIgZW50aXRpZXMgTkxVIG1pZ2h0IHByb3ZpZGUgZm9yIHRoaXMgaW50ZW50XG59XG5cbi8qKlxuICogSGFuZGxlcyB0aGUgXCJDcmVhdGVUYXNrXCIgaW50ZW50LlxuICogQ2FsbHMgdGhlIHNraWxsIHRvIGNyZWF0ZSBhIE5vdGlvbiB0YXNrIGFuZCBmb3JtYXRzIHRoZSByZXN1bHQgZm9yIHRoZSB1c2VyLlxuICpcbiAqIEBwYXJhbSB1c2VySWQgVGhlIElEIG9mIHRoZSB1c2VyLlxuICogQHBhcmFtIGVudGl0aWVzIFRoZSBOTFUgZW50aXRpZXMgZXh0cmFjdGVkIGZvciB0aGUgQ3JlYXRlVGFzayBpbnRlbnQuXG4gKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIHVzZXItZmFjaW5nIHN0cmluZyByZXNwb25zZS5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUNyZWF0ZVRhc2tSZXF1ZXN0KFxuICB1c2VySWQ6IHN0cmluZyxcbiAgbmx1RW50aXRpZXM6IENyZWF0ZVRhc2tIYW5kbGVyTmx1RW50aXRpZXMsXG4gIGludGVncmF0aW9uczogYW55XG4pOiBQcm9taXNlPHN0cmluZz4ge1xuICBsb2dnZXIuaW5mbyhcbiAgICBgW0NyZWF0ZU5vdGlvblRhc2tDbWRIYW5kbGVyXSBIYW5kbGluZyByZXF1ZXN0IGZvciB1c2VyICR7dXNlcklkfSB0byBjcmVhdGUgdGFzay5gXG4gICk7XG4gIGxvZ2dlci5kZWJ1ZyhcbiAgICBgW0NyZWF0ZU5vdGlvblRhc2tDbWRIYW5kbGVyXSBSZWNlaXZlZCBOTFUgZW50aXRpZXM6ICR7SlNPTi5zdHJpbmdpZnkoZW50aXRpZXMpfWBcbiAgKTtcblxuICBpZiAoIWVudGl0aWVzLnRhc2tfZGVzY3JpcHRpb24pIHtcbiAgICBsb2dnZXIud2FybihgW0NyZWF0ZU5vdGlvblRhc2tDbWRIYW5kbGVyXSBNaXNzaW5nIHRhc2tfZGVzY3JpcHRpb24uYCk7XG4gICAgcmV0dXJuICdQbGVhc2UgcHJvdmlkZSBhIGRlc2NyaXB0aW9uIGZvciB0aGUgdGFzayB5b3Ugd2FudCB0byBjcmVhdGUuJztcbiAgfVxuXG4gIHRyeSB7XG4gICAgLy8gVGhlIHNraWxsIGBoYW5kbGVDcmVhdGVOb3Rpb25UYXNrYCBleHBlY3RzIGVudGl0aWVzIG1hdGNoaW5nIGl0cyBpbnRlcm5hbCBDcmVhdGVUYXNrTmx1RW50aXRpZXMuXG4gICAgLy8gRW5zdXJlIHRoZSBzdHJ1Y3R1cmUgcGFzc2VkIG1hdGNoZXMuXG4gICAgY29uc3Qgc2tpbGxSZXNwb25zZTogU2tpbGxSZXNwb25zZTxcbiAgICAgIENyZWF0ZVRhc2tEYXRhICYgeyB1c2VyTWVzc2FnZTogc3RyaW5nIH1cbiAgICA+ID0gYXdhaXQgaGFuZGxlQ3JlYXRlTm90aW9uVGFzayhcbiAgICAgIHVzZXJJZCxcbiAgICAgIHtcbiAgICAgICAgdGFza19kZXNjcmlwdGlvbjogZW50aXRpZXMudGFza19kZXNjcmlwdGlvbixcbiAgICAgICAgZHVlX2RhdGVfdGV4dDogZW50aXRpZXMuZHVlX2RhdGVfdGV4dCxcbiAgICAgICAgcHJpb3JpdHlfdGV4dDogZW50aXRpZXMucHJpb3JpdHlfdGV4dCxcbiAgICAgICAgbGlzdF9uYW1lX3RleHQ6IGVudGl0aWVzLmxpc3RfbmFtZV90ZXh0LFxuICAgICAgfSxcbiAgICAgIGludGVncmF0aW9uc1xuICAgICk7XG5cbiAgICBpZiAoc2tpbGxSZXNwb25zZS5vayAmJiBza2lsbFJlc3BvbnNlLmRhdGE/LnVzZXJNZXNzYWdlKSB7XG4gICAgICBsb2dnZXIuaW5mbyhcbiAgICAgICAgYFtDcmVhdGVOb3Rpb25UYXNrQ21kSGFuZGxlcl0gVGFzayBjcmVhdGlvbiBzdWNjZXNzZnVsOiAke3NraWxsUmVzcG9uc2UuZGF0YS51c2VyTWVzc2FnZX1gXG4gICAgICApO1xuICAgICAgcmV0dXJuIHNraWxsUmVzcG9uc2UuZGF0YS51c2VyTWVzc2FnZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZXJyb3JNc2cgPVxuICAgICAgICBza2lsbFJlc3BvbnNlLmVycm9yPy5tZXNzYWdlIHx8XG4gICAgICAgIHNraWxsUmVzcG9uc2UuZGF0YT8udXNlck1lc3NhZ2UgfHxcbiAgICAgICAgJ1Vua25vd24gZXJyb3IgZnJvbSBza2lsbCc7XG4gICAgICBsb2dnZXIuZXJyb3IoXG4gICAgICAgIGBbQ3JlYXRlTm90aW9uVGFza0NtZEhhbmRsZXJdIFNraWxsIGV4ZWN1dGlvbiBmYWlsZWQgb3IgdGFzayBjcmVhdGlvbiB1bnN1Y2Nlc3NmdWw6ICR7ZXJyb3JNc2d9YCxcbiAgICAgICAgc2tpbGxSZXNwb25zZS5lcnJvclxuICAgICAgKTtcbiAgICAgIHJldHVybiBgSSBjb3VsZG4ndCBjcmVhdGUgdGhlIHRhc2suICR7ZXJyb3JNc2d9YDtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICBsb2dnZXIuZXJyb3IoXG4gICAgICBgW0NyZWF0ZU5vdGlvblRhc2tDbWRIYW5kbGVyXSBDcml0aWNhbCBlcnJvciBoYW5kbGluZyByZXF1ZXN0OiAke2Vycm9yLm1lc3NhZ2V9YCxcbiAgICAgIGVycm9yXG4gICAgKTtcbiAgICByZXR1cm4gYEkgZW5jb3VudGVyZWQgYW4gdW5leHBlY3RlZCBjcml0aWNhbCBlcnJvciB3aGlsZSB0cnlpbmcgdG8gY3JlYXRlIHRoZSB0YXNrOiAke2Vycm9yLm1lc3NhZ2V9LmA7XG4gIH1cbn1cbiJdfQ==