import { onScheduleDailyFeaturesApply7DayWindowToEventTrigger } from '@autopilot/_libs/api-helper';
const handler = async (req, res) => {
    try {
        const eventItem = req.body;
        const payload = eventItem.payload;
        console.log(payload, ' parsed payload');
        // validate
        if (!payload?.body?.userId) {
            return res.status(400).json({
                message: 'no userId present',
                event: eventItem,
            });
        }
        if (!payload?.body?.windowStartDate) {
            return res.status(400).json({
                message: 'no startDate',
                event: eventItem,
            });
        }
        if (!payload?.body?.windowEndDate) {
            return res.status(400).json({
                message: 'no endDate',
                event: eventItem,
            });
        }
        if (!payload?.body?.timezone) {
            return res.status(400).json({
                message: 'no timezone present',
                event: eventItem,
            });
        }
        if (!payload?.autopilot?.userId) {
            return res.status(400).json({
                message: 'no autopilot userId present',
                event: eventItem,
            });
        }
        if (!payload?.autopilot?.scheduleAt) {
            return res.status(400).json({
                message: 'no autopilot scheduleAt present',
                event: eventItem,
            });
        }
        if (!payload?.autopilot?.timezone) {
            return res.status(400).json({
                message: 'no timezone present',
                event: eventItem,
            });
        }
        if (!payload?.autopilot?.payload) {
            return res.status(400).json({
                message: 'no payload present',
                event: eventItem,
            });
        }
        await onScheduleDailyFeaturesApply7DayWindowToEventTrigger(payload?.autopilot, payload?.body);
        res
            .status(200)
            .json('successfully triggered on schedule daily features apply to event');
    }
    catch (e) {
        console.log(e, ' unable to on schedule daily features apply auth');
        res.status(400).json(e);
    }
};
export default handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib24tc2NoZWR1bGUtZGFpbHktZmVhdHVyZXMtYXBwbHktYWRtaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJvbi1zY2hlZHVsZS1kYWlseS1mZWF0dXJlcy1hcHBseS1hZG1pbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsb0RBQW9ELEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUVuRyxNQUFNLE9BQU8sR0FBRyxLQUFLLEVBQUUsR0FBWSxFQUFFLEdBQWEsRUFBRSxFQUFFO0lBQ3BELElBQUksQ0FBQztRQUNILE1BQU0sU0FBUyxHQUEwQixHQUFHLENBQUMsSUFBSSxDQUFDO1FBRWxELE1BQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUM7UUFDbEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUN4QyxXQUFXO1FBQ1gsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7WUFDM0IsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDMUIsT0FBTyxFQUFFLG1CQUFtQjtnQkFDNUIsS0FBSyxFQUFFLFNBQVM7YUFDakIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUVELElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRSxDQUFDO1lBQ3BDLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQzFCLE9BQU8sRUFBRSxjQUFjO2dCQUN2QixLQUFLLEVBQUUsU0FBUzthQUNqQixDQUFDLENBQUM7UUFDTCxDQUFDO1FBRUQsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLENBQUM7WUFDbEMsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDMUIsT0FBTyxFQUFFLFlBQVk7Z0JBQ3JCLEtBQUssRUFBRSxTQUFTO2FBQ2pCLENBQUMsQ0FBQztRQUNMLENBQUM7UUFFRCxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQztZQUM3QixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUMxQixPQUFPLEVBQUUscUJBQXFCO2dCQUM5QixLQUFLLEVBQUUsU0FBUzthQUNqQixDQUFDLENBQUM7UUFDTCxDQUFDO1FBRUQsSUFBSSxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLENBQUM7WUFDaEMsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDMUIsT0FBTyxFQUFFLDZCQUE2QjtnQkFDdEMsS0FBSyxFQUFFLFNBQVM7YUFDakIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUVELElBQUksQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxDQUFDO1lBQ3BDLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQzFCLE9BQU8sRUFBRSxpQ0FBaUM7Z0JBQzFDLEtBQUssRUFBRSxTQUFTO2FBQ2pCLENBQUMsQ0FBQztRQUNMLENBQUM7UUFFRCxJQUFJLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsQ0FBQztZQUNsQyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUMxQixPQUFPLEVBQUUscUJBQXFCO2dCQUM5QixLQUFLLEVBQUUsU0FBUzthQUNqQixDQUFDLENBQUM7UUFDTCxDQUFDO1FBRUQsSUFBSSxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLENBQUM7WUFDakMsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDMUIsT0FBTyxFQUFFLG9CQUFvQjtnQkFDN0IsS0FBSyxFQUFFLFNBQVM7YUFDakIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUVELE1BQU0sb0RBQW9ELENBQ3hELE9BQU8sRUFBRSxTQUFTLEVBQ2xCLE9BQU8sRUFBRSxJQUFJLENBQ2QsQ0FBQztRQUVGLEdBQUc7YUFDQSxNQUFNLENBQUMsR0FBRyxDQUFDO2FBQ1gsSUFBSSxDQUFDLGtFQUFrRSxDQUFDLENBQUM7SUFDOUUsQ0FBQztJQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxrREFBa0QsQ0FBQyxDQUFDO1FBQ25FLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLENBQUM7QUFDSCxDQUFDLENBQUM7QUFFRixlQUFlLE9BQU8sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBIYXN1cmFUcmlnZ2VyQm9keVR5cGUgfSBmcm9tICdAYXV0b3BpbG90L19saWJzL3R5cGVzJztcbmltcG9ydCB7IG9uU2NoZWR1bGVEYWlseUZlYXR1cmVzQXBwbHk3RGF5V2luZG93VG9FdmVudFRyaWdnZXIgfSBmcm9tICdAYXV0b3BpbG90L19saWJzL2FwaS1oZWxwZXInO1xuXG5jb25zdCBoYW5kbGVyID0gYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGV2ZW50SXRlbTogSGFzdXJhVHJpZ2dlckJvZHlUeXBlID0gcmVxLmJvZHk7XG5cbiAgICBjb25zdCBwYXlsb2FkID0gZXZlbnRJdGVtLnBheWxvYWQ7XG4gICAgY29uc29sZS5sb2cocGF5bG9hZCwgJyBwYXJzZWQgcGF5bG9hZCcpO1xuICAgIC8vIHZhbGlkYXRlXG4gICAgaWYgKCFwYXlsb2FkPy5ib2R5Py51c2VySWQpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdubyB1c2VySWQgcHJlc2VudCcsXG4gICAgICAgIGV2ZW50OiBldmVudEl0ZW0sXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIXBheWxvYWQ/LmJvZHk/LndpbmRvd1N0YXJ0RGF0ZSkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ25vIHN0YXJ0RGF0ZScsXG4gICAgICAgIGV2ZW50OiBldmVudEl0ZW0sXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIXBheWxvYWQ/LmJvZHk/LndpbmRvd0VuZERhdGUpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdubyBlbmREYXRlJyxcbiAgICAgICAgZXZlbnQ6IGV2ZW50SXRlbSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghcGF5bG9hZD8uYm9keT8udGltZXpvbmUpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdubyB0aW1lem9uZSBwcmVzZW50JyxcbiAgICAgICAgZXZlbnQ6IGV2ZW50SXRlbSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghcGF5bG9hZD8uYXV0b3BpbG90Py51c2VySWQpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdubyBhdXRvcGlsb3QgdXNlcklkIHByZXNlbnQnLFxuICAgICAgICBldmVudDogZXZlbnRJdGVtLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFwYXlsb2FkPy5hdXRvcGlsb3Q/LnNjaGVkdWxlQXQpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdubyBhdXRvcGlsb3Qgc2NoZWR1bGVBdCBwcmVzZW50JyxcbiAgICAgICAgZXZlbnQ6IGV2ZW50SXRlbSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghcGF5bG9hZD8uYXV0b3BpbG90Py50aW1lem9uZSkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ25vIHRpbWV6b25lIHByZXNlbnQnLFxuICAgICAgICBldmVudDogZXZlbnRJdGVtLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFwYXlsb2FkPy5hdXRvcGlsb3Q/LnBheWxvYWQpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdubyBwYXlsb2FkIHByZXNlbnQnLFxuICAgICAgICBldmVudDogZXZlbnRJdGVtLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXdhaXQgb25TY2hlZHVsZURhaWx5RmVhdHVyZXNBcHBseTdEYXlXaW5kb3dUb0V2ZW50VHJpZ2dlcihcbiAgICAgIHBheWxvYWQ/LmF1dG9waWxvdCxcbiAgICAgIHBheWxvYWQ/LmJvZHlcbiAgICApO1xuXG4gICAgcmVzXG4gICAgICAuc3RhdHVzKDIwMClcbiAgICAgIC5qc29uKCdzdWNjZXNzZnVsbHkgdHJpZ2dlcmVkIG9uIHNjaGVkdWxlIGRhaWx5IGZlYXR1cmVzIGFwcGx5IHRvIGV2ZW50Jyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlLCAnIHVuYWJsZSB0byBvbiBzY2hlZHVsZSBkYWlseSBmZWF0dXJlcyBhcHBseSBhdXRoJyk7XG4gICAgcmVzLnN0YXR1cyg0MDApLmpzb24oZSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGhhbmRsZXI7XG4iXX0=