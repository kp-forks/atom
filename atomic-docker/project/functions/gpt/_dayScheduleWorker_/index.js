import { S3Client, DeleteObjectCommand, GetObjectCommand, } from '@aws-sdk/client-s3';
import { bucketName, kafkaGPTGroupId, kafkaOnDayScheduleTopic, } from '../_libs/constants';
import { Kafka, logLevel } from 'kafkajs';
import { createDaySchedule, streamToString } from '../_libs/api-helper';
const s3Client = new S3Client({
    credentials: {
        accessKeyId: process.env.S3_ACCESS_KEY,
        secretAccessKey: process.env.S3_SECRET_KEY,
    },
    endpoint: process.env.S3_ENDPOINT,
    forcePathStyle: true,
});
const kafka = new Kafka({
    logLevel: logLevel.DEBUG,
    brokers: [`kafka1:29092`],
    clientId: 'atomic',
    // ssl: true,
    sasl: {
        mechanism: 'plain', // scram-sha-256 or scram-sha-512
        username: process.env.KAFKA_USERNAME,
        password: process.env.KAFKA_PASSWORD,
    },
});
const createDayScheduleWorker = async () => {
    try {
        const consumer = kafka.consumer({ groupId: kafkaGPTGroupId });
        await consumer.connect();
        await consumer.subscribe({ topic: kafkaOnDayScheduleTopic });
        await consumer.run({
            eachMessage: async ({ topic, partition, message }) => {
                console.log({
                    key: message?.key?.toString(),
                    value: message?.value?.toString(),
                    headers: message?.headers,
                });
                // '{"fileKey":"fc5df674-b4ee-43c7-ad9e-298ae0eb6208/aed7b93e-8da4-447c-83e7-f0f0f1420226.json"}'
                const bodyData = JSON.parse(message?.value?.toString());
                const fileKey = bodyData.fileKey;
                console.log(bodyData, ' bodyData');
                const s3GetCommand = new GetObjectCommand({
                    Bucket: bucketName,
                    Key: fileKey,
                });
                const s3GetCommandOutput = await s3Client.send(s3GetCommand);
                const bodyString = await streamToString(s3GetCommandOutput.Body);
                const body = JSON.parse(bodyString);
                console.log(body, ' body');
                const s3DeleteCommand = new DeleteObjectCommand({
                    Bucket: bucketName,
                    Key: fileKey,
                });
                const s3DeleteCommandOutput = await s3Client.send(s3DeleteCommand);
                console.log(s3DeleteCommandOutput, ' s3DeleteCommandOutput');
                return createDaySchedule(body?.userId, body?.tasks, body?.isAllDay, body?.timezone, body?.startDate, body?.endDate, body?.email, body?.name, body?.isTwo);
            },
        });
    }
    catch (e) {
        console.log(e, ' unable to create daily schedule');
    }
};
export default createDayScheduleWorker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsUUFBUSxFQUNSLG1CQUFtQixFQUNuQixnQkFBZ0IsR0FDakIsTUFBTSxvQkFBb0IsQ0FBQztBQUM1QixPQUFPLEVBQ0wsVUFBVSxFQUNWLGVBQWUsRUFDZix1QkFBdUIsR0FDeEIsTUFBTSxvQkFBb0IsQ0FBQztBQUM1QixPQUFPLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUUxQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFJeEUsTUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLENBQUM7SUFDNUIsV0FBVyxFQUFFO1FBQ1gsV0FBVyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYTtRQUN0QyxlQUFlLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhO0tBQzNDO0lBQ0QsUUFBUSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVztJQUNqQyxjQUFjLEVBQUUsSUFBSTtDQUNyQixDQUFDLENBQUM7QUFFSCxNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQztJQUN0QixRQUFRLEVBQUUsUUFBUSxDQUFDLEtBQUs7SUFDeEIsT0FBTyxFQUFFLENBQUMsY0FBYyxDQUFDO0lBQ3pCLFFBQVEsRUFBRSxRQUFRO0lBQ2xCLGFBQWE7SUFDYixJQUFJLEVBQUU7UUFDSixTQUFTLEVBQUUsT0FBTyxFQUFFLGlDQUFpQztRQUNyRCxRQUFRLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjO1FBQ3BDLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWM7S0FDckM7Q0FDRixDQUFDLENBQUM7QUFFSCxNQUFNLHVCQUF1QixHQUFHLEtBQUssSUFBSSxFQUFFO0lBQ3pDLElBQUksQ0FBQztRQUNILE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLENBQUMsQ0FBQztRQUM5RCxNQUFNLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUV6QixNQUFNLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRSxLQUFLLEVBQUUsdUJBQXVCLEVBQUUsQ0FBQyxDQUFDO1FBRTdELE1BQU0sUUFBUSxDQUFDLEdBQUcsQ0FBQztZQUNqQixXQUFXLEVBQUUsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFO2dCQUNuRCxPQUFPLENBQUMsR0FBRyxDQUFDO29CQUNWLEdBQUcsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRTtvQkFDN0IsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFO29CQUNqQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU87aUJBQzFCLENBQUMsQ0FBQztnQkFDSCxpR0FBaUc7Z0JBQ2pHLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO2dCQUN4RCxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDO2dCQUNqQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQztnQkFDbkMsTUFBTSxZQUFZLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQztvQkFDeEMsTUFBTSxFQUFFLFVBQVU7b0JBQ2xCLEdBQUcsRUFBRSxPQUFPO2lCQUNiLENBQUMsQ0FBQztnQkFFSCxNQUFNLGtCQUFrQixHQUFHLE1BQU0sUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFDN0QsTUFBTSxVQUFVLEdBQUcsTUFBTSxjQUFjLENBQ3JDLGtCQUFrQixDQUFDLElBQWdCLENBQ3BDLENBQUM7Z0JBRUYsTUFBTSxJQUFJLEdBQThCLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQy9ELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUUzQixNQUFNLGVBQWUsR0FBRyxJQUFJLG1CQUFtQixDQUFDO29CQUM5QyxNQUFNLEVBQUUsVUFBVTtvQkFDbEIsR0FBRyxFQUFFLE9BQU87aUJBQ2IsQ0FBQyxDQUFDO2dCQUNILE1BQU0scUJBQXFCLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO2dCQUNuRSxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFFLHdCQUF3QixDQUFDLENBQUM7Z0JBQzdELE9BQU8saUJBQWlCLENBQ3RCLElBQUksRUFBRSxNQUFNLEVBQ1osSUFBSSxFQUFFLEtBQUssRUFDWCxJQUFJLEVBQUUsUUFBUSxFQUNkLElBQUksRUFBRSxRQUFRLEVBQ2QsSUFBSSxFQUFFLFNBQVMsRUFDZixJQUFJLEVBQUUsT0FBTyxFQUNiLElBQUksRUFBRSxLQUFLLEVBQ1gsSUFBSSxFQUFFLElBQUksRUFDVixJQUFJLEVBQUUsS0FBSyxDQUNaLENBQUM7WUFDSixDQUFDO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxrQ0FBa0MsQ0FBQyxDQUFDO0lBQ3JELENBQUM7QUFDSCxDQUFDLENBQUM7QUFFRixlQUFlLHVCQUF1QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgUzNDbGllbnQsXG4gIERlbGV0ZU9iamVjdENvbW1hbmQsXG4gIEdldE9iamVjdENvbW1hbmQsXG59IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1zMyc7XG5pbXBvcnQge1xuICBidWNrZXROYW1lLFxuICBrYWZrYUdQVEdyb3VwSWQsXG4gIGthZmthT25EYXlTY2hlZHVsZVRvcGljLFxufSBmcm9tICcuLi9fbGlicy9jb25zdGFudHMnO1xuaW1wb3J0IHsgS2Fma2EsIGxvZ0xldmVsIH0gZnJvbSAna2Fma2Fqcyc7XG5pbXBvcnQgaXAgZnJvbSAnaXAnO1xuaW1wb3J0IHsgY3JlYXRlRGF5U2NoZWR1bGUsIHN0cmVhbVRvU3RyaW5nIH0gZnJvbSAnLi4vX2xpYnMvYXBpLWhlbHBlcic7XG5pbXBvcnQgeyBDcmVhdGVEYXlTY2hlZHVsZUJvZHlUeXBlIH0gZnJvbSAnLi4vX2xpYnMvdHlwZXMnO1xuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tICdub2RlOnN0cmVhbSc7XG5cbmNvbnN0IHMzQ2xpZW50ID0gbmV3IFMzQ2xpZW50KHtcbiAgY3JlZGVudGlhbHM6IHtcbiAgICBhY2Nlc3NLZXlJZDogcHJvY2Vzcy5lbnYuUzNfQUNDRVNTX0tFWSxcbiAgICBzZWNyZXRBY2Nlc3NLZXk6IHByb2Nlc3MuZW52LlMzX1NFQ1JFVF9LRVksXG4gIH0sXG4gIGVuZHBvaW50OiBwcm9jZXNzLmVudi5TM19FTkRQT0lOVCxcbiAgZm9yY2VQYXRoU3R5bGU6IHRydWUsXG59KTtcblxuY29uc3Qga2Fma2EgPSBuZXcgS2Fma2Eoe1xuICBsb2dMZXZlbDogbG9nTGV2ZWwuREVCVUcsXG4gIGJyb2tlcnM6IFtga2Fma2ExOjI5MDkyYF0sXG4gIGNsaWVudElkOiAnYXRvbWljJyxcbiAgLy8gc3NsOiB0cnVlLFxuICBzYXNsOiB7XG4gICAgbWVjaGFuaXNtOiAncGxhaW4nLCAvLyBzY3JhbS1zaGEtMjU2IG9yIHNjcmFtLXNoYS01MTJcbiAgICB1c2VybmFtZTogcHJvY2Vzcy5lbnYuS0FGS0FfVVNFUk5BTUUsXG4gICAgcGFzc3dvcmQ6IHByb2Nlc3MuZW52LktBRktBX1BBU1NXT1JELFxuICB9LFxufSk7XG5cbmNvbnN0IGNyZWF0ZURheVNjaGVkdWxlV29ya2VyID0gYXN5bmMgKCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGNvbnN1bWVyID0ga2Fma2EuY29uc3VtZXIoeyBncm91cElkOiBrYWZrYUdQVEdyb3VwSWQgfSk7XG4gICAgYXdhaXQgY29uc3VtZXIuY29ubmVjdCgpO1xuXG4gICAgYXdhaXQgY29uc3VtZXIuc3Vic2NyaWJlKHsgdG9waWM6IGthZmthT25EYXlTY2hlZHVsZVRvcGljIH0pO1xuXG4gICAgYXdhaXQgY29uc3VtZXIucnVuKHtcbiAgICAgIGVhY2hNZXNzYWdlOiBhc3luYyAoeyB0b3BpYywgcGFydGl0aW9uLCBtZXNzYWdlIH0pID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coe1xuICAgICAgICAgIGtleTogbWVzc2FnZT8ua2V5Py50b1N0cmluZygpLFxuICAgICAgICAgIHZhbHVlOiBtZXNzYWdlPy52YWx1ZT8udG9TdHJpbmcoKSxcbiAgICAgICAgICBoZWFkZXJzOiBtZXNzYWdlPy5oZWFkZXJzLFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gJ3tcImZpbGVLZXlcIjpcImZjNWRmNjc0LWI0ZWUtNDNjNy1hZDllLTI5OGFlMGViNjIwOC9hZWQ3YjkzZS04ZGE0LTQ0N2MtODNlNy1mMGYwZjE0MjAyMjYuanNvblwifSdcbiAgICAgICAgY29uc3QgYm9keURhdGEgPSBKU09OLnBhcnNlKG1lc3NhZ2U/LnZhbHVlPy50b1N0cmluZygpKTtcbiAgICAgICAgY29uc3QgZmlsZUtleSA9IGJvZHlEYXRhLmZpbGVLZXk7XG4gICAgICAgIGNvbnNvbGUubG9nKGJvZHlEYXRhLCAnIGJvZHlEYXRhJyk7XG4gICAgICAgIGNvbnN0IHMzR2V0Q29tbWFuZCA9IG5ldyBHZXRPYmplY3RDb21tYW5kKHtcbiAgICAgICAgICBCdWNrZXQ6IGJ1Y2tldE5hbWUsXG4gICAgICAgICAgS2V5OiBmaWxlS2V5LFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBzM0dldENvbW1hbmRPdXRwdXQgPSBhd2FpdCBzM0NsaWVudC5zZW5kKHMzR2V0Q29tbWFuZCk7XG4gICAgICAgIGNvbnN0IGJvZHlTdHJpbmcgPSBhd2FpdCBzdHJlYW1Ub1N0cmluZyhcbiAgICAgICAgICBzM0dldENvbW1hbmRPdXRwdXQuQm9keSBhcyBSZWFkYWJsZVxuICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0IGJvZHk6IENyZWF0ZURheVNjaGVkdWxlQm9keVR5cGUgPSBKU09OLnBhcnNlKGJvZHlTdHJpbmcpO1xuICAgICAgICBjb25zb2xlLmxvZyhib2R5LCAnIGJvZHknKTtcblxuICAgICAgICBjb25zdCBzM0RlbGV0ZUNvbW1hbmQgPSBuZXcgRGVsZXRlT2JqZWN0Q29tbWFuZCh7XG4gICAgICAgICAgQnVja2V0OiBidWNrZXROYW1lLFxuICAgICAgICAgIEtleTogZmlsZUtleSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHMzRGVsZXRlQ29tbWFuZE91dHB1dCA9IGF3YWl0IHMzQ2xpZW50LnNlbmQoczNEZWxldGVDb21tYW5kKTtcbiAgICAgICAgY29uc29sZS5sb2coczNEZWxldGVDb21tYW5kT3V0cHV0LCAnIHMzRGVsZXRlQ29tbWFuZE91dHB1dCcpO1xuICAgICAgICByZXR1cm4gY3JlYXRlRGF5U2NoZWR1bGUoXG4gICAgICAgICAgYm9keT8udXNlcklkLFxuICAgICAgICAgIGJvZHk/LnRhc2tzLFxuICAgICAgICAgIGJvZHk/LmlzQWxsRGF5LFxuICAgICAgICAgIGJvZHk/LnRpbWV6b25lLFxuICAgICAgICAgIGJvZHk/LnN0YXJ0RGF0ZSxcbiAgICAgICAgICBib2R5Py5lbmREYXRlLFxuICAgICAgICAgIGJvZHk/LmVtYWlsLFxuICAgICAgICAgIGJvZHk/Lm5hbWUsXG4gICAgICAgICAgYm9keT8uaXNUd29cbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlLCAnIHVuYWJsZSB0byBjcmVhdGUgZGFpbHkgc2NoZWR1bGUnKTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRGF5U2NoZWR1bGVXb3JrZXI7XG4iXX0=