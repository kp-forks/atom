import { S3Client } from '@aws-sdk/client-s3';
import { Kafka } from 'kafkajs';
import { validateMeetingRequestBody, publishToS3AndKafka, } from '../_libs/common-on-event-handler';
import { kafkaMeetingReqTemplateTopic } from '../_libs/constants';
// Initialize S3 and Kafka clients
const s3Client = new S3Client({
    region: process.env.AWS_REGION || 'us-east-1',
    credentials: {
        accessKeyId: process.env.S3_ACCESS_KEY || '',
        secretAccessKey: process.env.S3_SECRET_KEY || '',
    },
    endpoint: process.env.S3_ENDPOINT,
    forcePathStyle: true,
});
const kafka = new Kafka({
    clientId: process.env.KAFKA_CLIENT_ID_MEETING_REQ_AUTH ||
        'gpt-meeting-req-auth-producer',
    brokers: (process.env.KAFKA_BROKERS || 'localhost:9092').split(','),
    sasl: process.env.KAFKA_USERNAME && process.env.KAFKA_PASSWORD
        ? {
            mechanism: 'plain',
            username: process.env.KAFKA_USERNAME,
            password: process.env.KAFKA_PASSWORD,
        }
        : undefined,
});
export const handler = async (req, res) => {
    const validationResult = validateMeetingRequestBody(req.body);
    if (!validationResult.valid || !validationResult.data) {
        // Ensure data is present for type safety
        console.error('Payload validation failed for meeting-request-auth:', validationResult.error);
        return res
            .status(400)
            .json({
            message: validationResult.error?.message || 'Invalid request payload',
            event: validationResult.error?.event,
        });
    }
    const validatedPayload = validationResult.data; // Using 'as any' for now, see note in admin refactor
    try {
        const publishResult = await publishToS3AndKafka(validatedPayload, kafkaMeetingReqTemplateTopic, s3Client, kafka);
        if (!publishResult.success) {
            console.error('Failed to publish meeting request to S3/Kafka (auth):', publishResult.error);
            return res
                .status(500)
                .json({
                message: 'Failed to process meeting request.',
                details: publishResult.error?.message,
            });
        }
        return res
            .status(200)
            .json({ message: 'Successfully queued meeting request processing.' }); // Auth uses 200
    }
    catch (e) {
        console.error('Unexpected error in meeting-request-auth handler:', e);
        return res
            .status(500)
            .json({
            message: 'An unexpected internal server error occurred.',
            details: e.message,
        });
    }
};
export default handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVldGluZy1yZXF1ZXN0LWF1dGguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtZWV0aW5nLXJlcXVlc3QtYXV0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDOUMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNoQyxPQUFPLEVBQ0wsMEJBQTBCLEVBQzFCLG1CQUFtQixHQUNwQixNQUFNLGtDQUFrQyxDQUFDO0FBRTFDLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRWxFLGtDQUFrQztBQUNsQyxNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsQ0FBQztJQUM1QixNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksV0FBVztJQUM3QyxXQUFXLEVBQUU7UUFDWCxXQUFXLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLElBQUksRUFBRTtRQUM1QyxlQUFlLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLElBQUksRUFBRTtLQUNqRDtJQUNELFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVc7SUFDakMsY0FBYyxFQUFFLElBQUk7Q0FDckIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUM7SUFDdEIsUUFBUSxFQUNOLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0NBQWdDO1FBQzVDLCtCQUErQjtJQUNqQyxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsSUFBSSxnQkFBZ0IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFDbkUsSUFBSSxFQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYztRQUN0RCxDQUFDLENBQUM7WUFDRSxTQUFTLEVBQUUsT0FBTztZQUNsQixRQUFRLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjO1lBQ3BDLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWM7U0FDckM7UUFDSCxDQUFDLENBQUMsU0FBUztDQUNoQixDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUFFLEdBQVksRUFBRSxHQUFhLEVBQUUsRUFBRTtJQUMzRCxNQUFNLGdCQUFnQixHQUFHLDBCQUEwQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5RCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdEQseUNBQXlDO1FBQ3pDLE9BQU8sQ0FBQyxLQUFLLENBQ1gscURBQXFELEVBQ3JELGdCQUFnQixDQUFDLEtBQUssQ0FDdkIsQ0FBQztRQUNGLE9BQU8sR0FBRzthQUNQLE1BQU0sQ0FBQyxHQUFHLENBQUM7YUFDWCxJQUFJLENBQUM7WUFDSixPQUFPLEVBQUUsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLE9BQU8sSUFBSSx5QkFBeUI7WUFDckUsS0FBSyxFQUFFLGdCQUFnQixDQUFDLEtBQUssRUFBRSxLQUFLO1NBQ3JDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxNQUFNLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDLElBQVcsQ0FBQyxDQUFDLHFEQUFxRDtJQUU1RyxJQUFJLENBQUM7UUFDSCxNQUFNLGFBQWEsR0FBRyxNQUFNLG1CQUFtQixDQUM3QyxnQkFBZ0IsRUFDaEIsNEJBQTRCLEVBQzVCLFFBQVEsRUFDUixLQUFLLENBQ04sQ0FBQztRQUVGLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDM0IsT0FBTyxDQUFDLEtBQUssQ0FDWCx1REFBdUQsRUFDdkQsYUFBYSxDQUFDLEtBQUssQ0FDcEIsQ0FBQztZQUNGLE9BQU8sR0FBRztpQkFDUCxNQUFNLENBQUMsR0FBRyxDQUFDO2lCQUNYLElBQUksQ0FBQztnQkFDSixPQUFPLEVBQUUsb0NBQW9DO2dCQUM3QyxPQUFPLEVBQUUsYUFBYSxDQUFDLEtBQUssRUFBRSxPQUFPO2FBQ3RDLENBQUMsQ0FBQztRQUNQLENBQUM7UUFFRCxPQUFPLEdBQUc7YUFDUCxNQUFNLENBQUMsR0FBRyxDQUFDO2FBQ1gsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLGlEQUFpRCxFQUFFLENBQUMsQ0FBQyxDQUFDLGdCQUFnQjtJQUMzRixDQUFDO0lBQUMsT0FBTyxDQUFNLEVBQUUsQ0FBQztRQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLG1EQUFtRCxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3RFLE9BQU8sR0FBRzthQUNQLE1BQU0sQ0FBQyxHQUFHLENBQUM7YUFDWCxJQUFJLENBQUM7WUFDSixPQUFPLEVBQUUsK0NBQStDO1lBQ3hELE9BQU8sRUFBRSxDQUFDLENBQUMsT0FBTztTQUNuQixDQUFDLENBQUM7SUFDUCxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsZUFBZSxPQUFPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgUzNDbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtczMnO1xuaW1wb3J0IHsgS2Fma2EgfSBmcm9tICdrYWZrYWpzJztcbmltcG9ydCB7XG4gIHZhbGlkYXRlTWVldGluZ1JlcXVlc3RCb2R5LFxuICBwdWJsaXNoVG9TM0FuZEthZmthLFxufSBmcm9tICcuLi9fbGlicy9jb21tb24tb24tZXZlbnQtaGFuZGxlcic7XG5pbXBvcnQgeyBNZWV0aW5nUmVxdWVzdEJvZHlUeXBlIH0gZnJvbSAnLi4vX2xpYnMvdHlwZXMnOyAvLyBFbnN1cmUgdGhpcyB0eXBlIGlzIGNvcnJlY3RseSBpbXBvcnRlZC9kZWZpbmVkXG5pbXBvcnQgeyBrYWZrYU1lZXRpbmdSZXFUZW1wbGF0ZVRvcGljIH0gZnJvbSAnLi4vX2xpYnMvY29uc3RhbnRzJztcblxuLy8gSW5pdGlhbGl6ZSBTMyBhbmQgS2Fma2EgY2xpZW50c1xuY29uc3QgczNDbGllbnQgPSBuZXcgUzNDbGllbnQoe1xuICByZWdpb246IHByb2Nlc3MuZW52LkFXU19SRUdJT04gfHwgJ3VzLWVhc3QtMScsXG4gIGNyZWRlbnRpYWxzOiB7XG4gICAgYWNjZXNzS2V5SWQ6IHByb2Nlc3MuZW52LlMzX0FDQ0VTU19LRVkgfHwgJycsXG4gICAgc2VjcmV0QWNjZXNzS2V5OiBwcm9jZXNzLmVudi5TM19TRUNSRVRfS0VZIHx8ICcnLFxuICB9LFxuICBlbmRwb2ludDogcHJvY2Vzcy5lbnYuUzNfRU5EUE9JTlQsXG4gIGZvcmNlUGF0aFN0eWxlOiB0cnVlLFxufSk7XG5cbmNvbnN0IGthZmthID0gbmV3IEthZmthKHtcbiAgY2xpZW50SWQ6XG4gICAgcHJvY2Vzcy5lbnYuS0FGS0FfQ0xJRU5UX0lEX01FRVRJTkdfUkVRX0FVVEggfHxcbiAgICAnZ3B0LW1lZXRpbmctcmVxLWF1dGgtcHJvZHVjZXInLFxuICBicm9rZXJzOiAocHJvY2Vzcy5lbnYuS0FGS0FfQlJPS0VSUyB8fCAnbG9jYWxob3N0OjkwOTInKS5zcGxpdCgnLCcpLFxuICBzYXNsOlxuICAgIHByb2Nlc3MuZW52LktBRktBX1VTRVJOQU1FICYmIHByb2Nlc3MuZW52LktBRktBX1BBU1NXT1JEXG4gICAgICA/IHtcbiAgICAgICAgICBtZWNoYW5pc206ICdwbGFpbicsXG4gICAgICAgICAgdXNlcm5hbWU6IHByb2Nlc3MuZW52LktBRktBX1VTRVJOQU1FLFxuICAgICAgICAgIHBhc3N3b3JkOiBwcm9jZXNzLmVudi5LQUZLQV9QQVNTV09SRCxcbiAgICAgICAgfVxuICAgICAgOiB1bmRlZmluZWQsXG59KTtcblxuZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XG4gIGNvbnN0IHZhbGlkYXRpb25SZXN1bHQgPSB2YWxpZGF0ZU1lZXRpbmdSZXF1ZXN0Qm9keShyZXEuYm9keSk7XG4gIGlmICghdmFsaWRhdGlvblJlc3VsdC52YWxpZCB8fCAhdmFsaWRhdGlvblJlc3VsdC5kYXRhKSB7XG4gICAgLy8gRW5zdXJlIGRhdGEgaXMgcHJlc2VudCBmb3IgdHlwZSBzYWZldHlcbiAgICBjb25zb2xlLmVycm9yKFxuICAgICAgJ1BheWxvYWQgdmFsaWRhdGlvbiBmYWlsZWQgZm9yIG1lZXRpbmctcmVxdWVzdC1hdXRoOicsXG4gICAgICB2YWxpZGF0aW9uUmVzdWx0LmVycm9yXG4gICAgKTtcbiAgICByZXR1cm4gcmVzXG4gICAgICAuc3RhdHVzKDQwMClcbiAgICAgIC5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogdmFsaWRhdGlvblJlc3VsdC5lcnJvcj8ubWVzc2FnZSB8fCAnSW52YWxpZCByZXF1ZXN0IHBheWxvYWQnLFxuICAgICAgICBldmVudDogdmFsaWRhdGlvblJlc3VsdC5lcnJvcj8uZXZlbnQsXG4gICAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IHZhbGlkYXRlZFBheWxvYWQgPSB2YWxpZGF0aW9uUmVzdWx0LmRhdGEgYXMgYW55OyAvLyBVc2luZyAnYXMgYW55JyBmb3Igbm93LCBzZWUgbm90ZSBpbiBhZG1pbiByZWZhY3RvclxuXG4gIHRyeSB7XG4gICAgY29uc3QgcHVibGlzaFJlc3VsdCA9IGF3YWl0IHB1Ymxpc2hUb1MzQW5kS2Fma2EoXG4gICAgICB2YWxpZGF0ZWRQYXlsb2FkLFxuICAgICAga2Fma2FNZWV0aW5nUmVxVGVtcGxhdGVUb3BpYyxcbiAgICAgIHMzQ2xpZW50LFxuICAgICAga2Fma2FcbiAgICApO1xuXG4gICAgaWYgKCFwdWJsaXNoUmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICdGYWlsZWQgdG8gcHVibGlzaCBtZWV0aW5nIHJlcXVlc3QgdG8gUzMvS2Fma2EgKGF1dGgpOicsXG4gICAgICAgIHB1Ymxpc2hSZXN1bHQuZXJyb3JcbiAgICAgICk7XG4gICAgICByZXR1cm4gcmVzXG4gICAgICAgIC5zdGF0dXMoNTAwKVxuICAgICAgICAuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBwcm9jZXNzIG1lZXRpbmcgcmVxdWVzdC4nLFxuICAgICAgICAgIGRldGFpbHM6IHB1Ymxpc2hSZXN1bHQuZXJyb3I/Lm1lc3NhZ2UsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXNcbiAgICAgIC5zdGF0dXMoMjAwKVxuICAgICAgLmpzb24oeyBtZXNzYWdlOiAnU3VjY2Vzc2Z1bGx5IHF1ZXVlZCBtZWV0aW5nIHJlcXVlc3QgcHJvY2Vzc2luZy4nIH0pOyAvLyBBdXRoIHVzZXMgMjAwXG4gIH0gY2F0Y2ggKGU6IGFueSkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1VuZXhwZWN0ZWQgZXJyb3IgaW4gbWVldGluZy1yZXF1ZXN0LWF1dGggaGFuZGxlcjonLCBlKTtcbiAgICByZXR1cm4gcmVzXG4gICAgICAuc3RhdHVzKDUwMClcbiAgICAgIC5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ0FuIHVuZXhwZWN0ZWQgaW50ZXJuYWwgc2VydmVyIGVycm9yIG9jY3VycmVkLicsXG4gICAgICAgIGRldGFpbHM6IGUubWVzc2FnZSxcbiAgICAgIH0pO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBoYW5kbGVyO1xuIl19