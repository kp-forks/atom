import { howToTask } from '../_libs/api-helper';
const handler = async (req, res) => {
    try {
        const reqBody = req?.body;
        // validate
        if (!reqBody?.userId) {
            return res.status(400).json({
                message: 'no userId present',
                event: reqBody,
            });
        }
        if (!reqBody?.startDate) {
            return res.status(400).json({
                message: 'no startDate present',
                event: reqBody,
            });
        }
        if (!reqBody?.endDate) {
            return res.status(400).json({
                message: 'no endDate present',
                event: reqBody,
            });
        }
        if (!reqBody?.timezone) {
            return res.status(400).json({
                message: 'no timezone present',
                event: reqBody,
            });
        }
        if (!reqBody?.task) {
            return res.status(400).json({
                message: 'no task present',
                event: reqBody,
            });
        }
        await howToTask(reqBody?.userId, reqBody?.task, reqBody?.isAllDay, reqBody?.timezone, reqBody?.startDate, reqBody?.endDate, reqBody?.email, reqBody?.name, reqBody?.isTwo);
        res.status(200).send('succesfully created summary of time period');
    }
    catch (e) {
        console.log(e, ' unable to do how to task');
        res.status(400).json(e);
    }
};
export default handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG93LXRvLXRhc2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJob3ctdG8tdGFzay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFaEQsTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUFFLEdBQVksRUFBRSxHQUFhLEVBQUUsRUFBRTtJQUNwRCxJQUFJLENBQUM7UUFDSCxNQUFNLE9BQU8sR0FBNkIsR0FBRyxFQUFFLElBQUksQ0FBQztRQUVwRCxXQUFXO1FBQ1gsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsQ0FBQztZQUNyQixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUMxQixPQUFPLEVBQUUsbUJBQW1CO2dCQUM1QixLQUFLLEVBQUUsT0FBTzthQUNmLENBQUMsQ0FBQztRQUNMLENBQUM7UUFFRCxJQUFJLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxDQUFDO1lBQ3hCLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQzFCLE9BQU8sRUFBRSxzQkFBc0I7Z0JBQy9CLEtBQUssRUFBRSxPQUFPO2FBQ2YsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUVELElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUM7WUFDdEIsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDMUIsT0FBTyxFQUFFLG9CQUFvQjtnQkFDN0IsS0FBSyxFQUFFLE9BQU87YUFDZixDQUFDLENBQUM7UUFDTCxDQUFDO1FBRUQsSUFBSSxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsQ0FBQztZQUN2QixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUMxQixPQUFPLEVBQUUscUJBQXFCO2dCQUM5QixLQUFLLEVBQUUsT0FBTzthQUNmLENBQUMsQ0FBQztRQUNMLENBQUM7UUFFRCxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO1lBQ25CLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQzFCLE9BQU8sRUFBRSxpQkFBaUI7Z0JBQzFCLEtBQUssRUFBRSxPQUFPO2FBQ2YsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUVELE1BQU0sU0FBUyxDQUNiLE9BQU8sRUFBRSxNQUFNLEVBQ2YsT0FBTyxFQUFFLElBQUksRUFDYixPQUFPLEVBQUUsUUFBUSxFQUNqQixPQUFPLEVBQUUsUUFBUSxFQUNqQixPQUFPLEVBQUUsU0FBUyxFQUNsQixPQUFPLEVBQUUsT0FBTyxFQUNoQixPQUFPLEVBQUUsS0FBSyxFQUNkLE9BQU8sRUFBRSxJQUFJLEVBQ2IsT0FBTyxFQUFFLEtBQUssQ0FDZixDQUFDO1FBRUYsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsNENBQTRDLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUNYLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLDJCQUEyQixDQUFDLENBQUM7UUFDNUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsQ0FBQztBQUNILENBQUMsQ0FBQztBQUVGLGVBQWUsT0FBTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCB7IEhvd1RvVGFza1JlcXVlc3RCb2R5VHlwZSB9IGZyb20gJy4uL19saWJzL3R5cGVzJztcbmltcG9ydCB7IGhvd1RvVGFzayB9IGZyb20gJy4uL19saWJzL2FwaS1oZWxwZXInO1xuXG5jb25zdCBoYW5kbGVyID0gYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHJlcUJvZHk6IEhvd1RvVGFza1JlcXVlc3RCb2R5VHlwZSA9IHJlcT8uYm9keTtcblxuICAgIC8vIHZhbGlkYXRlXG4gICAgaWYgKCFyZXFCb2R5Py51c2VySWQpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdubyB1c2VySWQgcHJlc2VudCcsXG4gICAgICAgIGV2ZW50OiByZXFCb2R5LFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFyZXFCb2R5Py5zdGFydERhdGUpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdubyBzdGFydERhdGUgcHJlc2VudCcsXG4gICAgICAgIGV2ZW50OiByZXFCb2R5LFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFyZXFCb2R5Py5lbmREYXRlKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBtZXNzYWdlOiAnbm8gZW5kRGF0ZSBwcmVzZW50JyxcbiAgICAgICAgZXZlbnQ6IHJlcUJvZHksXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIXJlcUJvZHk/LnRpbWV6b25lKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBtZXNzYWdlOiAnbm8gdGltZXpvbmUgcHJlc2VudCcsXG4gICAgICAgIGV2ZW50OiByZXFCb2R5LFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFyZXFCb2R5Py50YXNrKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBtZXNzYWdlOiAnbm8gdGFzayBwcmVzZW50JyxcbiAgICAgICAgZXZlbnQ6IHJlcUJvZHksXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBhd2FpdCBob3dUb1Rhc2soXG4gICAgICByZXFCb2R5Py51c2VySWQsXG4gICAgICByZXFCb2R5Py50YXNrLFxuICAgICAgcmVxQm9keT8uaXNBbGxEYXksXG4gICAgICByZXFCb2R5Py50aW1lem9uZSxcbiAgICAgIHJlcUJvZHk/LnN0YXJ0RGF0ZSxcbiAgICAgIHJlcUJvZHk/LmVuZERhdGUsXG4gICAgICByZXFCb2R5Py5lbWFpbCxcbiAgICAgIHJlcUJvZHk/Lm5hbWUsXG4gICAgICByZXFCb2R5Py5pc1R3b1xuICAgICk7XG5cbiAgICByZXMuc3RhdHVzKDIwMCkuc2VuZCgnc3VjY2VzZnVsbHkgY3JlYXRlZCBzdW1tYXJ5IG9mIHRpbWUgcGVyaW9kJyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlLCAnIHVuYWJsZSB0byBkbyBob3cgdG8gdGFzaycpO1xuICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKGUpO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBoYW5kbGVyO1xuIl19