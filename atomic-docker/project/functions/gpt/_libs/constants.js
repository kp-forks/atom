export const openAIAPIKey = process.env.OPENAI_API_KEY;
export const hasuraGraphUrl = process.env.HASURA_GRAPHQL_GRAPHQL_URL;
export const hasuraAdminSecret = process.env.HASURA_GRAPHQL_ADMIN_SECRET;
export const googleClientIdIos = process.env.GOOGLE_ClIENT_ID_IOS;
export const googleClientIdAndroid = process.env.GOOGLE_CLIENT_ID_ANDROID;
export const googleClientIdWeb = process.env.GOOGLE_CLIENT_ID_WEB;
export const googleTokenUrl = 'https://oauth2.googleapis.com/token';
export const googleClientSecretWeb = process.env.GOOGLE_CLIENT_SECRET_WEB;
export const googleCalendarResource = 'google';
export const openAIDavinci003Model = 'text-davinci-003';
export const openAIChatGPTModel = 'gpt-3.5-turbo';
export const EMAIL = process.env.EMAIL; // example:  no-reply@atomiclife.app
export const DOMAIN = process.env.DOMAIN; // example: atomiclife.app [no https or backslashes '/']
export const bucketName = process.env.S3_BUCKET;
export const authApiToken = process.env.API_TOKEN;
export const maxCharacterCount = 5000;
export const googleClientIdAtomicWeb = process.env.GOOGLE_CLIENT_ID_ATOMIC_WEB;
// GOOGLE_CLIENT_SECRET_ATOMIC_WEB
export const googleClientSecretAtomicWeb = process.env.GOOGLE_CLIENT_SECRET_ATOMIC_WEB;
// Kafka Configuration
export const kafkaBrokers = (process.env.KAFKA_BROKERS || 'localhost:9092')
    .split(',')
    .map((broker) => broker.trim());
export const kafkaOnDayScheduleTopic = process.env.KAFKA_TOPIC_ON_DAY_SCHEDULE || 'on-day-schedule';
export const kafkaMeetingReqTemplateTopic = process.env.KAFKA_TOPIC_MEETING_REQ_TEMPLATE || 'meeting-req-template';
export const kafkaGPTGroupId = process.env.KAFKA_GROUP_ID_GPT || 'gpt';
// S3 Configuration
// bucketName is already process.env.S3_BUCKET
export const s3Endpoint = process.env.S3_ENDPOINT; // May be undefined if not set, S3 client handles this
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29uc3RhbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQztBQUV2RCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQztBQUVyRSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixDQUFDO0FBRXpFLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUM7QUFDbEUsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQztBQUMxRSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDO0FBRWxFLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxxQ0FBcUMsQ0FBQztBQUVwRSxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDO0FBRTFFLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLFFBQVEsQ0FBQztBQUUvQyxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxrQkFBa0IsQ0FBQztBQUN4RCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxlQUFlLENBQUM7QUFFbEQsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsb0NBQW9DO0FBQzVFLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLHdEQUF3RDtBQUVsRyxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUM7QUFFaEQsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDO0FBRWxELE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQztBQUV0QyxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixDQUFDO0FBQy9FLGtDQUFrQztBQUNsQyxNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQywrQkFBK0IsQ0FBQztBQUU5QyxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLElBQUksZ0JBQWdCLENBQUM7S0FDeEUsS0FBSyxDQUFDLEdBQUcsQ0FBQztLQUNWLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7QUFDbEMsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQ2xDLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLElBQUksaUJBQWlCLENBQUM7QUFDL0QsTUFBTSxDQUFDLE1BQU0sNEJBQTRCLEdBQ3ZDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0NBQWdDLElBQUksc0JBQXNCLENBQUM7QUFDekUsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLElBQUksS0FBSyxDQUFDO0FBRXZFLG1CQUFtQjtBQUNuQiw4Q0FBOEM7QUFDOUMsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsc0RBQXNEIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IG9wZW5BSUFQSUtleSA9IHByb2Nlc3MuZW52Lk9QRU5BSV9BUElfS0VZO1xuXG5leHBvcnQgY29uc3QgaGFzdXJhR3JhcGhVcmwgPSBwcm9jZXNzLmVudi5IQVNVUkFfR1JBUEhRTF9HUkFQSFFMX1VSTDtcblxuZXhwb3J0IGNvbnN0IGhhc3VyYUFkbWluU2VjcmV0ID0gcHJvY2Vzcy5lbnYuSEFTVVJBX0dSQVBIUUxfQURNSU5fU0VDUkVUO1xuXG5leHBvcnQgY29uc3QgZ29vZ2xlQ2xpZW50SWRJb3MgPSBwcm9jZXNzLmVudi5HT09HTEVfQ2xJRU5UX0lEX0lPUztcbmV4cG9ydCBjb25zdCBnb29nbGVDbGllbnRJZEFuZHJvaWQgPSBwcm9jZXNzLmVudi5HT09HTEVfQ0xJRU5UX0lEX0FORFJPSUQ7XG5leHBvcnQgY29uc3QgZ29vZ2xlQ2xpZW50SWRXZWIgPSBwcm9jZXNzLmVudi5HT09HTEVfQ0xJRU5UX0lEX1dFQjtcblxuZXhwb3J0IGNvbnN0IGdvb2dsZVRva2VuVXJsID0gJ2h0dHBzOi8vb2F1dGgyLmdvb2dsZWFwaXMuY29tL3Rva2VuJztcblxuZXhwb3J0IGNvbnN0IGdvb2dsZUNsaWVudFNlY3JldFdlYiA9IHByb2Nlc3MuZW52LkdPT0dMRV9DTElFTlRfU0VDUkVUX1dFQjtcblxuZXhwb3J0IGNvbnN0IGdvb2dsZUNhbGVuZGFyUmVzb3VyY2UgPSAnZ29vZ2xlJztcblxuZXhwb3J0IGNvbnN0IG9wZW5BSURhdmluY2kwMDNNb2RlbCA9ICd0ZXh0LWRhdmluY2ktMDAzJztcbmV4cG9ydCBjb25zdCBvcGVuQUlDaGF0R1BUTW9kZWwgPSAnZ3B0LTMuNS10dXJibyc7XG5cbmV4cG9ydCBjb25zdCBFTUFJTCA9IHByb2Nlc3MuZW52LkVNQUlMOyAvLyBleGFtcGxlOiAgbm8tcmVwbHlAYXRvbWljbGlmZS5hcHBcbmV4cG9ydCBjb25zdCBET01BSU4gPSBwcm9jZXNzLmVudi5ET01BSU47IC8vIGV4YW1wbGU6IGF0b21pY2xpZmUuYXBwIFtubyBodHRwcyBvciBiYWNrc2xhc2hlcyAnLyddXG5cbmV4cG9ydCBjb25zdCBidWNrZXROYW1lID0gcHJvY2Vzcy5lbnYuUzNfQlVDS0VUO1xuXG5leHBvcnQgY29uc3QgYXV0aEFwaVRva2VuID0gcHJvY2Vzcy5lbnYuQVBJX1RPS0VOO1xuXG5leHBvcnQgY29uc3QgbWF4Q2hhcmFjdGVyQ291bnQgPSA1MDAwO1xuXG5leHBvcnQgY29uc3QgZ29vZ2xlQ2xpZW50SWRBdG9taWNXZWIgPSBwcm9jZXNzLmVudi5HT09HTEVfQ0xJRU5UX0lEX0FUT01JQ19XRUI7XG4vLyBHT09HTEVfQ0xJRU5UX1NFQ1JFVF9BVE9NSUNfV0VCXG5leHBvcnQgY29uc3QgZ29vZ2xlQ2xpZW50U2VjcmV0QXRvbWljV2ViID1cbiAgcHJvY2Vzcy5lbnYuR09PR0xFX0NMSUVOVF9TRUNSRVRfQVRPTUlDX1dFQjtcblxuLy8gS2Fma2EgQ29uZmlndXJhdGlvblxuZXhwb3J0IGNvbnN0IGthZmthQnJva2VycyA9IChwcm9jZXNzLmVudi5LQUZLQV9CUk9LRVJTIHx8ICdsb2NhbGhvc3Q6OTA5MicpXG4gIC5zcGxpdCgnLCcpXG4gIC5tYXAoKGJyb2tlcikgPT4gYnJva2VyLnRyaW0oKSk7XG5leHBvcnQgY29uc3Qga2Fma2FPbkRheVNjaGVkdWxlVG9waWMgPVxuICBwcm9jZXNzLmVudi5LQUZLQV9UT1BJQ19PTl9EQVlfU0NIRURVTEUgfHwgJ29uLWRheS1zY2hlZHVsZSc7XG5leHBvcnQgY29uc3Qga2Fma2FNZWV0aW5nUmVxVGVtcGxhdGVUb3BpYyA9XG4gIHByb2Nlc3MuZW52LktBRktBX1RPUElDX01FRVRJTkdfUkVRX1RFTVBMQVRFIHx8ICdtZWV0aW5nLXJlcS10ZW1wbGF0ZSc7XG5leHBvcnQgY29uc3Qga2Fma2FHUFRHcm91cElkID0gcHJvY2Vzcy5lbnYuS0FGS0FfR1JPVVBfSURfR1BUIHx8ICdncHQnO1xuXG4vLyBTMyBDb25maWd1cmF0aW9uXG4vLyBidWNrZXROYW1lIGlzIGFscmVhZHkgcHJvY2Vzcy5lbnYuUzNfQlVDS0VUXG5leHBvcnQgY29uc3QgczNFbmRwb2ludCA9IHByb2Nlc3MuZW52LlMzX0VORFBPSU5UOyAvLyBNYXkgYmUgdW5kZWZpbmVkIGlmIG5vdCBzZXQsIFMzIGNsaWVudCBoYW5kbGVzIHRoaXNcbiJdfQ==