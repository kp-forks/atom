import { S3Client } from '@aws-sdk/client-s3';
import { Kafka } from 'kafkajs';
import { validateDaySchedulePayload, publishToS3AndKafka,
// CreateDayScheduleBodyType // Assuming this type might come from common handler or types file
 } from '../_libs/common-on-event-handler';
// Assuming kafkaOnDayScheduleTopic might be defined in constants or ENV
import { kafkaOnDayScheduleTopic as KAFKA_ON_DAY_SCHEDULE_TOPIC_AUTH } from '../_libs/constants'; // Use a specific topic name or the same if applicable
// Initialize S3 and Kafka clients
const s3Client = new S3Client({
    region: process.env.AWS_REGION || 'us-east-1',
    credentials: {
        accessKeyId: process.env.S3_ACCESS_KEY || '',
        secretAccessKey: process.env.S3_SECRET_KEY || '',
    },
    endpoint: process.env.S3_ENDPOINT,
    forcePathStyle: true,
});
const kafka = new Kafka({
    clientId: process.env.KAFKA_CLIENT_ID_AUTH || 'gpt-auth-producer', // Potentially different clientId for auth context
    brokers: (process.env.KAFKA_BROKERS || 'localhost:9092').split(','),
    sasl: process.env.KAFKA_USERNAME && process.env.KAFKA_PASSWORD
        ? {
            mechanism: 'plain',
            username: process.env.KAFKA_USERNAME,
            password: process.env.KAFKA_PASSWORD,
        }
        : undefined,
});
export const handler = async (req, res) => {
    // 1. Validate Payload
    const validationResult = validateDaySchedulePayload(req.body);
    if (!validationResult.valid || !validationResult.data) {
        console.error('Payload validation failed for create-day-schedule-auth:', validationResult.error);
        return res
            .status(400)
            .json({
            message: validationResult.error?.message || 'Invalid request payload',
            event: validationResult.error?.event,
        });
    }
    const validatedPayload = validationResult.data;
    try {
        // 2. Publish to S3 and Kafka
        const publishResult = await publishToS3AndKafka(validatedPayload, KAFKA_ON_DAY_SCHEDULE_TOPIC_AUTH, // Use the specific auth topic
        s3Client, kafka);
        if (!publishResult.success) {
            console.error('Failed to publish to S3/Kafka for create-day-schedule-auth:', publishResult.error);
            return res
                .status(500)
                .json({
                message: 'Failed to process schedule due to an internal error.',
                details: publishResult.error?.message,
            });
        }
        // 3. Respond to client
        // Auth handler returns 200 for success
        return res.status(200).json({
            // Changed to .json for consistency, though original was .send
            message: 'Successfully created day schedule',
        });
    }
    catch (e) {
        console.error('Unexpected error in create-day-schedule-auth handler:', e);
        return res
            .status(500)
            .json({
            message: 'An unexpected internal server error occurred.',
            details: e.message,
        });
    }
};
export default handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWRheS1zY2hlZHVsZS1hdXRoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY3JlYXRlLWRheS1zY2hlZHVsZS1hdXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ2hDLE9BQU8sRUFDTCwwQkFBMEIsRUFDMUIsbUJBQW1CO0FBQ25CLCtGQUErRjtFQUNoRyxNQUFNLGtDQUFrQyxDQUFDO0FBQzFDLHdFQUF3RTtBQUN4RSxPQUFPLEVBQUUsdUJBQXVCLElBQUksZ0NBQWdDLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQyxDQUFDLHNEQUFzRDtBQUV4SixrQ0FBa0M7QUFDbEMsTUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLENBQUM7SUFDNUIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLFdBQVc7SUFDN0MsV0FBVyxFQUFFO1FBQ1gsV0FBVyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxJQUFJLEVBQUU7UUFDNUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxJQUFJLEVBQUU7S0FDakQ7SUFDRCxRQUFRLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXO0lBQ2pDLGNBQWMsRUFBRSxJQUFJO0NBQ3JCLENBQUMsQ0FBQztBQUVILE1BQU0sS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDO0lBQ3RCLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixJQUFJLG1CQUFtQixFQUFFLGtEQUFrRDtJQUNySCxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsSUFBSSxnQkFBZ0IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFDbkUsSUFBSSxFQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYztRQUN0RCxDQUFDLENBQUM7WUFDRSxTQUFTLEVBQUUsT0FBTztZQUNsQixRQUFRLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjO1lBQ3BDLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWM7U0FDckM7UUFDSCxDQUFDLENBQUMsU0FBUztDQUNoQixDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUFFLEdBQVksRUFBRSxHQUFhLEVBQUUsRUFBRTtJQUMzRCxzQkFBc0I7SUFDdEIsTUFBTSxnQkFBZ0IsR0FBRywwQkFBMEIsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3RELE9BQU8sQ0FBQyxLQUFLLENBQ1gseURBQXlELEVBQ3pELGdCQUFnQixDQUFDLEtBQUssQ0FDdkIsQ0FBQztRQUNGLE9BQU8sR0FBRzthQUNQLE1BQU0sQ0FBQyxHQUFHLENBQUM7YUFDWCxJQUFJLENBQUM7WUFDSixPQUFPLEVBQUUsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLE9BQU8sSUFBSSx5QkFBeUI7WUFDckUsS0FBSyxFQUFFLGdCQUFnQixDQUFDLEtBQUssRUFBRSxLQUFLO1NBQ3JDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxNQUFNLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQztJQUUvQyxJQUFJLENBQUM7UUFDSCw2QkFBNkI7UUFDN0IsTUFBTSxhQUFhLEdBQUcsTUFBTSxtQkFBbUIsQ0FDN0MsZ0JBQWdCLEVBQ2hCLGdDQUFnQyxFQUFFLDhCQUE4QjtRQUNoRSxRQUFRLEVBQ1IsS0FBSyxDQUNOLENBQUM7UUFFRixJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzNCLE9BQU8sQ0FBQyxLQUFLLENBQ1gsNkRBQTZELEVBQzdELGFBQWEsQ0FBQyxLQUFLLENBQ3BCLENBQUM7WUFDRixPQUFPLEdBQUc7aUJBQ1AsTUFBTSxDQUFDLEdBQUcsQ0FBQztpQkFDWCxJQUFJLENBQUM7Z0JBQ0osT0FBTyxFQUFFLHNEQUFzRDtnQkFDL0QsT0FBTyxFQUFFLGFBQWEsQ0FBQyxLQUFLLEVBQUUsT0FBTzthQUN0QyxDQUFDLENBQUM7UUFDUCxDQUFDO1FBRUQsdUJBQXVCO1FBQ3ZCLHVDQUF1QztRQUN2QyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQzFCLDhEQUE4RDtZQUM5RCxPQUFPLEVBQUUsbUNBQW1DO1NBQzdDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFBQyxPQUFPLENBQU0sRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsdURBQXVELEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDMUUsT0FBTyxHQUFHO2FBQ1AsTUFBTSxDQUFDLEdBQUcsQ0FBQzthQUNYLElBQUksQ0FBQztZQUNKLE9BQU8sRUFBRSwrQ0FBK0M7WUFDeEQsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPO1NBQ25CLENBQUMsQ0FBQztJQUNQLENBQUM7QUFDSCxDQUFDLENBQUM7QUFFRixlQUFlLE9BQU8sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBTM0NsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1zMyc7XG5pbXBvcnQgeyBLYWZrYSB9IGZyb20gJ2thZmthanMnO1xuaW1wb3J0IHtcbiAgdmFsaWRhdGVEYXlTY2hlZHVsZVBheWxvYWQsXG4gIHB1Ymxpc2hUb1MzQW5kS2Fma2EsXG4gIC8vIENyZWF0ZURheVNjaGVkdWxlQm9keVR5cGUgLy8gQXNzdW1pbmcgdGhpcyB0eXBlIG1pZ2h0IGNvbWUgZnJvbSBjb21tb24gaGFuZGxlciBvciB0eXBlcyBmaWxlXG59IGZyb20gJy4uL19saWJzL2NvbW1vbi1vbi1ldmVudC1oYW5kbGVyJztcbi8vIEFzc3VtaW5nIGthZmthT25EYXlTY2hlZHVsZVRvcGljIG1pZ2h0IGJlIGRlZmluZWQgaW4gY29uc3RhbnRzIG9yIEVOVlxuaW1wb3J0IHsga2Fma2FPbkRheVNjaGVkdWxlVG9waWMgYXMgS0FGS0FfT05fREFZX1NDSEVEVUxFX1RPUElDX0FVVEggfSBmcm9tICcuLi9fbGlicy9jb25zdGFudHMnOyAvLyBVc2UgYSBzcGVjaWZpYyB0b3BpYyBuYW1lIG9yIHRoZSBzYW1lIGlmIGFwcGxpY2FibGVcblxuLy8gSW5pdGlhbGl6ZSBTMyBhbmQgS2Fma2EgY2xpZW50c1xuY29uc3QgczNDbGllbnQgPSBuZXcgUzNDbGllbnQoe1xuICByZWdpb246IHByb2Nlc3MuZW52LkFXU19SRUdJT04gfHwgJ3VzLWVhc3QtMScsXG4gIGNyZWRlbnRpYWxzOiB7XG4gICAgYWNjZXNzS2V5SWQ6IHByb2Nlc3MuZW52LlMzX0FDQ0VTU19LRVkgfHwgJycsXG4gICAgc2VjcmV0QWNjZXNzS2V5OiBwcm9jZXNzLmVudi5TM19TRUNSRVRfS0VZIHx8ICcnLFxuICB9LFxuICBlbmRwb2ludDogcHJvY2Vzcy5lbnYuUzNfRU5EUE9JTlQsXG4gIGZvcmNlUGF0aFN0eWxlOiB0cnVlLFxufSk7XG5cbmNvbnN0IGthZmthID0gbmV3IEthZmthKHtcbiAgY2xpZW50SWQ6IHByb2Nlc3MuZW52LktBRktBX0NMSUVOVF9JRF9BVVRIIHx8ICdncHQtYXV0aC1wcm9kdWNlcicsIC8vIFBvdGVudGlhbGx5IGRpZmZlcmVudCBjbGllbnRJZCBmb3IgYXV0aCBjb250ZXh0XG4gIGJyb2tlcnM6IChwcm9jZXNzLmVudi5LQUZLQV9CUk9LRVJTIHx8ICdsb2NhbGhvc3Q6OTA5MicpLnNwbGl0KCcsJyksXG4gIHNhc2w6XG4gICAgcHJvY2Vzcy5lbnYuS0FGS0FfVVNFUk5BTUUgJiYgcHJvY2Vzcy5lbnYuS0FGS0FfUEFTU1dPUkRcbiAgICAgID8ge1xuICAgICAgICAgIG1lY2hhbmlzbTogJ3BsYWluJyxcbiAgICAgICAgICB1c2VybmFtZTogcHJvY2Vzcy5lbnYuS0FGS0FfVVNFUk5BTUUsXG4gICAgICAgICAgcGFzc3dvcmQ6IHByb2Nlc3MuZW52LktBRktBX1BBU1NXT1JELFxuICAgICAgICB9XG4gICAgICA6IHVuZGVmaW5lZCxcbn0pO1xuXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcbiAgLy8gMS4gVmFsaWRhdGUgUGF5bG9hZFxuICBjb25zdCB2YWxpZGF0aW9uUmVzdWx0ID0gdmFsaWRhdGVEYXlTY2hlZHVsZVBheWxvYWQocmVxLmJvZHkpO1xuICBpZiAoIXZhbGlkYXRpb25SZXN1bHQudmFsaWQgfHwgIXZhbGlkYXRpb25SZXN1bHQuZGF0YSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAnUGF5bG9hZCB2YWxpZGF0aW9uIGZhaWxlZCBmb3IgY3JlYXRlLWRheS1zY2hlZHVsZS1hdXRoOicsXG4gICAgICB2YWxpZGF0aW9uUmVzdWx0LmVycm9yXG4gICAgKTtcbiAgICByZXR1cm4gcmVzXG4gICAgICAuc3RhdHVzKDQwMClcbiAgICAgIC5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogdmFsaWRhdGlvblJlc3VsdC5lcnJvcj8ubWVzc2FnZSB8fCAnSW52YWxpZCByZXF1ZXN0IHBheWxvYWQnLFxuICAgICAgICBldmVudDogdmFsaWRhdGlvblJlc3VsdC5lcnJvcj8uZXZlbnQsXG4gICAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IHZhbGlkYXRlZFBheWxvYWQgPSB2YWxpZGF0aW9uUmVzdWx0LmRhdGE7XG5cbiAgdHJ5IHtcbiAgICAvLyAyLiBQdWJsaXNoIHRvIFMzIGFuZCBLYWZrYVxuICAgIGNvbnN0IHB1Ymxpc2hSZXN1bHQgPSBhd2FpdCBwdWJsaXNoVG9TM0FuZEthZmthKFxuICAgICAgdmFsaWRhdGVkUGF5bG9hZCxcbiAgICAgIEtBRktBX09OX0RBWV9TQ0hFRFVMRV9UT1BJQ19BVVRILCAvLyBVc2UgdGhlIHNwZWNpZmljIGF1dGggdG9waWNcbiAgICAgIHMzQ2xpZW50LFxuICAgICAga2Fma2FcbiAgICApO1xuXG4gICAgaWYgKCFwdWJsaXNoUmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICdGYWlsZWQgdG8gcHVibGlzaCB0byBTMy9LYWZrYSBmb3IgY3JlYXRlLWRheS1zY2hlZHVsZS1hdXRoOicsXG4gICAgICAgIHB1Ymxpc2hSZXN1bHQuZXJyb3JcbiAgICAgICk7XG4gICAgICByZXR1cm4gcmVzXG4gICAgICAgIC5zdGF0dXMoNTAwKVxuICAgICAgICAuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBwcm9jZXNzIHNjaGVkdWxlIGR1ZSB0byBhbiBpbnRlcm5hbCBlcnJvci4nLFxuICAgICAgICAgIGRldGFpbHM6IHB1Ymxpc2hSZXN1bHQuZXJyb3I/Lm1lc3NhZ2UsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIDMuIFJlc3BvbmQgdG8gY2xpZW50XG4gICAgLy8gQXV0aCBoYW5kbGVyIHJldHVybnMgMjAwIGZvciBzdWNjZXNzXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcbiAgICAgIC8vIENoYW5nZWQgdG8gLmpzb24gZm9yIGNvbnNpc3RlbmN5LCB0aG91Z2ggb3JpZ2luYWwgd2FzIC5zZW5kXG4gICAgICBtZXNzYWdlOiAnU3VjY2Vzc2Z1bGx5IGNyZWF0ZWQgZGF5IHNjaGVkdWxlJyxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZTogYW55KSB7XG4gICAgY29uc29sZS5lcnJvcignVW5leHBlY3RlZCBlcnJvciBpbiBjcmVhdGUtZGF5LXNjaGVkdWxlLWF1dGggaGFuZGxlcjonLCBlKTtcbiAgICByZXR1cm4gcmVzXG4gICAgICAuc3RhdHVzKDUwMClcbiAgICAgIC5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ0FuIHVuZXhwZWN0ZWQgaW50ZXJuYWwgc2VydmVyIGVycm9yIG9jY3VycmVkLicsXG4gICAgICAgIGRldGFpbHM6IGUubWVzc2FnZSxcbiAgICAgIH0pO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBoYW5kbGVyO1xuIl19