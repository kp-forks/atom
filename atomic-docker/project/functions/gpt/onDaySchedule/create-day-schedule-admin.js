import { S3Client } from '@aws-sdk/client-s3';
import { Kafka } from 'kafkajs';
import { validateDaySchedulePayload, publishToS3AndKafka,
// CreateDayScheduleBodyType // Assuming this type might come from common handler or types file
 } from '../_libs/common-on-event-handler';
// Assuming kafkaOnDayScheduleTopic might be defined in constants or ENV
import { kafkaOnDayScheduleTopic as KAFKA_ON_DAY_SCHEDULE_TOPIC_ADMIN } from '../_libs/constants';
// Initialize S3 and Kafka clients (Singleton pattern within the module)
// These should ideally use environment variables for configuration.
const s3Client = new S3Client({
    region: process.env.AWS_REGION || 'us-east-1',
    credentials: {
        // Kept credentials for consistency with original file
        accessKeyId: process.env.S3_ACCESS_KEY || '', // Provide defaults or ensure ENVs are set
        secretAccessKey: process.env.S3_SECRET_KEY || '',
    },
    endpoint: process.env.S3_ENDPOINT, // Ensure this is set in ENV
    forcePathStyle: true,
});
const kafka = new Kafka({
    clientId: process.env.KAFKA_CLIENT_ID_ADMIN || 'gpt-admin-producer',
    brokers: (process.env.KAFKA_BROKERS || 'localhost:9092').split(','),
    // Kept SASL config for consistency
    sasl: process.env.KAFKA_USERNAME && process.env.KAFKA_PASSWORD
        ? {
            mechanism: 'plain',
            username: process.env.KAFKA_USERNAME,
            password: process.env.KAFKA_PASSWORD,
        }
        : undefined,
});
export const handler = async (req, res) => {
    // 1. Validate Payload
    const validationResult = validateDaySchedulePayload(req.body);
    if (!validationResult.valid || !validationResult.data) {
        // Ensure data is present
        // Log the validation error details on the server for more insight
        console.error('Payload validation failed for create-day-schedule-admin:', validationResult.error);
        return res
            .status(400)
            .json({
            message: validationResult.error?.message || 'Invalid request payload',
            event: validationResult.error?.event,
        });
    }
    const validatedPayload = validationResult.data;
    try {
        // 2. Publish to S3 and Kafka
        // Using KAFKA_ON_DAY_SCHEDULE_TOPIC_ADMIN which should be the specific topic for admin
        const publishResult = await publishToS3AndKafka(validatedPayload, KAFKA_ON_DAY_SCHEDULE_TOPIC_ADMIN, // Use the specific admin topic
        s3Client, kafka);
        if (!publishResult.success) {
            console.error('Failed to publish to S3/Kafka for create-day-schedule-admin:', publishResult.error);
            return res
                .status(500)
                .json({
                message: 'Failed to process schedule due to an internal error.',
                details: publishResult.error?.message,
            });
        }
        // 3. Respond to client
        return res.status(202).json({
            message: 'Successfully created day schedule',
        });
    }
    catch (e) {
        console.error('Unexpected error in create-day-schedule-admin handler:', e);
        return res
            .status(500)
            .json({
            message: 'An unexpected internal server error occurred.',
            details: e.message,
        });
    }
};
export default handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWRheS1zY2hlZHVsZS1hZG1pbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNyZWF0ZS1kYXktc2NoZWR1bGUtYWRtaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDaEMsT0FBTyxFQUNMLDBCQUEwQixFQUMxQixtQkFBbUI7QUFDbkIsK0ZBQStGO0VBQ2hHLE1BQU0sa0NBQWtDLENBQUM7QUFDMUMsd0VBQXdFO0FBQ3hFLE9BQU8sRUFBRSx1QkFBdUIsSUFBSSxpQ0FBaUMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRWxHLHdFQUF3RTtBQUN4RSxvRUFBb0U7QUFDcEUsTUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLENBQUM7SUFDNUIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLFdBQVc7SUFDN0MsV0FBVyxFQUFFO1FBQ1gsc0RBQXNEO1FBQ3RELFdBQVcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsSUFBSSxFQUFFLEVBQUUsMENBQTBDO1FBQ3hGLGVBQWUsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsSUFBSSxFQUFFO0tBQ2pEO0lBQ0QsUUFBUSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLDRCQUE0QjtJQUMvRCxjQUFjLEVBQUUsSUFBSTtDQUNyQixDQUFDLENBQUM7QUFFSCxNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQztJQUN0QixRQUFRLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsSUFBSSxvQkFBb0I7SUFDbkUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLElBQUksZ0JBQWdCLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO0lBQ25FLG1DQUFtQztJQUNuQyxJQUFJLEVBQ0YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjO1FBQ3RELENBQUMsQ0FBQztZQUNFLFNBQVMsRUFBRSxPQUFPO1lBQ2xCLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWM7WUFDcEMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYztTQUNyQztRQUNILENBQUMsQ0FBQyxTQUFTO0NBQ2hCLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxLQUFLLEVBQUUsR0FBWSxFQUFFLEdBQWEsRUFBRSxFQUFFO0lBQzNELHNCQUFzQjtJQUN0QixNQUFNLGdCQUFnQixHQUFHLDBCQUEwQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5RCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdEQseUJBQXlCO1FBQ3pCLGtFQUFrRTtRQUNsRSxPQUFPLENBQUMsS0FBSyxDQUNYLDBEQUEwRCxFQUMxRCxnQkFBZ0IsQ0FBQyxLQUFLLENBQ3ZCLENBQUM7UUFDRixPQUFPLEdBQUc7YUFDUCxNQUFNLENBQUMsR0FBRyxDQUFDO2FBQ1gsSUFBSSxDQUFDO1lBQ0osT0FBTyxFQUFFLGdCQUFnQixDQUFDLEtBQUssRUFBRSxPQUFPLElBQUkseUJBQXlCO1lBQ3JFLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsS0FBSztTQUNyQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsTUFBTSxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUM7SUFFL0MsSUFBSSxDQUFDO1FBQ0gsNkJBQTZCO1FBQzdCLHVGQUF1RjtRQUN2RixNQUFNLGFBQWEsR0FBRyxNQUFNLG1CQUFtQixDQUM3QyxnQkFBZ0IsRUFDaEIsaUNBQWlDLEVBQUUsK0JBQStCO1FBQ2xFLFFBQVEsRUFDUixLQUFLLENBQ04sQ0FBQztRQUVGLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDM0IsT0FBTyxDQUFDLEtBQUssQ0FDWCw4REFBOEQsRUFDOUQsYUFBYSxDQUFDLEtBQUssQ0FDcEIsQ0FBQztZQUNGLE9BQU8sR0FBRztpQkFDUCxNQUFNLENBQUMsR0FBRyxDQUFDO2lCQUNYLElBQUksQ0FBQztnQkFDSixPQUFPLEVBQUUsc0RBQXNEO2dCQUMvRCxPQUFPLEVBQUUsYUFBYSxDQUFDLEtBQUssRUFBRSxPQUFPO2FBQ3RDLENBQUMsQ0FBQztRQUNQLENBQUM7UUFFRCx1QkFBdUI7UUFDdkIsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUMxQixPQUFPLEVBQUUsbUNBQW1DO1NBQzdDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFBQyxPQUFPLENBQU0sRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsd0RBQXdELEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDM0UsT0FBTyxHQUFHO2FBQ1AsTUFBTSxDQUFDLEdBQUcsQ0FBQzthQUNYLElBQUksQ0FBQztZQUNKLE9BQU8sRUFBRSwrQ0FBK0M7WUFDeEQsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPO1NBQ25CLENBQUMsQ0FBQztJQUNQLENBQUM7QUFDSCxDQUFDLENBQUM7QUFFRixlQUFlLE9BQU8sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBTM0NsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1zMyc7XG5pbXBvcnQgeyBLYWZrYSB9IGZyb20gJ2thZmthanMnO1xuaW1wb3J0IHtcbiAgdmFsaWRhdGVEYXlTY2hlZHVsZVBheWxvYWQsXG4gIHB1Ymxpc2hUb1MzQW5kS2Fma2EsXG4gIC8vIENyZWF0ZURheVNjaGVkdWxlQm9keVR5cGUgLy8gQXNzdW1pbmcgdGhpcyB0eXBlIG1pZ2h0IGNvbWUgZnJvbSBjb21tb24gaGFuZGxlciBvciB0eXBlcyBmaWxlXG59IGZyb20gJy4uL19saWJzL2NvbW1vbi1vbi1ldmVudC1oYW5kbGVyJztcbi8vIEFzc3VtaW5nIGthZmthT25EYXlTY2hlZHVsZVRvcGljIG1pZ2h0IGJlIGRlZmluZWQgaW4gY29uc3RhbnRzIG9yIEVOVlxuaW1wb3J0IHsga2Fma2FPbkRheVNjaGVkdWxlVG9waWMgYXMgS0FGS0FfT05fREFZX1NDSEVEVUxFX1RPUElDX0FETUlOIH0gZnJvbSAnLi4vX2xpYnMvY29uc3RhbnRzJztcblxuLy8gSW5pdGlhbGl6ZSBTMyBhbmQgS2Fma2EgY2xpZW50cyAoU2luZ2xldG9uIHBhdHRlcm4gd2l0aGluIHRoZSBtb2R1bGUpXG4vLyBUaGVzZSBzaG91bGQgaWRlYWxseSB1c2UgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZvciBjb25maWd1cmF0aW9uLlxuY29uc3QgczNDbGllbnQgPSBuZXcgUzNDbGllbnQoe1xuICByZWdpb246IHByb2Nlc3MuZW52LkFXU19SRUdJT04gfHwgJ3VzLWVhc3QtMScsXG4gIGNyZWRlbnRpYWxzOiB7XG4gICAgLy8gS2VwdCBjcmVkZW50aWFscyBmb3IgY29uc2lzdGVuY3kgd2l0aCBvcmlnaW5hbCBmaWxlXG4gICAgYWNjZXNzS2V5SWQ6IHByb2Nlc3MuZW52LlMzX0FDQ0VTU19LRVkgfHwgJycsIC8vIFByb3ZpZGUgZGVmYXVsdHMgb3IgZW5zdXJlIEVOVnMgYXJlIHNldFxuICAgIHNlY3JldEFjY2Vzc0tleTogcHJvY2Vzcy5lbnYuUzNfU0VDUkVUX0tFWSB8fCAnJyxcbiAgfSxcbiAgZW5kcG9pbnQ6IHByb2Nlc3MuZW52LlMzX0VORFBPSU5ULCAvLyBFbnN1cmUgdGhpcyBpcyBzZXQgaW4gRU5WXG4gIGZvcmNlUGF0aFN0eWxlOiB0cnVlLFxufSk7XG5cbmNvbnN0IGthZmthID0gbmV3IEthZmthKHtcbiAgY2xpZW50SWQ6IHByb2Nlc3MuZW52LktBRktBX0NMSUVOVF9JRF9BRE1JTiB8fCAnZ3B0LWFkbWluLXByb2R1Y2VyJyxcbiAgYnJva2VyczogKHByb2Nlc3MuZW52LktBRktBX0JST0tFUlMgfHwgJ2xvY2FsaG9zdDo5MDkyJykuc3BsaXQoJywnKSxcbiAgLy8gS2VwdCBTQVNMIGNvbmZpZyBmb3IgY29uc2lzdGVuY3lcbiAgc2FzbDpcbiAgICBwcm9jZXNzLmVudi5LQUZLQV9VU0VSTkFNRSAmJiBwcm9jZXNzLmVudi5LQUZLQV9QQVNTV09SRFxuICAgICAgPyB7XG4gICAgICAgICAgbWVjaGFuaXNtOiAncGxhaW4nLFxuICAgICAgICAgIHVzZXJuYW1lOiBwcm9jZXNzLmVudi5LQUZLQV9VU0VSTkFNRSxcbiAgICAgICAgICBwYXNzd29yZDogcHJvY2Vzcy5lbnYuS0FGS0FfUEFTU1dPUkQsXG4gICAgICAgIH1cbiAgICAgIDogdW5kZWZpbmVkLFxufSk7XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xuICAvLyAxLiBWYWxpZGF0ZSBQYXlsb2FkXG4gIGNvbnN0IHZhbGlkYXRpb25SZXN1bHQgPSB2YWxpZGF0ZURheVNjaGVkdWxlUGF5bG9hZChyZXEuYm9keSk7XG4gIGlmICghdmFsaWRhdGlvblJlc3VsdC52YWxpZCB8fCAhdmFsaWRhdGlvblJlc3VsdC5kYXRhKSB7XG4gICAgLy8gRW5zdXJlIGRhdGEgaXMgcHJlc2VudFxuICAgIC8vIExvZyB0aGUgdmFsaWRhdGlvbiBlcnJvciBkZXRhaWxzIG9uIHRoZSBzZXJ2ZXIgZm9yIG1vcmUgaW5zaWdodFxuICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAnUGF5bG9hZCB2YWxpZGF0aW9uIGZhaWxlZCBmb3IgY3JlYXRlLWRheS1zY2hlZHVsZS1hZG1pbjonLFxuICAgICAgdmFsaWRhdGlvblJlc3VsdC5lcnJvclxuICAgICk7XG4gICAgcmV0dXJuIHJlc1xuICAgICAgLnN0YXR1cyg0MDApXG4gICAgICAuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6IHZhbGlkYXRpb25SZXN1bHQuZXJyb3I/Lm1lc3NhZ2UgfHwgJ0ludmFsaWQgcmVxdWVzdCBwYXlsb2FkJyxcbiAgICAgICAgZXZlbnQ6IHZhbGlkYXRpb25SZXN1bHQuZXJyb3I/LmV2ZW50LFxuICAgICAgfSk7XG4gIH1cblxuICBjb25zdCB2YWxpZGF0ZWRQYXlsb2FkID0gdmFsaWRhdGlvblJlc3VsdC5kYXRhO1xuXG4gIHRyeSB7XG4gICAgLy8gMi4gUHVibGlzaCB0byBTMyBhbmQgS2Fma2FcbiAgICAvLyBVc2luZyBLQUZLQV9PTl9EQVlfU0NIRURVTEVfVE9QSUNfQURNSU4gd2hpY2ggc2hvdWxkIGJlIHRoZSBzcGVjaWZpYyB0b3BpYyBmb3IgYWRtaW5cbiAgICBjb25zdCBwdWJsaXNoUmVzdWx0ID0gYXdhaXQgcHVibGlzaFRvUzNBbmRLYWZrYShcbiAgICAgIHZhbGlkYXRlZFBheWxvYWQsXG4gICAgICBLQUZLQV9PTl9EQVlfU0NIRURVTEVfVE9QSUNfQURNSU4sIC8vIFVzZSB0aGUgc3BlY2lmaWMgYWRtaW4gdG9waWNcbiAgICAgIHMzQ2xpZW50LFxuICAgICAga2Fma2FcbiAgICApO1xuXG4gICAgaWYgKCFwdWJsaXNoUmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICdGYWlsZWQgdG8gcHVibGlzaCB0byBTMy9LYWZrYSBmb3IgY3JlYXRlLWRheS1zY2hlZHVsZS1hZG1pbjonLFxuICAgICAgICBwdWJsaXNoUmVzdWx0LmVycm9yXG4gICAgICApO1xuICAgICAgcmV0dXJuIHJlc1xuICAgICAgICAuc3RhdHVzKDUwMClcbiAgICAgICAgLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gcHJvY2VzcyBzY2hlZHVsZSBkdWUgdG8gYW4gaW50ZXJuYWwgZXJyb3IuJyxcbiAgICAgICAgICBkZXRhaWxzOiBwdWJsaXNoUmVzdWx0LmVycm9yPy5tZXNzYWdlLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyAzLiBSZXNwb25kIHRvIGNsaWVudFxuICAgIHJldHVybiByZXMuc3RhdHVzKDIwMikuanNvbih7XG4gICAgICBtZXNzYWdlOiAnU3VjY2Vzc2Z1bGx5IGNyZWF0ZWQgZGF5IHNjaGVkdWxlJyxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZTogYW55KSB7XG4gICAgY29uc29sZS5lcnJvcignVW5leHBlY3RlZCBlcnJvciBpbiBjcmVhdGUtZGF5LXNjaGVkdWxlLWFkbWluIGhhbmRsZXI6JywgZSk7XG4gICAgcmV0dXJuIHJlc1xuICAgICAgLnN0YXR1cyg1MDApXG4gICAgICAuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdBbiB1bmV4cGVjdGVkIGludGVybmFsIHNlcnZlciBlcnJvciBvY2N1cnJlZC4nLFxuICAgICAgICBkZXRhaWxzOiBlLm1lc3NhZ2UsXG4gICAgICB9KTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgaGFuZGxlcjtcbiJdfQ==