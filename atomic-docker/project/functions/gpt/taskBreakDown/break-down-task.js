import { breakDownTask } from '../_libs/api-helper';
const handler = async (req, res) => {
    try {
        const reqBody = req?.body;
        console.log('breakDownTaskHandler called');
        // validate
        if (!reqBody?.userId) {
            console.log('!reqBody?.userId');
            return res.status(400).json({
                message: 'no userId present',
                event: reqBody,
            });
        }
        if (!reqBody?.startDate) {
            console.log('!reqBody?.startDate');
            return res.status(400).json({
                message: 'no startDate present',
                event: reqBody,
            });
        }
        if (!reqBody?.endDate) {
            console.log('!reqBody?.endDate');
            return res.status(400).json({
                message: 'no endDate present',
                event: reqBody,
            });
        }
        if (!reqBody?.timezone) {
            console.log('!reqBody?.timezone');
            return res.status(400).json({
                message: 'no timezone present',
                event: reqBody,
            });
        }
        if (!reqBody?.task) {
            console.log('!reqBody?.task');
            return res.status(400).json({
                message: 'no task present',
                event: reqBody,
            });
        }
        await breakDownTask(reqBody?.userId, reqBody?.task, reqBody?.isAllDay, reqBody?.timezone, reqBody?.startDate, reqBody?.endDate, reqBody?.email, reqBody?.name, reqBody?.isTwo);
        res.status(200).send('succesfully created task break down');
    }
    catch (e) {
        console.log(e, ' unable to create task break down');
        res.status(400).json(e);
    }
};
export default handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWstZG93bi10YXNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYnJlYWstZG93bi10YXNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVwRCxNQUFNLE9BQU8sR0FBRyxLQUFLLEVBQUUsR0FBWSxFQUFFLEdBQWEsRUFBRSxFQUFFO0lBQ3BELElBQUksQ0FBQztRQUNILE1BQU0sT0FBTyxHQUFpQyxHQUFHLEVBQUUsSUFBSSxDQUFDO1FBQ3hELE9BQU8sQ0FBQyxHQUFHLENBQUMsNkJBQTZCLENBQUMsQ0FBQztRQUMzQyxXQUFXO1FBQ1gsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsQ0FBQztZQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFDaEMsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDMUIsT0FBTyxFQUFFLG1CQUFtQjtnQkFDNUIsS0FBSyxFQUFFLE9BQU87YUFDZixDQUFDLENBQUM7UUFDTCxDQUFDO1FBRUQsSUFBSSxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsQ0FBQztZQUN4QixPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUM7WUFDbkMsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDMUIsT0FBTyxFQUFFLHNCQUFzQjtnQkFDL0IsS0FBSyxFQUFFLE9BQU87YUFDZixDQUFDLENBQUM7UUFDTCxDQUFDO1FBRUQsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQztZQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFDakMsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDMUIsT0FBTyxFQUFFLG9CQUFvQjtnQkFDN0IsS0FBSyxFQUFFLE9BQU87YUFDZixDQUFDLENBQUM7UUFDTCxDQUFDO1FBRUQsSUFBSSxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsQ0FBQztZQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFDbEMsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDMUIsT0FBTyxFQUFFLHFCQUFxQjtnQkFDOUIsS0FBSyxFQUFFLE9BQU87YUFDZixDQUFDLENBQUM7UUFDTCxDQUFDO1FBRUQsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQztZQUNuQixPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDOUIsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDMUIsT0FBTyxFQUFFLGlCQUFpQjtnQkFDMUIsS0FBSyxFQUFFLE9BQU87YUFDZixDQUFDLENBQUM7UUFDTCxDQUFDO1FBRUQsTUFBTSxhQUFhLENBQ2pCLE9BQU8sRUFBRSxNQUFNLEVBQ2YsT0FBTyxFQUFFLElBQUksRUFDYixPQUFPLEVBQUUsUUFBUSxFQUNqQixPQUFPLEVBQUUsUUFBUSxFQUNqQixPQUFPLEVBQUUsU0FBUyxFQUNsQixPQUFPLEVBQUUsT0FBTyxFQUNoQixPQUFPLEVBQUUsS0FBSyxFQUNkLE9BQU8sRUFBRSxJQUFJLEVBQ2IsT0FBTyxFQUFFLEtBQUssQ0FDZixDQUFDO1FBRUYsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMscUNBQXFDLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUNYLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLG1DQUFtQyxDQUFDLENBQUM7UUFDcEQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsQ0FBQztBQUNILENBQUMsQ0FBQztBQUVGLGVBQWUsT0FBTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCB7IEJyZWFrRG93blRhc2tSZXF1ZXN0Qm9keVR5cGUgfSBmcm9tICcuLi9fbGlicy90eXBlcyc7XG5pbXBvcnQgeyBicmVha0Rvd25UYXNrIH0gZnJvbSAnLi4vX2xpYnMvYXBpLWhlbHBlcic7XG5cbmNvbnN0IGhhbmRsZXIgPSBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVxQm9keTogQnJlYWtEb3duVGFza1JlcXVlc3RCb2R5VHlwZSA9IHJlcT8uYm9keTtcbiAgICBjb25zb2xlLmxvZygnYnJlYWtEb3duVGFza0hhbmRsZXIgY2FsbGVkJyk7XG4gICAgLy8gdmFsaWRhdGVcbiAgICBpZiAoIXJlcUJvZHk/LnVzZXJJZCkge1xuICAgICAgY29uc29sZS5sb2coJyFyZXFCb2R5Py51c2VySWQnKTtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdubyB1c2VySWQgcHJlc2VudCcsXG4gICAgICAgIGV2ZW50OiByZXFCb2R5LFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFyZXFCb2R5Py5zdGFydERhdGUpIHtcbiAgICAgIGNvbnNvbGUubG9nKCchcmVxQm9keT8uc3RhcnREYXRlJyk7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBtZXNzYWdlOiAnbm8gc3RhcnREYXRlIHByZXNlbnQnLFxuICAgICAgICBldmVudDogcmVxQm9keSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghcmVxQm9keT8uZW5kRGF0ZSkge1xuICAgICAgY29uc29sZS5sb2coJyFyZXFCb2R5Py5lbmREYXRlJyk7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBtZXNzYWdlOiAnbm8gZW5kRGF0ZSBwcmVzZW50JyxcbiAgICAgICAgZXZlbnQ6IHJlcUJvZHksXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIXJlcUJvZHk/LnRpbWV6b25lKSB7XG4gICAgICBjb25zb2xlLmxvZygnIXJlcUJvZHk/LnRpbWV6b25lJyk7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBtZXNzYWdlOiAnbm8gdGltZXpvbmUgcHJlc2VudCcsXG4gICAgICAgIGV2ZW50OiByZXFCb2R5LFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFyZXFCb2R5Py50YXNrKSB7XG4gICAgICBjb25zb2xlLmxvZygnIXJlcUJvZHk/LnRhc2snKTtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdubyB0YXNrIHByZXNlbnQnLFxuICAgICAgICBldmVudDogcmVxQm9keSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGF3YWl0IGJyZWFrRG93blRhc2soXG4gICAgICByZXFCb2R5Py51c2VySWQsXG4gICAgICByZXFCb2R5Py50YXNrLFxuICAgICAgcmVxQm9keT8uaXNBbGxEYXksXG4gICAgICByZXFCb2R5Py50aW1lem9uZSxcbiAgICAgIHJlcUJvZHk/LnN0YXJ0RGF0ZSxcbiAgICAgIHJlcUJvZHk/LmVuZERhdGUsXG4gICAgICByZXFCb2R5Py5lbWFpbCxcbiAgICAgIHJlcUJvZHk/Lm5hbWUsXG4gICAgICByZXFCb2R5Py5pc1R3b1xuICAgICk7XG5cbiAgICByZXMuc3RhdHVzKDIwMCkuc2VuZCgnc3VjY2VzZnVsbHkgY3JlYXRlZCB0YXNrIGJyZWFrIGRvd24nKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUubG9nKGUsICcgdW5hYmxlIHRvIGNyZWF0ZSB0YXNrIGJyZWFrIGRvd24nKTtcbiAgICByZXMuc3RhdHVzKDQwMCkuanNvbihlKTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgaGFuZGxlcjtcbiJdfQ==