export const extractDateTimePrompt = `Given the email history, start time of exchange and timezone, extract the data and time in iso 8601 format (YYYY-MM-DDTHH:mm:ss) and respond in JSON format with key "meeting_time" for the scheduled meeting.`;
export const extractDateTimeExampleInput = `start time: "2023-03-15T08:59:52-04:00" timezone: "America/New_York" \n Let's meetup on Monday at 3 pm`;
// 2023-03-20T15:00:00-04:00
// "meeting_time"
export const extractDateTimeExampleOutput = `{"meeting_time": "2023-03-20T15:00:00-04:00"}`;
export const isMeetingTimeScheduledPrompt = `You are a meeting scheduling validator. Given the email history, find out if a meeting response is provided. Respond in JSON format with a boolean value for true if provided or false if not. Use the key "time_provided" for the meeting. Do not assume anything except that current time is available for meeting scheduler even if not provided. Meeting time should be provided to be considered a true value. Meeting time is usually provided in short, simple or relative terms to current time. Accept any terms using any form of date time language.`;
export const isMeetingTimeScheduledExampleInput = `email body: Dear Tyler, \n Let's meet Friday at 3 pm. \n Regards, Midge  \n\n Dear Midge, \n I would like to meet up.  \n Regards, Tyler`;
export const isMeetingTimeScheduledExampleOutput = `{"time_provided": true}`;
export const generateMeetingSummaryPrompt = `Given the email history, generate the summary and notes of the meeting event. Respond in JSON format with keys "summary" and "notes".`;
export const generateMeetingSummaryInput = `start time: "2023-03-15T08:59:52-04:00" timezone: "America/New_York" \n Dear Tyler, I would love to see your presentation. \n Regards Mona.\n Dear Mona, \n I would love to show you how we will market Prestige. \n Regards Tyler`;
export const generateMeetingSummaryOutput = `{"summary": "Prestige: Marketing Presentation", "notes": "Tyler and Mona are planning to meet to go over a marketing presentation regarding Prestige."}`;
export const summarizeAvailabilityPrompt = `
    The user will give you his/her availability time slots generated from the calendar using code. Rewrite the availability in a more simple and concise terms. Write the response in first person as if conveying the information to a third party. Do not make up availability or hallucinate. Do not provide any availability until information is provided to you.
`;
export const summarizeAvailabilityExampleInput = `02/20/2023 - 8:00 AM - 8:30 AM, 8:30 AM - 9:00 AM, 9:00 AM - 9:30 AM, 9:30 AM - 10:00 AM, 10:00 AM - 10:30 AM, 10:30 AM - 11:00 AM, 11:00 AM - 11:30 AM, 11:30 AM - 12:00 PM, 12:00 PM - 12:30 PM, 12:30 PM - 1:00 PM`;
export const summarizeAvailabilityExampleOutput = `On February 20, I'm available from 8:00 AM to 1:00 PM.
`;
export const summarizeAvailabilityResponsesPrompt = `The user will provide his/her availability. Rewrite the availability in a more simple and concise terms. Write the response in first person as if conveying the information to a third party. Do not make up availability or hallucinate. Do not provide any availability until information is provided to you.`;
export const summarizeAvailabilityResponsesPromptExampleInput = `On February 19, I'm available from 7:00 AM to 10:30 PM. On February 20, I'm available from 6:00 AM to 12:00 PM and from 3:00 PM to 10:00 PM.`;
export const summarizeAvailabilityResponsesPromptExampleOutput = `I'm available on February 19 from 7:00 AM to 10:30 PM, and on February 20 from 6:00 AM to 12:00 PM and from 3:00 PM to 10:00 PM.`;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbXB0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInByb21wdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsZ05BQWdOLENBQUM7QUFFdFAsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQUcsd0dBQXdHLENBQUM7QUFDcEosNEJBQTRCO0FBQzVCLGlCQUFpQjtBQUNqQixNQUFNLENBQUMsTUFBTSw0QkFBNEIsR0FBRywrQ0FBK0MsQ0FBQztBQUU1RixNQUFNLENBQUMsTUFBTSw0QkFBNEIsR0FBRyxpaUJBQWlpQixDQUFDO0FBRTlrQixNQUFNLENBQUMsTUFBTSxrQ0FBa0MsR0FBRywwSUFBMEksQ0FBQztBQUU3TCxNQUFNLENBQUMsTUFBTSxtQ0FBbUMsR0FBRyx5QkFBeUIsQ0FBQztBQUU3RSxNQUFNLENBQUMsTUFBTSw0QkFBNEIsR0FBRyx1SUFBdUksQ0FBQztBQUVwTCxNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRyxvT0FBb08sQ0FBQztBQUVoUixNQUFNLENBQUMsTUFBTSw0QkFBNEIsR0FBRyx5SkFBeUosQ0FBQztBQUV0TSxNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRzs7Q0FFMUMsQ0FBQztBQUNGLE1BQU0sQ0FBQyxNQUFNLGlDQUFpQyxHQUFHLHVOQUF1TixDQUFDO0FBQ3pRLE1BQU0sQ0FBQyxNQUFNLGtDQUFrQyxHQUFHO0NBQ2pELENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxvQ0FBb0MsR0FBRyxpVEFBaVQsQ0FBQztBQUV0VyxNQUFNLENBQUMsTUFBTSxnREFBZ0QsR0FBRyw4SUFBOEksQ0FBQztBQUUvTSxNQUFNLENBQUMsTUFBTSxpREFBaUQsR0FBRyxrSUFBa0ksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBleHRyYWN0RGF0ZVRpbWVQcm9tcHQgPSBgR2l2ZW4gdGhlIGVtYWlsIGhpc3RvcnksIHN0YXJ0IHRpbWUgb2YgZXhjaGFuZ2UgYW5kIHRpbWV6b25lLCBleHRyYWN0IHRoZSBkYXRhIGFuZCB0aW1lIGluIGlzbyA4NjAxIGZvcm1hdCAoWVlZWS1NTS1ERFRISDptbTpzcykgYW5kIHJlc3BvbmQgaW4gSlNPTiBmb3JtYXQgd2l0aCBrZXkgXCJtZWV0aW5nX3RpbWVcIiBmb3IgdGhlIHNjaGVkdWxlZCBtZWV0aW5nLmA7XG5cbmV4cG9ydCBjb25zdCBleHRyYWN0RGF0ZVRpbWVFeGFtcGxlSW5wdXQgPSBgc3RhcnQgdGltZTogXCIyMDIzLTAzLTE1VDA4OjU5OjUyLTA0OjAwXCIgdGltZXpvbmU6IFwiQW1lcmljYS9OZXdfWW9ya1wiIFxcbiBMZXQncyBtZWV0dXAgb24gTW9uZGF5IGF0IDMgcG1gO1xuLy8gMjAyMy0wMy0yMFQxNTowMDowMC0wNDowMFxuLy8gXCJtZWV0aW5nX3RpbWVcIlxuZXhwb3J0IGNvbnN0IGV4dHJhY3REYXRlVGltZUV4YW1wbGVPdXRwdXQgPSBge1wibWVldGluZ190aW1lXCI6IFwiMjAyMy0wMy0yMFQxNTowMDowMC0wNDowMFwifWA7XG5cbmV4cG9ydCBjb25zdCBpc01lZXRpbmdUaW1lU2NoZWR1bGVkUHJvbXB0ID0gYFlvdSBhcmUgYSBtZWV0aW5nIHNjaGVkdWxpbmcgdmFsaWRhdG9yLiBHaXZlbiB0aGUgZW1haWwgaGlzdG9yeSwgZmluZCBvdXQgaWYgYSBtZWV0aW5nIHJlc3BvbnNlIGlzIHByb3ZpZGVkLiBSZXNwb25kIGluIEpTT04gZm9ybWF0IHdpdGggYSBib29sZWFuIHZhbHVlIGZvciB0cnVlIGlmIHByb3ZpZGVkIG9yIGZhbHNlIGlmIG5vdC4gVXNlIHRoZSBrZXkgXCJ0aW1lX3Byb3ZpZGVkXCIgZm9yIHRoZSBtZWV0aW5nLiBEbyBub3QgYXNzdW1lIGFueXRoaW5nIGV4Y2VwdCB0aGF0IGN1cnJlbnQgdGltZSBpcyBhdmFpbGFibGUgZm9yIG1lZXRpbmcgc2NoZWR1bGVyIGV2ZW4gaWYgbm90IHByb3ZpZGVkLiBNZWV0aW5nIHRpbWUgc2hvdWxkIGJlIHByb3ZpZGVkIHRvIGJlIGNvbnNpZGVyZWQgYSB0cnVlIHZhbHVlLiBNZWV0aW5nIHRpbWUgaXMgdXN1YWxseSBwcm92aWRlZCBpbiBzaG9ydCwgc2ltcGxlIG9yIHJlbGF0aXZlIHRlcm1zIHRvIGN1cnJlbnQgdGltZS4gQWNjZXB0IGFueSB0ZXJtcyB1c2luZyBhbnkgZm9ybSBvZiBkYXRlIHRpbWUgbGFuZ3VhZ2UuYDtcblxuZXhwb3J0IGNvbnN0IGlzTWVldGluZ1RpbWVTY2hlZHVsZWRFeGFtcGxlSW5wdXQgPSBgZW1haWwgYm9keTogRGVhciBUeWxlciwgXFxuIExldCdzIG1lZXQgRnJpZGF5IGF0IDMgcG0uIFxcbiBSZWdhcmRzLCBNaWRnZSAgXFxuXFxuIERlYXIgTWlkZ2UsIFxcbiBJIHdvdWxkIGxpa2UgdG8gbWVldCB1cC4gIFxcbiBSZWdhcmRzLCBUeWxlcmA7XG5cbmV4cG9ydCBjb25zdCBpc01lZXRpbmdUaW1lU2NoZWR1bGVkRXhhbXBsZU91dHB1dCA9IGB7XCJ0aW1lX3Byb3ZpZGVkXCI6IHRydWV9YDtcblxuZXhwb3J0IGNvbnN0IGdlbmVyYXRlTWVldGluZ1N1bW1hcnlQcm9tcHQgPSBgR2l2ZW4gdGhlIGVtYWlsIGhpc3RvcnksIGdlbmVyYXRlIHRoZSBzdW1tYXJ5IGFuZCBub3RlcyBvZiB0aGUgbWVldGluZyBldmVudC4gUmVzcG9uZCBpbiBKU09OIGZvcm1hdCB3aXRoIGtleXMgXCJzdW1tYXJ5XCIgYW5kIFwibm90ZXNcIi5gO1xuXG5leHBvcnQgY29uc3QgZ2VuZXJhdGVNZWV0aW5nU3VtbWFyeUlucHV0ID0gYHN0YXJ0IHRpbWU6IFwiMjAyMy0wMy0xNVQwODo1OTo1Mi0wNDowMFwiIHRpbWV6b25lOiBcIkFtZXJpY2EvTmV3X1lvcmtcIiBcXG4gRGVhciBUeWxlciwgSSB3b3VsZCBsb3ZlIHRvIHNlZSB5b3VyIHByZXNlbnRhdGlvbi4gXFxuIFJlZ2FyZHMgTW9uYS5cXG4gRGVhciBNb25hLCBcXG4gSSB3b3VsZCBsb3ZlIHRvIHNob3cgeW91IGhvdyB3ZSB3aWxsIG1hcmtldCBQcmVzdGlnZS4gXFxuIFJlZ2FyZHMgVHlsZXJgO1xuXG5leHBvcnQgY29uc3QgZ2VuZXJhdGVNZWV0aW5nU3VtbWFyeU91dHB1dCA9IGB7XCJzdW1tYXJ5XCI6IFwiUHJlc3RpZ2U6IE1hcmtldGluZyBQcmVzZW50YXRpb25cIiwgXCJub3Rlc1wiOiBcIlR5bGVyIGFuZCBNb25hIGFyZSBwbGFubmluZyB0byBtZWV0IHRvIGdvIG92ZXIgYSBtYXJrZXRpbmcgcHJlc2VudGF0aW9uIHJlZ2FyZGluZyBQcmVzdGlnZS5cIn1gO1xuXG5leHBvcnQgY29uc3Qgc3VtbWFyaXplQXZhaWxhYmlsaXR5UHJvbXB0ID0gYFxuICAgIFRoZSB1c2VyIHdpbGwgZ2l2ZSB5b3UgaGlzL2hlciBhdmFpbGFiaWxpdHkgdGltZSBzbG90cyBnZW5lcmF0ZWQgZnJvbSB0aGUgY2FsZW5kYXIgdXNpbmcgY29kZS4gUmV3cml0ZSB0aGUgYXZhaWxhYmlsaXR5IGluIGEgbW9yZSBzaW1wbGUgYW5kIGNvbmNpc2UgdGVybXMuIFdyaXRlIHRoZSByZXNwb25zZSBpbiBmaXJzdCBwZXJzb24gYXMgaWYgY29udmV5aW5nIHRoZSBpbmZvcm1hdGlvbiB0byBhIHRoaXJkIHBhcnR5LiBEbyBub3QgbWFrZSB1cCBhdmFpbGFiaWxpdHkgb3IgaGFsbHVjaW5hdGUuIERvIG5vdCBwcm92aWRlIGFueSBhdmFpbGFiaWxpdHkgdW50aWwgaW5mb3JtYXRpb24gaXMgcHJvdmlkZWQgdG8geW91LlxuYDtcbmV4cG9ydCBjb25zdCBzdW1tYXJpemVBdmFpbGFiaWxpdHlFeGFtcGxlSW5wdXQgPSBgMDIvMjAvMjAyMyAtIDg6MDAgQU0gLSA4OjMwIEFNLCA4OjMwIEFNIC0gOTowMCBBTSwgOTowMCBBTSAtIDk6MzAgQU0sIDk6MzAgQU0gLSAxMDowMCBBTSwgMTA6MDAgQU0gLSAxMDozMCBBTSwgMTA6MzAgQU0gLSAxMTowMCBBTSwgMTE6MDAgQU0gLSAxMTozMCBBTSwgMTE6MzAgQU0gLSAxMjowMCBQTSwgMTI6MDAgUE0gLSAxMjozMCBQTSwgMTI6MzAgUE0gLSAxOjAwIFBNYDtcbmV4cG9ydCBjb25zdCBzdW1tYXJpemVBdmFpbGFiaWxpdHlFeGFtcGxlT3V0cHV0ID0gYE9uIEZlYnJ1YXJ5IDIwLCBJJ20gYXZhaWxhYmxlIGZyb20gODowMCBBTSB0byAxOjAwIFBNLlxuYDtcblxuZXhwb3J0IGNvbnN0IHN1bW1hcml6ZUF2YWlsYWJpbGl0eVJlc3BvbnNlc1Byb21wdCA9IGBUaGUgdXNlciB3aWxsIHByb3ZpZGUgaGlzL2hlciBhdmFpbGFiaWxpdHkuIFJld3JpdGUgdGhlIGF2YWlsYWJpbGl0eSBpbiBhIG1vcmUgc2ltcGxlIGFuZCBjb25jaXNlIHRlcm1zLiBXcml0ZSB0aGUgcmVzcG9uc2UgaW4gZmlyc3QgcGVyc29uIGFzIGlmIGNvbnZleWluZyB0aGUgaW5mb3JtYXRpb24gdG8gYSB0aGlyZCBwYXJ0eS4gRG8gbm90IG1ha2UgdXAgYXZhaWxhYmlsaXR5IG9yIGhhbGx1Y2luYXRlLiBEbyBub3QgcHJvdmlkZSBhbnkgYXZhaWxhYmlsaXR5IHVudGlsIGluZm9ybWF0aW9uIGlzIHByb3ZpZGVkIHRvIHlvdS5gO1xuXG5leHBvcnQgY29uc3Qgc3VtbWFyaXplQXZhaWxhYmlsaXR5UmVzcG9uc2VzUHJvbXB0RXhhbXBsZUlucHV0ID0gYE9uIEZlYnJ1YXJ5IDE5LCBJJ20gYXZhaWxhYmxlIGZyb20gNzowMCBBTSB0byAxMDozMCBQTS4gT24gRmVicnVhcnkgMjAsIEknbSBhdmFpbGFibGUgZnJvbSA2OjAwIEFNIHRvIDEyOjAwIFBNIGFuZCBmcm9tIDM6MDAgUE0gdG8gMTA6MDAgUE0uYDtcblxuZXhwb3J0IGNvbnN0IHN1bW1hcml6ZUF2YWlsYWJpbGl0eVJlc3BvbnNlc1Byb21wdEV4YW1wbGVPdXRwdXQgPSBgSSdtIGF2YWlsYWJsZSBvbiBGZWJydWFyeSAxOSBmcm9tIDc6MDAgQU0gdG8gMTA6MzAgUE0sIGFuZCBvbiBGZWJydWFyeSAyMCBmcm9tIDY6MDAgQU0gdG8gMTI6MDAgUE0gYW5kIGZyb20gMzowMCBQTSB0byAxMDowMCBQTS5gO1xuIl19