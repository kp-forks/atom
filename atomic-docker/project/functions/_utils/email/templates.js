import axios from 'axios';
import path from 'path';
import fs from 'fs';
import urlJoin from 'url-join';
import { logger } from '@utils/logger';
import { ENV } from '@utils/env';
const templateEngine = ({ content, variables }) => {
    let templatedContent = content;
    for (const key in variables) {
        const regex = new RegExp(`\\\${${key}}`, 'g');
        templatedContent = templatedContent.replace(regex, variables[key]);
    }
    return templatedContent;
};
const convertFieldToFileName = (field) => {
    if (field === 'subject') {
        return 'subject.txt';
    }
    if (field === 'html') {
        return 'body.html';
    }
    if (field === 'text') {
        return 'body.txt';
    }
    return null;
};
const getFileName = (view, locals) => {
    // generate path to template
    const viewSplit = view.split('/');
    const id = viewSplit[0];
    const field = viewSplit[1];
    const { locale } = locals;
    const fileName = convertFieldToFileName(field);
    return `${locale}/${id}/${fileName}`;
};
const readFile = (view, locals) => {
    const { locale } = locals;
    const fullPath = path.join(ENV.PWD, '_utils', 'email', 'email-templates', getFileName(view, locals));
    logger.debug(`Using email template: ${fullPath}`);
    try {
        return fs.readFileSync(fullPath).toString();
    }
    catch (error) {
        if (locale !== ENV.AUTH_LOCALE_DEFAULT) {
            logger.debug(`No template found at ${fullPath}, falling back to default locale ${ENV.AUTH_LOCALE_DEFAULT}`);
            return readFile(view, { ...locals, locale: ENV.AUTH_LOCALE_DEFAULT });
        }
        else {
            throw Error();
        }
    }
};
/** @deprecated */
const readRemoteTemplate = async (view, locals) => {
    const { locale } = locals;
    const fileName = getFileName(view, locals);
    const url = urlJoin(ENV.AUTH_EMAIL_TEMPLATE_FETCH_URL, fileName);
    logger.debug(`Using email template: ${url}`);
    try {
        const result = await axios.get(url);
        return result.data;
    }
    catch (error) {
        if (locale !== ENV.AUTH_LOCALE_DEFAULT)
            return readRemoteTemplate(view, {
                ...locals,
                locale: ENV.AUTH_LOCALE_DEFAULT,
            });
        else {
            logger.warn(`No template found at ${url}`);
            throw Error();
        }
    }
};
export const renderTemplate = async (view, locals) => {
    try {
        const content = ENV.AUTH_EMAIL_TEMPLATE_FETCH_URL
            ? await readRemoteTemplate(view, locals)
            : readFile(view, locals);
        return templateEngine({ content, variables: locals });
    }
    catch (error) {
        return null;
    }
};
//# sourceMappingURL=data:application/json;base64,