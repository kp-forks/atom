import Email from 'email-templates';
import nodemailer from 'nodemailer';
import { logger } from '@utils/logger';
import { renderTemplate } from './templates';
import { ENV } from '@utils/env';
/**
 * SMTP transport.
 */
const transport = nodemailer.createTransport({
    host: ENV.AUTH_SMTP_HOST,
    port: Number(ENV.AUTH_SMTP_PORT),
    secure: Boolean(ENV.AUTH_SMTP_SECURE),
    auth: {
        pass: ENV.AUTH_SMTP_PASS,
        user: ENV.AUTH_SMTP_USER,
    },
    authMethod: ENV.AUTH_SMTP_AUTH_METHOD,
});
/**
 * Reusable email client.
 */
export const emailClient = new Email({
    transport,
    message: {
        from: ENV.AUTH_SMTP_SENDER,
    },
    send: true,
    render: renderTemplate,
});
export const sendEmail = async (options) => {
    try {
        let headers = {
            ...options.message.headers,
        };
        if (ENV.AUTH_SMTP_X_SMTPAPI_HEADER) {
            headers = {
                ...headers,
                'X-SMTPAPI': ENV.AUTH_SMTP_X_SMTPAPI_HEADER,
            };
        }
        const MAX_RETRIES = 3;
        let attempt = 0;
        let lastError = null;
        while (attempt < MAX_RETRIES) {
            try {
                await emailClient.send({
                    ...options,
                    message: { ...options.message, headers },
                });
                logger.info(`Email sent successfully via SMTP on attempt ${attempt + 1}.`, { template: options.template, to: options.message.to });
                return; // Success
            }
            catch (err) {
                lastError = err;
                logger.warn(`Attempt ${attempt + 1} to send email via SMTP failed. Retrying...`, {
                    errorMessage: err.message,
                    template: options.template,
                    to: options.message.to,
                    attempt: attempt + 1,
                    maxRetries: MAX_RETRIES,
                });
                attempt++;
                if (attempt < MAX_RETRIES) {
                    const delay = Math.pow(2, attempt - 1) * 1000; // Exponential backoff: 1s, 2s
                    await new Promise(resolve => setTimeout(resolve, delay));
                }
            }
        }
        // If all retries fail, log and rethrow the last error
        const finalError = lastError;
        logger.error(// Changed from logger.warn to logger.error for final failure
        `SMTP error after ${MAX_RETRIES} attempts`, Object.entries(error).reduce((acc, [key, value]) => ({
            ...acc,
            [key]: value,
        }), {}));
        logger.warn(`SMTP error context`, {
            template: options.template,
            to: options.message.to,
        });
        throw err;
    }
    finally {
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1haWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJlbWFpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssTUFBTSxpQkFBaUIsQ0FBQTtBQUNuQyxPQUFPLFVBQVUsTUFBTSxZQUFZLENBQUE7QUFFbkMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUN0QyxPQUFPLEVBQWUsY0FBYyxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBQ3pELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxZQUFZLENBQUE7QUFFaEM7O0dBRUc7QUFDSCxNQUFNLFNBQVMsR0FBRyxVQUFVLENBQUMsZUFBZSxDQUFDO0lBQ3pDLElBQUksRUFBRSxHQUFHLENBQUMsY0FBYztJQUN4QixJQUFJLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUM7SUFDaEMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUM7SUFDckMsSUFBSSxFQUFFO1FBQ0osSUFBSSxFQUFFLEdBQUcsQ0FBQyxjQUFjO1FBQ3hCLElBQUksRUFBRSxHQUFHLENBQUMsY0FBYztLQUN6QjtJQUNELFVBQVUsRUFBRSxHQUFHLENBQUMscUJBQXFCO0NBQ3RDLENBQUMsQ0FBQztBQUVMOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLElBQUksS0FBSyxDQUFjO0lBQzlDLFNBQVM7SUFDVCxPQUFPLEVBQUU7UUFDUCxJQUFJLEVBQUUsR0FBRyxDQUFDLGdCQUFnQjtLQUMzQjtJQUNELElBQUksRUFBRSxJQUFJO0lBQ1YsTUFBTSxFQUFFLGNBQWM7Q0FDdkIsQ0FBQyxDQUFDO0FBR0gsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLEtBQUssRUFDNUIsT0FBa0QsRUFDbEQsRUFBRTtJQUNGLElBQUksQ0FBQztRQUNILElBQUksT0FBTyxHQUF5QztZQUNsRCxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTztTQUMzQixDQUFDO1FBRUYsSUFBSSxHQUFHLENBQUMsMEJBQTBCLEVBQUUsQ0FBQztZQUNuQyxPQUFPLEdBQUc7Z0JBQ1IsR0FBRyxPQUFPO2dCQUNWLFdBQVcsRUFBRSxHQUFHLENBQUMsMEJBQTBCO2FBQzVDLENBQUM7UUFDSixDQUFDO1FBRUQsTUFBTSxXQUFXLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQztRQUNoQixJQUFJLFNBQVMsR0FBUSxJQUFJLENBQUM7UUFFMUIsT0FBTyxPQUFPLEdBQUcsV0FBVyxFQUFFLENBQUM7WUFDN0IsSUFBSSxDQUFDO2dCQUNILE1BQU0sV0FBVyxDQUFDLElBQUksQ0FBQztvQkFDckIsR0FBRyxPQUFPO29CQUNWLE9BQU8sRUFBRSxFQUFFLEdBQUcsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUU7aUJBQ3pDLENBQUMsQ0FBQztnQkFDSCxNQUFNLENBQUMsSUFBSSxDQUFDLCtDQUErQyxPQUFPLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUNuSSxPQUFPLENBQUMsVUFBVTtZQUNwQixDQUFDO1lBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztnQkFDYixTQUFTLEdBQUcsR0FBRyxDQUFDO2dCQUNoQixNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsT0FBTyxHQUFHLENBQUMsNkNBQTZDLEVBQUU7b0JBQy9FLFlBQVksRUFBRyxHQUFhLENBQUMsT0FBTztvQkFDcEMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRO29CQUMxQixFQUFFLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO29CQUN0QixPQUFPLEVBQUUsT0FBTyxHQUFHLENBQUM7b0JBQ3BCLFVBQVUsRUFBRSxXQUFXO2lCQUN4QixDQUFDLENBQUM7Z0JBQ0gsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsSUFBSSxPQUFPLEdBQUcsV0FBVyxFQUFFLENBQUM7b0JBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLE9BQU8sR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyw4QkFBOEI7b0JBQzdFLE1BQU0sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQzNELENBQUM7WUFDSCxDQUFDO1FBQ0gsQ0FBQztRQUNELHNEQUFzRDtRQUN0RCxNQUFNLFVBQVUsR0FBRyxTQUFrQixDQUFDO1FBQ3RDLE1BQU0sQ0FBQyxLQUFLLENBQUUsNkRBQTZEO1FBQ3pFLG9CQUFvQixXQUFXLFdBQVcsRUFDMUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQzFCLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3RCLEdBQUcsR0FBRztZQUNOLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSztTQUNiLENBQUMsRUFDRixFQUFFLENBQ0gsQ0FDRixDQUFDO1FBQ0YsTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtZQUNoQyxRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7WUFDMUIsRUFBRSxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtTQUN2QixDQUFDLENBQUM7UUFDSCxNQUFNLEdBQUcsQ0FBQztJQUNaLENBQUM7WUFDSCxDQUFDO0lBQUQsQ0FBQyxBQURFO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEVtYWlsIGZyb20gJ2VtYWlsLXRlbXBsYXRlcydcbmltcG9ydCBub2RlbWFpbGVyIGZyb20gJ25vZGVtYWlsZXInXG5cbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ0B1dGlscy9sb2dnZXInXG5pbXBvcnQgeyBFbWFpbExvY2FscywgcmVuZGVyVGVtcGxhdGUgfSBmcm9tICcuL3RlbXBsYXRlcydcbmltcG9ydCB7IEVOViB9IGZyb20gJ0B1dGlscy9lbnYnXG5cbi8qKlxuICogU01UUCB0cmFuc3BvcnQuXG4gKi9cbmNvbnN0IHRyYW5zcG9ydCA9IG5vZGVtYWlsZXIuY3JlYXRlVHJhbnNwb3J0KHtcbiAgICBob3N0OiBFTlYuQVVUSF9TTVRQX0hPU1QsXG4gICAgcG9ydDogTnVtYmVyKEVOVi5BVVRIX1NNVFBfUE9SVCksXG4gICAgc2VjdXJlOiBCb29sZWFuKEVOVi5BVVRIX1NNVFBfU0VDVVJFKSxcbiAgICBhdXRoOiB7XG4gICAgICBwYXNzOiBFTlYuQVVUSF9TTVRQX1BBU1MsXG4gICAgICB1c2VyOiBFTlYuQVVUSF9TTVRQX1VTRVIsXG4gICAgfSxcbiAgICBhdXRoTWV0aG9kOiBFTlYuQVVUSF9TTVRQX0FVVEhfTUVUSE9ELFxuICB9KTtcblxuLyoqXG4gKiBSZXVzYWJsZSBlbWFpbCBjbGllbnQuXG4gKi9cbmV4cG9ydCBjb25zdCBlbWFpbENsaWVudCA9IG5ldyBFbWFpbDxFbWFpbExvY2Fscz4oe1xuICAgIHRyYW5zcG9ydCxcbiAgICBtZXNzYWdlOiB7XG4gICAgICBmcm9tOiBFTlYuQVVUSF9TTVRQX1NFTkRFUixcbiAgICB9LFxuICAgIHNlbmQ6IHRydWUsXG4gICAgcmVuZGVyOiByZW5kZXJUZW1wbGF0ZSxcbiAgfSk7XG5cblxuICBleHBvcnQgY29uc3Qgc2VuZEVtYWlsID0gYXN5bmMgKFxuICAgIG9wdGlvbnM6IFBhcmFtZXRlcnM8dHlwZW9mIGVtYWlsQ2xpZW50WydzZW5kJ10+WzBdXG4gICkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBsZXQgaGVhZGVyczogdHlwZW9mIG9wdGlvbnNbJ21lc3NhZ2UnXVsnaGVhZGVycyddID0ge1xuICAgICAgICAuLi5vcHRpb25zLm1lc3NhZ2UuaGVhZGVycyxcbiAgICAgIH07XG4gIFxuICAgICAgaWYgKEVOVi5BVVRIX1NNVFBfWF9TTVRQQVBJX0hFQURFUikge1xuICAgICAgICBoZWFkZXJzID0ge1xuICAgICAgICAgIC4uLmhlYWRlcnMsXG4gICAgICAgICAgJ1gtU01UUEFQSSc6IEVOVi5BVVRIX1NNVFBfWF9TTVRQQVBJX0hFQURFUixcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgXG4gICAgICBjb25zdCBNQVhfUkVUUklFUyA9IDM7XG4gICAgICBsZXQgYXR0ZW1wdCA9IDA7XG4gICAgICBsZXQgbGFzdEVycm9yOiBhbnkgPSBudWxsO1xuXG4gICAgICB3aGlsZSAoYXR0ZW1wdCA8IE1BWF9SRVRSSUVTKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXdhaXQgZW1haWxDbGllbnQuc2VuZCh7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgbWVzc2FnZTogeyAuLi5vcHRpb25zLm1lc3NhZ2UsIGhlYWRlcnMgfSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBsb2dnZXIuaW5mbyhgRW1haWwgc2VudCBzdWNjZXNzZnVsbHkgdmlhIFNNVFAgb24gYXR0ZW1wdCAke2F0dGVtcHQgKyAxfS5gLCB7IHRlbXBsYXRlOiBvcHRpb25zLnRlbXBsYXRlLCB0bzogb3B0aW9ucy5tZXNzYWdlLnRvIH0pO1xuICAgICAgICAgIHJldHVybjsgLy8gU3VjY2Vzc1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBsYXN0RXJyb3IgPSBlcnI7XG4gICAgICAgICAgbG9nZ2VyLndhcm4oYEF0dGVtcHQgJHthdHRlbXB0ICsgMX0gdG8gc2VuZCBlbWFpbCB2aWEgU01UUCBmYWlsZWQuIFJldHJ5aW5nLi4uYCwge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiAoZXJyIGFzIEVycm9yKS5tZXNzYWdlLFxuICAgICAgICAgICAgdGVtcGxhdGU6IG9wdGlvbnMudGVtcGxhdGUsXG4gICAgICAgICAgICB0bzogb3B0aW9ucy5tZXNzYWdlLnRvLFxuICAgICAgICAgICAgYXR0ZW1wdDogYXR0ZW1wdCArIDEsXG4gICAgICAgICAgICBtYXhSZXRyaWVzOiBNQVhfUkVUUklFUyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBhdHRlbXB0Kys7XG4gICAgICAgICAgaWYgKGF0dGVtcHQgPCBNQVhfUkVUUklFUykge1xuICAgICAgICAgICAgY29uc3QgZGVsYXkgPSBNYXRoLnBvdygyLCBhdHRlbXB0IC0gMSkgKiAxMDAwOyAvLyBFeHBvbmVudGlhbCBiYWNrb2ZmOiAxcywgMnNcbiAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBkZWxheSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gSWYgYWxsIHJldHJpZXMgZmFpbCwgbG9nIGFuZCByZXRocm93IHRoZSBsYXN0IGVycm9yXG4gICAgICBjb25zdCBmaW5hbEVycm9yID0gbGFzdEVycm9yIGFzIEVycm9yO1xuICAgICAgbG9nZ2VyLmVycm9yKCAvLyBDaGFuZ2VkIGZyb20gbG9nZ2VyLndhcm4gdG8gbG9nZ2VyLmVycm9yIGZvciBmaW5hbCBmYWlsdXJlXG4gICAgICAgIGBTTVRQIGVycm9yIGFmdGVyICR7TUFYX1JFVFJJRVN9IGF0dGVtcHRzYCxcbiAgICAgICAgT2JqZWN0LmVudHJpZXMoZXJyb3IpLnJlZHVjZShcbiAgICAgICAgICAoYWNjLCBba2V5LCB2YWx1ZV0pID0+ICh7XG4gICAgICAgICAgICAuLi5hY2MsXG4gICAgICAgICAgICBba2V5XTogdmFsdWUsXG4gICAgICAgICAgfSksXG4gICAgICAgICAge31cbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAgIGxvZ2dlci53YXJuKGBTTVRQIGVycm9yIGNvbnRleHRgLCB7XG4gICAgICAgIHRlbXBsYXRlOiBvcHRpb25zLnRlbXBsYXRlLFxuICAgICAgICB0bzogb3B0aW9ucy5tZXNzYWdlLnRvLFxuICAgICAgfSk7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9O1xuIl19