import BaseJoi from 'joi';
export const Joi = BaseJoi.extend({
    type: 'array',
    base: BaseJoi.array(),
    coerce: {
        from: 'string',
        method(value) {
            // * If value is empty, return an empty array
            if (!value) {
                return { value: [] };
            }
            try {
                // * Try parsing the array as JSON
                return { value: JSON.parse(value) };
            }
            catch {
                // * If not a JSON array, assume it is comma-separated
                return { value: value.replace(/^,+|,+$/gm, '').split(',') };
            }
        },
    },
}, {
    type: 'object',
    base: BaseJoi.object(),
    coerce: {
        from: 'string',
        method(value) {
            return { value: JSON.parse(value) };
        },
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam9pLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiam9pLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sT0FBTyxNQUFNLEtBQUssQ0FBQztBQUUxQixNQUFNLENBQUMsTUFBTSxHQUFHLEdBQWlCLE9BQU8sQ0FBQyxNQUFNLENBQzdDO0lBQ0UsSUFBSSxFQUFFLE9BQU87SUFDYixJQUFJLEVBQUUsT0FBTyxDQUFDLEtBQUssRUFBRTtJQUNyQixNQUFNLEVBQUU7UUFDTixJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sQ0FBQyxLQUFhO1lBQ2xCLDZDQUE2QztZQUM3QyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ1gsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQztZQUN2QixDQUFDO1lBQ0QsSUFBSSxDQUFDO2dCQUNILGtDQUFrQztnQkFDbEMsT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDdEMsQ0FBQztZQUFDLE1BQU0sQ0FBQztnQkFDUCxzREFBc0Q7Z0JBQ3RELE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDOUQsQ0FBQztRQUNILENBQUM7S0FDRjtDQUNGLEVBQ0Q7SUFDRSxJQUFJLEVBQUUsUUFBUTtJQUNkLElBQUksRUFBRSxPQUFPLENBQUMsTUFBTSxFQUFFO0lBQ3RCLE1BQU0sRUFBRTtRQUNOLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxDQUFDLEtBQUs7WUFDVixPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUN0QyxDQUFDO0tBQ0Y7Q0FDRixDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmFzZUpvaSBmcm9tICdqb2knO1xuXG5leHBvcnQgY29uc3QgSm9pOiBCYXNlSm9pLlJvb3QgPSBCYXNlSm9pLmV4dGVuZChcbiAge1xuICAgIHR5cGU6ICdhcnJheScsXG4gICAgYmFzZTogQmFzZUpvaS5hcnJheSgpLFxuICAgIGNvZXJjZToge1xuICAgICAgZnJvbTogJ3N0cmluZycsXG4gICAgICBtZXRob2QodmFsdWU6IHN0cmluZykge1xuICAgICAgICAvLyAqIElmIHZhbHVlIGlzIGVtcHR5LCByZXR1cm4gYW4gZW1wdHkgYXJyYXlcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBbXSB9O1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gKiBUcnkgcGFyc2luZyB0aGUgYXJyYXkgYXMgSlNPTlxuICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBKU09OLnBhcnNlKHZhbHVlKSB9O1xuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAvLyAqIElmIG5vdCBhIEpTT04gYXJyYXksIGFzc3VtZSBpdCBpcyBjb21tYS1zZXBhcmF0ZWRcbiAgICAgICAgICByZXR1cm4geyB2YWx1ZTogdmFsdWUucmVwbGFjZSgvXiwrfCwrJC9nbSwgJycpLnNwbGl0KCcsJykgfTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9LFxuICB9LFxuICB7XG4gICAgdHlwZTogJ29iamVjdCcsXG4gICAgYmFzZTogQmFzZUpvaS5vYmplY3QoKSxcbiAgICBjb2VyY2U6IHtcbiAgICAgIGZyb206ICdzdHJpbmcnLFxuICAgICAgbWV0aG9kKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB7IHZhbHVlOiBKU09OLnBhcnNlKHZhbHVlKSB9O1xuICAgICAgfSxcbiAgICB9LFxuICB9XG4pO1xuIl19