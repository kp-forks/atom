import crypto from 'crypto';
const ALGORITHM = 'aes-256-gcm';
const IV_LENGTH = 16;
const AUTH_TAG_LENGTH = 16;
export function encrypt(text, encryptionKey) {
    if (!encryptionKey) {
        console.error('Encryption key is not set. Cannot encrypt token.');
        throw new Error('Server configuration error: Encryption key not set.');
    }
    const key = Buffer.from(encryptionKey, 'hex');
    if (key.length !== 32) {
        console.error(`Encryption key must be 32 bytes (64 hex characters), current length: ${key.length} bytes.`);
        throw new Error('Server configuration error: Invalid encryption key length.');
    }
    const iv = crypto.randomBytes(IV_LENGTH);
    const cipher = crypto.createCipheriv(ALGORITHM, key, iv);
    let encrypted = cipher.update(text, 'utf8', 'hex');
    encrypted += cipher.final('hex');
    const authTag = cipher.getAuthTag();
    return iv.toString('hex') + ':' + authTag.toString('hex') + ':' + encrypted;
}
export function decrypt(text, encryptionKey) {
    if (!encryptionKey) {
        console.error('Encryption key is not set. Cannot decrypt token.');
        throw new Error('Server configuration error: Encryption key not set for decryption.');
    }
    const key = Buffer.from(encryptionKey, 'hex');
    if (key.length !== 32) {
        console.error(`Encryption key must be 32 bytes (64 hex characters) for decryption. Current length: ${key.length} bytes.`);
        throw new Error('Server configuration error: Invalid encryption key length for decryption.');
    }
    const parts = text.split(':');
    if (parts.length !== 3) {
        console.error('Invalid encrypted text format. Expected iv:authTag:encryptedText');
        throw new Error('Decryption error: Invalid encrypted text format.');
    }
    const iv = Buffer.from(parts[0], 'hex');
    const authTag = Buffer.from(parts[1], 'hex');
    const encryptedText = parts[2];
    const decipher = crypto.createDecipheriv(ALGORITHM, key, iv);
    decipher.setAuthTag(authTag);
    let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
    decrypted += decipher.final('utf8');
    return decrypted;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3J5cHRvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY3J5cHRvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUU1QixNQUFNLFNBQVMsR0FBRyxhQUFhLENBQUM7QUFDaEMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBQ3JCLE1BQU0sZUFBZSxHQUFHLEVBQUUsQ0FBQztBQUUzQixNQUFNLFVBQVUsT0FBTyxDQUFDLElBQVksRUFBRSxhQUFxQjtJQUN6RCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDbkIsT0FBTyxDQUFDLEtBQUssQ0FBQyxrREFBa0QsQ0FBQyxDQUFDO1FBQ2xFLE1BQU0sSUFBSSxLQUFLLENBQUMscURBQXFELENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBQ0QsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDOUMsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLEVBQUUsRUFBRSxDQUFDO1FBQ3RCLE9BQU8sQ0FBQyxLQUFLLENBQ1gsd0VBQXdFLEdBQUcsQ0FBQyxNQUFNLFNBQVMsQ0FDNUYsQ0FBQztRQUNGLE1BQU0sSUFBSSxLQUFLLENBQ2IsNERBQTRELENBQzdELENBQUM7SUFDSixDQUFDO0lBQ0QsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN6QyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDekQsSUFBSSxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ25ELFNBQVMsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNwQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQztBQUM5RSxDQUFDO0FBRUQsTUFBTSxVQUFVLE9BQU8sQ0FBQyxJQUFZLEVBQUUsYUFBcUI7SUFDekQsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ25CLE9BQU8sQ0FBQyxLQUFLLENBQUMsa0RBQWtELENBQUMsQ0FBQztRQUNsRSxNQUFNLElBQUksS0FBSyxDQUNiLG9FQUFvRSxDQUNyRSxDQUFDO0lBQ0osQ0FBQztJQUNELE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzlDLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxFQUFFLEVBQUUsQ0FBQztRQUN0QixPQUFPLENBQUMsS0FBSyxDQUNYLHVGQUF1RixHQUFHLENBQUMsTUFBTSxTQUFTLENBQzNHLENBQUM7UUFDRixNQUFNLElBQUksS0FBSyxDQUNiLDJFQUEyRSxDQUM1RSxDQUFDO0lBQ0osQ0FBQztJQUNELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUIsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQ3ZCLE9BQU8sQ0FBQyxLQUFLLENBQ1gsa0VBQWtFLENBQ25FLENBQUM7UUFDRixNQUFNLElBQUksS0FBSyxDQUFDLGtEQUFrRCxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUNELE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3hDLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzdDLE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUvQixNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUM3RCxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzdCLElBQUksU0FBUyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM5RCxTQUFTLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNwQyxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuXG5jb25zdCBBTEdPUklUSE0gPSAnYWVzLTI1Ni1nY20nO1xuY29uc3QgSVZfTEVOR1RIID0gMTY7XG5jb25zdCBBVVRIX1RBR19MRU5HVEggPSAxNjtcblxuZXhwb3J0IGZ1bmN0aW9uIGVuY3J5cHQodGV4dDogc3RyaW5nLCBlbmNyeXB0aW9uS2V5OiBzdHJpbmcpOiBzdHJpbmcge1xuICBpZiAoIWVuY3J5cHRpb25LZXkpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFbmNyeXB0aW9uIGtleSBpcyBub3Qgc2V0LiBDYW5ub3QgZW5jcnlwdCB0b2tlbi4nKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlcnZlciBjb25maWd1cmF0aW9uIGVycm9yOiBFbmNyeXB0aW9uIGtleSBub3Qgc2V0LicpO1xuICB9XG4gIGNvbnN0IGtleSA9IEJ1ZmZlci5mcm9tKGVuY3J5cHRpb25LZXksICdoZXgnKTtcbiAgaWYgKGtleS5sZW5ndGggIT09IDMyKSB7XG4gICAgY29uc29sZS5lcnJvcihcbiAgICAgIGBFbmNyeXB0aW9uIGtleSBtdXN0IGJlIDMyIGJ5dGVzICg2NCBoZXggY2hhcmFjdGVycyksIGN1cnJlbnQgbGVuZ3RoOiAke2tleS5sZW5ndGh9IGJ5dGVzLmBcbiAgICApO1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdTZXJ2ZXIgY29uZmlndXJhdGlvbiBlcnJvcjogSW52YWxpZCBlbmNyeXB0aW9uIGtleSBsZW5ndGguJ1xuICAgICk7XG4gIH1cbiAgY29uc3QgaXYgPSBjcnlwdG8ucmFuZG9tQnl0ZXMoSVZfTEVOR1RIKTtcbiAgY29uc3QgY2lwaGVyID0gY3J5cHRvLmNyZWF0ZUNpcGhlcml2KEFMR09SSVRITSwga2V5LCBpdik7XG4gIGxldCBlbmNyeXB0ZWQgPSBjaXBoZXIudXBkYXRlKHRleHQsICd1dGY4JywgJ2hleCcpO1xuICBlbmNyeXB0ZWQgKz0gY2lwaGVyLmZpbmFsKCdoZXgnKTtcbiAgY29uc3QgYXV0aFRhZyA9IGNpcGhlci5nZXRBdXRoVGFnKCk7XG4gIHJldHVybiBpdi50b1N0cmluZygnaGV4JykgKyAnOicgKyBhdXRoVGFnLnRvU3RyaW5nKCdoZXgnKSArICc6JyArIGVuY3J5cHRlZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY3J5cHQodGV4dDogc3RyaW5nLCBlbmNyeXB0aW9uS2V5OiBzdHJpbmcpOiBzdHJpbmcge1xuICBpZiAoIWVuY3J5cHRpb25LZXkpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFbmNyeXB0aW9uIGtleSBpcyBub3Qgc2V0LiBDYW5ub3QgZGVjcnlwdCB0b2tlbi4nKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnU2VydmVyIGNvbmZpZ3VyYXRpb24gZXJyb3I6IEVuY3J5cHRpb24ga2V5IG5vdCBzZXQgZm9yIGRlY3J5cHRpb24uJ1xuICAgICk7XG4gIH1cbiAgY29uc3Qga2V5ID0gQnVmZmVyLmZyb20oZW5jcnlwdGlvbktleSwgJ2hleCcpO1xuICBpZiAoa2V5Lmxlbmd0aCAhPT0gMzIpIHtcbiAgICBjb25zb2xlLmVycm9yKFxuICAgICAgYEVuY3J5cHRpb24ga2V5IG11c3QgYmUgMzIgYnl0ZXMgKDY0IGhleCBjaGFyYWN0ZXJzKSBmb3IgZGVjcnlwdGlvbi4gQ3VycmVudCBsZW5ndGg6ICR7a2V5Lmxlbmd0aH0gYnl0ZXMuYFxuICAgICk7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ1NlcnZlciBjb25maWd1cmF0aW9uIGVycm9yOiBJbnZhbGlkIGVuY3J5cHRpb24ga2V5IGxlbmd0aCBmb3IgZGVjcnlwdGlvbi4nXG4gICAgKTtcbiAgfVxuICBjb25zdCBwYXJ0cyA9IHRleHQuc3BsaXQoJzonKTtcbiAgaWYgKHBhcnRzLmxlbmd0aCAhPT0gMykge1xuICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAnSW52YWxpZCBlbmNyeXB0ZWQgdGV4dCBmb3JtYXQuIEV4cGVjdGVkIGl2OmF1dGhUYWc6ZW5jcnlwdGVkVGV4dCdcbiAgICApO1xuICAgIHRocm93IG5ldyBFcnJvcignRGVjcnlwdGlvbiBlcnJvcjogSW52YWxpZCBlbmNyeXB0ZWQgdGV4dCBmb3JtYXQuJyk7XG4gIH1cbiAgY29uc3QgaXYgPSBCdWZmZXIuZnJvbShwYXJ0c1swXSwgJ2hleCcpO1xuICBjb25zdCBhdXRoVGFnID0gQnVmZmVyLmZyb20ocGFydHNbMV0sICdoZXgnKTtcbiAgY29uc3QgZW5jcnlwdGVkVGV4dCA9IHBhcnRzWzJdO1xuXG4gIGNvbnN0IGRlY2lwaGVyID0gY3J5cHRvLmNyZWF0ZURlY2lwaGVyaXYoQUxHT1JJVEhNLCBrZXksIGl2KTtcbiAgZGVjaXBoZXIuc2V0QXV0aFRhZyhhdXRoVGFnKTtcbiAgbGV0IGRlY3J5cHRlZCA9IGRlY2lwaGVyLnVwZGF0ZShlbmNyeXB0ZWRUZXh0LCAnaGV4JywgJ3V0ZjgnKTtcbiAgZGVjcnlwdGVkICs9IGRlY2lwaGVyLmZpbmFsKCd1dGY4Jyk7XG4gIHJldHVybiBkZWNyeXB0ZWQ7XG59XG4iXX0=