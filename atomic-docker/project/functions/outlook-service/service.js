import { Client } from '@microsoft/microsoft-graph-client';
import { ConfidentialClientApplication, } from '@azure/msal-node';
import { getMsalConfig } from './auth_utils';
import { createAdminGraphQLClient } from '../_utils/dbService';
import { decrypt, encrypt } from '../outlook-integration/crypto_utils';
const GET_OUTLOOK_TOKENS_QUERY = `
query GetUserOutlookTokens($userId: uuid!) {
  user_outlook_tokens(where: {user_id: {_eq: $userId}}, limit: 1) {
    encrypted_access_token
    encrypted_refresh_token
    token_expiry_timestamp
  }
}
`;
const UPDATE_OUTLOOK_ACCESS_TOKEN_MUTATION = `
mutation UpdateUserOutlookAccessTokenAfterRefresh($userId: uuid!, $newEncryptedAccessToken: String!, $newExpiryTimestamp: timestamptz!) {
  update_user_outlook_tokens(
    where: {user_id: {_eq: $userId}},
    _set: {
      encrypted_access_token: $newEncryptedAccessToken,
      token_expiry_timestamp: $newExpiryTimestamp,
      updated_at: "now()"
    }
  ) {
    affected_rows
  }
}
`;
export async function getAuthenticatedClient(userId) {
    const adminGraphQLClient = createAdminGraphQLClient();
    const gqlResponse = await adminGraphQLClient.request(GET_OUTLOOK_TOKENS_QUERY, { userId });
    const storedTokenRecord = gqlResponse.user_outlook_tokens && gqlResponse.user_outlook_tokens[0];
    if (!storedTokenRecord) {
        throw new Error('Outlook tokens not found for user.');
    }
    let { encrypted_access_token, encrypted_refresh_token, token_expiry_timestamp, } = storedTokenRecord;
    const expiryDate = token_expiry_timestamp
        ? new Date(token_expiry_timestamp).getTime()
        : 0;
    const needsRefresh = Date.now() >= expiryDate - 5 * 60 * 1000;
    let accessToken = '';
    if (needsRefresh) {
        const decryptedRefreshToken = decrypt(encrypted_refresh_token);
        const msalConfig = getMsalConfig();
        const cca = new ConfidentialClientApplication(msalConfig);
        const refreshTokenRequest = {
            refreshToken: decryptedRefreshToken,
            scopes: ['https://graph.microsoft.com/.default'],
        };
        const response = await cca.acquireTokenByRefreshToken(refreshTokenRequest);
        accessToken = response.accessToken;
        const newEncryptedAccessToken = encrypt(accessToken);
        const newExpiry = response.expiresOn.toISOString();
        await adminGraphQLClient.request(UPDATE_OUTLOOK_ACCESS_TOKEN_MUTATION, {
            userId,
            newEncryptedAccessToken: newEncryptedAccessToken,
            newExpiryTimestamp: newExpiry,
        });
    }
    else {
        accessToken = decrypt(encrypted_access_token);
    }
    const client = Client.init({
        authProvider: (done) => {
            done(null, accessToken);
        },
    });
    return client;
}
export async function searchUserOutlookEmails(userId, query, maxResults = 10) {
    const client = await getAuthenticatedClient(userId);
    const searchResults = await client
        .api('/me/messages')
        .search(query)
        .top(maxResults)
        .get();
    return searchResults.value;
}
export async function getUserOutlookEmailContent(userId, emailId) {
    const client = await getAuthenticatedClient(userId);
    const email = await client.api(`/me/messages/${emailId}`).get();
    return email;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQzNELE9BQU8sRUFDTCw2QkFBNkIsR0FFOUIsTUFBTSxrQkFBa0IsQ0FBQztBQUMxQixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzdDLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFFdkUsTUFBTSx3QkFBd0IsR0FBRzs7Ozs7Ozs7Q0FRaEMsQ0FBQztBQUVGLE1BQU0sb0NBQW9DLEdBQUc7Ozs7Ozs7Ozs7Ozs7Q0FhNUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxLQUFLLFVBQVUsc0JBQXNCLENBQUMsTUFBYztJQUN6RCxNQUFNLGtCQUFrQixHQUFHLHdCQUF3QixFQUFFLENBQUM7SUFFdEQsTUFBTSxXQUFXLEdBQUcsTUFBTSxrQkFBa0IsQ0FBQyxPQUFPLENBQ2xELHdCQUF3QixFQUN4QixFQUFFLE1BQU0sRUFBRSxDQUNYLENBQUM7SUFDRixNQUFNLGlCQUFpQixHQUNyQixXQUFXLENBQUMsbUJBQW1CLElBQUksV0FBVyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXhFLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsSUFBSSxFQUNGLHNCQUFzQixFQUN0Qix1QkFBdUIsRUFDdkIsc0JBQXNCLEdBQ3ZCLEdBQUcsaUJBQWlCLENBQUM7SUFFdEIsTUFBTSxVQUFVLEdBQUcsc0JBQXNCO1FBQ3ZDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLE9BQU8sRUFBRTtRQUM1QyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ04sTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLFVBQVUsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztJQUU5RCxJQUFJLFdBQVcsR0FBRyxFQUFFLENBQUM7SUFFckIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNqQixNQUFNLHFCQUFxQixHQUFHLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQy9ELE1BQU0sVUFBVSxHQUFHLGFBQWEsRUFBRSxDQUFDO1FBQ25DLE1BQU0sR0FBRyxHQUFHLElBQUksNkJBQTZCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDMUQsTUFBTSxtQkFBbUIsR0FBRztZQUMxQixZQUFZLEVBQUUscUJBQXFCO1lBQ25DLE1BQU0sRUFBRSxDQUFDLHNDQUFzQyxDQUFDO1NBQ2pELENBQUM7UUFDRixNQUFNLFFBQVEsR0FBRyxNQUFNLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQzNFLFdBQVcsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDO1FBQ25DLE1BQU0sdUJBQXVCLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3JELE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFbkQsTUFBTSxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsb0NBQW9DLEVBQUU7WUFDckUsTUFBTTtZQUNOLHVCQUF1QixFQUFFLHVCQUF1QjtZQUNoRCxrQkFBa0IsRUFBRSxTQUFTO1NBQzlCLENBQUMsQ0FBQztJQUNMLENBQUM7U0FBTSxDQUFDO1FBQ04sV0FBVyxHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ3pCLFlBQVksRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDMUIsQ0FBQztLQUNGLENBQUMsQ0FBQztJQUVILE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLHVCQUF1QixDQUMzQyxNQUFjLEVBQ2QsS0FBYSxFQUNiLGFBQXFCLEVBQUU7SUFFdkIsTUFBTSxNQUFNLEdBQVcsTUFBTSxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxNQUFNLGFBQWEsR0FBRyxNQUFNLE1BQU07U0FDL0IsR0FBRyxDQUFDLGNBQWMsQ0FBQztTQUNuQixNQUFNLENBQUMsS0FBSyxDQUFDO1NBQ2IsR0FBRyxDQUFDLFVBQVUsQ0FBQztTQUNmLEdBQUcsRUFBRSxDQUFDO0lBQ1QsT0FBTyxhQUFhLENBQUMsS0FBSyxDQUFDO0FBQzdCLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLDBCQUEwQixDQUM5QyxNQUFjLEVBQ2QsT0FBZTtJQUVmLE1BQU0sTUFBTSxHQUFXLE1BQU0sc0JBQXNCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsTUFBTSxLQUFLLEdBQUcsTUFBTSxNQUFNLENBQUMsR0FBRyxDQUFDLGdCQUFnQixPQUFPLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ2hFLE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENsaWVudCB9IGZyb20gJ0BtaWNyb3NvZnQvbWljcm9zb2Z0LWdyYXBoLWNsaWVudCc7XG5pbXBvcnQge1xuICBDb25maWRlbnRpYWxDbGllbnRBcHBsaWNhdGlvbixcbiAgT25CZWhhbGZPZlJlcXVlc3QsXG59IGZyb20gJ0BhenVyZS9tc2FsLW5vZGUnO1xuaW1wb3J0IHsgZ2V0TXNhbENvbmZpZyB9IGZyb20gJy4vYXV0aF91dGlscyc7XG5pbXBvcnQgeyBjcmVhdGVBZG1pbkdyYXBoUUxDbGllbnQgfSBmcm9tICcuLi9fdXRpbHMvZGJTZXJ2aWNlJztcbmltcG9ydCB7IGRlY3J5cHQsIGVuY3J5cHQgfSBmcm9tICcuLi9vdXRsb29rLWludGVncmF0aW9uL2NyeXB0b191dGlscyc7XG5cbmNvbnN0IEdFVF9PVVRMT09LX1RPS0VOU19RVUVSWSA9IGBcbnF1ZXJ5IEdldFVzZXJPdXRsb29rVG9rZW5zKCR1c2VySWQ6IHV1aWQhKSB7XG4gIHVzZXJfb3V0bG9va190b2tlbnMod2hlcmU6IHt1c2VyX2lkOiB7X2VxOiAkdXNlcklkfX0sIGxpbWl0OiAxKSB7XG4gICAgZW5jcnlwdGVkX2FjY2Vzc190b2tlblxuICAgIGVuY3J5cHRlZF9yZWZyZXNoX3Rva2VuXG4gICAgdG9rZW5fZXhwaXJ5X3RpbWVzdGFtcFxuICB9XG59XG5gO1xuXG5jb25zdCBVUERBVEVfT1VUTE9PS19BQ0NFU1NfVE9LRU5fTVVUQVRJT04gPSBgXG5tdXRhdGlvbiBVcGRhdGVVc2VyT3V0bG9va0FjY2Vzc1Rva2VuQWZ0ZXJSZWZyZXNoKCR1c2VySWQ6IHV1aWQhLCAkbmV3RW5jcnlwdGVkQWNjZXNzVG9rZW46IFN0cmluZyEsICRuZXdFeHBpcnlUaW1lc3RhbXA6IHRpbWVzdGFtcHR6ISkge1xuICB1cGRhdGVfdXNlcl9vdXRsb29rX3Rva2VucyhcbiAgICB3aGVyZToge3VzZXJfaWQ6IHtfZXE6ICR1c2VySWR9fSxcbiAgICBfc2V0OiB7XG4gICAgICBlbmNyeXB0ZWRfYWNjZXNzX3Rva2VuOiAkbmV3RW5jcnlwdGVkQWNjZXNzVG9rZW4sXG4gICAgICB0b2tlbl9leHBpcnlfdGltZXN0YW1wOiAkbmV3RXhwaXJ5VGltZXN0YW1wLFxuICAgICAgdXBkYXRlZF9hdDogXCJub3coKVwiXG4gICAgfVxuICApIHtcbiAgICBhZmZlY3RlZF9yb3dzXG4gIH1cbn1cbmA7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBdXRoZW50aWNhdGVkQ2xpZW50KHVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxDbGllbnQ+IHtcbiAgY29uc3QgYWRtaW5HcmFwaFFMQ2xpZW50ID0gY3JlYXRlQWRtaW5HcmFwaFFMQ2xpZW50KCk7XG5cbiAgY29uc3QgZ3FsUmVzcG9uc2UgPSBhd2FpdCBhZG1pbkdyYXBoUUxDbGllbnQucmVxdWVzdChcbiAgICBHRVRfT1VUTE9PS19UT0tFTlNfUVVFUlksXG4gICAgeyB1c2VySWQgfVxuICApO1xuICBjb25zdCBzdG9yZWRUb2tlblJlY29yZCA9XG4gICAgZ3FsUmVzcG9uc2UudXNlcl9vdXRsb29rX3Rva2VucyAmJiBncWxSZXNwb25zZS51c2VyX291dGxvb2tfdG9rZW5zWzBdO1xuXG4gIGlmICghc3RvcmVkVG9rZW5SZWNvcmQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ091dGxvb2sgdG9rZW5zIG5vdCBmb3VuZCBmb3IgdXNlci4nKTtcbiAgfVxuXG4gIGxldCB7XG4gICAgZW5jcnlwdGVkX2FjY2Vzc190b2tlbixcbiAgICBlbmNyeXB0ZWRfcmVmcmVzaF90b2tlbixcbiAgICB0b2tlbl9leHBpcnlfdGltZXN0YW1wLFxuICB9ID0gc3RvcmVkVG9rZW5SZWNvcmQ7XG5cbiAgY29uc3QgZXhwaXJ5RGF0ZSA9IHRva2VuX2V4cGlyeV90aW1lc3RhbXBcbiAgICA/IG5ldyBEYXRlKHRva2VuX2V4cGlyeV90aW1lc3RhbXApLmdldFRpbWUoKVxuICAgIDogMDtcbiAgY29uc3QgbmVlZHNSZWZyZXNoID0gRGF0ZS5ub3coKSA+PSBleHBpcnlEYXRlIC0gNSAqIDYwICogMTAwMDtcblxuICBsZXQgYWNjZXNzVG9rZW4gPSAnJztcblxuICBpZiAobmVlZHNSZWZyZXNoKSB7XG4gICAgY29uc3QgZGVjcnlwdGVkUmVmcmVzaFRva2VuID0gZGVjcnlwdChlbmNyeXB0ZWRfcmVmcmVzaF90b2tlbik7XG4gICAgY29uc3QgbXNhbENvbmZpZyA9IGdldE1zYWxDb25maWcoKTtcbiAgICBjb25zdCBjY2EgPSBuZXcgQ29uZmlkZW50aWFsQ2xpZW50QXBwbGljYXRpb24obXNhbENvbmZpZyk7XG4gICAgY29uc3QgcmVmcmVzaFRva2VuUmVxdWVzdCA9IHtcbiAgICAgIHJlZnJlc2hUb2tlbjogZGVjcnlwdGVkUmVmcmVzaFRva2VuLFxuICAgICAgc2NvcGVzOiBbJ2h0dHBzOi8vZ3JhcGgubWljcm9zb2Z0LmNvbS8uZGVmYXVsdCddLFxuICAgIH07XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjY2EuYWNxdWlyZVRva2VuQnlSZWZyZXNoVG9rZW4ocmVmcmVzaFRva2VuUmVxdWVzdCk7XG4gICAgYWNjZXNzVG9rZW4gPSByZXNwb25zZS5hY2Nlc3NUb2tlbjtcbiAgICBjb25zdCBuZXdFbmNyeXB0ZWRBY2Nlc3NUb2tlbiA9IGVuY3J5cHQoYWNjZXNzVG9rZW4pO1xuICAgIGNvbnN0IG5ld0V4cGlyeSA9IHJlc3BvbnNlLmV4cGlyZXNPbi50b0lTT1N0cmluZygpO1xuXG4gICAgYXdhaXQgYWRtaW5HcmFwaFFMQ2xpZW50LnJlcXVlc3QoVVBEQVRFX09VVExPT0tfQUNDRVNTX1RPS0VOX01VVEFUSU9OLCB7XG4gICAgICB1c2VySWQsXG4gICAgICBuZXdFbmNyeXB0ZWRBY2Nlc3NUb2tlbjogbmV3RW5jcnlwdGVkQWNjZXNzVG9rZW4sXG4gICAgICBuZXdFeHBpcnlUaW1lc3RhbXA6IG5ld0V4cGlyeSxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBhY2Nlc3NUb2tlbiA9IGRlY3J5cHQoZW5jcnlwdGVkX2FjY2Vzc190b2tlbik7XG4gIH1cblxuICBjb25zdCBjbGllbnQgPSBDbGllbnQuaW5pdCh7XG4gICAgYXV0aFByb3ZpZGVyOiAoZG9uZSkgPT4ge1xuICAgICAgZG9uZShudWxsLCBhY2Nlc3NUb2tlbik7XG4gICAgfSxcbiAgfSk7XG5cbiAgcmV0dXJuIGNsaWVudDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlYXJjaFVzZXJPdXRsb29rRW1haWxzKFxuICB1c2VySWQ6IHN0cmluZyxcbiAgcXVlcnk6IHN0cmluZyxcbiAgbWF4UmVzdWx0czogbnVtYmVyID0gMTBcbikge1xuICBjb25zdCBjbGllbnQ6IENsaWVudCA9IGF3YWl0IGdldEF1dGhlbnRpY2F0ZWRDbGllbnQodXNlcklkKTtcbiAgY29uc3Qgc2VhcmNoUmVzdWx0cyA9IGF3YWl0IGNsaWVudFxuICAgIC5hcGkoJy9tZS9tZXNzYWdlcycpXG4gICAgLnNlYXJjaChxdWVyeSlcbiAgICAudG9wKG1heFJlc3VsdHMpXG4gICAgLmdldCgpO1xuICByZXR1cm4gc2VhcmNoUmVzdWx0cy52YWx1ZTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFVzZXJPdXRsb29rRW1haWxDb250ZW50KFxuICB1c2VySWQ6IHN0cmluZyxcbiAgZW1haWxJZDogc3RyaW5nXG4pIHtcbiAgY29uc3QgY2xpZW50OiBDbGllbnQgPSBhd2FpdCBnZXRBdXRoZW50aWNhdGVkQ2xpZW50KHVzZXJJZCk7XG4gIGNvbnN0IGVtYWlsID0gYXdhaXQgY2xpZW50LmFwaShgL21lL21lc3NhZ2VzLyR7ZW1haWxJZH1gKS5nZXQoKTtcbiAgcmV0dXJuIGVtYWlsO1xufVxuIl19