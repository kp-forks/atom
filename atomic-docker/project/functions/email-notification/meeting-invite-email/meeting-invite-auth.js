import { sendBulkInviteToMeetingEmail } from '@email_notification/_libs/api-helpter';
const handler = async (req, res) => {
    try {
        const eventItem = req.body;
        // validate
        if (!(eventItem?.attendees?.length > 0)) {
            return res.status(400).json({
                message: 'missing attendees',
                event: eventItem,
            });
        }
        if (!eventItem?.hostName) {
            return res.status(400).json({
                message: 'missing hostName',
                event: eventItem,
            });
        }
        if (!eventItem?.hostEmail) {
            return res.status(400).json({
                message: 'missing hostEmail',
                event: eventItem,
            });
        }
        console.log(eventItem, ' eventItem inside handler');
        await sendBulkInviteToMeetingEmail(eventItem);
        return {
            statusCode: 202,
            headers: {
                'Access-Control-Allow-Origin': '*',
            },
            body: JSON.stringify({
                message: 'email for meeting invite',
                event: eventItem,
            }),
        };
    }
    catch (e) {
        console.log(e, ' unable to process message');
        console.log(res.status(400).json({
            message: `error processing queue mesages: message: ${e?.message}, code: ${e?.statusCode}`,
        }));
        res.status(400).json(e);
    }
};
export default handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVldGluZy1pbnZpdGUtYXV0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1lZXRpbmctaW52aXRlLWF1dGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFHckYsTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUFFLEdBQVksRUFBRSxHQUFhLEVBQUUsRUFBRTtJQUNwRCxJQUFJLENBQUM7UUFDSCxNQUFNLFNBQVMsR0FBMkMsR0FBRyxDQUFDLElBQUksQ0FBQztRQUNuRSxXQUFXO1FBRVgsSUFBSSxDQUFDLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUN4QyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUMxQixPQUFPLEVBQUUsbUJBQW1CO2dCQUM1QixLQUFLLEVBQUUsU0FBUzthQUNqQixDQUFDLENBQUM7UUFDTCxDQUFDO1FBRUQsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsQ0FBQztZQUN6QixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUMxQixPQUFPLEVBQUUsa0JBQWtCO2dCQUMzQixLQUFLLEVBQUUsU0FBUzthQUNqQixDQUFDLENBQUM7UUFDTCxDQUFDO1FBRUQsSUFBSSxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsQ0FBQztZQUMxQixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUMxQixPQUFPLEVBQUUsbUJBQW1CO2dCQUM1QixLQUFLLEVBQUUsU0FBUzthQUNqQixDQUFDLENBQUM7UUFDTCxDQUFDO1FBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsMkJBQTJCLENBQUMsQ0FBQztRQUVwRCxNQUFNLDRCQUE0QixDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTlDLE9BQU87WUFDTCxVQUFVLEVBQUUsR0FBRztZQUNmLE9BQU8sRUFBRTtnQkFDUCw2QkFBNkIsRUFBRSxHQUFHO2FBQ25DO1lBQ0QsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7Z0JBQ25CLE9BQU8sRUFBRSwwQkFBMEI7Z0JBQ25DLEtBQUssRUFBRSxTQUFTO2FBQ2pCLENBQUM7U0FDSCxDQUFDO0lBQ0osQ0FBQztJQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSw0QkFBNEIsQ0FBQyxDQUFDO1FBRTdDLE9BQU8sQ0FBQyxHQUFHLENBQ1QsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDbkIsT0FBTyxFQUFFLDRDQUE0QyxDQUFDLEVBQUUsT0FBTyxXQUFXLENBQUMsRUFBRSxVQUFVLEVBQUU7U0FDMUYsQ0FBQyxDQUNILENBQUM7UUFFRixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsZUFBZSxPQUFPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgc2VuZEJ1bGtJbnZpdGVUb01lZXRpbmdFbWFpbCB9IGZyb20gJ0BlbWFpbF9ub3RpZmljYXRpb24vX2xpYnMvYXBpLWhlbHB0ZXInO1xuaW1wb3J0IHsgQnVsa01lZXRpbmdJbnZpdGVEZXRhaWxzVG9BdHRlbmRlZVR5cGUgfSBmcm9tICdAZW1haWxfbm90aWZpY2F0aW9uL19saWJzL3R5cGVzJztcblxuY29uc3QgaGFuZGxlciA9IGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBldmVudEl0ZW06IEJ1bGtNZWV0aW5nSW52aXRlRGV0YWlsc1RvQXR0ZW5kZWVUeXBlID0gcmVxLmJvZHk7XG4gICAgLy8gdmFsaWRhdGVcblxuICAgIGlmICghKGV2ZW50SXRlbT8uYXR0ZW5kZWVzPy5sZW5ndGggPiAwKSkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ21pc3NpbmcgYXR0ZW5kZWVzJyxcbiAgICAgICAgZXZlbnQ6IGV2ZW50SXRlbSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghZXZlbnRJdGVtPy5ob3N0TmFtZSkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ21pc3NpbmcgaG9zdE5hbWUnLFxuICAgICAgICBldmVudDogZXZlbnRJdGVtLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFldmVudEl0ZW0/Lmhvc3RFbWFpbCkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ21pc3NpbmcgaG9zdEVtYWlsJyxcbiAgICAgICAgZXZlbnQ6IGV2ZW50SXRlbSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKGV2ZW50SXRlbSwgJyBldmVudEl0ZW0gaW5zaWRlIGhhbmRsZXInKTtcblxuICAgIGF3YWl0IHNlbmRCdWxrSW52aXRlVG9NZWV0aW5nRW1haWwoZXZlbnRJdGVtKTtcblxuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXNDb2RlOiAyMDIsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nOiAnKicsXG4gICAgICB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBtZXNzYWdlOiAnZW1haWwgZm9yIG1lZXRpbmcgaW52aXRlJyxcbiAgICAgICAgZXZlbnQ6IGV2ZW50SXRlbSxcbiAgICAgIH0pLFxuICAgIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlLCAnIHVuYWJsZSB0byBwcm9jZXNzIG1lc3NhZ2UnKTtcblxuICAgIGNvbnNvbGUubG9nKFxuICAgICAgcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBtZXNzYWdlOiBgZXJyb3IgcHJvY2Vzc2luZyBxdWV1ZSBtZXNhZ2VzOiBtZXNzYWdlOiAke2U/Lm1lc3NhZ2V9LCBjb2RlOiAke2U/LnN0YXR1c0NvZGV9YCxcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKGUpO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBoYW5kbGVyO1xuIl19