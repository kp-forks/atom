import { sendBulkInviteToMeetingEmail } from '@email_notification/_libs/api-helpter';
const handler = async (req, res) => {
    try {
        const eventItem = req.body;
        // validate
        if (!(eventItem?.attendees?.length > 0)) {
            return res.status(400).json({
                message: 'missing attendees',
                event: eventItem,
            });
        }
        if (!eventItem?.hostName) {
            return res.status(400).json({
                message: 'missing hostName',
                event: eventItem,
            });
        }
        if (!eventItem?.hostEmail) {
            return res.status(400).json({
                message: 'missing hostEmail',
                event: eventItem,
            });
        }
        console.log(eventItem, ' eventItem inside handler');
        await sendBulkInviteToMeetingEmail(eventItem);
        return {
            statusCode: 202,
            headers: {
                'Access-Control-Allow-Origin': '*',
            },
            body: JSON.stringify({
                message: 'email for meeting invite',
                event: eventItem,
            }),
        };
    }
    catch (e) {
        console.log(e, ' unable to process message');
        console.log(res.status(400).json({
            message: `error processing queue mesages: message: ${e?.message}, code: ${e?.statusCode}`,
        }));
        res.status(400).json(e);
    }
};
export default handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVldGluZy1pbnZpdGUtYWRtaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtZWV0aW5nLWludml0ZS1hZG1pbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUdyRixNQUFNLE9BQU8sR0FBRyxLQUFLLEVBQUUsR0FBWSxFQUFFLEdBQWEsRUFBRSxFQUFFO0lBQ3BELElBQUksQ0FBQztRQUNILE1BQU0sU0FBUyxHQUEyQyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQ25FLFdBQVc7UUFFWCxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ3hDLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQzFCLE9BQU8sRUFBRSxtQkFBbUI7Z0JBQzVCLEtBQUssRUFBRSxTQUFTO2FBQ2pCLENBQUMsQ0FBQztRQUNMLENBQUM7UUFFRCxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxDQUFDO1lBQ3pCLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQzFCLE9BQU8sRUFBRSxrQkFBa0I7Z0JBQzNCLEtBQUssRUFBRSxTQUFTO2FBQ2pCLENBQUMsQ0FBQztRQUNMLENBQUM7UUFFRCxJQUFJLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxDQUFDO1lBQzFCLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQzFCLE9BQU8sRUFBRSxtQkFBbUI7Z0JBQzVCLEtBQUssRUFBRSxTQUFTO2FBQ2pCLENBQUMsQ0FBQztRQUNMLENBQUM7UUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSwyQkFBMkIsQ0FBQyxDQUFDO1FBRXBELE1BQU0sNEJBQTRCLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFOUMsT0FBTztZQUNMLFVBQVUsRUFBRSxHQUFHO1lBQ2YsT0FBTyxFQUFFO2dCQUNQLDZCQUE2QixFQUFFLEdBQUc7YUFDbkM7WUFDRCxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDbkIsT0FBTyxFQUFFLDBCQUEwQjtnQkFDbkMsS0FBSyxFQUFFLFNBQVM7YUFDakIsQ0FBQztTQUNILENBQUM7SUFDSixDQUFDO0lBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUNYLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLDRCQUE0QixDQUFDLENBQUM7UUFFN0MsT0FBTyxDQUFDLEdBQUcsQ0FDVCxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNuQixPQUFPLEVBQUUsNENBQTRDLENBQUMsRUFBRSxPQUFPLFdBQVcsQ0FBQyxFQUFFLFVBQVUsRUFBRTtTQUMxRixDQUFDLENBQ0gsQ0FBQztRQUVGLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLENBQUM7QUFDSCxDQUFDLENBQUM7QUFFRixlQUFlLE9BQU8sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBzZW5kQnVsa0ludml0ZVRvTWVldGluZ0VtYWlsIH0gZnJvbSAnQGVtYWlsX25vdGlmaWNhdGlvbi9fbGlicy9hcGktaGVscHRlcic7XG5pbXBvcnQgeyBCdWxrTWVldGluZ0ludml0ZURldGFpbHNUb0F0dGVuZGVlVHlwZSB9IGZyb20gJ0BlbWFpbF9ub3RpZmljYXRpb24vX2xpYnMvdHlwZXMnO1xuXG5jb25zdCBoYW5kbGVyID0gYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGV2ZW50SXRlbTogQnVsa01lZXRpbmdJbnZpdGVEZXRhaWxzVG9BdHRlbmRlZVR5cGUgPSByZXEuYm9keTtcbiAgICAvLyB2YWxpZGF0ZVxuXG4gICAgaWYgKCEoZXZlbnRJdGVtPy5hdHRlbmRlZXM/Lmxlbmd0aCA+IDApKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBtZXNzYWdlOiAnbWlzc2luZyBhdHRlbmRlZXMnLFxuICAgICAgICBldmVudDogZXZlbnRJdGVtLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFldmVudEl0ZW0/Lmhvc3ROYW1lKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBtZXNzYWdlOiAnbWlzc2luZyBob3N0TmFtZScsXG4gICAgICAgIGV2ZW50OiBldmVudEl0ZW0sXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIWV2ZW50SXRlbT8uaG9zdEVtYWlsKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBtZXNzYWdlOiAnbWlzc2luZyBob3N0RW1haWwnLFxuICAgICAgICBldmVudDogZXZlbnRJdGVtLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coZXZlbnRJdGVtLCAnIGV2ZW50SXRlbSBpbnNpZGUgaGFuZGxlcicpO1xuXG4gICAgYXdhaXQgc2VuZEJ1bGtJbnZpdGVUb01lZXRpbmdFbWFpbChldmVudEl0ZW0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1c0NvZGU6IDIwMixcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbic6ICcqJyxcbiAgICAgIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIG1lc3NhZ2U6ICdlbWFpbCBmb3IgbWVldGluZyBpbnZpdGUnLFxuICAgICAgICBldmVudDogZXZlbnRJdGVtLFxuICAgICAgfSksXG4gICAgfTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUubG9nKGUsICcgdW5hYmxlIHRvIHByb2Nlc3MgbWVzc2FnZScpO1xuXG4gICAgY29uc29sZS5sb2coXG4gICAgICByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6IGBlcnJvciBwcm9jZXNzaW5nIHF1ZXVlIG1lc2FnZXM6IG1lc3NhZ2U6ICR7ZT8ubWVzc2FnZX0sIGNvZGU6ICR7ZT8uc3RhdHVzQ29kZX1gLFxuICAgICAgfSlcbiAgICApO1xuXG4gICAgcmVzLnN0YXR1cyg0MDApLmpzb24oZSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGhhbmRsZXI7XG4iXX0=