import { createZoomMeeting, getZoomAPIToken, } from '@zoom_meeting/_libs/api-helper';
const publisher = async (req, res) => {
    try {
        const eventItem = req.body;
        // validate
        if (!eventItem?.startDate) {
            return res.status(400).json({
                message: 'no startDate present',
                event: eventItem,
            });
        }
        if (!eventItem?.timezone) {
            return res.status(400).json({
                message: 'no timezone',
                event: eventItem,
            });
        }
        if (!eventItem?.agenda) {
            return res.status(400).json({
                message: 'no agenda',
                event: eventItem,
            });
        }
        if (!eventItem?.duration) {
            return res.status(400).json({
                message: 'no duration',
                event: eventItem,
            });
        }
        if (!eventItem?.userId) {
            return res.status(400).json({
                message: 'no userId',
                event: eventItem,
            });
        }
        const zoomToken = await getZoomAPIToken(eventItem?.userId);
        const response = await createZoomMeeting(zoomToken, eventItem?.startDate, eventItem?.timezone, eventItem?.agenda, eventItem?.duration, eventItem?.contactName, eventItem?.contactEmail, eventItem?.meetingInvitees, eventItem?.privateMeeting);
        res.status(202).json(response);
    }
    catch (e) {
        console.log(e, ' unable to process message');
        console.log(res.status(400).json({
            message: `error processing queue mesages: message: ${e?.message}, code: ${e?.statusCode}`,
            event: e,
        }));
    }
};
export default publisher;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXpvb20tbWVldC1hZG1pbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNyZWF0ZS16b29tLW1lZXQtYWRtaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUNMLGlCQUFpQixFQUNqQixlQUFlLEdBQ2hCLE1BQU0sZ0NBQWdDLENBQUM7QUFHeEMsTUFBTSxTQUFTLEdBQUcsS0FBSyxFQUFFLEdBQVksRUFBRSxHQUFhLEVBQUUsRUFBRTtJQUN0RCxJQUFJLENBQUM7UUFDSCxNQUFNLFNBQVMsR0FBNkIsR0FBRyxDQUFDLElBQUksQ0FBQztRQUVyRCxXQUFXO1FBQ1gsSUFBSSxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsQ0FBQztZQUMxQixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUMxQixPQUFPLEVBQUUsc0JBQXNCO2dCQUMvQixLQUFLLEVBQUUsU0FBUzthQUNqQixDQUFDLENBQUM7UUFDTCxDQUFDO1FBRUQsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsQ0FBQztZQUN6QixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUMxQixPQUFPLEVBQUUsYUFBYTtnQkFDdEIsS0FBSyxFQUFFLFNBQVM7YUFDakIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUVELElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLENBQUM7WUFDdkIsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDMUIsT0FBTyxFQUFFLFdBQVc7Z0JBQ3BCLEtBQUssRUFBRSxTQUFTO2FBQ2pCLENBQUMsQ0FBQztRQUNMLENBQUM7UUFFRCxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxDQUFDO1lBQ3pCLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQzFCLE9BQU8sRUFBRSxhQUFhO2dCQUN0QixLQUFLLEVBQUUsU0FBUzthQUNqQixDQUFDLENBQUM7UUFDTCxDQUFDO1FBRUQsSUFBSSxDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQztZQUN2QixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUMxQixPQUFPLEVBQUUsV0FBVztnQkFDcEIsS0FBSyxFQUFFLFNBQVM7YUFDakIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUVELE1BQU0sU0FBUyxHQUFHLE1BQU0sZUFBZSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUUzRCxNQUFNLFFBQVEsR0FBRyxNQUFNLGlCQUFpQixDQUN0QyxTQUFTLEVBQ1QsU0FBUyxFQUFFLFNBQVMsRUFDcEIsU0FBUyxFQUFFLFFBQVEsRUFDbkIsU0FBUyxFQUFFLE1BQU0sRUFDakIsU0FBUyxFQUFFLFFBQVEsRUFDbkIsU0FBUyxFQUFFLFdBQVcsRUFDdEIsU0FBUyxFQUFFLFlBQVksRUFDdkIsU0FBUyxFQUFFLGVBQWUsRUFDMUIsU0FBUyxFQUFFLGNBQWMsQ0FDMUIsQ0FBQztRQUVGLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztRQUU3QyxPQUFPLENBQUMsR0FBRyxDQUNULEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ25CLE9BQU8sRUFBRSw0Q0FBNEMsQ0FBQyxFQUFFLE9BQU8sV0FBVyxDQUFDLEVBQUUsVUFBVSxFQUFFO1lBQ3pGLEtBQUssRUFBRSxDQUFDO1NBQ1QsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsZUFBZSxTQUFTLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHtcbiAgY3JlYXRlWm9vbU1lZXRpbmcsXG4gIGdldFpvb21BUElUb2tlbixcbn0gZnJvbSAnQHpvb21fbWVldGluZy9fbGlicy9hcGktaGVscGVyJztcbmltcG9ydCB7IENyZWF0ZVpvb21NZWV0T2JqZWN0VHlwZSB9IGZyb20gJ0B6b29tX21lZXRpbmcvX2xpYnMvdHlwZXMnO1xuXG5jb25zdCBwdWJsaXNoZXIgPSBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgZXZlbnRJdGVtOiBDcmVhdGVab29tTWVldE9iamVjdFR5cGUgPSByZXEuYm9keTtcblxuICAgIC8vIHZhbGlkYXRlXG4gICAgaWYgKCFldmVudEl0ZW0/LnN0YXJ0RGF0ZSkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ25vIHN0YXJ0RGF0ZSBwcmVzZW50JyxcbiAgICAgICAgZXZlbnQ6IGV2ZW50SXRlbSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghZXZlbnRJdGVtPy50aW1lem9uZSkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ25vIHRpbWV6b25lJyxcbiAgICAgICAgZXZlbnQ6IGV2ZW50SXRlbSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghZXZlbnRJdGVtPy5hZ2VuZGEpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdubyBhZ2VuZGEnLFxuICAgICAgICBldmVudDogZXZlbnRJdGVtLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFldmVudEl0ZW0/LmR1cmF0aW9uKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBtZXNzYWdlOiAnbm8gZHVyYXRpb24nLFxuICAgICAgICBldmVudDogZXZlbnRJdGVtLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFldmVudEl0ZW0/LnVzZXJJZCkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ25vIHVzZXJJZCcsXG4gICAgICAgIGV2ZW50OiBldmVudEl0ZW0sXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCB6b29tVG9rZW4gPSBhd2FpdCBnZXRab29tQVBJVG9rZW4oZXZlbnRJdGVtPy51c2VySWQpO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjcmVhdGVab29tTWVldGluZyhcbiAgICAgIHpvb21Ub2tlbixcbiAgICAgIGV2ZW50SXRlbT8uc3RhcnREYXRlLFxuICAgICAgZXZlbnRJdGVtPy50aW1lem9uZSxcbiAgICAgIGV2ZW50SXRlbT8uYWdlbmRhLFxuICAgICAgZXZlbnRJdGVtPy5kdXJhdGlvbixcbiAgICAgIGV2ZW50SXRlbT8uY29udGFjdE5hbWUsXG4gICAgICBldmVudEl0ZW0/LmNvbnRhY3RFbWFpbCxcbiAgICAgIGV2ZW50SXRlbT8ubWVldGluZ0ludml0ZWVzLFxuICAgICAgZXZlbnRJdGVtPy5wcml2YXRlTWVldGluZ1xuICAgICk7XG5cbiAgICByZXMuc3RhdHVzKDIwMikuanNvbihyZXNwb25zZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlLCAnIHVuYWJsZSB0byBwcm9jZXNzIG1lc3NhZ2UnKTtcblxuICAgIGNvbnNvbGUubG9nKFxuICAgICAgcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBtZXNzYWdlOiBgZXJyb3IgcHJvY2Vzc2luZyBxdWV1ZSBtZXNhZ2VzOiBtZXNzYWdlOiAke2U/Lm1lc3NhZ2V9LCBjb2RlOiAke2U/LnN0YXR1c0NvZGV9YCxcbiAgICAgICAgZXZlbnQ6IGUsXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHB1Ymxpc2hlcjtcbiJdfQ==