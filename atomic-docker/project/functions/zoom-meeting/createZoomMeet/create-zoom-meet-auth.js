import { createZoomMeeting, getZoomAPIToken, } from '@zoom_meeting/_libs/api-helper';
const publisher = async (req, res) => {
    try {
        const eventItem = req.body;
        // validate
        if (!eventItem?.startDate) {
            return res.status(400).json({
                message: 'no startDate present',
                event: eventItem,
            });
        }
        if (!eventItem?.timezone) {
            return res.status(400).json({
                message: 'no timezone',
                event: eventItem,
            });
        }
        if (!eventItem?.agenda) {
            return res.status(400).json({
                message: 'no agenda',
                event: eventItem,
            });
        }
        if (!eventItem?.duration) {
            return res.status(400).json({
                message: 'no duration',
                event: eventItem,
            });
        }
        if (!eventItem?.userId) {
            return res.status(400).json({
                message: 'no userId',
                event: eventItem,
            });
        }
        const zoomToken = await getZoomAPIToken(eventItem?.userId);
        const response = await createZoomMeeting(zoomToken, eventItem?.startDate, eventItem?.timezone, eventItem?.agenda, eventItem?.duration, eventItem?.contactName, eventItem?.contactEmail, eventItem?.meetingInvitees, eventItem?.privateMeeting);
        res.status(202).json(response);
    }
    catch (e) {
        console.log(e, ' unable to process message');
        console.log(res.status(400).json({
            message: `error processing queue mesages: message: ${e?.message}, code: ${e?.statusCode}`,
            event: e,
        }));
    }
};
export default publisher;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXpvb20tbWVldC1hdXRoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY3JlYXRlLXpvb20tbWVldC1hdXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDTCxpQkFBaUIsRUFDakIsZUFBZSxHQUNoQixNQUFNLGdDQUFnQyxDQUFDO0FBR3hDLE1BQU0sU0FBUyxHQUFHLEtBQUssRUFBRSxHQUFZLEVBQUUsR0FBYSxFQUFFLEVBQUU7SUFDdEQsSUFBSSxDQUFDO1FBQ0gsTUFBTSxTQUFTLEdBQTZCLEdBQUcsQ0FBQyxJQUFJLENBQUM7UUFFckQsV0FBVztRQUNYLElBQUksQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLENBQUM7WUFDMUIsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDMUIsT0FBTyxFQUFFLHNCQUFzQjtnQkFDL0IsS0FBSyxFQUFFLFNBQVM7YUFDakIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUVELElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLENBQUM7WUFDekIsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDMUIsT0FBTyxFQUFFLGFBQWE7Z0JBQ3RCLEtBQUssRUFBRSxTQUFTO2FBQ2pCLENBQUMsQ0FBQztRQUNMLENBQUM7UUFFRCxJQUFJLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxDQUFDO1lBQ3ZCLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQzFCLE9BQU8sRUFBRSxXQUFXO2dCQUNwQixLQUFLLEVBQUUsU0FBUzthQUNqQixDQUFDLENBQUM7UUFDTCxDQUFDO1FBRUQsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsQ0FBQztZQUN6QixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUMxQixPQUFPLEVBQUUsYUFBYTtnQkFDdEIsS0FBSyxFQUFFLFNBQVM7YUFDakIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUVELElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLENBQUM7WUFDdkIsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDMUIsT0FBTyxFQUFFLFdBQVc7Z0JBQ3BCLEtBQUssRUFBRSxTQUFTO2FBQ2pCLENBQUMsQ0FBQztRQUNMLENBQUM7UUFFRCxNQUFNLFNBQVMsR0FBRyxNQUFNLGVBQWUsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFM0QsTUFBTSxRQUFRLEdBQUcsTUFBTSxpQkFBaUIsQ0FDdEMsU0FBUyxFQUNULFNBQVMsRUFBRSxTQUFTLEVBQ3BCLFNBQVMsRUFBRSxRQUFRLEVBQ25CLFNBQVMsRUFBRSxNQUFNLEVBQ2pCLFNBQVMsRUFBRSxRQUFRLEVBQ25CLFNBQVMsRUFBRSxXQUFXLEVBQ3RCLFNBQVMsRUFBRSxZQUFZLEVBQ3ZCLFNBQVMsRUFBRSxlQUFlLEVBQzFCLFNBQVMsRUFBRSxjQUFjLENBQzFCLENBQUM7UUFFRixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUNYLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLDRCQUE0QixDQUFDLENBQUM7UUFFN0MsT0FBTyxDQUFDLEdBQUcsQ0FDVCxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNuQixPQUFPLEVBQUUsNENBQTRDLENBQUMsRUFBRSxPQUFPLFdBQVcsQ0FBQyxFQUFFLFVBQVUsRUFBRTtZQUN6RixLQUFLLEVBQUUsQ0FBQztTQUNULENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztBQUNILENBQUMsQ0FBQztBQUVGLGVBQWUsU0FBUyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCB7XG4gIGNyZWF0ZVpvb21NZWV0aW5nLFxuICBnZXRab29tQVBJVG9rZW4sXG59IGZyb20gJ0B6b29tX21lZXRpbmcvX2xpYnMvYXBpLWhlbHBlcic7XG5pbXBvcnQgeyBDcmVhdGVab29tTWVldE9iamVjdFR5cGUgfSBmcm9tICdAem9vbV9tZWV0aW5nL19saWJzL3R5cGVzJztcblxuY29uc3QgcHVibGlzaGVyID0gYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGV2ZW50SXRlbTogQ3JlYXRlWm9vbU1lZXRPYmplY3RUeXBlID0gcmVxLmJvZHk7XG5cbiAgICAvLyB2YWxpZGF0ZVxuICAgIGlmICghZXZlbnRJdGVtPy5zdGFydERhdGUpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdubyBzdGFydERhdGUgcHJlc2VudCcsXG4gICAgICAgIGV2ZW50OiBldmVudEl0ZW0sXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIWV2ZW50SXRlbT8udGltZXpvbmUpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdubyB0aW1lem9uZScsXG4gICAgICAgIGV2ZW50OiBldmVudEl0ZW0sXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIWV2ZW50SXRlbT8uYWdlbmRhKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBtZXNzYWdlOiAnbm8gYWdlbmRhJyxcbiAgICAgICAgZXZlbnQ6IGV2ZW50SXRlbSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghZXZlbnRJdGVtPy5kdXJhdGlvbikge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ25vIGR1cmF0aW9uJyxcbiAgICAgICAgZXZlbnQ6IGV2ZW50SXRlbSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghZXZlbnRJdGVtPy51c2VySWQpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdubyB1c2VySWQnLFxuICAgICAgICBldmVudDogZXZlbnRJdGVtLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3Qgem9vbVRva2VuID0gYXdhaXQgZ2V0Wm9vbUFQSVRva2VuKGV2ZW50SXRlbT8udXNlcklkKTtcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY3JlYXRlWm9vbU1lZXRpbmcoXG4gICAgICB6b29tVG9rZW4sXG4gICAgICBldmVudEl0ZW0/LnN0YXJ0RGF0ZSxcbiAgICAgIGV2ZW50SXRlbT8udGltZXpvbmUsXG4gICAgICBldmVudEl0ZW0/LmFnZW5kYSxcbiAgICAgIGV2ZW50SXRlbT8uZHVyYXRpb24sXG4gICAgICBldmVudEl0ZW0/LmNvbnRhY3ROYW1lLFxuICAgICAgZXZlbnRJdGVtPy5jb250YWN0RW1haWwsXG4gICAgICBldmVudEl0ZW0/Lm1lZXRpbmdJbnZpdGVlcyxcbiAgICAgIGV2ZW50SXRlbT8ucHJpdmF0ZU1lZXRpbmdcbiAgICApO1xuXG4gICAgcmVzLnN0YXR1cygyMDIpLmpzb24ocmVzcG9uc2UpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coZSwgJyB1bmFibGUgdG8gcHJvY2VzcyBtZXNzYWdlJyk7XG5cbiAgICBjb25zb2xlLmxvZyhcbiAgICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogYGVycm9yIHByb2Nlc3NpbmcgcXVldWUgbWVzYWdlczogbWVzc2FnZTogJHtlPy5tZXNzYWdlfSwgY29kZTogJHtlPy5zdGF0dXNDb2RlfWAsXG4gICAgICAgIGV2ZW50OiBlLFxuICAgICAgfSlcbiAgICApO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwdWJsaXNoZXI7XG4iXX0=