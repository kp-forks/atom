import { getZoomAPIToken, updateZoomMeeting, } from '@zoom_meeting/_libs/api-helper';
const publisher = async (req, res) => {
    try {
        const eventItem = req.body;
        // validate
        if (!eventItem?.meetingId) {
            return res.status(400).json({
                message: 'no meetingId present',
                event: eventItem,
            });
        }
        if (!eventItem?.userId) {
            return res.status(400).json({
                message: 'no userId',
                event: eventItem,
            });
        }
        const zoomToken = await getZoomAPIToken(eventItem?.userId);
        await updateZoomMeeting(zoomToken, eventItem?.meetingId, eventItem?.startDate, eventItem?.timezone, eventItem?.agenda, eventItem?.duration, eventItem?.contactName, eventItem?.contactEmail, eventItem?.meetingInvitees, eventItem?.privateMeeting);
        res.status(202).json(eventItem);
    }
    catch (e) {
        console.log(e, ' unable to process message');
        console.log(res.status(400).json({
            message: `error processing queue mesages: message: ${e?.message}, code: ${e?.statusCode}`,
            event: e,
        }));
    }
};
export default publisher;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLXpvb20tbWVldC1hZG1pbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVwZGF0ZS16b29tLW1lZXQtYWRtaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUNMLGVBQWUsRUFDZixpQkFBaUIsR0FDbEIsTUFBTSxnQ0FBZ0MsQ0FBQztBQUd4QyxNQUFNLFNBQVMsR0FBRyxLQUFLLEVBQUUsR0FBWSxFQUFFLEdBQWEsRUFBRSxFQUFFO0lBQ3RELElBQUksQ0FBQztRQUNILE1BQU0sU0FBUyxHQUE2QixHQUFHLENBQUMsSUFBSSxDQUFDO1FBRXJELFdBQVc7UUFDWCxJQUFJLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxDQUFDO1lBQzFCLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQzFCLE9BQU8sRUFBRSxzQkFBc0I7Z0JBQy9CLEtBQUssRUFBRSxTQUFTO2FBQ2pCLENBQUMsQ0FBQztRQUNMLENBQUM7UUFFRCxJQUFJLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxDQUFDO1lBQ3ZCLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQzFCLE9BQU8sRUFBRSxXQUFXO2dCQUNwQixLQUFLLEVBQUUsU0FBUzthQUNqQixDQUFDLENBQUM7UUFDTCxDQUFDO1FBRUQsTUFBTSxTQUFTLEdBQUcsTUFBTSxlQUFlLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRTNELE1BQU0saUJBQWlCLENBQ3JCLFNBQVMsRUFDVCxTQUFTLEVBQUUsU0FBUyxFQUNwQixTQUFTLEVBQUUsU0FBUyxFQUNwQixTQUFTLEVBQUUsUUFBUSxFQUNuQixTQUFTLEVBQUUsTUFBTSxFQUNqQixTQUFTLEVBQUUsUUFBUSxFQUNuQixTQUFTLEVBQUUsV0FBVyxFQUN0QixTQUFTLEVBQUUsWUFBWSxFQUN2QixTQUFTLEVBQUUsZUFBZSxFQUMxQixTQUFTLEVBQUUsY0FBYyxDQUMxQixDQUFDO1FBRUYsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSw0QkFBNEIsQ0FBQyxDQUFDO1FBRTdDLE9BQU8sQ0FBQyxHQUFHLENBQ1QsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDbkIsT0FBTyxFQUFFLDRDQUE0QyxDQUFDLEVBQUUsT0FBTyxXQUFXLENBQUMsRUFBRSxVQUFVLEVBQUU7WUFDekYsS0FBSyxFQUFFLENBQUM7U0FDVCxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7QUFDSCxDQUFDLENBQUM7QUFFRixlQUFlLFNBQVMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQge1xuICBnZXRab29tQVBJVG9rZW4sXG4gIHVwZGF0ZVpvb21NZWV0aW5nLFxufSBmcm9tICdAem9vbV9tZWV0aW5nL19saWJzL2FwaS1oZWxwZXInO1xuaW1wb3J0IHsgVXBkYXRlWm9vbU1lZXRPYmplY3RUeXBlIH0gZnJvbSAnQHpvb21fbWVldGluZy9fbGlicy90eXBlcyc7XG5cbmNvbnN0IHB1Ymxpc2hlciA9IGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBldmVudEl0ZW06IFVwZGF0ZVpvb21NZWV0T2JqZWN0VHlwZSA9IHJlcS5ib2R5O1xuXG4gICAgLy8gdmFsaWRhdGVcbiAgICBpZiAoIWV2ZW50SXRlbT8ubWVldGluZ0lkKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICBtZXNzYWdlOiAnbm8gbWVldGluZ0lkIHByZXNlbnQnLFxuICAgICAgICBldmVudDogZXZlbnRJdGVtLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFldmVudEl0ZW0/LnVzZXJJZCkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ25vIHVzZXJJZCcsXG4gICAgICAgIGV2ZW50OiBldmVudEl0ZW0sXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCB6b29tVG9rZW4gPSBhd2FpdCBnZXRab29tQVBJVG9rZW4oZXZlbnRJdGVtPy51c2VySWQpO1xuXG4gICAgYXdhaXQgdXBkYXRlWm9vbU1lZXRpbmcoXG4gICAgICB6b29tVG9rZW4sXG4gICAgICBldmVudEl0ZW0/Lm1lZXRpbmdJZCxcbiAgICAgIGV2ZW50SXRlbT8uc3RhcnREYXRlLFxuICAgICAgZXZlbnRJdGVtPy50aW1lem9uZSxcbiAgICAgIGV2ZW50SXRlbT8uYWdlbmRhLFxuICAgICAgZXZlbnRJdGVtPy5kdXJhdGlvbixcbiAgICAgIGV2ZW50SXRlbT8uY29udGFjdE5hbWUsXG4gICAgICBldmVudEl0ZW0/LmNvbnRhY3RFbWFpbCxcbiAgICAgIGV2ZW50SXRlbT8ubWVldGluZ0ludml0ZWVzLFxuICAgICAgZXZlbnRJdGVtPy5wcml2YXRlTWVldGluZ1xuICAgICk7XG5cbiAgICByZXMuc3RhdHVzKDIwMikuanNvbihldmVudEl0ZW0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coZSwgJyB1bmFibGUgdG8gcHJvY2VzcyBtZXNzYWdlJyk7XG5cbiAgICBjb25zb2xlLmxvZyhcbiAgICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogYGVycm9yIHByb2Nlc3NpbmcgcXVldWUgbWVzYWdlczogbWVzc2FnZTogJHtlPy5tZXNzYWdlfSwgY29kZTogJHtlPy5zdGF0dXNDb2RlfWAsXG4gICAgICAgIGV2ZW50OiBlLFxuICAgICAgfSlcbiAgICApO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwdWJsaXNoZXI7XG4iXX0=