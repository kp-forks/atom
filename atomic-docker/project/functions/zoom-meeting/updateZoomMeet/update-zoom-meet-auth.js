import { getZoomAPIToken, updateZoomMeeting, } from '@zoom_meeting/_libs/api-helper';
const publisher = async (req, res) => {
    try {
        const eventItem = req.body;
        // validate
        if (!eventItem?.meetingId) {
            return res.status(400).json({
                message: 'no meetingId present',
                event: eventItem,
            });
        }
        if (!eventItem?.userId) {
            return res.status(400).json({
                message: 'no userId',
                event: eventItem,
            });
        }
        const zoomToken = await getZoomAPIToken(eventItem?.userId);
        await updateZoomMeeting(zoomToken, eventItem?.meetingId, eventItem?.startDate, eventItem?.timezone, eventItem?.agenda, eventItem?.duration, eventItem?.contactName, eventItem?.contactEmail, eventItem?.meetingInvitees, eventItem?.privateMeeting);
        res.status(202).json(eventItem);
    }
    catch (e) {
        console.log(e, ' unable to process message');
        console.log(res.status(400).json({
            message: `error processing queue mesages: message: ${e?.message}, code: ${e?.statusCode}`,
            event: e,
        }));
    }
};
export default publisher;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLXpvb20tbWVldC1hdXRoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidXBkYXRlLXpvb20tbWVldC1hdXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDTCxlQUFlLEVBQ2YsaUJBQWlCLEdBQ2xCLE1BQU0sZ0NBQWdDLENBQUM7QUFHeEMsTUFBTSxTQUFTLEdBQUcsS0FBSyxFQUFFLEdBQVksRUFBRSxHQUFhLEVBQUUsRUFBRTtJQUN0RCxJQUFJLENBQUM7UUFDSCxNQUFNLFNBQVMsR0FBNkIsR0FBRyxDQUFDLElBQUksQ0FBQztRQUVyRCxXQUFXO1FBQ1gsSUFBSSxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsQ0FBQztZQUMxQixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUMxQixPQUFPLEVBQUUsc0JBQXNCO2dCQUMvQixLQUFLLEVBQUUsU0FBUzthQUNqQixDQUFDLENBQUM7UUFDTCxDQUFDO1FBRUQsSUFBSSxDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQztZQUN2QixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUMxQixPQUFPLEVBQUUsV0FBVztnQkFDcEIsS0FBSyxFQUFFLFNBQVM7YUFDakIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUVELE1BQU0sU0FBUyxHQUFHLE1BQU0sZUFBZSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUUzRCxNQUFNLGlCQUFpQixDQUNyQixTQUFTLEVBQ1QsU0FBUyxFQUFFLFNBQVMsRUFDcEIsU0FBUyxFQUFFLFNBQVMsRUFDcEIsU0FBUyxFQUFFLFFBQVEsRUFDbkIsU0FBUyxFQUFFLE1BQU0sRUFDakIsU0FBUyxFQUFFLFFBQVEsRUFDbkIsU0FBUyxFQUFFLFdBQVcsRUFDdEIsU0FBUyxFQUFFLFlBQVksRUFDdkIsU0FBUyxFQUFFLGVBQWUsRUFDMUIsU0FBUyxFQUFFLGNBQWMsQ0FDMUIsQ0FBQztRQUVGLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztRQUU3QyxPQUFPLENBQUMsR0FBRyxDQUNULEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ25CLE9BQU8sRUFBRSw0Q0FBNEMsQ0FBQyxFQUFFLE9BQU8sV0FBVyxDQUFDLEVBQUUsVUFBVSxFQUFFO1lBQ3pGLEtBQUssRUFBRSxDQUFDO1NBQ1QsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsZUFBZSxTQUFTLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHtcbiAgZ2V0Wm9vbUFQSVRva2VuLFxuICB1cGRhdGVab29tTWVldGluZyxcbn0gZnJvbSAnQHpvb21fbWVldGluZy9fbGlicy9hcGktaGVscGVyJztcbmltcG9ydCB7IFVwZGF0ZVpvb21NZWV0T2JqZWN0VHlwZSB9IGZyb20gJ0B6b29tX21lZXRpbmcvX2xpYnMvdHlwZXMnO1xuXG5jb25zdCBwdWJsaXNoZXIgPSBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgZXZlbnRJdGVtOiBVcGRhdGVab29tTWVldE9iamVjdFR5cGUgPSByZXEuYm9keTtcblxuICAgIC8vIHZhbGlkYXRlXG4gICAgaWYgKCFldmVudEl0ZW0/Lm1lZXRpbmdJZCkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ25vIG1lZXRpbmdJZCBwcmVzZW50JyxcbiAgICAgICAgZXZlbnQ6IGV2ZW50SXRlbSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghZXZlbnRJdGVtPy51c2VySWQpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdubyB1c2VySWQnLFxuICAgICAgICBldmVudDogZXZlbnRJdGVtLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3Qgem9vbVRva2VuID0gYXdhaXQgZ2V0Wm9vbUFQSVRva2VuKGV2ZW50SXRlbT8udXNlcklkKTtcblxuICAgIGF3YWl0IHVwZGF0ZVpvb21NZWV0aW5nKFxuICAgICAgem9vbVRva2VuLFxuICAgICAgZXZlbnRJdGVtPy5tZWV0aW5nSWQsXG4gICAgICBldmVudEl0ZW0/LnN0YXJ0RGF0ZSxcbiAgICAgIGV2ZW50SXRlbT8udGltZXpvbmUsXG4gICAgICBldmVudEl0ZW0/LmFnZW5kYSxcbiAgICAgIGV2ZW50SXRlbT8uZHVyYXRpb24sXG4gICAgICBldmVudEl0ZW0/LmNvbnRhY3ROYW1lLFxuICAgICAgZXZlbnRJdGVtPy5jb250YWN0RW1haWwsXG4gICAgICBldmVudEl0ZW0/Lm1lZXRpbmdJbnZpdGVlcyxcbiAgICAgIGV2ZW50SXRlbT8ucHJpdmF0ZU1lZXRpbmdcbiAgICApO1xuXG4gICAgcmVzLnN0YXR1cygyMDIpLmpzb24oZXZlbnRJdGVtKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUubG9nKGUsICcgdW5hYmxlIHRvIHByb2Nlc3MgbWVzc2FnZScpO1xuXG4gICAgY29uc29sZS5sb2coXG4gICAgICByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6IGBlcnJvciBwcm9jZXNzaW5nIHF1ZXVlIG1lc2FnZXM6IG1lc3NhZ2U6ICR7ZT8ubWVzc2FnZX0sIGNvZGU6ICR7ZT8uc3RhdHVzQ29kZX1gLFxuICAgICAgICBldmVudDogZSxcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcHVibGlzaGVyO1xuIl19