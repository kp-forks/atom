import { Kafka, logLevel } from 'kafkajs';
import { kafkaScheduleEventGroupId, kafkaScheduleEventTopic, } from '../_libs/constants';
const kafka = new Kafka({
    logLevel: logLevel.DEBUG,
    brokers: [`kafka1:29092`],
    clientId: 'atomic',
    // ssl: true,
    sasl: {
        mechanism: 'plain', // scram-sha-256 or scram-sha-512
        username: process.env.KAFKA_USERNAME,
        password: process.env.KAFKA_PASSWORD,
    },
});
const publisher = async (req, res) => {
    const producer = kafka.producer({ maxInFlightRequests: 1, idempotent: true });
    await producer.connect();
    const transaction = await producer.transaction();
    try {
        const eventItem = req.body;
        const response = await transaction.send({
            topic: kafkaScheduleEventTopic,
            messages: [{ value: JSON.stringify(eventItem) }],
        });
        const admin = kafka.admin();
        await admin.connect();
        const partitions = await admin.fetchOffsets({
            groupId: kafkaScheduleEventGroupId,
            topics: [kafkaScheduleEventTopic],
        });
        console.log(partitions);
        await admin.disconnect();
        await transaction.sendOffsets({
            consumerGroupId: kafkaScheduleEventGroupId,
            topics: [
                {
                    topic: kafkaScheduleEventTopic,
                    partitions: partitions?.[0]?.partitions,
                },
            ],
        });
        await transaction.commit();
        console.log(response, ' response successfully added to queue inside features-worker-queue-admin');
        res.status(202).send('succesfully created day schedule');
    }
    catch (e) {
        console.log(e, ' unable to process message');
        await transaction.abort();
        res.status(400).json(e);
    }
};
export default publisher;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGUtZXZlbnQtYXV0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNjaGVkdWxlLWV2ZW50LWF1dGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFMUMsT0FBTyxFQUNMLHlCQUF5QixFQUN6Qix1QkFBdUIsR0FDeEIsTUFBTSxvQkFBb0IsQ0FBQztBQUU1QixNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQztJQUN0QixRQUFRLEVBQUUsUUFBUSxDQUFDLEtBQUs7SUFDeEIsT0FBTyxFQUFFLENBQUMsY0FBYyxDQUFDO0lBQ3pCLFFBQVEsRUFBRSxRQUFRO0lBQ2xCLGFBQWE7SUFDYixJQUFJLEVBQUU7UUFDSixTQUFTLEVBQUUsT0FBTyxFQUFFLGlDQUFpQztRQUNyRCxRQUFRLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjO1FBQ3BDLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWM7S0FDckM7Q0FDRixDQUFDLENBQUM7QUFFSCxNQUFNLFNBQVMsR0FBRyxLQUFLLEVBQUUsR0FBWSxFQUFFLEdBQWEsRUFBRSxFQUFFO0lBQ3RELE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxtQkFBbUIsRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDOUUsTUFBTSxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7SUFFekIsTUFBTSxXQUFXLEdBQUcsTUFBTSxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDakQsSUFBSSxDQUFDO1FBQ0gsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztRQUUzQixNQUFNLFFBQVEsR0FBRyxNQUFNLFdBQVcsQ0FBQyxJQUFJLENBQUM7WUFDdEMsS0FBSyxFQUFFLHVCQUF1QjtZQUM5QixRQUFRLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUM7U0FDakQsQ0FBQyxDQUFDO1FBRUgsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRTVCLE1BQU0sS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3RCLE1BQU0sVUFBVSxHQUFHLE1BQU0sS0FBSyxDQUFDLFlBQVksQ0FBQztZQUMxQyxPQUFPLEVBQUUseUJBQXlCO1lBQ2xDLE1BQU0sRUFBRSxDQUFDLHVCQUF1QixDQUFDO1NBQ2xDLENBQUMsQ0FBQztRQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDeEIsTUFBTSxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFFekIsTUFBTSxXQUFXLENBQUMsV0FBVyxDQUFDO1lBQzVCLGVBQWUsRUFBRSx5QkFBeUI7WUFDMUMsTUFBTSxFQUFFO2dCQUNOO29CQUNFLEtBQUssRUFBRSx1QkFBdUI7b0JBQzlCLFVBQVUsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxVQUFVO2lCQUN4QzthQUNGO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsTUFBTSxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFM0IsT0FBTyxDQUFDLEdBQUcsQ0FDVCxRQUFRLEVBQ1IsMEVBQTBFLENBQzNFLENBQUM7UUFFRixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztRQUU3QyxNQUFNLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUMxQixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsZUFBZSxTQUFTLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgS2Fma2EsIGxvZ0xldmVsIH0gZnJvbSAna2Fma2Fqcyc7XG5pbXBvcnQgaXAgZnJvbSAnaXAnO1xuaW1wb3J0IHtcbiAga2Fma2FTY2hlZHVsZUV2ZW50R3JvdXBJZCxcbiAga2Fma2FTY2hlZHVsZUV2ZW50VG9waWMsXG59IGZyb20gJy4uL19saWJzL2NvbnN0YW50cyc7XG5cbmNvbnN0IGthZmthID0gbmV3IEthZmthKHtcbiAgbG9nTGV2ZWw6IGxvZ0xldmVsLkRFQlVHLFxuICBicm9rZXJzOiBbYGthZmthMToyOTA5MmBdLFxuICBjbGllbnRJZDogJ2F0b21pYycsXG4gIC8vIHNzbDogdHJ1ZSxcbiAgc2FzbDoge1xuICAgIG1lY2hhbmlzbTogJ3BsYWluJywgLy8gc2NyYW0tc2hhLTI1NiBvciBzY3JhbS1zaGEtNTEyXG4gICAgdXNlcm5hbWU6IHByb2Nlc3MuZW52LktBRktBX1VTRVJOQU1FLFxuICAgIHBhc3N3b3JkOiBwcm9jZXNzLmVudi5LQUZLQV9QQVNTV09SRCxcbiAgfSxcbn0pO1xuXG5jb25zdCBwdWJsaXNoZXIgPSBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XG4gIGNvbnN0IHByb2R1Y2VyID0ga2Fma2EucHJvZHVjZXIoeyBtYXhJbkZsaWdodFJlcXVlc3RzOiAxLCBpZGVtcG90ZW50OiB0cnVlIH0pO1xuICBhd2FpdCBwcm9kdWNlci5jb25uZWN0KCk7XG5cbiAgY29uc3QgdHJhbnNhY3Rpb24gPSBhd2FpdCBwcm9kdWNlci50cmFuc2FjdGlvbigpO1xuICB0cnkge1xuICAgIGNvbnN0IGV2ZW50SXRlbSA9IHJlcS5ib2R5O1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0cmFuc2FjdGlvbi5zZW5kKHtcbiAgICAgIHRvcGljOiBrYWZrYVNjaGVkdWxlRXZlbnRUb3BpYyxcbiAgICAgIG1lc3NhZ2VzOiBbeyB2YWx1ZTogSlNPTi5zdHJpbmdpZnkoZXZlbnRJdGVtKSB9XSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGFkbWluID0ga2Fma2EuYWRtaW4oKTtcblxuICAgIGF3YWl0IGFkbWluLmNvbm5lY3QoKTtcbiAgICBjb25zdCBwYXJ0aXRpb25zID0gYXdhaXQgYWRtaW4uZmV0Y2hPZmZzZXRzKHtcbiAgICAgIGdyb3VwSWQ6IGthZmthU2NoZWR1bGVFdmVudEdyb3VwSWQsXG4gICAgICB0b3BpY3M6IFtrYWZrYVNjaGVkdWxlRXZlbnRUb3BpY10sXG4gICAgfSk7XG4gICAgY29uc29sZS5sb2cocGFydGl0aW9ucyk7XG4gICAgYXdhaXQgYWRtaW4uZGlzY29ubmVjdCgpO1xuXG4gICAgYXdhaXQgdHJhbnNhY3Rpb24uc2VuZE9mZnNldHMoe1xuICAgICAgY29uc3VtZXJHcm91cElkOiBrYWZrYVNjaGVkdWxlRXZlbnRHcm91cElkLFxuICAgICAgdG9waWNzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0b3BpYzoga2Fma2FTY2hlZHVsZUV2ZW50VG9waWMsXG4gICAgICAgICAgcGFydGl0aW9uczogcGFydGl0aW9ucz8uWzBdPy5wYXJ0aXRpb25zLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIGF3YWl0IHRyYW5zYWN0aW9uLmNvbW1pdCgpO1xuXG4gICAgY29uc29sZS5sb2coXG4gICAgICByZXNwb25zZSxcbiAgICAgICcgcmVzcG9uc2Ugc3VjY2Vzc2Z1bGx5IGFkZGVkIHRvIHF1ZXVlIGluc2lkZSBmZWF0dXJlcy13b3JrZXItcXVldWUtYWRtaW4nXG4gICAgKTtcblxuICAgIHJlcy5zdGF0dXMoMjAyKS5zZW5kKCdzdWNjZXNmdWxseSBjcmVhdGVkIGRheSBzY2hlZHVsZScpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coZSwgJyB1bmFibGUgdG8gcHJvY2VzcyBtZXNzYWdlJyk7XG5cbiAgICBhd2FpdCB0cmFuc2FjdGlvbi5hYm9ydCgpO1xuICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKGUpO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwdWJsaXNoZXI7XG4iXX0=