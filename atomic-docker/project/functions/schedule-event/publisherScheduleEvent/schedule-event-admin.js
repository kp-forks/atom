import { Kafka, logLevel } from 'kafkajs';
import { kafkaScheduleEventGroupId, kafkaScheduleEventTopic, } from '../_libs/constants';
const kafka = new Kafka({
    logLevel: logLevel.DEBUG,
    brokers: [`kafka1:29092`],
    clientId: 'atomic',
    // ssl: true,
    sasl: {
        mechanism: 'plain', // scram-sha-256 or scram-sha-512
        username: process.env.KAFKA_USERNAME,
        password: process.env.KAFKA_PASSWORD,
    },
});
const publisher = async (req, res) => {
    const producer = kafka.producer({ maxInFlightRequests: 1, idempotent: true });
    await producer.connect();
    const transaction = await producer.transaction();
    try {
        const eventItem = req.body;
        const response = await transaction.send({
            topic: kafkaScheduleEventTopic,
            messages: [{ value: JSON.stringify(eventItem) }],
        });
        const admin = kafka.admin();
        await admin.connect();
        const partitions = await admin.fetchOffsets({
            groupId: kafkaScheduleEventGroupId,
            topics: [kafkaScheduleEventTopic],
        });
        console.log(partitions);
        await admin.disconnect();
        await transaction.sendOffsets({
            consumerGroupId: kafkaScheduleEventGroupId,
            topics: [
                {
                    topic: kafkaScheduleEventTopic,
                    partitions: partitions?.[0]?.partitions,
                },
            ],
        });
        await transaction.commit();
        console.log(response, ' response successfully added to queue inside features-worker-queue-admin');
        res.status(202).send('succesfully created day schedule');
    }
    catch (e) {
        console.log(e, ' unable to process message');
        await transaction.abort();
        res.status(400).json(e);
    }
};
export default publisher;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGUtZXZlbnQtYWRtaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzY2hlZHVsZS1ldmVudC1hZG1pbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUUxQyxPQUFPLEVBQ0wseUJBQXlCLEVBQ3pCLHVCQUF1QixHQUN4QixNQUFNLG9CQUFvQixDQUFDO0FBRTVCLE1BQU0sS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDO0lBQ3RCLFFBQVEsRUFBRSxRQUFRLENBQUMsS0FBSztJQUN4QixPQUFPLEVBQUUsQ0FBQyxjQUFjLENBQUM7SUFDekIsUUFBUSxFQUFFLFFBQVE7SUFDbEIsYUFBYTtJQUNiLElBQUksRUFBRTtRQUNKLFNBQVMsRUFBRSxPQUFPLEVBQUUsaUNBQWlDO1FBQ3JELFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWM7UUFDcEMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYztLQUNyQztDQUNGLENBQUMsQ0FBQztBQUVILE1BQU0sU0FBUyxHQUFHLEtBQUssRUFBRSxHQUFZLEVBQUUsR0FBYSxFQUFFLEVBQUU7SUFDdEQsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLG1CQUFtQixFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUM5RSxNQUFNLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUV6QixNQUFNLFdBQVcsR0FBRyxNQUFNLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNqRCxJQUFJLENBQUM7UUFDSCxNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBRTNCLE1BQU0sUUFBUSxHQUFHLE1BQU0sV0FBVyxDQUFDLElBQUksQ0FBQztZQUN0QyxLQUFLLEVBQUUsdUJBQXVCO1lBQzlCLFFBQVEsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztTQUNqRCxDQUFDLENBQUM7UUFFSCxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFNUIsTUFBTSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDdEIsTUFBTSxVQUFVLEdBQUcsTUFBTSxLQUFLLENBQUMsWUFBWSxDQUFDO1lBQzFDLE9BQU8sRUFBRSx5QkFBeUI7WUFDbEMsTUFBTSxFQUFFLENBQUMsdUJBQXVCLENBQUM7U0FDbEMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN4QixNQUFNLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUV6QixNQUFNLFdBQVcsQ0FBQyxXQUFXLENBQUM7WUFDNUIsZUFBZSxFQUFFLHlCQUF5QjtZQUMxQyxNQUFNLEVBQUU7Z0JBQ047b0JBQ0UsS0FBSyxFQUFFLHVCQUF1QjtvQkFDOUIsVUFBVSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLFVBQVU7aUJBQ3hDO2FBQ0Y7U0FDRixDQUFDLENBQUM7UUFFSCxNQUFNLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUUzQixPQUFPLENBQUMsR0FBRyxDQUNULFFBQVEsRUFDUiwwRUFBMEUsQ0FDM0UsQ0FBQztRQUVGLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSw0QkFBNEIsQ0FBQyxDQUFDO1FBRTdDLE1BQU0sV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzFCLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLENBQUM7QUFDSCxDQUFDLENBQUM7QUFFRixlQUFlLFNBQVMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBLYWZrYSwgbG9nTGV2ZWwgfSBmcm9tICdrYWZrYWpzJztcbmltcG9ydCBpcCBmcm9tICdpcCc7XG5pbXBvcnQge1xuICBrYWZrYVNjaGVkdWxlRXZlbnRHcm91cElkLFxuICBrYWZrYVNjaGVkdWxlRXZlbnRUb3BpYyxcbn0gZnJvbSAnLi4vX2xpYnMvY29uc3RhbnRzJztcblxuY29uc3Qga2Fma2EgPSBuZXcgS2Fma2Eoe1xuICBsb2dMZXZlbDogbG9nTGV2ZWwuREVCVUcsXG4gIGJyb2tlcnM6IFtga2Fma2ExOjI5MDkyYF0sXG4gIGNsaWVudElkOiAnYXRvbWljJyxcbiAgLy8gc3NsOiB0cnVlLFxuICBzYXNsOiB7XG4gICAgbWVjaGFuaXNtOiAncGxhaW4nLCAvLyBzY3JhbS1zaGEtMjU2IG9yIHNjcmFtLXNoYS01MTJcbiAgICB1c2VybmFtZTogcHJvY2Vzcy5lbnYuS0FGS0FfVVNFUk5BTUUsXG4gICAgcGFzc3dvcmQ6IHByb2Nlc3MuZW52LktBRktBX1BBU1NXT1JELFxuICB9LFxufSk7XG5cbmNvbnN0IHB1Ymxpc2hlciA9IGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcbiAgY29uc3QgcHJvZHVjZXIgPSBrYWZrYS5wcm9kdWNlcih7IG1heEluRmxpZ2h0UmVxdWVzdHM6IDEsIGlkZW1wb3RlbnQ6IHRydWUgfSk7XG4gIGF3YWl0IHByb2R1Y2VyLmNvbm5lY3QoKTtcblxuICBjb25zdCB0cmFuc2FjdGlvbiA9IGF3YWl0IHByb2R1Y2VyLnRyYW5zYWN0aW9uKCk7XG4gIHRyeSB7XG4gICAgY29uc3QgZXZlbnRJdGVtID0gcmVxLmJvZHk7XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRyYW5zYWN0aW9uLnNlbmQoe1xuICAgICAgdG9waWM6IGthZmthU2NoZWR1bGVFdmVudFRvcGljLFxuICAgICAgbWVzc2FnZXM6IFt7IHZhbHVlOiBKU09OLnN0cmluZ2lmeShldmVudEl0ZW0pIH1dLFxuICAgIH0pO1xuXG4gICAgY29uc3QgYWRtaW4gPSBrYWZrYS5hZG1pbigpO1xuXG4gICAgYXdhaXQgYWRtaW4uY29ubmVjdCgpO1xuICAgIGNvbnN0IHBhcnRpdGlvbnMgPSBhd2FpdCBhZG1pbi5mZXRjaE9mZnNldHMoe1xuICAgICAgZ3JvdXBJZDoga2Fma2FTY2hlZHVsZUV2ZW50R3JvdXBJZCxcbiAgICAgIHRvcGljczogW2thZmthU2NoZWR1bGVFdmVudFRvcGljXSxcbiAgICB9KTtcbiAgICBjb25zb2xlLmxvZyhwYXJ0aXRpb25zKTtcbiAgICBhd2FpdCBhZG1pbi5kaXNjb25uZWN0KCk7XG5cbiAgICBhd2FpdCB0cmFuc2FjdGlvbi5zZW5kT2Zmc2V0cyh7XG4gICAgICBjb25zdW1lckdyb3VwSWQ6IGthZmthU2NoZWR1bGVFdmVudEdyb3VwSWQsXG4gICAgICB0b3BpY3M6IFtcbiAgICAgICAge1xuICAgICAgICAgIHRvcGljOiBrYWZrYVNjaGVkdWxlRXZlbnRUb3BpYyxcbiAgICAgICAgICBwYXJ0aXRpb25zOiBwYXJ0aXRpb25zPy5bMF0/LnBhcnRpdGlvbnMsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAgYXdhaXQgdHJhbnNhY3Rpb24uY29tbWl0KCk7XG5cbiAgICBjb25zb2xlLmxvZyhcbiAgICAgIHJlc3BvbnNlLFxuICAgICAgJyByZXNwb25zZSBzdWNjZXNzZnVsbHkgYWRkZWQgdG8gcXVldWUgaW5zaWRlIGZlYXR1cmVzLXdvcmtlci1xdWV1ZS1hZG1pbidcbiAgICApO1xuXG4gICAgcmVzLnN0YXR1cygyMDIpLnNlbmQoJ3N1Y2Nlc2Z1bGx5IGNyZWF0ZWQgZGF5IHNjaGVkdWxlJyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlLCAnIHVuYWJsZSB0byBwcm9jZXNzIG1lc3NhZ2UnKTtcblxuICAgIGF3YWl0IHRyYW5zYWN0aW9uLmFib3J0KCk7XG4gICAgcmVzLnN0YXR1cyg0MDApLmpzb24oZSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHB1Ymxpc2hlcjtcbiJdfQ==