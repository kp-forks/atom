import { Kafka, logLevel } from 'kafkajs';
import { kafkaScheduleShortEventTopic, kafkaScheduleEventGroupId, } from '../_libs/constants';
const kafka = new Kafka({
    logLevel: logLevel.DEBUG,
    brokers: [`kafka1:29092`],
    clientId: 'atomic',
    // ssl: true,
    sasl: {
        mechanism: 'plain', // scram-sha-256 or scram-sha-512
        username: process.env.KAFKA_USERNAME,
        password: process.env.KAFKA_PASSWORD,
    },
});
const publisher = async (req, res) => {
    const producer = kafka.producer({ maxInFlightRequests: 1, idempotent: true });
    await producer.connect();
    const transaction = await producer.transaction();
    try {
        const eventItem = req.body;
        const response = await transaction.send({
            topic: kafkaScheduleShortEventTopic,
            messages: [{ value: JSON.stringify(eventItem) }],
        });
        const admin = kafka.admin();
        await admin.connect();
        const partitions = await admin.fetchOffsets({
            groupId: kafkaScheduleEventGroupId,
            topics: [kafkaScheduleShortEventTopic],
        });
        console.log(partitions);
        await admin.disconnect();
        await transaction.sendOffsets({
            consumerGroupId: kafkaScheduleEventGroupId,
            topics: [
                {
                    topic: kafkaScheduleShortEventTopic,
                    partitions: partitions?.[0]?.partitions,
                },
            ],
        });
        await transaction.commit();
        console.log(response, ' response successfully added to queue inside features-worker-queue-admin');
        res.status(202).send('succesfully created schedule short event');
    }
    catch (e) {
        console.log(e, ' unable to process message');
        await transaction.abort();
        res.status(400).json(e);
    }
};
export default publisher;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGUtc2hvcnQtZXZlbnQtYWRtaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzY2hlZHVsZS1zaG9ydC1ldmVudC1hZG1pbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUUxQyxPQUFPLEVBQ0wsNEJBQTRCLEVBQzVCLHlCQUF5QixHQUMxQixNQUFNLG9CQUFvQixDQUFDO0FBRTVCLE1BQU0sS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDO0lBQ3RCLFFBQVEsRUFBRSxRQUFRLENBQUMsS0FBSztJQUN4QixPQUFPLEVBQUUsQ0FBQyxjQUFjLENBQUM7SUFDekIsUUFBUSxFQUFFLFFBQVE7SUFDbEIsYUFBYTtJQUNiLElBQUksRUFBRTtRQUNKLFNBQVMsRUFBRSxPQUFPLEVBQUUsaUNBQWlDO1FBQ3JELFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWM7UUFDcEMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYztLQUNyQztDQUNGLENBQUMsQ0FBQztBQUVILE1BQU0sU0FBUyxHQUFHLEtBQUssRUFBRSxHQUFZLEVBQUUsR0FBYSxFQUFFLEVBQUU7SUFDdEQsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLG1CQUFtQixFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUM5RSxNQUFNLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUV6QixNQUFNLFdBQVcsR0FBRyxNQUFNLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUVqRCxJQUFJLENBQUM7UUFDSCxNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBRTNCLE1BQU0sUUFBUSxHQUFHLE1BQU0sV0FBVyxDQUFDLElBQUksQ0FBQztZQUN0QyxLQUFLLEVBQUUsNEJBQTRCO1lBQ25DLFFBQVEsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztTQUNqRCxDQUFDLENBQUM7UUFFSCxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFNUIsTUFBTSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDdEIsTUFBTSxVQUFVLEdBQUcsTUFBTSxLQUFLLENBQUMsWUFBWSxDQUFDO1lBQzFDLE9BQU8sRUFBRSx5QkFBeUI7WUFDbEMsTUFBTSxFQUFFLENBQUMsNEJBQTRCLENBQUM7U0FDdkMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN4QixNQUFNLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUV6QixNQUFNLFdBQVcsQ0FBQyxXQUFXLENBQUM7WUFDNUIsZUFBZSxFQUFFLHlCQUF5QjtZQUMxQyxNQUFNLEVBQUU7Z0JBQ047b0JBQ0UsS0FBSyxFQUFFLDRCQUE0QjtvQkFDbkMsVUFBVSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLFVBQVU7aUJBQ3hDO2FBQ0Y7U0FDRixDQUFDLENBQUM7UUFFSCxNQUFNLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUUzQixPQUFPLENBQUMsR0FBRyxDQUNULFFBQVEsRUFDUiwwRUFBMEUsQ0FDM0UsQ0FBQztRQUVGLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLDBDQUEwQyxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSw0QkFBNEIsQ0FBQyxDQUFDO1FBRTdDLE1BQU0sV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzFCLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLENBQUM7QUFDSCxDQUFDLENBQUM7QUFFRixlQUFlLFNBQVMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBLYWZrYSwgbG9nTGV2ZWwgfSBmcm9tICdrYWZrYWpzJztcbmltcG9ydCBpcCBmcm9tICdpcCc7XG5pbXBvcnQge1xuICBrYWZrYVNjaGVkdWxlU2hvcnRFdmVudFRvcGljLFxuICBrYWZrYVNjaGVkdWxlRXZlbnRHcm91cElkLFxufSBmcm9tICcuLi9fbGlicy9jb25zdGFudHMnO1xuXG5jb25zdCBrYWZrYSA9IG5ldyBLYWZrYSh7XG4gIGxvZ0xldmVsOiBsb2dMZXZlbC5ERUJVRyxcbiAgYnJva2VyczogW2BrYWZrYTE6MjkwOTJgXSxcbiAgY2xpZW50SWQ6ICdhdG9taWMnLFxuICAvLyBzc2w6IHRydWUsXG4gIHNhc2w6IHtcbiAgICBtZWNoYW5pc206ICdwbGFpbicsIC8vIHNjcmFtLXNoYS0yNTYgb3Igc2NyYW0tc2hhLTUxMlxuICAgIHVzZXJuYW1lOiBwcm9jZXNzLmVudi5LQUZLQV9VU0VSTkFNRSxcbiAgICBwYXNzd29yZDogcHJvY2Vzcy5lbnYuS0FGS0FfUEFTU1dPUkQsXG4gIH0sXG59KTtcblxuY29uc3QgcHVibGlzaGVyID0gYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xuICBjb25zdCBwcm9kdWNlciA9IGthZmthLnByb2R1Y2VyKHsgbWF4SW5GbGlnaHRSZXF1ZXN0czogMSwgaWRlbXBvdGVudDogdHJ1ZSB9KTtcbiAgYXdhaXQgcHJvZHVjZXIuY29ubmVjdCgpO1xuXG4gIGNvbnN0IHRyYW5zYWN0aW9uID0gYXdhaXQgcHJvZHVjZXIudHJhbnNhY3Rpb24oKTtcblxuICB0cnkge1xuICAgIGNvbnN0IGV2ZW50SXRlbSA9IHJlcS5ib2R5O1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0cmFuc2FjdGlvbi5zZW5kKHtcbiAgICAgIHRvcGljOiBrYWZrYVNjaGVkdWxlU2hvcnRFdmVudFRvcGljLFxuICAgICAgbWVzc2FnZXM6IFt7IHZhbHVlOiBKU09OLnN0cmluZ2lmeShldmVudEl0ZW0pIH1dLFxuICAgIH0pO1xuXG4gICAgY29uc3QgYWRtaW4gPSBrYWZrYS5hZG1pbigpO1xuXG4gICAgYXdhaXQgYWRtaW4uY29ubmVjdCgpO1xuICAgIGNvbnN0IHBhcnRpdGlvbnMgPSBhd2FpdCBhZG1pbi5mZXRjaE9mZnNldHMoe1xuICAgICAgZ3JvdXBJZDoga2Fma2FTY2hlZHVsZUV2ZW50R3JvdXBJZCxcbiAgICAgIHRvcGljczogW2thZmthU2NoZWR1bGVTaG9ydEV2ZW50VG9waWNdLFxuICAgIH0pO1xuICAgIGNvbnNvbGUubG9nKHBhcnRpdGlvbnMpO1xuICAgIGF3YWl0IGFkbWluLmRpc2Nvbm5lY3QoKTtcblxuICAgIGF3YWl0IHRyYW5zYWN0aW9uLnNlbmRPZmZzZXRzKHtcbiAgICAgIGNvbnN1bWVyR3JvdXBJZDoga2Fma2FTY2hlZHVsZUV2ZW50R3JvdXBJZCxcbiAgICAgIHRvcGljczogW1xuICAgICAgICB7XG4gICAgICAgICAgdG9waWM6IGthZmthU2NoZWR1bGVTaG9ydEV2ZW50VG9waWMsXG4gICAgICAgICAgcGFydGl0aW9uczogcGFydGl0aW9ucz8uWzBdPy5wYXJ0aXRpb25zLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIGF3YWl0IHRyYW5zYWN0aW9uLmNvbW1pdCgpO1xuXG4gICAgY29uc29sZS5sb2coXG4gICAgICByZXNwb25zZSxcbiAgICAgICcgcmVzcG9uc2Ugc3VjY2Vzc2Z1bGx5IGFkZGVkIHRvIHF1ZXVlIGluc2lkZSBmZWF0dXJlcy13b3JrZXItcXVldWUtYWRtaW4nXG4gICAgKTtcblxuICAgIHJlcy5zdGF0dXMoMjAyKS5zZW5kKCdzdWNjZXNmdWxseSBjcmVhdGVkIHNjaGVkdWxlIHNob3J0IGV2ZW50Jyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlLCAnIHVuYWJsZSB0byBwcm9jZXNzIG1lc3NhZ2UnKTtcblxuICAgIGF3YWl0IHRyYW5zYWN0aW9uLmFib3J0KCk7XG4gICAgcmVzLnN0YXR1cyg0MDApLmpzb24oZSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHB1Ymxpc2hlcjtcbiJdfQ==