import { Kafka, logLevel } from 'kafkajs';
import { kafkaScheduleShortEventTopic, kafkaScheduleEventGroupId, } from '../_libs/constants';
const kafka = new Kafka({
    logLevel: logLevel.DEBUG,
    brokers: [`kafka1:29092`],
    clientId: 'atomic',
    // ssl: true,
    sasl: {
        mechanism: 'plain', // scram-sha-256 or scram-sha-512
        username: process.env.KAFKA_USERNAME,
        password: process.env.KAFKA_PASSWORD,
    },
});
const publisher = async (req, res) => {
    const producer = kafka.producer({ maxInFlightRequests: 1, idempotent: true });
    await producer.connect();
    const transaction = await producer.transaction();
    try {
        const eventItem = req.body;
        const response = await transaction.send({
            topic: kafkaScheduleShortEventTopic,
            messages: [{ value: JSON.stringify(eventItem) }],
        });
        const admin = kafka.admin();
        await admin.connect();
        const partitions = await admin.fetchOffsets({
            groupId: kafkaScheduleEventGroupId,
            topics: [kafkaScheduleShortEventTopic],
        });
        console.log(partitions);
        await admin.disconnect();
        await transaction.sendOffsets({
            consumerGroupId: kafkaScheduleEventGroupId,
            topics: [
                {
                    topic: kafkaScheduleShortEventTopic,
                    partitions: partitions?.[0]?.partitions,
                },
            ],
        });
        await transaction.commit();
        console.log(response, ' response successfully added to queue inside features-worker-queue-admin');
        res.status(202).send('succesfully created schedule short event');
    }
    catch (e) {
        console.log(e, ' unable to process message');
        await transaction.abort();
        res.status(400).json(e);
    }
};
export default publisher;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGUtc2hvcnQtZXZlbnQtYXV0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNjaGVkdWxlLXNob3J0LWV2ZW50LWF1dGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFMUMsT0FBTyxFQUNMLDRCQUE0QixFQUM1Qix5QkFBeUIsR0FDMUIsTUFBTSxvQkFBb0IsQ0FBQztBQUU1QixNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQztJQUN0QixRQUFRLEVBQUUsUUFBUSxDQUFDLEtBQUs7SUFDeEIsT0FBTyxFQUFFLENBQUMsY0FBYyxDQUFDO0lBQ3pCLFFBQVEsRUFBRSxRQUFRO0lBQ2xCLGFBQWE7SUFDYixJQUFJLEVBQUU7UUFDSixTQUFTLEVBQUUsT0FBTyxFQUFFLGlDQUFpQztRQUNyRCxRQUFRLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjO1FBQ3BDLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWM7S0FDckM7Q0FDRixDQUFDLENBQUM7QUFFSCxNQUFNLFNBQVMsR0FBRyxLQUFLLEVBQUUsR0FBWSxFQUFFLEdBQWEsRUFBRSxFQUFFO0lBQ3RELE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxtQkFBbUIsRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDOUUsTUFBTSxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7SUFFekIsTUFBTSxXQUFXLEdBQUcsTUFBTSxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7SUFFakQsSUFBSSxDQUFDO1FBQ0gsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztRQUUzQixNQUFNLFFBQVEsR0FBRyxNQUFNLFdBQVcsQ0FBQyxJQUFJLENBQUM7WUFDdEMsS0FBSyxFQUFFLDRCQUE0QjtZQUNuQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUM7U0FDakQsQ0FBQyxDQUFDO1FBRUgsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRTVCLE1BQU0sS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3RCLE1BQU0sVUFBVSxHQUFHLE1BQU0sS0FBSyxDQUFDLFlBQVksQ0FBQztZQUMxQyxPQUFPLEVBQUUseUJBQXlCO1lBQ2xDLE1BQU0sRUFBRSxDQUFDLDRCQUE0QixDQUFDO1NBQ3ZDLENBQUMsQ0FBQztRQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDeEIsTUFBTSxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFFekIsTUFBTSxXQUFXLENBQUMsV0FBVyxDQUFDO1lBQzVCLGVBQWUsRUFBRSx5QkFBeUI7WUFDMUMsTUFBTSxFQUFFO2dCQUNOO29CQUNFLEtBQUssRUFBRSw0QkFBNEI7b0JBQ25DLFVBQVUsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxVQUFVO2lCQUN4QzthQUNGO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsTUFBTSxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFM0IsT0FBTyxDQUFDLEdBQUcsQ0FDVCxRQUFRLEVBQ1IsMEVBQTBFLENBQzNFLENBQUM7UUFFRixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztRQUU3QyxNQUFNLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUMxQixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsZUFBZSxTQUFTLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgS2Fma2EsIGxvZ0xldmVsIH0gZnJvbSAna2Fma2Fqcyc7XG5pbXBvcnQgaXAgZnJvbSAnaXAnO1xuaW1wb3J0IHtcbiAga2Fma2FTY2hlZHVsZVNob3J0RXZlbnRUb3BpYyxcbiAga2Fma2FTY2hlZHVsZUV2ZW50R3JvdXBJZCxcbn0gZnJvbSAnLi4vX2xpYnMvY29uc3RhbnRzJztcblxuY29uc3Qga2Fma2EgPSBuZXcgS2Fma2Eoe1xuICBsb2dMZXZlbDogbG9nTGV2ZWwuREVCVUcsXG4gIGJyb2tlcnM6IFtga2Fma2ExOjI5MDkyYF0sXG4gIGNsaWVudElkOiAnYXRvbWljJyxcbiAgLy8gc3NsOiB0cnVlLFxuICBzYXNsOiB7XG4gICAgbWVjaGFuaXNtOiAncGxhaW4nLCAvLyBzY3JhbS1zaGEtMjU2IG9yIHNjcmFtLXNoYS01MTJcbiAgICB1c2VybmFtZTogcHJvY2Vzcy5lbnYuS0FGS0FfVVNFUk5BTUUsXG4gICAgcGFzc3dvcmQ6IHByb2Nlc3MuZW52LktBRktBX1BBU1NXT1JELFxuICB9LFxufSk7XG5cbmNvbnN0IHB1Ymxpc2hlciA9IGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcbiAgY29uc3QgcHJvZHVjZXIgPSBrYWZrYS5wcm9kdWNlcih7IG1heEluRmxpZ2h0UmVxdWVzdHM6IDEsIGlkZW1wb3RlbnQ6IHRydWUgfSk7XG4gIGF3YWl0IHByb2R1Y2VyLmNvbm5lY3QoKTtcblxuICBjb25zdCB0cmFuc2FjdGlvbiA9IGF3YWl0IHByb2R1Y2VyLnRyYW5zYWN0aW9uKCk7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBldmVudEl0ZW0gPSByZXEuYm9keTtcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdHJhbnNhY3Rpb24uc2VuZCh7XG4gICAgICB0b3BpYzoga2Fma2FTY2hlZHVsZVNob3J0RXZlbnRUb3BpYyxcbiAgICAgIG1lc3NhZ2VzOiBbeyB2YWx1ZTogSlNPTi5zdHJpbmdpZnkoZXZlbnRJdGVtKSB9XSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGFkbWluID0ga2Fma2EuYWRtaW4oKTtcblxuICAgIGF3YWl0IGFkbWluLmNvbm5lY3QoKTtcbiAgICBjb25zdCBwYXJ0aXRpb25zID0gYXdhaXQgYWRtaW4uZmV0Y2hPZmZzZXRzKHtcbiAgICAgIGdyb3VwSWQ6IGthZmthU2NoZWR1bGVFdmVudEdyb3VwSWQsXG4gICAgICB0b3BpY3M6IFtrYWZrYVNjaGVkdWxlU2hvcnRFdmVudFRvcGljXSxcbiAgICB9KTtcbiAgICBjb25zb2xlLmxvZyhwYXJ0aXRpb25zKTtcbiAgICBhd2FpdCBhZG1pbi5kaXNjb25uZWN0KCk7XG5cbiAgICBhd2FpdCB0cmFuc2FjdGlvbi5zZW5kT2Zmc2V0cyh7XG4gICAgICBjb25zdW1lckdyb3VwSWQ6IGthZmthU2NoZWR1bGVFdmVudEdyb3VwSWQsXG4gICAgICB0b3BpY3M6IFtcbiAgICAgICAge1xuICAgICAgICAgIHRvcGljOiBrYWZrYVNjaGVkdWxlU2hvcnRFdmVudFRvcGljLFxuICAgICAgICAgIHBhcnRpdGlvbnM6IHBhcnRpdGlvbnM/LlswXT8ucGFydGl0aW9ucyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICBhd2FpdCB0cmFuc2FjdGlvbi5jb21taXQoKTtcblxuICAgIGNvbnNvbGUubG9nKFxuICAgICAgcmVzcG9uc2UsXG4gICAgICAnIHJlc3BvbnNlIHN1Y2Nlc3NmdWxseSBhZGRlZCB0byBxdWV1ZSBpbnNpZGUgZmVhdHVyZXMtd29ya2VyLXF1ZXVlLWFkbWluJ1xuICAgICk7XG5cbiAgICByZXMuc3RhdHVzKDIwMikuc2VuZCgnc3VjY2VzZnVsbHkgY3JlYXRlZCBzY2hlZHVsZSBzaG9ydCBldmVudCcpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coZSwgJyB1bmFibGUgdG8gcHJvY2VzcyBtZXNzYWdlJyk7XG5cbiAgICBhd2FpdCB0cmFuc2FjdGlvbi5hYm9ydCgpO1xuICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKGUpO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwdWJsaXNoZXI7XG4iXX0=