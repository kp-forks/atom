import { v4 as uuidv4 } from 'uuid';
import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc';
import timezone from 'dayjs/plugin/timezone';
import { deleteCalendarWebhookById, getCalendarWebhookById, requestCalendarWatch, insertCalendarWebhook, } from '@google_calendar_sync/_libs/api-helper';
dayjs.extend(utc);
dayjs.extend(timezone);
const handler = async (req, res) => {
    try {
        console.log(req, ' req');
        const body = req.body;
        // validate
        const calendarId = body?.calendarId;
        const userId = body?.userId;
        const channelId = body?.channelId;
        if (!calendarId) {
            console.log('calendarId is missing');
            return res.status(400).json({
                message: 'calendarId missing',
                event: body,
            });
        }
        if (!userId) {
            console.log('userId is missing');
            return res.status(400).json({
                message: 'userId is missing',
                event: body,
            });
        }
        if (!channelId) {
            console.log('channelId is missing');
            return res.status(400).json({
                message: 'channelId is missing',
                event: body,
            });
        }
        const webhook = await getCalendarWebhookById(channelId);
        // validate
        const token = uuidv4();
        const newChannelId = uuidv4();
        console.log(newChannelId, ' newChannelId');
        const response = await requestCalendarWatch(calendarId, newChannelId, token, userId);
        await deleteCalendarWebhookById(channelId);
        await insertCalendarWebhook({
            calendarId: calendarId,
            createdDate: dayjs().format(),
            expiration: dayjs().add(604800, 's').format(),
            id: newChannelId,
            resourceId: response?.resourceId,
            resourceUri: response?.resourceUri,
            token,
            updatedAt: dayjs().format(),
            userId,
            calendarIntegrationId: webhook?.calendarIntegrationId,
        });
        return res.status(200).json({
            message: `successfully taken care of googleCalendaryWatch!`,
            event: body,
        });
    }
    catch (e) {
        console.log(e, ' unable sync google calendar');
        return res.status(400).json({
            message: `error processing googleCalendarSync: message: ${e?.message}, code: ${e?.statusCode}`,
            event: e,
        });
    }
};
export default handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWNhbGVuZGFyLXdhdGNoLWFkbWluLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZ29vZ2xlLWNhbGVuZGFyLXdhdGNoLWFkbWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxFQUFFLElBQUksTUFBTSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3BDLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMxQixPQUFPLEdBQUcsTUFBTSxrQkFBa0IsQ0FBQztBQUNuQyxPQUFPLFFBQVEsTUFBTSx1QkFBdUIsQ0FBQztBQUU3QyxPQUFPLEVBQ0wseUJBQXlCLEVBQ3pCLHNCQUFzQixFQUN0QixvQkFBb0IsRUFDcEIscUJBQXFCLEdBQ3RCLE1BQU0sd0NBQXdDLENBQUM7QUFFaEQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNsQixLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRXZCLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxHQUFZLEVBQUUsR0FBYSxFQUFFLEVBQUU7SUFDcEQsSUFBSSxDQUFDO1FBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDekIsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztRQUV0QixXQUFXO1FBQ1gsTUFBTSxVQUFVLEdBQUcsSUFBSSxFQUFFLFVBQVUsQ0FBQztRQUNwQyxNQUFNLE1BQU0sR0FBRyxJQUFJLEVBQUUsTUFBTSxDQUFDO1FBQzVCLE1BQU0sU0FBUyxHQUFHLElBQUksRUFBRSxTQUFTLENBQUM7UUFFbEMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsQ0FBQztZQUNyQyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUMxQixPQUFPLEVBQUUsb0JBQW9CO2dCQUM3QixLQUFLLEVBQUUsSUFBSTthQUNaLENBQUMsQ0FBQztRQUNMLENBQUM7UUFFRCxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDWixPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFDakMsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDMUIsT0FBTyxFQUFFLG1CQUFtQjtnQkFDNUIsS0FBSyxFQUFFLElBQUk7YUFDWixDQUFDLENBQUM7UUFDTCxDQUFDO1FBRUQsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1lBQ3BDLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQzFCLE9BQU8sRUFBRSxzQkFBc0I7Z0JBQy9CLEtBQUssRUFBRSxJQUFJO2FBQ1osQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUVELE1BQU0sT0FBTyxHQUFHLE1BQU0sc0JBQXNCLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFeEQsV0FBVztRQUNYLE1BQU0sS0FBSyxHQUFHLE1BQU0sRUFBRSxDQUFDO1FBQ3ZCLE1BQU0sWUFBWSxHQUFHLE1BQU0sRUFBRSxDQUFDO1FBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQzNDLE1BQU0sUUFBUSxHQUFHLE1BQU0sb0JBQW9CLENBQ3pDLFVBQVUsRUFDVixZQUFZLEVBQ1osS0FBSyxFQUNMLE1BQU0sQ0FDUCxDQUFDO1FBRUYsTUFBTSx5QkFBeUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUUzQyxNQUFNLHFCQUFxQixDQUFDO1lBQzFCLFVBQVUsRUFBRSxVQUFVO1lBQ3RCLFdBQVcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxNQUFNLEVBQUU7WUFDN0IsVUFBVSxFQUFFLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFO1lBQzdDLEVBQUUsRUFBRSxZQUFZO1lBQ2hCLFVBQVUsRUFBRSxRQUFRLEVBQUUsVUFBVTtZQUNoQyxXQUFXLEVBQUUsUUFBUSxFQUFFLFdBQVc7WUFDbEMsS0FBSztZQUNMLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxNQUFNLEVBQUU7WUFDM0IsTUFBTTtZQUNOLHFCQUFxQixFQUFFLE9BQU8sRUFBRSxxQkFBcUI7U0FDdEQsQ0FBQyxDQUFDO1FBRUgsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUMxQixPQUFPLEVBQUUsa0RBQWtEO1lBQzNELEtBQUssRUFBRSxJQUFJO1NBQ1osQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSw4QkFBOEIsQ0FBQyxDQUFDO1FBRS9DLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDMUIsT0FBTyxFQUFFLGlEQUFpRCxDQUFDLEVBQUUsT0FBTyxXQUFXLENBQUMsRUFBRSxVQUFVLEVBQUU7WUFDOUYsS0FBSyxFQUFFLENBQUM7U0FDVCxDQUFDLENBQUM7SUFDTCxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsZUFBZSxPQUFPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnO1xuXG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJztcbmltcG9ydCBkYXlqcyBmcm9tICdkYXlqcyc7XG5pbXBvcnQgdXRjIGZyb20gJ2RheWpzL3BsdWdpbi91dGMnO1xuaW1wb3J0IHRpbWV6b25lIGZyb20gJ2RheWpzL3BsdWdpbi90aW1lem9uZSc7XG5cbmltcG9ydCB7XG4gIGRlbGV0ZUNhbGVuZGFyV2ViaG9va0J5SWQsXG4gIGdldENhbGVuZGFyV2ViaG9va0J5SWQsXG4gIHJlcXVlc3RDYWxlbmRhcldhdGNoLFxuICBpbnNlcnRDYWxlbmRhcldlYmhvb2ssXG59IGZyb20gJ0Bnb29nbGVfY2FsZW5kYXJfc3luYy9fbGlicy9hcGktaGVscGVyJztcblxuZGF5anMuZXh0ZW5kKHV0Yyk7XG5kYXlqcy5leHRlbmQodGltZXpvbmUpO1xuXG5jb25zdCBoYW5kbGVyID0gYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKHJlcSwgJyByZXEnKTtcbiAgICBjb25zdCBib2R5ID0gcmVxLmJvZHk7XG5cbiAgICAvLyB2YWxpZGF0ZVxuICAgIGNvbnN0IGNhbGVuZGFySWQgPSBib2R5Py5jYWxlbmRhcklkO1xuICAgIGNvbnN0IHVzZXJJZCA9IGJvZHk/LnVzZXJJZDtcbiAgICBjb25zdCBjaGFubmVsSWQgPSBib2R5Py5jaGFubmVsSWQ7XG5cbiAgICBpZiAoIWNhbGVuZGFySWQpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdjYWxlbmRhcklkIGlzIG1pc3NpbmcnKTtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdjYWxlbmRhcklkIG1pc3NpbmcnLFxuICAgICAgICBldmVudDogYm9keSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghdXNlcklkKSB7XG4gICAgICBjb25zb2xlLmxvZygndXNlcklkIGlzIG1pc3NpbmcnKTtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICd1c2VySWQgaXMgbWlzc2luZycsXG4gICAgICAgIGV2ZW50OiBib2R5LFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFjaGFubmVsSWQpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdjaGFubmVsSWQgaXMgbWlzc2luZycpO1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ2NoYW5uZWxJZCBpcyBtaXNzaW5nJyxcbiAgICAgICAgZXZlbnQ6IGJvZHksXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCB3ZWJob29rID0gYXdhaXQgZ2V0Q2FsZW5kYXJXZWJob29rQnlJZChjaGFubmVsSWQpO1xuXG4gICAgLy8gdmFsaWRhdGVcbiAgICBjb25zdCB0b2tlbiA9IHV1aWR2NCgpO1xuICAgIGNvbnN0IG5ld0NoYW5uZWxJZCA9IHV1aWR2NCgpO1xuICAgIGNvbnNvbGUubG9nKG5ld0NoYW5uZWxJZCwgJyBuZXdDaGFubmVsSWQnKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3RDYWxlbmRhcldhdGNoKFxuICAgICAgY2FsZW5kYXJJZCxcbiAgICAgIG5ld0NoYW5uZWxJZCxcbiAgICAgIHRva2VuLFxuICAgICAgdXNlcklkXG4gICAgKTtcblxuICAgIGF3YWl0IGRlbGV0ZUNhbGVuZGFyV2ViaG9va0J5SWQoY2hhbm5lbElkKTtcblxuICAgIGF3YWl0IGluc2VydENhbGVuZGFyV2ViaG9vayh7XG4gICAgICBjYWxlbmRhcklkOiBjYWxlbmRhcklkLFxuICAgICAgY3JlYXRlZERhdGU6IGRheWpzKCkuZm9ybWF0KCksXG4gICAgICBleHBpcmF0aW9uOiBkYXlqcygpLmFkZCg2MDQ4MDAsICdzJykuZm9ybWF0KCksXG4gICAgICBpZDogbmV3Q2hhbm5lbElkLFxuICAgICAgcmVzb3VyY2VJZDogcmVzcG9uc2U/LnJlc291cmNlSWQsXG4gICAgICByZXNvdXJjZVVyaTogcmVzcG9uc2U/LnJlc291cmNlVXJpLFxuICAgICAgdG9rZW4sXG4gICAgICB1cGRhdGVkQXQ6IGRheWpzKCkuZm9ybWF0KCksXG4gICAgICB1c2VySWQsXG4gICAgICBjYWxlbmRhckludGVncmF0aW9uSWQ6IHdlYmhvb2s/LmNhbGVuZGFySW50ZWdyYXRpb25JZCxcbiAgICB9KTtcblxuICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgICBtZXNzYWdlOiBgc3VjY2Vzc2Z1bGx5IHRha2VuIGNhcmUgb2YgZ29vZ2xlQ2FsZW5kYXJ5V2F0Y2ghYCxcbiAgICAgIGV2ZW50OiBib2R5LFxuICAgIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coZSwgJyB1bmFibGUgc3luYyBnb29nbGUgY2FsZW5kYXInKTtcblxuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICBtZXNzYWdlOiBgZXJyb3IgcHJvY2Vzc2luZyBnb29nbGVDYWxlbmRhclN5bmM6IG1lc3NhZ2U6ICR7ZT8ubWVzc2FnZX0sIGNvZGU6ICR7ZT8uc3RhdHVzQ29kZX1gLFxuICAgICAgZXZlbnQ6IGUsXG4gICAgfSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGhhbmRsZXI7XG4iXX0=