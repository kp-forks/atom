import DateTimeJSONType from '@chat/_libs/datetime/DateTimeJSONJSONType';
import { ResolveConflictingEventsType } from './types';
import UserInputToJSONType from '@chat/_libs/types/UserInputToJSONType';
import ResponseActionType from '@chat/_libs/types/ResponseActionType';
import PreferredTimeRangeType from '@chat/_libs/types/PreferredTimeRangeType';
import { SkillMessageHistoryType } from '@chat/_libs/types/Messaging/MessagingTypes';
import OpenAI from 'openai';
export declare const upsertPreferredTimeRangesForEvent: (preferredTimeRanges: PreferredTimeRangeType[]) => Promise<any>;
export declare const trainEventWithPriorityAndModifiable: (id: string, modifiable: boolean, priority: number) => Promise<any>;
export declare const untrainEventWithPriorityAndModifiable: (id: string, modifiable: boolean, priority: number) => Promise<any>;
export declare const updateEventWithPriorityAndModifiable: (id: string, modifiable: boolean, priority: number) => Promise<any>;
export declare const trainEventWithIdModifiable: (id: string, modifiable: boolean) => Promise<any>;
export declare const untrainEventWithIdModifiable: (id: string, modifiable: boolean) => Promise<any>;
export declare const updateEventWithIdModifiable: (id: string, modifiable: boolean) => Promise<any>;
export declare const deletePreferredTimeRangesByIds: (ids: string[]) => Promise<PreferredTimeRangeType[] | undefined>;
export declare const listPreferredTimeRangesGivenEventId: (eventId: string) => Promise<PreferredTimeRangeType[] | null | undefined>;
export declare const finalStepRCE: (body: ResolveConflictingEventsType, startDate: string, endDate: string, response: any) => Promise<any>;
export declare const processRCEPending: (userId: string, timezone: string, jsonBody: UserInputToJSONType, dateJSONBody: DateTimeJSONType, currentTime: string) => Promise<ResponseActionType>;
export declare const processRCEMissingFieldsReturned: (userId: string, timezone: string, jsonBody: UserInputToJSONType, dateJSONBody: DateTimeJSONType, currentTime: string, messageHistoryObject: SkillMessageHistoryType) => Promise<any>;
export declare const RCEControlCenter: (openai: OpenAI, userId: string, timezone: string, messageHistoryObject: SkillMessageHistoryType, userCurrentTime: string, query: "missing_fields" | "completed" | "event_not_found" | "pending") => Promise<any>;
