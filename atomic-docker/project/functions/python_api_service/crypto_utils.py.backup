import os
import base64
import logging
from typing import Optional

# Compatibility layer for cryptography library
try:
    from cryptography.fernet import Fernet, InvalidToken
    HAS_CRYPTOGRAPHY = True

    def get_fernet(key: bytes) -> Fernet:
        """Get Fernet instance."""
        return Fernet(key)

    def get_invalid_token_exception() -> type:
        """Get the InvalidToken exception type."""
        return InvalidToken

except ImportError:
    HAS_CRYPTOGRAPHY = False
    import binascii

    class InvalidToken(Exception):
        """Mock InvalidToken exception."""
        pass

    class Fernet:
        """Mock Fernet implementation for compatibility."""
        def __init__(self, key: bytes):
            if not isinstance(key, bytes) or len(base64.urlsafe_b64decode(key)) != 32:
                raise ValueError("Key must be 32 url-safe base64-encoded bytes.")
            self.key = key

        def encrypt(self, data: bytes) -> bytes:
            """Mock encryption - base64 encode with prefix."""
            encoded = base64.urlsafe_b64encode(data)
            return b"mock_enc_" + encoded

        def decrypt(self, token: bytes) -> bytes:
            """Mock decryption - remove prefix and decode."""
            prefix = b"mock_enc_"
            if not token.startswith(prefix):
                raise InvalidToken("Invalid token format")
            try:
                return base64.urlsafe_b64decode(token[len(prefix):])
            except (binascii.Error, ValueError):
                raise InvalidToken("Invalid base64 in token")

        @staticmethod
        def generate_key() -> bytes:
            """Generate a URL-safe base64-encoded 32-byte key."""
            return base64.urlsafe_b64encode(os.urandom(32))

    def get_fernet(key: bytes) -> Fernet:
        """Get Fernet instance (mock)."""
        return Fernet(key)

    def get_invalid_token_exception() -> type:
        """Get the exception type."""
        return InvalidToken

logger = logging.getLogger(__name__)

# Initialize cipher suite
RAW_ENCRYPTION_KEY_STR = os.environ.get("ATOM_OAUTH_ENCRYPTION_KEY")
_fernet_instance = None

def _init_cipher() -> bool:
    """Initialize the Fernet cipher suite."""
    global _fernet_instance

    if _fernet_instance is not None:
        return True

    if not RAW_ENCRYPTION_KEY_STR:
        logger.error("ATOM_OAUTH_ENCRYPTION_KEY environment variable not set")
        return False

    try:
        key_bytes = RAW_ENCRYPTION_KEY_STR.encode('utf-8')
        _fernet_instance = get_fernet(key_bytes)
        logger.info("Fernet cipher initialized successfully")
        return True
    except Exception as e:
        logger.error(f"Failed to initialize Fernet cipher: {e}")
        return False

CRYPTO_READY = _init_cipher()

def encrypt_data(data: str) -> Optional[str]:
    """Encrypt string data."""
    if not CRYPTO_READY or _fernet_instance is None:
        logger.error("Encryption not ready")
        return None

    if not isinstance(data, str):
        logger.error("Data must be a string")
        return None

    try:
        encrypted = _fernet_instance.encrypt(data.encode('utf-8'))
        return encrypted.decode('utf-8')
    except Exception as e:
        logger.error(f"Encryption failed: {e}")
        return None

def decrypt_data(encrypted_data: str) -> Optional[str]:
    """Decrypt string data."""
    if not CRYPTO_READY or _fernet_instance is None:
        logger.error("Decryption not ready")
        return None

    if not isinstance(encrypted_data, str):
        logger.error("Encrypted data must be a string")
        return None

    try:
        decrypted = _fernet_instance.decrypt(encrypted_data.encode('utf-8'))
        return decrypted.decode('utf-8')
    except (get_invalid_token_exception(), ValueError) as e:
        logger.error(f"Decryption failed: {e}")
        return None
    except Exception as e:
        logger.error(f"Decryption error: {e}")
        return None

def generate_fernet_key() -> str:
    """Generate a new Fernet key."""
    return Fernet.generate_key().decode('utf-8')

if __name__ == "__main__":
    # Test script
    print("=== Fernet Key Generation Tool ===")

    # Generate key for new setups
    new_key = generate_fernet_key()
    print(f"\nGenerated key: {new_key}")
    print("\nSet ATOM_OAUTH_ENCRYPTION_KEY environment variable to this value")

    if not HAS_CRYPTOGRAPHY:
        print("\nWARNING: cryptography library not installed - using mock implementation")
    else:
        print("\nCryptography library available ✓")

    # Test encryption/decryption if key provided
    if RAW_ENCRYPTION_KEY_STR and CRYPTO_READY:
        print("\n=== Testing Encryption/Decryption ===")
        test_data = "Hello, encrypted world!"
        encrypted = encrypt_data(test_data)
        if encrypted:
            print(f"Original:    {test_data}")
            print(f"Encrypted:   {encrypted}")
            decrypted = decrypt_data(encrypted)
            print(f"Decrypted:   {decrypted}")
            if test_data == decrypted:
                print("✓ Test passed - encryption/decryption works correctly")
            else:
                print("✗ Test failed - decrypted data doesn't match original")
        else:
            print("✗ Encryption test failed")
    else:
        print("\nSkipping encryption test - key not provided or crypto not ready")
