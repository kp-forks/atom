export const googleClientIdWeb = process.env.GOOGLE_CLIENT_ID_WEB;
export const googleTokenUrl = 'https://oauth2.googleapis.com/token';
export const googleClientSecretWeb = process.env.GOOGLE_CLIENT_SECRET_WEB;
export const googleAuthRedirectUri = process.env.GOOGLE_AUTH_REDIRECT_URL;
export const googleClientIdIos = process.env.GOOGLE_ClIENT_ID_IOS;
export const googleClientIdAtomicWeb = process.env.GOOGLE_CLIENT_ID_ATOMIC_WEB;
export const googleClientSecretAtomicWeb = process.env.GOOGLE_CLIENT_SECRET_ATOMIC_WEB;
// Gmail Integration Constants
export const googleClientIdGmail = process.env.GOOGLE_CLIENT_ID_GMAIL;
export const googleClientSecretGmail = process.env.GOOGLE_CLIENT_SECRET_GMAIL;
export const googleGmailRedirectUrl = process.env.GOOGLE_GMAIL_REDIRECT_URL;
export const googleGmailScopes = [
    // Array of scopes
    'https://www.googleapis.com/auth/gmail.readonly',
    // Add other Gmail scopes here if needed in the future, e.g., send, modify
].join(' '); // Google's library often expects scopes as a space-separated string
// MCP Integration Constants
export const googleClientIdMcp = process.env.GOOGLE_CLIENT_ID_MCP;
export const googleClientSecretMcp = process.env.GOOGLE_CLIENT_SECRET_MCP;
export const googleMcpRedirectUrl = process.env.GOOGLE_MCP_REDIRECT_URL;
export const googleMcpScopes = [
    // Array of scopes
    'https://www.googleapis.com/auth/drive.readonly',
    // Add other MCP scopes here if needed in the future
].join(' '); // Google's library often expects scopes as a space-separated string
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29uc3RhbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUM7QUFDbEUsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLHFDQUFxQyxDQUFDO0FBQ3BFLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUM7QUFDMUUsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQztBQUMxRSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDO0FBRWxFLE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQ3RDLE9BQU8sQ0FBQyxHQUFHLENBQUMsK0JBQStCLENBQUM7QUFFOUMsOEJBQThCO0FBQzlCLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUM7QUFDdEUsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQztBQUM5RSxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLHlCQUF5QixDQUFDO0FBQzVFLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHO0lBQy9CLGtCQUFrQjtJQUNsQixnREFBZ0Q7SUFDaEQsMEVBQTBFO0NBQzNFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsb0VBQW9FO0FBRWpGLDRCQUE0QjtBQUM1QixNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUM7QUFDMUUsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQztBQUN4RSxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUc7SUFDN0Isa0JBQWtCO0lBQ2xCLGdEQUFnRDtJQUNoRCxvREFBb0Q7Q0FDckQsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxvRUFBb0UiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgZ29vZ2xlQ2xpZW50SWRXZWIgPSBwcm9jZXNzLmVudi5HT09HTEVfQ0xJRU5UX0lEX1dFQjtcbmV4cG9ydCBjb25zdCBnb29nbGVUb2tlblVybCA9ICdodHRwczovL29hdXRoMi5nb29nbGVhcGlzLmNvbS90b2tlbic7XG5leHBvcnQgY29uc3QgZ29vZ2xlQ2xpZW50U2VjcmV0V2ViID0gcHJvY2Vzcy5lbnYuR09PR0xFX0NMSUVOVF9TRUNSRVRfV0VCO1xuZXhwb3J0IGNvbnN0IGdvb2dsZUF1dGhSZWRpcmVjdFVyaSA9IHByb2Nlc3MuZW52LkdPT0dMRV9BVVRIX1JFRElSRUNUX1VSTDtcbmV4cG9ydCBjb25zdCBnb29nbGVDbGllbnRJZElvcyA9IHByb2Nlc3MuZW52LkdPT0dMRV9DbElFTlRfSURfSU9TO1xuXG5leHBvcnQgY29uc3QgZ29vZ2xlQ2xpZW50SWRBdG9taWNXZWIgPSBwcm9jZXNzLmVudi5HT09HTEVfQ0xJRU5UX0lEX0FUT01JQ19XRUI7XG5leHBvcnQgY29uc3QgZ29vZ2xlQ2xpZW50U2VjcmV0QXRvbWljV2ViID1cbiAgcHJvY2Vzcy5lbnYuR09PR0xFX0NMSUVOVF9TRUNSRVRfQVRPTUlDX1dFQjtcblxuLy8gR21haWwgSW50ZWdyYXRpb24gQ29uc3RhbnRzXG5leHBvcnQgY29uc3QgZ29vZ2xlQ2xpZW50SWRHbWFpbCA9IHByb2Nlc3MuZW52LkdPT0dMRV9DTElFTlRfSURfR01BSUw7XG5leHBvcnQgY29uc3QgZ29vZ2xlQ2xpZW50U2VjcmV0R21haWwgPSBwcm9jZXNzLmVudi5HT09HTEVfQ0xJRU5UX1NFQ1JFVF9HTUFJTDtcbmV4cG9ydCBjb25zdCBnb29nbGVHbWFpbFJlZGlyZWN0VXJsID0gcHJvY2Vzcy5lbnYuR09PR0xFX0dNQUlMX1JFRElSRUNUX1VSTDtcbmV4cG9ydCBjb25zdCBnb29nbGVHbWFpbFNjb3BlcyA9IFtcbiAgLy8gQXJyYXkgb2Ygc2NvcGVzXG4gICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2dtYWlsLnJlYWRvbmx5JyxcbiAgLy8gQWRkIG90aGVyIEdtYWlsIHNjb3BlcyBoZXJlIGlmIG5lZWRlZCBpbiB0aGUgZnV0dXJlLCBlLmcuLCBzZW5kLCBtb2RpZnlcbl0uam9pbignICcpOyAvLyBHb29nbGUncyBsaWJyYXJ5IG9mdGVuIGV4cGVjdHMgc2NvcGVzIGFzIGEgc3BhY2Utc2VwYXJhdGVkIHN0cmluZ1xuXG4vLyBNQ1AgSW50ZWdyYXRpb24gQ29uc3RhbnRzXG5leHBvcnQgY29uc3QgZ29vZ2xlQ2xpZW50SWRNY3AgPSBwcm9jZXNzLmVudi5HT09HTEVfQ0xJRU5UX0lEX01DUDtcbmV4cG9ydCBjb25zdCBnb29nbGVDbGllbnRTZWNyZXRNY3AgPSBwcm9jZXNzLmVudi5HT09HTEVfQ0xJRU5UX1NFQ1JFVF9NQ1A7XG5leHBvcnQgY29uc3QgZ29vZ2xlTWNwUmVkaXJlY3RVcmwgPSBwcm9jZXNzLmVudi5HT09HTEVfTUNQX1JFRElSRUNUX1VSTDtcbmV4cG9ydCBjb25zdCBnb29nbGVNY3BTY29wZXMgPSBbXG4gIC8vIEFycmF5IG9mIHNjb3Blc1xuICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9kcml2ZS5yZWFkb25seScsXG4gIC8vIEFkZCBvdGhlciBNQ1Agc2NvcGVzIGhlcmUgaWYgbmVlZGVkIGluIHRoZSBmdXR1cmVcbl0uam9pbignICcpOyAvLyBHb29nbGUncyBsaWJyYXJ5IG9mdGVuIGV4cGVjdHMgc2NvcGVzIGFzIGEgc3BhY2Utc2VwYXJhdGVkIHN0cmluZ1xuIl19