import { getUserOutlookEmailContent } from '../outlook-service/service';
const handler = async (req, res) => {
    const userId = req.body.session_variables['x-hasura-user-id'];
    const { emailId } = req.body.input;
    if (!userId) {
        return res
            .status(401)
            .json({ success: false, message: 'User ID is missing. Unauthorized.' });
    }
    try {
        const email = await getUserOutlookEmailContent(userId, emailId);
        return res.status(200).json({ success: true, email });
    }
    catch (error) {
        console.error('Error getting Outlook email content:', error);
        return res
            .status(500)
            .json({
            success: false,
            message: 'Error getting Outlook email content.',
        });
    }
};
export default handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LXVzZXItb3V0bG9vay1jb250ZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZ2V0LXVzZXItb3V0bG9vay1jb250ZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBYXhFLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFDbkIsR0FBc0QsRUFDdEQsR0FBYSxFQUNiLEVBQUU7SUFDRixNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDOUQsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBRW5DLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNaLE9BQU8sR0FBRzthQUNQLE1BQU0sQ0FBQyxHQUFHLENBQUM7YUFDWCxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVELElBQUksQ0FBQztRQUNILE1BQU0sS0FBSyxHQUFHLE1BQU0sMEJBQTBCLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2hFLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLHNDQUFzQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzdELE9BQU8sR0FBRzthQUNQLE1BQU0sQ0FBQyxHQUFHLENBQUM7YUFDWCxJQUFJLENBQUM7WUFDSixPQUFPLEVBQUUsS0FBSztZQUNkLE9BQU8sRUFBRSxzQ0FBc0M7U0FDaEQsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztBQUNILENBQUMsQ0FBQztBQUVGLGVBQWUsT0FBTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCB7IGdldFVzZXJPdXRsb29rRW1haWxDb250ZW50IH0gZnJvbSAnLi4vb3V0bG9vay1zZXJ2aWNlL3NlcnZpY2UnO1xuXG5pbnRlcmZhY2UgR2V0VXNlck91dGxvb2tDb250ZW50SW5wdXQge1xuICBlbWFpbElkOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBHZXRVc2VyT3V0bG9va0NvbnRlbnRSZXF1ZXN0Qm9keSB7XG4gIHNlc3Npb25fdmFyaWFibGVzOiB7XG4gICAgJ3gtaGFzdXJhLXVzZXItaWQnOiBzdHJpbmc7XG4gIH07XG4gIGlucHV0OiBHZXRVc2VyT3V0bG9va0NvbnRlbnRJbnB1dDtcbn1cblxuY29uc3QgaGFuZGxlciA9IGFzeW5jIChcbiAgcmVxOiBSZXF1ZXN0PHt9LCB7fSwgR2V0VXNlck91dGxvb2tDb250ZW50UmVxdWVzdEJvZHk+LFxuICByZXM6IFJlc3BvbnNlXG4pID0+IHtcbiAgY29uc3QgdXNlcklkID0gcmVxLmJvZHkuc2Vzc2lvbl92YXJpYWJsZXNbJ3gtaGFzdXJhLXVzZXItaWQnXTtcbiAgY29uc3QgeyBlbWFpbElkIH0gPSByZXEuYm9keS5pbnB1dDtcblxuICBpZiAoIXVzZXJJZCkge1xuICAgIHJldHVybiByZXNcbiAgICAgIC5zdGF0dXMoNDAxKVxuICAgICAgLmpzb24oeyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogJ1VzZXIgSUQgaXMgbWlzc2luZy4gVW5hdXRob3JpemVkLicgfSk7XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IGVtYWlsID0gYXdhaXQgZ2V0VXNlck91dGxvb2tFbWFpbENvbnRlbnQodXNlcklkLCBlbWFpbElkKTtcbiAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oeyBzdWNjZXNzOiB0cnVlLCBlbWFpbCB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nIE91dGxvb2sgZW1haWwgY29udGVudDonLCBlcnJvcik7XG4gICAgcmV0dXJuIHJlc1xuICAgICAgLnN0YXR1cyg1MDApXG4gICAgICAuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBtZXNzYWdlOiAnRXJyb3IgZ2V0dGluZyBPdXRsb29rIGVtYWlsIGNvbnRlbnQuJyxcbiAgICAgIH0pO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBoYW5kbGVyO1xuIl19