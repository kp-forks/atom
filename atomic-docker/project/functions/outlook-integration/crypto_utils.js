import * as crypto from 'crypto';
const ALGORITHM = 'aes-256-gcm';
const IV_LENGTH = 16;
const SALT_LENGTH = 64;
const TAG_LENGTH = 16;
const KEY_LENGTH = 32;
const PBKDF2_ITERATIONS = 100000;
const ENCRYPTION_KEY = process.env.ATOM_OAUTH_ENCRYPTION_KEY || '';
function getKey(salt) {
    return crypto.pbkdf2Sync(ENCRYPTION_KEY, salt, PBKDF2_ITERATIONS, KEY_LENGTH, 'sha512');
}
export function encrypt(data) {
    const salt = crypto.randomBytes(SALT_LENGTH);
    const key = getKey(salt);
    const iv = crypto.randomBytes(IV_LENGTH);
    const cipher = crypto.createCipheriv(ALGORITHM, key, iv);
    const encrypted = Buffer.concat([
        cipher.update(data, 'utf8'),
        cipher.final(),
    ]);
    const tag = cipher.getAuthTag();
    return Buffer.concat([salt, iv, tag, encrypted]).toString('hex');
}
export function decrypt(data) {
    const buffer = Buffer.from(data, 'hex');
    const salt = buffer.slice(0, SALT_LENGTH);
    const iv = buffer.slice(SALT_LENGTH, SALT_LENGTH + IV_LENGTH);
    const tag = buffer.slice(SALT_LENGTH + IV_LENGTH, SALT_LENGTH + IV_LENGTH + TAG_LENGTH);
    const encrypted = buffer.slice(SALT_LENGTH + IV_LENGTH + TAG_LENGTH);
    const key = getKey(salt);
    const decipher = crypto.createDecipheriv(ALGORITHM, key, iv);
    decipher.setAuthTag(tag);
    return decipher.update(encrypted, undefined, 'utf8') + decipher.final('utf8');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3J5cHRvX3V0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY3J5cHRvX3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBRWpDLE1BQU0sU0FBUyxHQUFHLGFBQWEsQ0FBQztBQUNoQyxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUM7QUFDckIsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDO0FBQ3ZCLE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQztBQUN0QixNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUM7QUFDdEIsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLENBQUM7QUFFakMsTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsSUFBSSxFQUFFLENBQUM7QUFFbkUsU0FBUyxNQUFNLENBQUMsSUFBWTtJQUMxQixPQUFPLE1BQU0sQ0FBQyxVQUFVLENBQ3RCLGNBQWMsRUFDZCxJQUFJLEVBQ0osaUJBQWlCLEVBQ2pCLFVBQVUsRUFDVixRQUFRLENBQ1QsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUsT0FBTyxDQUFDLElBQVk7SUFDbEMsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM3QyxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekIsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN6QyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDekQsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUM5QixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUM7UUFDM0IsTUFBTSxDQUFDLEtBQUssRUFBRTtLQUNmLENBQUMsQ0FBQztJQUNILE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNoQyxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNuRSxDQUFDO0FBRUQsTUFBTSxVQUFVLE9BQU8sQ0FBQyxJQUFZO0lBQ2xDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3hDLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQzFDLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLFdBQVcsR0FBRyxTQUFTLENBQUMsQ0FBQztJQUM5RCxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUN0QixXQUFXLEdBQUcsU0FBUyxFQUN2QixXQUFXLEdBQUcsU0FBUyxHQUFHLFVBQVUsQ0FDckMsQ0FBQztJQUNGLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLFNBQVMsR0FBRyxVQUFVLENBQUMsQ0FBQztJQUNyRSxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekIsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDN0QsUUFBUSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6QixPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjcnlwdG8gZnJvbSAnY3J5cHRvJztcblxuY29uc3QgQUxHT1JJVEhNID0gJ2Flcy0yNTYtZ2NtJztcbmNvbnN0IElWX0xFTkdUSCA9IDE2O1xuY29uc3QgU0FMVF9MRU5HVEggPSA2NDtcbmNvbnN0IFRBR19MRU5HVEggPSAxNjtcbmNvbnN0IEtFWV9MRU5HVEggPSAzMjtcbmNvbnN0IFBCS0RGMl9JVEVSQVRJT05TID0gMTAwMDAwO1xuXG5jb25zdCBFTkNSWVBUSU9OX0tFWSA9IHByb2Nlc3MuZW52LkFUT01fT0FVVEhfRU5DUllQVElPTl9LRVkgfHwgJyc7XG5cbmZ1bmN0aW9uIGdldEtleShzYWx0OiBCdWZmZXIpOiBCdWZmZXIge1xuICByZXR1cm4gY3J5cHRvLnBia2RmMlN5bmMoXG4gICAgRU5DUllQVElPTl9LRVksXG4gICAgc2FsdCxcbiAgICBQQktERjJfSVRFUkFUSU9OUyxcbiAgICBLRVlfTEVOR1RILFxuICAgICdzaGE1MTInXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbmNyeXB0KGRhdGE6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IHNhbHQgPSBjcnlwdG8ucmFuZG9tQnl0ZXMoU0FMVF9MRU5HVEgpO1xuICBjb25zdCBrZXkgPSBnZXRLZXkoc2FsdCk7XG4gIGNvbnN0IGl2ID0gY3J5cHRvLnJhbmRvbUJ5dGVzKElWX0xFTkdUSCk7XG4gIGNvbnN0IGNpcGhlciA9IGNyeXB0by5jcmVhdGVDaXBoZXJpdihBTEdPUklUSE0sIGtleSwgaXYpO1xuICBjb25zdCBlbmNyeXB0ZWQgPSBCdWZmZXIuY29uY2F0KFtcbiAgICBjaXBoZXIudXBkYXRlKGRhdGEsICd1dGY4JyksXG4gICAgY2lwaGVyLmZpbmFsKCksXG4gIF0pO1xuICBjb25zdCB0YWcgPSBjaXBoZXIuZ2V0QXV0aFRhZygpO1xuICByZXR1cm4gQnVmZmVyLmNvbmNhdChbc2FsdCwgaXYsIHRhZywgZW5jcnlwdGVkXSkudG9TdHJpbmcoJ2hleCcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVjcnlwdChkYXRhOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBidWZmZXIgPSBCdWZmZXIuZnJvbShkYXRhLCAnaGV4Jyk7XG4gIGNvbnN0IHNhbHQgPSBidWZmZXIuc2xpY2UoMCwgU0FMVF9MRU5HVEgpO1xuICBjb25zdCBpdiA9IGJ1ZmZlci5zbGljZShTQUxUX0xFTkdUSCwgU0FMVF9MRU5HVEggKyBJVl9MRU5HVEgpO1xuICBjb25zdCB0YWcgPSBidWZmZXIuc2xpY2UoXG4gICAgU0FMVF9MRU5HVEggKyBJVl9MRU5HVEgsXG4gICAgU0FMVF9MRU5HVEggKyBJVl9MRU5HVEggKyBUQUdfTEVOR1RIXG4gICk7XG4gIGNvbnN0IGVuY3J5cHRlZCA9IGJ1ZmZlci5zbGljZShTQUxUX0xFTkdUSCArIElWX0xFTkdUSCArIFRBR19MRU5HVEgpO1xuICBjb25zdCBrZXkgPSBnZXRLZXkoc2FsdCk7XG4gIGNvbnN0IGRlY2lwaGVyID0gY3J5cHRvLmNyZWF0ZURlY2lwaGVyaXYoQUxHT1JJVEhNLCBrZXksIGl2KTtcbiAgZGVjaXBoZXIuc2V0QXV0aFRhZyh0YWcpO1xuICByZXR1cm4gZGVjaXBoZXIudXBkYXRlKGVuY3J5cHRlZCwgdW5kZWZpbmVkLCAndXRmOCcpICsgZGVjaXBoZXIuZmluYWwoJ3V0ZjgnKTtcbn1cbiJdfQ==