import { PublicClientApplication } from '@azure/msal-node';
import { getMsalConfig } from '../outlook-service/auth_utils';
import { OUTLOOK_OAUTH_SCOPES } from '../outlook-service/constants';
const handler = async (req, res) => {
    const userId = req.body.session_variables['x-hasura-user-id'];
    if (!userId) {
        return res
            .status(401)
            .json({ success: false, message: 'User ID is missing. Unauthorized.' });
    }
    const msalConfig = getMsalConfig();
    const pca = new PublicClientApplication(msalConfig);
    const authCodeUrlParameters = {
        scopes: OUTLOOK_OAUTH_SCOPES,
        redirectUri: 'http://localhost:3000/outlook-callback', // This should be a configured redirect URI
        state: userId, // Pass user ID as state to link the callback to the user
    };
    try {
        const authUrl = await pca.getAuthCodeUrl(authCodeUrlParameters);
        return res.status(200).json({ success: true, authUrl });
    }
    catch (error) {
        console.error('Error generating Outlook auth URL:', error);
        return res
            .status(500)
            .json({ success: false, message: 'Error generating Outlook auth URL.' });
    }
};
export default handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUtb3V0bG9vay1hdXRoLXVybC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdlbmVyYXRlLW91dGxvb2stYXV0aC11cmwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzlELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRXBFLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxHQUFZLEVBQUUsR0FBYSxFQUFFLEVBQUU7SUFDcEQsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBRTlELElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNaLE9BQU8sR0FBRzthQUNQLE1BQU0sQ0FBQyxHQUFHLENBQUM7YUFDWCxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVELE1BQU0sVUFBVSxHQUFHLGFBQWEsRUFBRSxDQUFDO0lBQ25DLE1BQU0sR0FBRyxHQUFHLElBQUksdUJBQXVCLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFcEQsTUFBTSxxQkFBcUIsR0FBRztRQUM1QixNQUFNLEVBQUUsb0JBQW9CO1FBQzVCLFdBQVcsRUFBRSx3Q0FBd0MsRUFBRSwyQ0FBMkM7UUFDbEcsS0FBSyxFQUFFLE1BQU0sRUFBRSx5REFBeUQ7S0FDekUsQ0FBQztJQUVGLElBQUksQ0FBQztRQUNILE1BQU0sT0FBTyxHQUFHLE1BQU0sR0FBRyxDQUFDLGNBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ2hFLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLG9DQUFvQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzNELE9BQU8sR0FBRzthQUNQLE1BQU0sQ0FBQyxHQUFHLENBQUM7YUFDWCxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxvQ0FBb0MsRUFBRSxDQUFDLENBQUM7SUFDN0UsQ0FBQztBQUNILENBQUMsQ0FBQztBQUVGLGVBQWUsT0FBTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCB7IFB1YmxpY0NsaWVudEFwcGxpY2F0aW9uIH0gZnJvbSAnQGF6dXJlL21zYWwtbm9kZSc7XG5pbXBvcnQgeyBnZXRNc2FsQ29uZmlnIH0gZnJvbSAnLi4vb3V0bG9vay1zZXJ2aWNlL2F1dGhfdXRpbHMnO1xuaW1wb3J0IHsgT1VUTE9PS19PQVVUSF9TQ09QRVMgfSBmcm9tICcuLi9vdXRsb29rLXNlcnZpY2UvY29uc3RhbnRzJztcblxuY29uc3QgaGFuZGxlciA9IGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcbiAgY29uc3QgdXNlcklkID0gcmVxLmJvZHkuc2Vzc2lvbl92YXJpYWJsZXNbJ3gtaGFzdXJhLXVzZXItaWQnXTtcblxuICBpZiAoIXVzZXJJZCkge1xuICAgIHJldHVybiByZXNcbiAgICAgIC5zdGF0dXMoNDAxKVxuICAgICAgLmpzb24oeyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogJ1VzZXIgSUQgaXMgbWlzc2luZy4gVW5hdXRob3JpemVkLicgfSk7XG4gIH1cblxuICBjb25zdCBtc2FsQ29uZmlnID0gZ2V0TXNhbENvbmZpZygpO1xuICBjb25zdCBwY2EgPSBuZXcgUHVibGljQ2xpZW50QXBwbGljYXRpb24obXNhbENvbmZpZyk7XG5cbiAgY29uc3QgYXV0aENvZGVVcmxQYXJhbWV0ZXJzID0ge1xuICAgIHNjb3BlczogT1VUTE9PS19PQVVUSF9TQ09QRVMsXG4gICAgcmVkaXJlY3RVcmk6ICdodHRwOi8vbG9jYWxob3N0OjMwMDAvb3V0bG9vay1jYWxsYmFjaycsIC8vIFRoaXMgc2hvdWxkIGJlIGEgY29uZmlndXJlZCByZWRpcmVjdCBVUklcbiAgICBzdGF0ZTogdXNlcklkLCAvLyBQYXNzIHVzZXIgSUQgYXMgc3RhdGUgdG8gbGluayB0aGUgY2FsbGJhY2sgdG8gdGhlIHVzZXJcbiAgfTtcblxuICB0cnkge1xuICAgIGNvbnN0IGF1dGhVcmwgPSBhd2FpdCBwY2EuZ2V0QXV0aENvZGVVcmwoYXV0aENvZGVVcmxQYXJhbWV0ZXJzKTtcbiAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oeyBzdWNjZXNzOiB0cnVlLCBhdXRoVXJsIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdlbmVyYXRpbmcgT3V0bG9vayBhdXRoIFVSTDonLCBlcnJvcik7XG4gICAgcmV0dXJuIHJlc1xuICAgICAgLnN0YXR1cyg1MDApXG4gICAgICAuanNvbih7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiAnRXJyb3IgZ2VuZXJhdGluZyBPdXRsb29rIGF1dGggVVJMLicgfSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGhhbmRsZXI7XG4iXX0=