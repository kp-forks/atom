"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const classnames_1 = __importDefault(require("classnames"));
const react_textarea_autosize_1 = __importDefault(require("react-textarea-autosize"));
const Presenter_1 = require("./textfield/Presenter");
const lodash_1 = __importDefault(require("lodash"));
function TextField({ hint, label, labelStyle, labelColor, leadingAccessory, trailingAccessory, validate, validationMessage, value, onChange, fieldStyle, containerStyle, style, multiline, numberOfLines, labelClassNames, className, containerClassNames, hintClassNames, innerRef, ...rest }) {
    const _value = typeof value === 'number' ? `${value}` : lodash_1.default.isArray(value) ? value?.reduce((prev, curr) => `${prev}, ${curr}`, '') : value;
    const [_isValid, _failingValidatorIndex] = (0, Presenter_1.validate)(_value, validate);
    const _validationMessage1 = (0, Presenter_1.getRelevantValidationMessage)(validationMessage, _failingValidatorIndex);
    const _validationMessage = lodash_1.default.isArray(_validationMessage1) ? _validationMessage1?.reduce((prev, curr) => `${prev}, ${curr}`, '') : _validationMessage1;
    if (multiline) {
        return ((0, jsx_runtime_1.jsxs)("div", { style: { ...((!!containerStyle && containerStyle) ?? {}) }, className: "", children: [leadingAccessory && ((0, jsx_runtime_1.jsx)("div", { children: typeof leadingAccessory === 'string' ? ((0, jsx_runtime_1.jsx)("span", { className: "label-text", children: leadingAccessory }))
                        : (leadingAccessory) })), (0, jsx_runtime_1.jsxs)("div", { className: (0, classnames_1.default)("form-control w-full max-w-xs", { [`${containerClassNames ?? 'atomic-placeholder'}`]: !!containerClassNames }), children: [(0, jsx_runtime_1.jsx)("label", { className: "label", children: label && ((0, jsx_runtime_1.jsx)("span", { style: { ...((!!labelStyle && labelStyle) ?? {}) }, className: (0, classnames_1.default)("label-text", { [`${labelClassNames ?? 'atomic-placeholder'}`]: !!labelClassNames }), children: label })) }), (0, jsx_runtime_1.jsx)(react_textarea_autosize_1.default, { ref: innerRef, minRows: ((!!numberOfLines && numberOfLines) ?? 3), maxRows: 6, style: { ...(style ?? {}), ...((!!fieldStyle && fieldStyle) ?? {}) }, ...rest, placeholder: "Type here", className: (0, classnames_1.default)("textarea textarea-primary z-0", { [`${className ?? 'atomic-placeholder'}`]: !!className }), onChange: onChange, value: value }), (0, jsx_runtime_1.jsxs)("label", { className: "label", children: [hint && ((0, jsx_runtime_1.jsx)("span", { className: (0, classnames_1.default)("label-text-alt dark:text-slate-400 text-slate-600", { [`${hintClassNames ?? 'atomic-placehoder'}`]: !!hintClassNames }), children: hint })), _validationMessage && ((0, jsx_runtime_1.jsx)("span", { className: "label-text-alt input-error  text-red-600", children: _validationMessage }))] })] }), trailingAccessory && ((0, jsx_runtime_1.jsx)("div", { children: typeof trailingAccessory === 'string' ? ((0, jsx_runtime_1.jsx)("span", { className: "label-text", children: trailingAccessory }))
                        : (trailingAccessory) }))] }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { style: { ...((!!containerStyle && containerStyle) ?? {}) }, className: "flex items-center justify-center", children: [leadingAccessory && ((0, jsx_runtime_1.jsx)("div", { children: typeof leadingAccessory === 'string' ? ((0, jsx_runtime_1.jsx)("span", { className: "label-text", children: leadingAccessory }))
                    : (leadingAccessory) })), (0, jsx_runtime_1.jsxs)("div", { className: (0, classnames_1.default)("form-control w-full max-w-xs", { [`${containerClassNames ?? 'atomic-placeholder'}`]: !!containerClassNames }), children: [(0, jsx_runtime_1.jsx)("label", { className: "label", children: label && ((0, jsx_runtime_1.jsx)("span", { style: { ...((!!labelStyle && labelStyle) ?? {}) }, className: (0, classnames_1.default)("label-text", { [`${labelClassNames ?? 'atomic-placeholder'}`]: !!labelClassNames }), children: label })) }), (0, jsx_runtime_1.jsx)("input", { ref: innerRef, style: { ...style, ...((!!fieldStyle && fieldStyle) ?? {}) }, ...rest, placeholder: "Type here", className: (0, classnames_1.default)("input input-bordered input-primary w-full max-w-xs z-0", { [`${className ?? 'atomic-placeholder'}`]: !!className }), onChange: onChange, value: value }), (0, jsx_runtime_1.jsxs)("label", { className: "label", children: [hint && ((0, jsx_runtime_1.jsx)("span", { className: (0, classnames_1.default)("label-text-alt dark:text-slate-400 text-slate-600", { [`${hintClassNames ?? 'atomic-placehoder'}`]: !!hintClassNames }), children: hint })), _validationMessage && ((0, jsx_runtime_1.jsx)("span", { className: "label-text-alt input-error text-red-600", children: _validationMessage }))] })] }), trailingAccessory && ((0, jsx_runtime_1.jsx)("div", { children: typeof trailingAccessory === 'string' ? ((0, jsx_runtime_1.jsx)("span", { className: "label-text", children: trailingAccessory }))
                    : (trailingAccessory) }))] }));
}
exports.default = TextField;
//# sourceMappingURL=data:application/json;base64,