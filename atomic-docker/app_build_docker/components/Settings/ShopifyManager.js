"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const shopifySkills_1 = require("../../../../src/skills/shopifySkills"); // Adjust path as needed
const constants_1 = require("../../../functions/atom-agent/_libs/constants");
const react_2 = require("@chakra-ui/react");
const react_3 = require("@chakra-ui/react");
const ShopifyManager = () => {
    const [userId] = (0, react_1.useState)("test-user-123"); // Placeholder
    const [connectionStatus, setConnectionStatus] = (0, react_1.useState)(null);
    const [isLoadingStatus, setIsLoadingStatus] = (0, react_1.useState)(true);
    const [shopName, setShopName] = (0, react_1.useState)('');
    const [errorMessages, setErrorMessages] = (0, react_1.useState)({});
    const toast = (0, react_2.useToast)();
    const fetchConnectionStatus = (0, react_1.useCallback)(async () => {
        if (!userId)
            return;
        setIsLoadingStatus(true);
        setErrorMessages(prev => ({ ...prev, status: undefined }));
        try {
            const response = await (0, shopifySkills_1.getShopifyConnectionStatus)(userId);
            if (response.ok && response.data) {
                setConnectionStatus(response.data);
            }
            else {
                setConnectionStatus({ isConnected: false, reason: response.error?.message || 'Failed to get status' });
                setErrorMessages(prev => ({ ...prev, status: response.error?.message || 'Failed to get status' }));
            }
        }
        catch (error) {
            setConnectionStatus({ isConnected: false, reason: 'Exception while fetching status' });
            setErrorMessages(prev => ({ ...prev, status: error.message || 'Exception while fetching status' }));
        }
        finally {
            setIsLoadingStatus(false);
        }
    }, [userId]);
    const handleConnectShopify = () => {
        if (!userId) {
            setErrorMessages(prev => ({ ...prev, general: "User ID is missing." }));
            return;
        }
        if (!shopName.trim()) {
            toast({
                title: 'Shop Name Required',
                description: 'Please enter your Shopify shop name (e.g., my-great-store).',
                status: 'warning',
                duration: 5000,
                isClosable: true,
            });
            return;
        }
        // Redirect to the backend OAuth initiation URL for Shopify
        window.location.href = `${constants_1.PYTHON_API_SERVICE_BASE_URL}/api/shopify/auth?user_id=${userId}&shop_name=${shopName}`;
    };
    const handleDisconnectShopify = (0, react_1.useCallback)(async () => {
        if (!userId)
            return;
        setErrorMessages(prev => ({ ...prev, general: undefined }));
        try {
            const response = await (0, shopifySkills_1.disconnectShopify)(userId);
            if (response.ok) {
                await fetchConnectionStatus();
            }
            else {
                setErrorMessages(prev => ({ ...prev, general: response.error?.message || 'Failed to disconnect' }));
            }
        }
        catch (error) {
            setErrorMessages(prev => ({ ...prev, general: error.message || 'Exception during disconnect' }));
        }
    }, [userId, fetchConnectionStatus]);
    (0, react_1.useEffect)(() => {
        if (userId)
            fetchConnectionStatus();
    }, [userId, fetchConnectionStatus]);
    return ((0, jsx_runtime_1.jsxs)("div", { style: { fontFamily: 'Arial, sans-serif', padding: '20px', maxWidth: '800px', margin: 'auto', border: '1px solid #e0e0e0', borderRadius: '8px', boxShadow: '0 2px 4px rgba(0,0,0,0.1)', marginTop: '20px' }, children: [(0, jsx_runtime_1.jsx)("h2", { style: { borderBottom: '1px solid #eee', paddingBottom: '10px', marginBottom: '20px' }, children: "Shopify Management" }), errorMessages.general && (0, jsx_runtime_1.jsxs)("p", { style: { color: 'red' }, children: ["Error: ", errorMessages.general] }), (0, jsx_runtime_1.jsxs)("div", { style: { marginBottom: '20px' }, children: [(0, jsx_runtime_1.jsx)("h3", { children: "Connection Status" }), isLoadingStatus ? (0, jsx_runtime_1.jsx)("p", { children: "Loading status..." }) : connectionStatus?.isConnected ? ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsxs)("p", { style: { color: 'green' }, children: ["Connected to: ", connectionStatus.shopUrl || 'N/A'] }), (0, jsx_runtime_1.jsx)("button", { onClick: handleDisconnectShopify, children: "Disconnect Shopify" })] })) : ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("p", { style: { color: 'orange' }, children: "Not Connected." }), errorMessages.status && (0, jsx_runtime_1.jsx)("p", { style: { color: 'red' }, children: errorMessages.status }), (0, jsx_runtime_1.jsx)(react_3.Input, { placeholder: "your-store-name", value: shopName, onChange: (e) => setShopName(e.target.value), style: { marginBottom: '10px' } }), (0, jsx_runtime_1.jsx)("button", { onClick: handleConnectShopify, children: "Connect Shopify" })] }))] })] }));
};
exports.default = ShopifyManager;
//# sourceMappingURL=data:application/json;base64,