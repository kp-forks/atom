"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const gdriveSkills_1 = require("../../../src/skills/gdriveSkills"); // Adjusted path
// --- Component Definition ---
const GDriveManager = () => {
    // --- State Variables ---
    const [userId, setUserId] = (0, react_1.useState)("test-user-123"); // Placeholder, replace with actual user ID from context/props
    const [connectionStatus, setConnectionStatus] = (0, react_1.useState)(null);
    const [isLoadingStatus, setIsLoadingStatus] = (0, react_1.useState)(true);
    const [files, setFiles] = (0, react_1.useState)([]);
    const [currentFolderId, setCurrentFolderId] = (0, react_1.useState)(undefined); // undefined for root
    const [nextPageToken, setNextPageToken] = (0, react_1.useState)(undefined);
    const [isLoadingFiles, setIsLoadingFiles] = (0, react_1.useState)(false);
    const [pathHistory, setPathHistory] = (0, react_1.useState)([{ name: "My Drive", id: undefined }]);
    const [errorMessages, setErrorMessages] = (0, react_1.useState)({});
    // API functions are now imported from gdriveSkills.ts
    // Mock functions below are removed.
    const fetchConnectionStatus = (0, react_1.useCallback)(async () => {
        if (!userId)
            return;
        setIsLoadingStatus(true);
        setErrorMessages(prev => ({ ...prev, status: undefined }));
        try {
            const response = await (0, gdriveSkills_1.getGDriveConnectionStatus)(userId);
            if (response.ok && response.data) {
                setConnectionStatus(response.data);
            }
            else {
                setConnectionStatus({ isConnected: false, reason: response.error?.message || 'Failed to get status' });
                setErrorMessages(prev => ({ ...prev, status: response.error?.message || 'Failed to get status' }));
            }
        }
        catch (error) {
            setConnectionStatus({ isConnected: false, reason: 'Exception while fetching status' });
            setErrorMessages(prev => ({ ...prev, status: error.message || 'Exception while fetching status' }));
        }
        finally {
            setIsLoadingStatus(false);
        }
    }, [userId]);
    const handleConnectGDrive = () => {
        if (!userId) {
            setErrorMessages(prev => ({ ...prev, general: "User ID is missing. Cannot initiate connection." }));
            return;
        }
        // This will be a redirect to the backend OAuth initiation URL
        // The backend will then redirect to Google, and Google will redirect back to a callback URL.
        // Ensure this callback URL eventually leads the user back to this settings page,
        // perhaps with query params indicating success/failure.
        window.location.href = `/api/auth/gdrive/initiate?user_id=${userId}`;
    };
    const handleDisconnectGDrive = (0, react_1.useCallback)(async () => {
        if (!userId)
            return;
        // Optionally, add a confirmation dialog here
        setErrorMessages(prev => ({ ...prev, general: undefined }));
        try {
            const response = await (0, gdriveSkills_1.disconnectGDrive)(userId);
            if (response.ok) {
                await fetchConnectionStatus(); // Refresh status
                setFiles([]);
                setNextPageToken(undefined);
                setCurrentFolderId(undefined);
                setPathHistory([{ name: "My Drive", id: undefined }]);
            }
            else {
                setErrorMessages(prev => ({ ...prev, general: response.error?.message || 'Failed to disconnect' }));
            }
        }
        catch (error) {
            setErrorMessages(prev => ({ ...prev, general: error.message || 'Exception during disconnect' }));
        }
    }, [userId, fetchConnectionStatus]);
    const fetchFiles = (0, react_1.useCallback)(async (targetFolderId, pageToken, isLoadMore = false) => {
        if (!userId || !connectionStatus?.isConnected)
            return;
        setIsLoadingFiles(true);
        if (!isLoadMore) { // If not loading more, it's a new folder or refresh
            setFiles([]); // Clear previous files for the new folder
            setErrorMessages(prev => ({ ...prev, files: undefined }));
        }
        try {
            const response = await (0, gdriveSkills_1.listGoogleDriveFiles)(userId, targetFolderId, pageToken, undefined, 20); // pageSize 20 example
            if (response.ok && response.data) {
                const newFiles = response.data.files.map((f) => ({ ...f, isIngesting: false, ingestionStatus: null, ingestionMessage: undefined }));
                setFiles(prev => isLoadMore ? [...prev, ...newFiles] : newFiles);
                setNextPageToken(response.data.nextPageToken);
            }
            else {
                setErrorMessages(prev => ({ ...prev, files: response.error?.message || 'Failed to load files' }));
                if (!isLoadMore)
                    setFiles([]); // Clear files on error if it was a fresh load
            }
        }
        catch (error) {
            setErrorMessages(prev => ({ ...prev, files: error.message || 'Exception while loading files' }));
            if (!isLoadMore)
                setFiles([]);
        }
        finally {
            setIsLoadingFiles(false);
        }
    }, [userId, connectionStatus?.isConnected]); // Removed 'files' from dep array to prevent loops on setFiles within
    const handleIngestFile = (0, react_1.useCallback)(async (file) => {
        if (!userId)
            return;
        setFiles(prevFiles => prevFiles.map(f => f.id === file.id ? { ...f, isIngesting: true, ingestionStatus: null, ingestionMessage: undefined } : f));
        setErrorMessages(prev => ({ ...prev, general: undefined }));
        try {
            // The webViewLink might not be available from list-files.
            // If it's crucial for ingestion (e.g. as source_uri),
            // it might need to be fetched via getGoogleDriveFileMetadata first,
            // or the backend's /api/ingest-gdrive-document needs to be robust enough
            // to construct a source_uri from just the file ID if webViewLink is missing.
            // For this conceptual step, we assume originalFileMetadata can be constructed adequately.
            const metadataForIngestion = {
                name: file.name,
                mimeType: file.mimeType,
                webViewLink: file.webViewLink || undefined, // Pass webViewLink if available
            };
            const response = await (0, gdriveSkills_1.triggerGoogleDriveFileIngestion)(userId, file.id, metadataForIngestion);
            if (response.ok) {
                setFiles(prevFiles => prevFiles.map(f => f.id === file.id ? { ...f, isIngesting: false, ingestionStatus: 'success', ingestionMessage: 'Ingestion started.' } : f));
            }
            else {
                setFiles(prevFiles => prevFiles.map(f => f.id === file.id ? { ...f, isIngesting: false, ingestionStatus: 'error', ingestionMessage: response.error?.message || "Ingestion failed." } : f));
            }
        }
        catch (error) {
            setFiles(prevFiles => prevFiles.map(f => f.id === file.id ? { ...f, isIngesting: false, ingestionStatus: 'error', ingestionMessage: error.message || "Exception during ingestion." } : f));
        }
    }, [userId]);
    // --- Effect Hooks ---
    (0, react_1.useEffect)(() => {
        // Fetch initial connection status when userId is available
        if (userId) {
            fetchConnectionStatus();
        }
    }, [userId, fetchConnectionStatus]);
    (0, react_1.useEffect)(() => {
        // Fetch files when connection is established or currentFolderId changes
        if (connectionStatus?.isConnected && userId) {
            fetchFiles(currentFolderId, undefined, false); // false for isLoadMore indicates new folder load
        }
        else if (!connectionStatus?.isConnected) { // Clear files if connection is lost or not present
            setFiles([]);
            setNextPageToken(undefined);
            setPathHistory([{ name: "My Drive", id: undefined }]);
        }
        // Dependency: fetchFiles is useCallback wrapped.
    }, [connectionStatus?.isConnected, currentFolderId, userId, fetchFiles]);
    // --- Event Handlers ---
    const handleFileClick = (file) => {
        if (file.mimeType === 'application/vnd.google-apps.folder') {
            // Navigate into folder
            // Avoid adding duplicate if path already exists (e.g. user clicks back then forward)
            const existingPathItem = pathHistory.find(p => p.id === file.id);
            if (existingPathItem) {
                const existingIndex = pathHistory.findIndex(p => p.id === file.id);
                setPathHistory(prev => prev.slice(0, existingIndex + 1));
            }
            else {
                setPathHistory(prev => [...prev, { id: file.id, name: file.name }]);
            }
            setCurrentFolderId(file.id);
            // fetchFiles will be triggered by useEffect watching currentFolderId
        }
        else {
            // Potentially show file details or context menu for non-folder items
            console.log("Selected file (non-folder):", file.name);
            // Could add logic here to select the file for an action like "view details"
        }
    };
    const handleBreadcrumbClick = (index) => {
        const newPath = pathHistory.slice(0, index + 1);
        setPathHistory(newPath);
        setCurrentFolderId(pathHistory[index].id);
        // fetchFiles will be triggered by useEffect watching currentFolderId
    };
    // handleConnectGDrive, handleDisconnectGDrive, handleIngestFile are already defined with API logic.
    // --- Render Logic (Basic Structure with Placeholders and Comments) ---
    return ((0, jsx_runtime_1.jsxs)("div", { style: { fontFamily: 'Arial, sans-serif', padding: '20px', maxWidth: '800px', margin: 'auto', border: '1px solid #e0e0e0', borderRadius: '8px', boxShadow: '0 2px 4px rgba(0,0,0,0.1)' }, children: [(0, jsx_runtime_1.jsx)("h2", { style: { borderBottom: '1px solid #eee', paddingBottom: '10px', marginBottom: '20px' }, children: "Google Drive Management" }), errorMessages.general && ((0, jsx_runtime_1.jsxs)("p", { style: { color: 'red', backgroundColor: '#ffebee', padding: '10px', borderRadius: '4px', border: '1px solid #e57373', marginBottom: '15px' }, children: [(0, jsx_runtime_1.jsx)("strong", { children: "Error:" }), " ", errorMessages.general] })), (0, jsx_runtime_1.jsxs)("div", { style: { marginBottom: '20px', padding: '15px', border: '1px solid #ccc', borderRadius: '5px', backgroundColor: '#f9f9f9' }, children: [(0, jsx_runtime_1.jsx)("h3", { style: { marginTop: '0', marginBottom: '10px', borderBottom: '1px solid #eee', paddingBottom: '8px' }, children: "Connection Status" }), isLoadingStatus ? ((0, jsx_runtime_1.jsx)("p", { children: "Loading status..." })) : connectionStatus?.isConnected ? ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsxs)("p", { style: { color: 'green', fontWeight: 'bold', marginBottom: '10px' }, children: ["Connected as: ", connectionStatus.email || 'N/A'] }), (0, jsx_runtime_1.jsx)("button", { onClick: handleDisconnectGDrive, style: {
                                    padding: '8px 15px',
                                    backgroundColor: '#f44336', // Red
                                    color: 'white',
                                    border: 'none',
                                    borderRadius: '4px',
                                    cursor: 'pointer',
                                    fontSize: '0.9em'
                                }, children: "Disconnect Google Drive" })] })) : ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsxs)("p", { style: { color: '#f57c00', fontWeight: 'bold', marginBottom: '5px' }, children: [" ", "Not Connected."] }), connectionStatus?.reason && ((0, jsx_runtime_1.jsxs)("p", { style: { fontSize: '0.9em', color: '#757575', marginTop: '0', marginBottom: '10px' }, children: ["Reason: ", connectionStatus.reason] })), errorMessages.status && ((0, jsx_runtime_1.jsxs)("p", { style: { color: 'red', fontSize: '0.9em', marginTop: '0', marginBottom: '10px' }, children: ["Error fetching status: ", errorMessages.status] })), (0, jsx_runtime_1.jsx)("button", { onClick: handleConnectGDrive, style: {
                                    padding: '8px 15px',
                                    backgroundColor: '#4CAF50', // Green
                                    color: 'white',
                                    border: 'none',
                                    borderRadius: '4px',
                                    cursor: 'pointer',
                                    fontSize: '0.9em'
                                }, children: "Connect Google Drive" })] }))] }), connectionStatus?.isConnected && ((0, jsx_runtime_1.jsxs)("div", { style: { marginTop: '20px', padding: '15px', border: '1px solid #ccc', borderRadius: '5px', backgroundColor: '#f9f9f9' }, children: [(0, jsx_runtime_1.jsx)("h3", { style: { marginTop: '0', marginBottom: '10px', borderBottom: '1px solid #eee', paddingBottom: '8px' }, children: "Files and Folders" }), (0, jsx_runtime_1.jsx)("div", { style: { marginBottom: '10px', padding: '8px', backgroundColor: '#f0f0f0', borderRadius: '4px', display: 'flex', flexWrap: 'wrap', alignItems: 'center' }, children: pathHistory.map((p, index) => ((0, jsx_runtime_1.jsxs)(react_1.default.Fragment, { children: [(0, jsx_runtime_1.jsx)("button", { onClick: () => handleBreadcrumbClick(index), disabled: index === pathHistory.length - 1, style: {
                                        background: 'none', border: 'none',
                                        color: index === pathHistory.length - 1 ? '#333' : '#007bff',
                                        cursor: index === pathHistory.length - 1 ? 'default' : 'pointer',
                                        padding: '2px 0', // Adjusted padding
                                        marginRight: '5px',
                                        fontWeight: index === pathHistory.length - 1 ? 'bold' : 'normal',
                                        textDecoration: index !== pathHistory.length - 1 ? 'underline' : 'none',
                                        fontSize: '0.95em'
                                    }, children: p.name }), index < pathHistory.length - 1 && (0, jsx_runtime_1.jsx)("span", { style: { margin: '0 5px', color: '#666' }, children: "/" })] }, p.id || 'root-breadcrumb'))) }), errorMessages.files && ((0, jsx_runtime_1.jsxs)("p", { style: { color: 'red', backgroundColor: '#ffebee', padding: '10px', borderRadius: '4px', border: '1px solid #e57373', marginBottom: '10px' }, children: [(0, jsx_runtime_1.jsx)("strong", { children: "Error loading files:" }), " ", errorMessages.files] })), isLoadingFiles && files.length === 0 ? ((0, jsx_runtime_1.jsx)("p", { children: "Loading files..." })) : files.length === 0 && !isLoadingFiles ? ((0, jsx_runtime_1.jsx)("p", { style: { fontStyle: 'italic', color: '#757575', padding: '10px 0' }, children: "No files or folders found in this location." })) : ((0, jsx_runtime_1.jsx)("ul", { style: { listStyleType: 'none', paddingLeft: '0', margin: '0' }, children: files.map(file => ((0, jsx_runtime_1.jsxs)("li", { style: {
                                padding: '10px 5px',
                                borderBottom: '1px solid #eee',
                                display: 'flex',
                                justifyContent: 'space-between',
                                alignItems: 'center',
                                cursor: file.mimeType === 'application/vnd.google-apps.folder' ? 'pointer' : 'default',
                            }, onClick: () => {
                                if (file.mimeType === 'application/vnd.google-apps.folder') {
                                    handleFileClick(file);
                                }
                            }, title: file.mimeType === 'application/vnd.google-apps.folder' ? `Open folder: ${file.name}` : `File: ${file.name}`, children: [(0, jsx_runtime_1.jsxs)("span", { style: { flexGrow: 1, display: 'flex', alignItems: 'center' }, children: [(0, jsx_runtime_1.jsx)("span", { style: { marginRight: '8px', fontSize: '1.1em' }, children: file.mimeType === 'application/vnd.google-apps.folder' ? '📁' : '📄' }), file.name] }), file.mimeType !== 'application/vnd.google-apps.folder' && ((0, jsx_runtime_1.jsxs)("div", { style: { display: 'flex', alignItems: 'center', flexShrink: 0 }, children: [(0, jsx_runtime_1.jsx)("button", { onClick: (e) => { e.stopPropagation(); handleIngestFile(file); }, disabled: file.isIngesting || file.ingestionStatus === 'success', style: {
                                                padding: '6px 10px',
                                                marginLeft: '10px',
                                                backgroundColor: file.ingestionStatus === 'success' ? '#a5d6a7' : (file.isIngesting ? '#64b5f6' : '#007bff'),
                                                color: 'white',
                                                border: 'none',
                                                borderRadius: '4px',
                                                cursor: (file.isIngesting || file.ingestionStatus === 'success') ? 'default' : 'pointer',
                                                fontSize: '0.9em'
                                            }, children: file.isIngesting ? 'Ingesting...' : (file.ingestionStatus === 'success' ? 'Ingested' : 'Ingest') }), file.ingestionStatus === 'error' && (0, jsx_runtime_1.jsxs)("small", { style: { color: 'red', marginLeft: '8px', fontSize: '0.85em' }, children: ["Error: ", file.ingestionMessage] }), file.ingestionStatus === 'success' && !file.isIngesting && (0, jsx_runtime_1.jsx)("small", { style: { color: 'green', marginLeft: '8px', fontSize: '0.85em' }, children: file.ingestionMessage })] }))] }, file.id))) })), nextPageToken && !isLoadingFiles && ((0, jsx_runtime_1.jsx)("div", { style: { marginTop: '15px', textAlign: 'center' }, children: (0, jsx_runtime_1.jsx)("button", { onClick: () => fetchFiles(currentFolderId, nextPageToken, true), style: {
                                padding: '8px 15px',
                                backgroundColor: '#6c757d',
                                color: 'white',
                                border: 'none',
                                borderRadius: '4px',
                                cursor: 'pointer',
                                fontSize: '0.9em'
                            }, children: "Load More" }) })), isLoadingFiles && files.length > 0 && (0, jsx_runtime_1.jsx)("p", { style: { marginTop: '10px', fontStyle: 'italic', color: '#757575', textAlign: 'center' }, children: "Loading more files..." })] }))] }));
};
exports.default = GDriveManager;
//# sourceMappingURL=data:application/json;base64,