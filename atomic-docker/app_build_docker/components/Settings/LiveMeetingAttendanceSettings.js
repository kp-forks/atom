"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const Button_1 = __importDefault(require("@components/Button"));
const Select_1 = __importDefault(require("@components/common/Select"));
const TextField_1 = __importDefault(require("@components/TextField"));
const session_1 = require("supertokens-auth-react/recipe/session");
// Matches backend TaskStatus enum
var TaskStatusEnum;
(function (TaskStatusEnum) {
    TaskStatusEnum["PENDING"] = "pending";
    TaskStatusEnum["ACTIVE"] = "active";
    TaskStatusEnum["PROCESSING_COMPLETION"] = "processing_completion";
    TaskStatusEnum["COMPLETED"] = "completed";
    TaskStatusEnum["ERROR"] = "error";
})(TaskStatusEnum || (TaskStatusEnum = {}));
const LIVE_MEETING_WORKER_URL = process.env.NEXT_PUBLIC_LIVE_MEETING_WORKER_URL || 'http://localhost:8001'; // Default to Python worker port
const LiveMeetingAttendanceSettings = () => {
    const [audioDevices, setAudioDevices] = (0, react_1.useState)([]);
    const [selectedAudioDevice, setSelectedAudioDevice] = (0, react_1.useState)('');
    const [isLoadingDevices, setIsLoadingDevices] = (0, react_1.useState)(false);
    const [deviceError, setDeviceError] = (0, react_1.useState)(null);
    const [platform, setPlatform] = (0, react_1.useState)('googlemeet');
    const [meetingId, setMeetingId] = (0, react_1.useState)(''); // Renamed from meetingIdentifier
    const [notionPageTitle, setNotionPageTitle] = (0, react_1.useState)(''); // Renamed from notionNoteTitle
    const [isProcessing, setIsProcessing] = (0, react_1.useState)(false); // General processing state for start/stop
    const [submitError, setSubmitError] = (0, react_1.useState)(null);
    const [currentTask, setCurrentTask] = (0, react_1.useState)(null);
    const [pollingIntervalId, setPollingIntervalId] = (0, react_1.useState)(null);
    const { userId, isLoading: isLoadingSession } = (0, session_1.useSession)();
    const fetchAudioDevices = (0, react_1.useCallback)(async () => {
        setIsLoadingDevices(true);
        setDeviceError(null);
        try {
            const response = await fetch(`${LIVE_MEETING_WORKER_URL}/list_audio_devices`);
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                throw new Error(errorData.detail || `Failed to fetch audio devices: ${response.statusText} (Worker might be down or URL incorrect)`);
            }
            const data = await response.json();
            setAudioDevices(data.devices || []);
            if (data.devices && data.devices.length > 0) {
                setSelectedAudioDevice(data.devices[0].id); // Default to first device's ID
            }
            else {
                setDeviceError("No audio input devices found. Please check your system's audio configuration and the live meeting worker.");
            }
        }
        catch (error) {
            console.error("Error fetching audio devices:", error);
            setDeviceError(error.message || "Could not connect to the live meeting worker to get audio devices.");
            setAudioDevices([]);
        }
        setIsLoadingDevices(false);
    }, []);
    (0, react_1.useEffect)(() => {
        fetchAudioDevices(); // Fetch on component mount
    }, [fetchAudioDevices]);
    const clearPolling = () => {
        if (pollingIntervalId) {
            clearInterval(pollingIntervalId);
            setPollingIntervalId(null);
        }
    };
    const handleStartMeeting = async () => {
        if (!userId) {
            setSubmitError("User not authenticated. Please log in.");
            return;
        }
        if (!meetingId || !notionPageTitle) {
            setSubmitError("Meeting ID/URL and Notion Page Title are required.");
            return;
        }
        if (audioDevices.length > 0 && !selectedAudioDevice) {
            setSubmitError("Please select an audio device.");
            return;
        }
        if (!selectedAudioDevice && audioDevices.length === 0 && !deviceError) {
            setSubmitError("No audio devices available. Cannot start meeting.");
            return;
        }
        setIsProcessing(true);
        setSubmitError(null);
        setCurrentTask(null);
        clearPolling();
        const payload = {
            platform,
            meeting_id: meetingId,
            audio_device_id: selectedAudioDevice,
            notion_page_title: notionPageTitle,
            user_id: userId,
        };
        try {
            const response = await fetch(`${LIVE_MEETING_WORKER_URL}/start_meeting_attendance`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload),
            });
            const result = await response.json();
            if (!response.ok) {
                throw new Error(result.detail || result.message || `Failed to initiate meeting attendance: ${response.statusText}`);
            }
            // result should be StartMeetingResponse { task_id, status, message }
            // but we want to store the full MeetingTask structure eventually, so we synthesize it or fetch immediately
            setCurrentTask(prev => ({
                ...prev, // Keep any old data if needed, though usually it's a new task
                task_id: result.task_id,
                status: result.status,
                message: result.message || "Task initiated. Waiting for detailed status...",
                platform,
                meeting_id: meetingId,
                audio_device_id: selectedAudioDevice,
                notion_page_title: notionPageTitle,
                user_id: userId,
            }));
            // Start polling for status
            const intervalId = setInterval(() => pollTaskStatus(result.task_id), 5000);
            setPollingIntervalId(intervalId);
            pollTaskStatus(result.task_id); // Initial poll immediately
        }
        catch (error) {
            console.error("Error initiating meeting attendance:", error);
            setSubmitError(error.message || "An unknown error occurred while starting.");
            setCurrentTask(null); // Clear task on error
        }
        setIsProcessing(false);
    };
    const pollTaskStatus = async (taskId) => {
        try {
            const response = await fetch(`${LIVE_MEETING_WORKER_URL}/meeting_attendance_status/${taskId}`);
            if (!response.ok) {
                if (response.status === 404) {
                    setSubmitError(`Task status not found (ID: ${taskId}). It might have been cleared or is an old ID.`);
                    clearPolling();
                    setCurrentTask(null); // Task is gone
                    return;
                }
                const errorData = await response.json().catch(() => ({}));
                throw new Error(errorData.detail || `Failed to fetch task status: ${response.statusText}`);
            }
            const statusData = await response.json();
            setCurrentTask(statusData);
            // Stop polling if task is in a terminal state
            if (statusData.status === TaskStatusEnum.COMPLETED || statusData.status === TaskStatusEnum.ERROR) {
                clearPolling();
            }
        }
        catch (error) {
            console.error(`Error polling task status for ${taskId}:`, error);
            setSubmitError(`Error fetching task status: ${error.message}. Polling may be affected.`);
            // Potentially stop polling on repeated errors or specific error types
        }
    };
    const handleStopMeeting = async () => {
        if (!currentTask || !currentTask.task_id) {
            setSubmitError("No active task to stop.");
            return;
        }
        if (currentTask.status === TaskStatusEnum.COMPLETED || currentTask.status === TaskStatusEnum.ERROR) {
            setSubmitError("Task is already in a terminal state.");
            return;
        }
        setIsProcessing(true);
        setSubmitError(null);
        clearPolling(); // Stop regular polling as we are sending a stop command
        try {
            const response = await fetch(`${LIVE_MEETING_WORKER_URL}/stop_meeting_attendance/${currentTask.task_id}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
            });
            const result = await response.json(); // Expects updated task details
            if (!response.ok) {
                throw new Error(result.message || result.detail || `Failed to stop meeting: ${response.statusText}`);
            }
            setCurrentTask(result); // Update with final status from stop response
            if (result.status !== TaskStatusEnum.COMPLETED && result.status !== TaskStatusEnum.ERROR) {
                // If not yet terminal, poll once more or restart polling briefly
                const intervalId = setInterval(() => pollTaskStatus(result.task_id), 3000);
                setPollingIntervalId(intervalId);
            }
        }
        catch (error) {
            console.error("Error stopping meeting attendance:", error);
            setSubmitError(error.message || "An unknown error occurred while stopping.");
            // Optionally, restart polling if stop command failed, to get latest status
            if (currentTask && currentTask.task_id && !pollingIntervalId) {
                const intervalId = setInterval(() => pollTaskStatus(currentTask.task_id), 5000);
                setPollingIntervalId(intervalId);
            }
        }
        setIsProcessing(false);
    };
    // Clear interval on unmount
    (0, react_1.useEffect)(() => {
        return () => {
            clearPolling();
        };
    }, [pollingIntervalId]); // Dependency array ensures cleanup if pollingIntervalId changes, but clearPolling handles its own state.
    const platformOptions = [
        { label: 'Google Meet', value: 'googlemeet' },
        { label: 'Zoom', value: 'zoom' },
        { label: 'Microsoft Teams', value: 'msteams' },
        { label: 'Other/Desktop Audio', value: 'other' },
    ];
    const audioDeviceOptions = audioDevices.map(device => ({
        label: `${device.name} (ID: ${device.id})`,
        value: device.id,
    }));
    const isTaskActiveOrPending = currentTask &&
        (currentTask.status === TaskStatusEnum.ACTIVE ||
            currentTask.status === TaskStatusEnum.PENDING ||
            currentTask.status === TaskStatusEnum.PROCESSING_COMPLETION);
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { padding: { phone: 'm', tablet: 'l' }, borderWidth: 1, borderColor: "hairline", borderRadius: "m", margin: { phone: 'm', tablet: 'l' }, backgroundColor: "white", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "sectionHeader", marginBottom: "m", children: "Live Meeting Attendance" }), (0, jsx_runtime_1.jsxs)(Text_1.default, { variant: "body", fontSize: "sm", color: "gray.600", marginBottom: "m", children: ["Configure Atom to capture audio from online meetings or desktop, (eventually) transcribe, and generate notes. Refer to the ", (0, jsx_runtime_1.jsx)("a", { href: "/docs/live-meeting-attendance-setup.md", target: "_blank", rel: "noopener noreferrer", style: { color: 'blue' }, children: "setup guide" }), " for audio configuration."] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { marginBottom: "l", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subHeader", marginBottom: "s", children: "Audio Device Selection" }), (0, jsx_runtime_1.jsx)(Button_1.default, { onPress: fetchAudioDevices, disabled: isLoadingDevices || isProcessing, marginBottom: "s", children: isLoadingDevices ? 'Refreshing Devices...' : 'Refresh Audio Devices' }), deviceError && (0, jsx_runtime_1.jsx)(Text_1.default, { color: "red.500", marginBottom: "s", fontSize: "sm", children: deviceError }), audioDevices.length > 0 && ((0, jsx_runtime_1.jsx)(Select_1.default, { label: "Select Audio Device (for meeting/desktop audio capture)", options: audioDeviceOptions, value: selectedAudioDevice, onChange: (value) => setSelectedAudioDevice(value), placeholder: "Select an audio device", disabled: isProcessing || isTaskActiveOrPending })), audioDevices.length === 0 && !isLoadingDevices && !deviceError && ((0, jsx_runtime_1.jsx)(Text_1.default, { fontSize: "sm", children: "No audio devices found or loaded. Try refreshing, or check worker logs." })), (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "body", fontSize: "xs", color: "gray.500", marginTop: "xs", children: "The selected device should ideally be a virtual audio output/loopback that captures the meeting's sound (not your microphone, unless intended)." })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { marginBottom: "l", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subHeader", marginBottom: "s", children: "Meeting Details" }), (0, jsx_runtime_1.jsx)(Select_1.default, { label: "Platform", options: platformOptions, value: platform, onChange: (value) => setPlatform(value), disabled: isProcessing || isTaskActiveOrPending }), (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Meeting ID or Description", value: meetingId, onChange: (e) => setMeetingId(e.target.value), placeholder: "e.g., https://meet.google.com/abc-def-ghi or 'Client Call'", marginTop: "s", disabled: isProcessing || isTaskActiveOrPending }), (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Notion Page Title (for Notes)", value: notionPageTitle, onChange: (e) => setNotionPageTitle(e.target.value), placeholder: "e.g., Project Phoenix Sync - Oct 28", marginTop: "s", disabled: isProcessing || isTaskActiveOrPending })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", children: [(0, jsx_runtime_1.jsx)(Button_1.default, { onPress: handleStartMeeting, disabled: isProcessing || isLoadingDevices || isLoadingSession || isTaskActiveOrPending || (!selectedAudioDevice && audioDevices.length > 0), variant: "primary", children: isProcessing && currentTask?.status !== TaskStatusEnum.ACTIVE ? 'Starting...' : 'Start Attending Meeting' }), isTaskActiveOrPending && ((0, jsx_runtime_1.jsx)(Button_1.default, { onPress: handleStopMeeting, disabled: isProcessing, variant: "warning", marginLeft: "m", children: isProcessing && currentTask?.status === TaskStatusEnum.ACTIVE ? 'Stopping...' : 'Stop Attending Meeting' }))] }), submitError && (0, jsx_runtime_1.jsx)(Text_1.default, { color: "red.500", marginTop: "s", fontSize: "sm", children: submitError }), isLoadingSession && (0, jsx_runtime_1.jsx)(Text_1.default, { color: "orange.500", marginTop: "s", fontSize: "sm", children: "Loading user session..." }), currentTask && ((0, jsx_runtime_1.jsxs)(Box_1.default, { marginTop: "l", padding: "m", borderWidth: 1, borderColor: "gray.300", borderRadius: "s", children: [(0, jsx_runtime_1.jsxs)(Text_1.default, { variant: "subHeader", marginBottom: "s", children: ["Task Status (ID: ", currentTask.task_id, ")"] }), (0, jsx_runtime_1.jsxs)(Text_1.default, { children: [(0, jsx_runtime_1.jsx)("strong", { children: "Status:" }), " ", currentTask.status, " ", currentTask.message ? `(${currentTask.message})` : ''] }), currentTask.start_time && (0, jsx_runtime_1.jsxs)(Text_1.default, { children: [(0, jsx_runtime_1.jsx)("strong", { children: "Started:" }), " ", new Date(currentTask.start_time).toLocaleString()] }), currentTask.duration_seconds !== null && typeof currentTask.duration_seconds !== 'undefined' && ((0, jsx_runtime_1.jsxs)(Text_1.default, { children: [(0, jsx_runtime_1.jsx)("strong", { children: "Duration:" }), " ", Math.round(currentTask.duration_seconds), "s"] })), currentTask.transcript_preview && (0, jsx_runtime_1.jsxs)(Text_1.default, { children: [(0, jsx_runtime_1.jsx)("strong", { children: "Transcript Preview:" }), " ", currentTask.transcript_preview] }), currentTask.notes_preview && (0, jsx_runtime_1.jsxs)(Text_1.default, { children: [(0, jsx_runtime_1.jsx)("strong", { children: "Notes Preview:" }), " ", currentTask.notes_preview] }), currentTask.status === TaskStatusEnum.COMPLETED && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [currentTask.final_transcript_location && ((0, jsx_runtime_1.jsxs)(Text_1.default, { children: [(0, jsx_runtime_1.jsx)("strong", { children: "Final Transcript:" }), " ", currentTask.final_transcript_location] })), currentTask.final_notes_location && ((0, jsx_runtime_1.jsxs)(Text_1.default, { children: [(0, jsx_runtime_1.jsx)("strong", { children: "Final Notes:" }), " ", currentTask.final_notes_location, " (Note: Actual Notion page creation is a future step for the worker)"] }))] })), currentTask.status === TaskStatusEnum.ERROR && currentTask.message && ((0, jsx_runtime_1.jsxs)(Text_1.default, { color: "red.500", children: [(0, jsx_runtime_1.jsx)("strong", { children: "Error Details:" }), " ", currentTask.message] }))] }))] }));
};
exports.default = LiveMeetingAttendanceSettings;
//# sourceMappingURL=data:application/json;base64,