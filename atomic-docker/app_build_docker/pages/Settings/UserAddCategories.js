"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_native_1 = require("react-native");
const TextField_1 = __importDefault(require("@components/TextField"));
const io_1 = require("react-icons/io");
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const Button_1 = __importDefault(require("@components/Button"));
const theme_1 = require("@lib/theme/theme");
const CategoryHelper_1 = require("@lib/Category/CategoryHelper");
const user_context_1 = require("@lib/user-context");
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("@config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function UserAddCategories() {
    const [categories, setCategories] = (0, react_1.useState)([]);
    const [name, setName] = (0, react_1.useState)('');
    const { sub, client } = (0, user_context_1.useAppContext)();
    const userId = sub;
    // get old categories
    (0, react_1.useEffect)(() => {
        (async () => {
            try {
                const categories = await (0, CategoryHelper_1.listUserCategories)(client, userId);
                setCategories(categories);
            }
            catch (error) {
                console.log(error);
            }
        })();
    }, [client, userId]);
    // add new category to categories
    const addCategory = async () => {
        try {
            // validate
            if (name.length === 0) {
                return;
            }
            const newCategory = await (0, CategoryHelper_1.addCategoryToUser)(client, userId, name);
            setCategories([...categories, newCategory]);
            setName('');
        }
        catch (error) {
            console.log(error);
        }
    };
    // remove category from categories
    const removeCategoryForUser = async (categoryId) => {
        try {
            setCategories(categories.filter(category => category.id !== categoryId));
            await (0, CategoryHelper_1.removeCategory)(client, categoryId);
            await (0, CategoryHelper_1.removeEventConnectionsForCategory)(client, categoryId);
        }
        catch (error) {
            console.log(error);
        }
    };
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "space-around", alignItems: "center", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flex: 4, pt: { phone: 'm', tablet: 'l' }, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(react_native_1.FlatList, { data: categories, renderItem: ({ item, index }) => ((0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 'xs', tablet: 's' }, style: { width: '100%' }, alignItems: "center", justifyContent: "center", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '60%' }, flexDirection: "row", justifyContent: "space-between", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: item.name }), (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { hitSlop: 15, onPress: () => removeCategoryForUser(categories?.[index]?.id), children: (0, jsx_runtime_1.jsx)(io_1.IoIosClose, { size: "3em", color: theme_1.palette.red }) })] }) })), keyExtractor: (item) => item.id }) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, children: (0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 'xs', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { onChange: (e) => setName(e?.target?.value), value: name, placeholder: "Get together", label: "Tag", style: { width: '60%' } }) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, p: { phone: 'xs', tablet: 's' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: addCategory, children: "Add New Tag" }) })] }));
}
exports.default = UserAddCategories;
//# sourceMappingURL=data:application/json;base64,