"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Wizard_1 = __importDefault(require("@components/Wizard"));
const react_2 = require("@chakra-ui/react");
const colorsPalette_1 = require("@lib/theme/colorsPalette");
const uuid_1 = require("uuid");
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const Button_1 = __importDefault(require("@components/Button"));
const EditCategoryStep1_1 = __importDefault(require("@pages/Settings/EditCategoryWizard/EditCategoryStep1"));
const EditCategoryStep1a_1 = __importDefault(require("@pages/Settings/EditCategoryWizard/EditCategoryStep1a"));
const EditCategoryStep1b_1 = __importDefault(require("@pages/Settings/EditCategoryWizard/EditCategoryStep1b"));
const EditCategoryStep2_1 = __importDefault(require("@pages/Settings/EditCategoryWizard/EditCategoryStep2"));
const EditCategoryStep3_1 = __importDefault(require("@pages/Settings/EditCategoryWizard/EditCategoryStep3"));
const EditCategoryStep4_1 = __importDefault(require("@pages/Settings/EditCategoryWizard/EditCategoryStep4"));
const EditCategoryStep5_1 = __importDefault(require("@pages/Settings/EditCategoryWizard/EditCategoryStep5"));
const EditCategoryStep5a_1 = __importDefault(require("@pages/Settings/EditCategoryWizard/EditCategoryStep5a"));
const EditCategoryStep6_1 = __importDefault(require("@pages/Settings/EditCategoryWizard/EditCategoryStep6"));
const RegularCard_1 = __importDefault(require("@components/RegularCard"));
const CategoryHelper_1 = require("@lib/Category/CategoryHelper");
const user_context_1 = require("@lib/user-context");
const router_1 = require("next/router");
const INITIAL_COLOR = colorsPalette_1.colorsPalette.blue30;
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("@config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function UserEditCategory() {
    const [copyAvailability, setCopyAvailability] = (0, react_1.useState)(false);
    const [copyTimeBlocking, setCopyTimeBlocking] = (0, react_1.useState)(false);
    const [copyTimePreference, setCopyTimePreference] = (0, react_1.useState)(false);
    const [copyReminders, setCopyReminders] = (0, react_1.useState)(false);
    const [copyPriorityLevel, setCopyPriorityLevel] = (0, react_1.useState)(false);
    const [copyModifiable, setCopyModifiable] = (0, react_1.useState)(false);
    const [defaultAvailability, setDefaultAvailability] = (0, react_1.useState)(false);
    const [defaultTimeBlocking, setDefaultTimeBlocking] = (0, react_1.useState)();
    const [defaultTimePreference, setDefaultTimePreference] = (0, react_1.useState)();
    const [defaultReminders, setDefaultReminders] = (0, react_1.useState)();
    const [defaultPriorityLevel, setDefaultPriorityLevel] = (0, react_1.useState)();
    const [defaultModifiable, setDefaultModifiable] = (0, react_1.useState)(false);
    const [copyIsBreak, setCopyIsBreak] = (0, react_1.useState)(false);
    const [defaultIsBreak, setDefaultIsBreak] = (0, react_1.useState)(false);
    const [color, setColor] = (0, react_1.useState)(INITIAL_COLOR);
    const [copyIsMeeting, setCopyIsMeeting] = (0, react_1.useState)(false);
    const [copyIsExternalMeeting, setCopyIsExternalMeeting] = (0, react_1.useState)(false);
    const [defaultIsMeeting, setDefaultIsMeeting] = (0, react_1.useState)(false);
    const [defaultIsExternalMeeting, setDefaultIsExternalMeeting] = (0, react_1.useState)(false);
    const [defaultMeetingModifiable, setDefaultMeetingModifiable] = (0, react_1.useState)(false);
    const [defaultExternalMeetingModifiable, setDefaultExternalMeetingModifiable] = (0, react_1.useState)(false);
    const [name, setName] = (0, react_1.useState)('');
    const [activeIndex, setActiveIndex] = (0, react_1.useState)(0);
    const [completedStep, setCompletedStep] = (0, react_1.useState)();
    const router = (0, router_1.useRouter)();
    const { sub, client } = (0, user_context_1.useAppContext)();
    const categoryId = router.query?.categoryId;
    const toast = (0, react_2.useToast)();
    (0, react_1.useEffect)(() => {
        if (categoryId) {
            (async () => {
                const category = await (0, CategoryHelper_1.getCategoryWithId)(client, categoryId);
                console.log(category, 'category inside useEffect of UserEditCategory');
                if (category) {
                    setName(category.name);
                    setColor(category.color);
                    setCopyAvailability(category.copyAvailability);
                    setCopyTimeBlocking(category.copyTimeBlocking);
                    setCopyTimePreference(category.copyTimePreference);
                    setCopyReminders(category.copyReminders);
                    setCopyPriorityLevel(category.copyPriorityLevel);
                    setCopyModifiable(category.copyModifiable);
                    setDefaultAvailability(category.defaultAvailability);
                    setDefaultTimeBlocking(category.defaultTimeBlocking);
                    setDefaultTimePreference(category.defaultTimePreference);
                    setDefaultReminders(category.defaultReminders);
                    setDefaultPriorityLevel(category.defaultPriorityLevel);
                    setDefaultModifiable(category.defaultModifiable);
                    setCopyIsBreak(category.copyIsBreak);
                    setDefaultIsBreak(category.defaultIsBreak);
                    setCopyIsMeeting(category.copyIsMeeting);
                    setCopyIsExternalMeeting(category.copyIsExternalMeeting);
                    setDefaultIsMeeting(category.defaultIsMeeting);
                    setDefaultIsExternalMeeting(category.defaultIsExternalMeeting);
                    setDefaultMeetingModifiable(category.defaultMeetingModifiable);
                    setDefaultExternalMeetingModifiable(category.defaultExternalMeetingModifiable);
                }
            })();
        }
    }, [categoryId, client]);
    const updateCategory = async () => {
        try {
            if (!categoryId || !client) {
                return;
            }
            const existingCategory = await (0, CategoryHelper_1.getCategoryWithId)(client, categoryId);
            if (!existingCategory) {
                toast({
                    status: 'error',
                    title: 'Error',
                    description: 'Error updating tag',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            console.log(categoryId, name, copyAvailability, copyTimeBlocking, copyTimePreference, copyReminders, copyPriorityLevel, copyModifiable, defaultAvailability, defaultTimeBlocking, defaultTimePreference, defaultReminders, defaultPriorityLevel, defaultModifiable, copyIsBreak, defaultIsBreak, copyIsMeeting, copyIsExternalMeeting, color, defaultIsMeeting, defaultIsExternalMeeting, defaultMeetingModifiable, defaultExternalMeetingModifiable, ` categoryId, name, copyAvailability, copyTimeBlocking,
            copyTimePreference, copyReminders, copyPriorityLevel, copyModifiable, defaultAvailability,
            defaultTimeBlocking, defaultTimePreference, defaultReminders, defaultPriorityLevel, 
            defaultModifiable, copyIsBreak, defaultIsBreak, copyIsMeeting, copyIsExternalMeeting,
            color,
                defaultIsMeeting,
                defaultIsExternalMeeting,
                defaultMeetingModifiable,
                defaultExternalMeetingModifiable, inside updateCategory for UserEditCategory`);
            const result = await (0, CategoryHelper_1.updateCategoryHelper)(client, categoryId, name, copyAvailability, copyTimeBlocking, copyTimePreference, copyReminders, copyPriorityLevel, copyModifiable, defaultAvailability, defaultTimeBlocking, defaultTimePreference, defaultReminders, defaultPriorityLevel, defaultModifiable, copyIsBreak, defaultIsBreak, color, copyIsMeeting, copyIsExternalMeeting, defaultIsMeeting, defaultIsExternalMeeting, defaultMeetingModifiable, defaultExternalMeetingModifiable);
            console.log(result, ' result after update for category');
            toast({
                title: 'Tag updated',
                description: `${name} updated successfully`,
                status: 'success',
                duration: 9000,
                isClosable: true,
            });
            router.push({ pathname: '/Settings/UserEditCategories', query: { isUpdate: (0, uuid_1.v4)() } });
        }
        catch (e) {
            console.log(e, ' error for updateCategory inside UserEditCategory');
            toast({
                status: 'error',
                title: 'Error',
                description: 'Error updating tag',
                duration: 9000,
                isClosable: true,
            });
        }
    };
    const onActiveIndexChanged = (index) => setActiveIndex(index);
    const goToPrevStep = () => {
        const prevActiveIndex = activeIndex;
        const newActiveIndex = prevActiveIndex === 0 ? 0 : prevActiveIndex - 1;
        setActiveIndex(newActiveIndex);
    };
    const renderPrevButton = () => {
        if (activeIndex === 0) {
            return (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' } });
        }
        return ((0, jsx_runtime_1.jsx)(Box_1.default, { ml: { phone: 's', tablet: 'm' }, mb: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: goToPrevStep, children: "Back" }) }));
    };
    const goToNextStep = () => {
        const prevActiveIndex = activeIndex;
        const prevCompletedStep = completedStep;
        if (prevActiveIndex === 10) {
            return;
        }
        let newActiveIndex = prevActiveIndex + 1;
        if (!prevCompletedStep || (prevCompletedStep < prevActiveIndex)) {
            const newCompletedStep = prevActiveIndex;
            setCompletedStep(newCompletedStep);
        }
        if (newActiveIndex !== prevActiveIndex) {
            setActiveIndex(newActiveIndex);
        }
    };
    const renderNextButton = () => {
        if (activeIndex === 9) {
            return (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, mb: { phone: 's', tablet: 'm' } });
        }
        return ((0, jsx_runtime_1.jsx)(Box_1.default, { mr: { phone: 's', tablet: 'm' }, mb: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: goToNextStep, children: "Next" }) }));
    };
    const renderCurrentStep = () => {
        switch (activeIndex) {
            case 0:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(EditCategoryStep1_1.default, { name: name, setParentName: setName, copyAvailability: copyAvailability, setParentCopyAvailability: setCopyAvailability, copyTimeBlocking: copyTimeBlocking, setParentCopyTimeBlocking: setCopyTimeBlocking }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Box_1.default, {}), renderNextButton()] })] }));
            case 1:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(EditCategoryStep1a_1.default, { copyTimePreference: copyTimePreference, setParentCopyTimePreference: setCopyTimePreference, copyReminders: copyReminders, setParentCopyReminders: setCopyReminders, copyPriorityLevel: copyPriorityLevel, setParentCopyPriorityLevel: setCopyPriorityLevel }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [renderPrevButton(), renderNextButton()] })] }));
            case 2:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(EditCategoryStep1b_1.default, { copyModifiable: copyModifiable, setParentCopyModifiable: setCopyModifiable }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [renderPrevButton(), renderNextButton()] })] }));
            case 3:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(EditCategoryStep2_1.default, { defaultAvailability: defaultAvailability, setParentDefaultAvailability: setDefaultAvailability, defaultTimeBlocking: defaultTimeBlocking, setParentDefaultTimeBlocking: setDefaultTimeBlocking }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [renderPrevButton(), renderNextButton()] })] }));
            case 4:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(EditCategoryStep3_1.default, { defaultPriorityLevel: defaultPriorityLevel, setParentDefaultPriorityLevel: setDefaultPriorityLevel, defaultModifiable: defaultModifiable, setParentDefaultModifiable: setDefaultModifiable }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [renderPrevButton(), renderNextButton()] })] }));
            case 5:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(EditCategoryStep4_1.default, { defaultTimePreferences: defaultTimePreference, setParentDefaultTimePreference: setDefaultTimePreference }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [renderPrevButton(), renderNextButton()] })] }));
            case 6:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(EditCategoryStep5_1.default, { defaultReminders: defaultReminders, setParentDefaultReminders: setDefaultReminders }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [renderPrevButton(), renderNextButton()] })] }));
            case 7:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(EditCategoryStep5a_1.default, { copyIsBreak: copyIsBreak, setParentCopyIsBreak: setCopyIsBreak, defaultIsBreak: defaultIsBreak, setParentDefaultIsBreak: setDefaultIsBreak }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [renderPrevButton(), renderNextButton()] })] }));
            case 8:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(EditCategoryStep6_1.default, { color: color, setParentColor: setColor, copyIsMeeting: copyIsMeeting, setParentCopyIsMeeting: setCopyIsMeeting, copyIsExternalMeeting: copyIsExternalMeeting, setParentCopyIsExternalMeeting: setCopyIsExternalMeeting, defaultIsMeeting: defaultIsMeeting, setParentDefaultIsMeeting: setDefaultIsMeeting, defaultIsExternalMeeting: defaultIsExternalMeeting, setParentDefaultIsExternalMeeting: setDefaultIsExternalMeeting, defaultMeetingModifiable: defaultMeetingModifiable, setParentDefaultMeetingModifiable: setDefaultMeetingModifiable, defaultExternalMeetingModifiable: defaultExternalMeetingModifiable, setParentDefaultExternalMeetingModifiable: setDefaultExternalMeetingModifiable }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [renderPrevButton(), renderNextButton()] })] }));
            case 9:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, alignItems: "center", justifyContent: "center", minHeight: "70vh", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, p: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subheaderNormal", children: name }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: updateCategory, children: "Update" }) }) })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", width: "100%", children: renderPrevButton() })] }));
            default:
                return ((0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(RegularCard_1.default, { children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "header", children: "Oops... something went wrong" }) }) }));
        }
    };
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(Wizard_1.default, { items: [
                    {
                        index: 0,
                        label: 'Step 1',
                    },
                    {
                        index: 1,
                        label: 'Step 2',
                    },
                    {
                        index: 2,
                        label: 'Step 3',
                    },
                    {
                        index: 3,
                        label: 'Step 4',
                    },
                    {
                        index: 4,
                        label: 'Step 5',
                    },
                    {
                        index: 5,
                        label: 'Step 6',
                    },
                    {
                        index: 6,
                        label: 'Step 7',
                    },
                    {
                        index: 7,
                        label: 'Step 8',
                    },
                    {
                        index: 8,
                        label: 'Step 9',
                    },
                    {
                        index: 9,
                        label: name,
                    },
                ], completed: completedStep, activeIndex: activeIndex }), renderCurrentStep()] }));
}
exports.default = UserEditCategory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlckVkaXRDYXRlZ29yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlVzZXJFZGl0Q2F0ZWdvcnkudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBK0NBLGdEQXFDQzs7QUFwRkQsaUNBS2M7QUFFZCxnRUFBdUM7QUFFdkMsNENBQTJDO0FBQzNDLDREQUFrRTtBQUVsRSwrQkFBaUM7QUFHakMsaUVBQXdDO0FBQ3hDLG1FQUEwQztBQUMxQyxnRUFBdUM7QUFPdkMsNkdBQW9GO0FBQ3BGLCtHQUFzRjtBQUN0RiwrR0FBc0Y7QUFDdEYsNkdBQW9GO0FBQ3BGLDZHQUFvRjtBQUNwRiw2R0FBb0Y7QUFDcEYsNkdBQW9GO0FBQ3BGLCtHQUFzRjtBQUN0Riw2R0FBb0Y7QUFDcEYsMEVBQWlEO0FBQ2pELGlFQUFzRjtBQUV0RixvREFBaUQ7QUFFakQsd0NBQXVDO0FBRXZDLE1BQU0sYUFBYSxHQUFHLDZCQUFNLENBQUMsTUFBTSxDQUFBO0FBR25DLHdFQUE4QztBQUM5Qyx5REFBcUQ7QUFDckQsOEVBQXFEO0FBRTlDLEtBQUssVUFBVSxrQkFBa0IsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQWlEO0lBQ2hHLDBGQUEwRjtJQUMxRixzQ0FBc0M7SUFDdEMseUVBQXlFO0lBQ3pFLDBCQUFlLENBQUMsSUFBSSxDQUFDLElBQUEsNkJBQWEsR0FBRSxDQUFDLENBQUE7SUFDckMsSUFBSSxPQUFPLENBQUE7SUFDWCxJQUFJLENBQUM7UUFDRCxPQUFPLEdBQUcsTUFBTSxpQkFBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFO1lBQ3pDLDZCQUE2QixFQUFFLEtBQUs7Z0JBQ2hDLE9BQU8sRUFBRSxDQUFBO1lBQ2IsQ0FBQztTQUNKLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFBQyxPQUFPLEdBQVEsRUFBRSxDQUFDO1FBQ2hCLElBQUksR0FBRyxDQUFDLElBQUksS0FBSyxpQkFBTyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxD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QUFLLEVBQUUsQ0FBQzt3QkFDUixLQUFLLEVBQUUsUUFBUTtxQkFDbEI7b0JBQ0E7d0JBQ0csS0FBSyxFQUFFLENBQUM7d0JBQ1IsS0FBSyxFQUFFLFFBQVE7cUJBQ2xCO29CQUNEO3dCQUNJLEtBQUssRUFBRSxDQUFDO3dCQUNSLEtBQUssRUFBRSxJQUFJO3FCQUNkO2lCQUNKLEVBRUQsU0FBUyxFQUFFLGFBQWEsRUFDeEIsV0FBVyxFQUFFLFdBQVcsR0FDMUIsRUFDRCxpQkFBaUIsRUFBRSxJQUNsQixDQUNULENBQUE7QUFDTCxDQUFDO0FBRUQsa0JBQWUsZ0JBQWdCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHtcbiAgdXNlU3RhdGUsXG4gIHVzZUVmZmVjdCxcbiAgRGlzcGF0Y2gsXG4gIFNldFN0YXRlQWN0aW9uLFxufSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IFdpemFyZCBmcm9tICdAY29tcG9uZW50cy9XaXphcmQnXG5pbXBvcnQgeyBBcG9sbG9DbGllbnQsIE5vcm1hbGl6ZWRDYWNoZU9iamVjdCB9IGZyb20gJ0BhcG9sbG8vY2xpZW50J1xuaW1wb3J0IHsgdXNlVG9hc3QgfSBmcm9tICdAY2hha3JhLXVpL3JlYWN0J1xuaW1wb3J0IHsgY29sb3JzUGFsZXR0ZSBhcyBDb2xvcnMgfSBmcm9tICdAbGliL3RoZW1lL2NvbG9yc1BhbGV0dGUnXG5cbmltcG9ydCB7IHY0IGFzIHV1aWQgfSBmcm9tICd1dWlkJ1xuXG5cbmltcG9ydCBCb3ggZnJvbSAnQGNvbXBvbmVudHMvY29tbW9uL0JveCdcbmltcG9ydCBUZXh0IGZyb20gJ0Bjb21wb25lbnRzL2NvbW1vbi9UZXh0J1xuaW1wb3J0IEJ1dHRvbiBmcm9tICdAY29tcG9uZW50cy9CdXR0b24nXG5cblxuaW1wb3J0IHsgRGVmYXVsdFRpbWVCbG9ja2luZ1R5cGUsIERlZmF1bHRUaW1lUHJlZmVyZW5jZVR5cGVzIH0gZnJvbSAnQGxpYi9kYXRhVHlwZXMvQ2F0ZWdvcnlUeXBlJ1xuaW1wb3J0IHsgRGVmYXVsdFJlbWluZGVyc1R5cGUgfSBmcm9tICdAbGliL2RhdGFUeXBlcy9DYXRlZ29yeVR5cGUnXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnXG5cbmltcG9ydCBFZGl0Q2F0ZWdvcnlTdGVwMSBmcm9tICdAcGFnZXMvU2V0dGluZ3MvRWRpdENhdGVnb3J5V2l6YXJkL0VkaXRDYXRlZ29yeVN0ZXAxJ1xuaW1wb3J0IEVkaXRDYXRlZ29yeVN0ZXAxYSBmcm9tICdAcGFnZXMvU2V0dGluZ3MvRWRpdENhdGVnb3J5V2l6YXJkL0VkaXRDYXRlZ29yeVN0ZXAxYSdcbmltcG9ydCBFZGl0Q2F0ZWdvcnlTdGVwMWIgZnJvbSAnQHBhZ2VzL1NldHRpbmdzL0VkaXRDYXRlZ29yeVdpemFyZC9FZGl0Q2F0ZWdvcnlTdGVwMWInXG5pbXBvcnQgRWRpdENhdGVnb3J5U3RlcDIgZnJvbSAnQHBhZ2VzL1NldHRpbmdzL0VkaXRDYXRlZ29yeVdpemFyZC9FZGl0Q2F0ZWdvcnlTdGVwMidcbmltcG9ydCBFZGl0Q2F0ZWdvcnlTdGVwMyBmcm9tICdAcGFnZXMvU2V0dGluZ3MvRWRpdENhdGVnb3J5V2l6YXJkL0VkaXRDYXRlZ29yeVN0ZXAzJ1xuaW1wb3J0IEVkaXRDYXRlZ29yeVN0ZXA0IGZyb20gJ0BwYWdlcy9TZXR0aW5ncy9FZGl0Q2F0ZWdvcnlXaXphcmQvRWRpdENhdGVnb3J5U3RlcDQnXG5pbXBvcnQgRWRpdENhdGVnb3J5U3RlcDUgZnJvbSAnQHBhZ2VzL1NldHRpbmdzL0VkaXRDYXRlZ29yeVdpemFyZC9FZGl0Q2F0ZWdvcnlTdGVwNSdcbmltcG9ydCBFZGl0Q2F0ZWdvcnlTdGVwNWEgZnJvbSAnQHBhZ2VzL1NldHRpbmdzL0VkaXRDYXRlZ29yeVdpemFyZC9FZGl0Q2F0ZWdvcnlTdGVwNWEnXG5pbXBvcnQgRWRpdENhdGVnb3J5U3RlcDYgZnJvbSAnQHBhZ2VzL1NldHRpbmdzL0VkaXRDYXRlZ29yeVdpemFyZC9FZGl0Q2F0ZWdvcnlTdGVwNidcbmltcG9ydCBSZWd1bGFyQ2FyZCBmcm9tICdAY29tcG9uZW50cy9SZWd1bGFyQ2FyZCdcbmltcG9ydCB7IGdldENhdGVnb3J5V2l0aElkLCB1cGRhdGVDYXRlZ29yeUhlbHBlciB9IGZyb20gJ0BsaWIvQ2F0ZWdvcnkvQ2F0ZWdvcnlIZWxwZXInXG5cbmltcG9ydCB7IHVzZUFwcENvbnRleHQgfSBmcm9tICdAbGliL3VzZXItY29udGV4dCdcblxuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSAnbmV4dC9yb3V0ZXInXG5cbmNvbnN0IElOSVRJQUxfQ09MT1IgPSBDb2xvcnMuYmx1ZTMwXG5cbmltcG9ydCB7IE5leHRBcGlSZXF1ZXN0LCBOZXh0QXBpUmVzcG9uc2UgfSBmcm9tICduZXh0JztcbmltcG9ydCBzdXBlcnRva2Vuc05vZGUgZnJvbSAnc3VwZXJ0b2tlbnMtbm9kZSdcbmltcG9ydCB7IGJhY2tlbmRDb25maWcgfSBmcm9tICdAY29uZmlnL2JhY2tlbmRDb25maWcnXG5pbXBvcnQgU2Vzc2lvbiBmcm9tICdzdXBlcnRva2Vucy1ub2RlL3JlY2lwZS9zZXNzaW9uJ1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U2VydmVyU2lkZVByb3BzKHsgcmVxLCByZXMgfTogeyByZXE6IE5leHRBcGlSZXF1ZXN0LCByZXM6IE5leHRBcGlSZXNwb25zZSB9KSB7XG4gICAgLy8gTm90aWNlIGhvdyB0aGUgc2VydmVyIHVzZXMgYEFQSWAgZnJvbSBgd2l0aFNTUkNvbnRleHRgLCBpbnN0ZWFkIG9mIHRoZSB0b3AtbGV2ZWwgYEFQSWAuXG4gICAgLy8gY29uc3QgU1NSID0gd2l0aFNTUkNvbnRleHQoeyByZXEgfSlcbiAgICAvLyB0aGlzIHJ1bnMgb24gdGhlIGJhY2tlbmQsIHNvIHdlIG11c3QgY2FsbCBpbml0IG9uIHN1cGVydG9rZW5zLW5vZGUgU0RLXG4gICAgc3VwZXJ0b2tlbnNOb2RlLmluaXQoYmFja2VuZENvbmZpZygpKVxuICAgIGxldCBzZXNzaW9uXG4gICAgdHJ5IHtcbiAgICAgICAgc2Vzc2lvbiA9IGF3YWl0IFNlc3Npb24uZ2V0U2Vzc2lvbihyZXEsIHJlcywge1xuICAgICAgICAgICAgb3ZlcnJpZGVHbG9iYWxDbGFpbVZhbGlkYXRvcnM6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW11cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pXG4gICAgfSBjYXRjaCAoZXJyOiBhbnkpIHtcbiAgICAgICAgaWYgKGVyci50eXBlID09PSBTZXNzaW9uLkVycm9yLlRSWV9SRUZSRVNIX1RPS0VOKSB7XG4gICAgICAgICAgICByZXR1cm4geyBwcm9wczogeyBmcm9tU3VwZXJ0b2tlbnM6ICduZWVkcy1yZWZyZXNoJyB9IH1cbiAgICAgICAgfSBlbHNlIGlmIChlcnIudHlwZSA9PT0gU2Vzc2lvbi5FcnJvci5VTkFVVEhPUklTRUQpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgd2lsbCBmb3JjZSB0aGUgZnJvbnRlbmQgdG8gdHJ5IGFuZCByZWZyZXNoIHdoaWNoIHdpbGwgZmFpbFxuICAgICAgICAgICAgLy8gY2xlYXJpbmcgYWxsIGNvb2tpZXMgYW5kIHJlZGlyZWN0aW5nIHRoZSB1c2VyIHRvIHRoZSBsb2dpbiBzY3JlZW4uXG4gICAgICAgICAgICByZXR1cm4geyBwcm9wczogeyBmcm9tU3VwZXJ0b2tlbnM6ICduZWVkcy1yZWZyZXNoJyB9IH1cbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnJcbiAgICB9XG5cbiAgICBpZiAoIXNlc3Npb24/LmdldFVzZXJJZCgpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZWRpcmVjdDoge1xuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uOiAnL1VzZXIvTG9naW4vVXNlckxvZ2luJyxcbiAgICAgICAgICAgICAgICBwZXJtYW5lbnQ6IGZhbHNlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgIHN1Yjogc2Vzc2lvbi5nZXRVc2VySWQoKSxcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gVXNlckVkaXRDYXRlZ29yeSgpIHtcbiAgICBjb25zdCBbY29weUF2YWlsYWJpbGl0eSwgc2V0Q29weUF2YWlsYWJpbGl0eV0gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSlcbiAgICBjb25zdCBbY29weVRpbWVCbG9ja2luZywgc2V0Q29weVRpbWVCbG9ja2luZ10gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSlcbiAgICBjb25zdCBbY29weVRpbWVQcmVmZXJlbmNlLCBzZXRDb3B5VGltZVByZWZlcmVuY2VdID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpXG4gICAgY29uc3QgW2NvcHlSZW1pbmRlcnMsIHNldENvcHlSZW1pbmRlcnNdID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpXG4gICAgY29uc3QgW2NvcHlQcmlvcml0eUxldmVsLCBzZXRDb3B5UHJpb3JpdHlMZXZlbF0gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSlcbiAgICBjb25zdCBbY29weU1vZGlmaWFibGUsIHNldENvcHlNb2RpZmlhYmxlXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKVxuICAgIGNvbnN0IFtkZWZhdWx0QXZhaWxhYmlsaXR5LCBzZXREZWZhdWx0QXZhaWxhYmlsaXR5XSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKVxuICAgIGNvbnN0IFtkZWZhdWx0VGltZUJsb2NraW5nLCBzZXREZWZhdWx0VGltZUJsb2NraW5nXSA9IHVzZVN0YXRlPERlZmF1bHRUaW1lQmxvY2tpbmdUeXBlPigpXG4gICAgY29uc3QgW2RlZmF1bHRUaW1lUHJlZmVyZW5jZSwgc2V0RGVmYXVsdFRpbWVQcmVmZXJlbmNlXSA9IHVzZVN0YXRlPERlZmF1bHRUaW1lUHJlZmVyZW5jZVR5cGVzPigpXG4gICAgY29uc3QgW2RlZmF1bHRSZW1pbmRlcnMsIHNldERlZmF1bHRSZW1pbmRlcnNdID0gdXNlU3RhdGU8bnVtYmVyW10+KClcbiAgICBjb25zdCBbZGVmYXVsdFByaW9yaXR5TGV2ZWwsIHNldERlZmF1bHRQcmlvcml0eUxldmVsXSA9IHVzZVN0YXRlPG51bWJlcj4oKVxuICAgIGNvbnN0IFtkZWZhdWx0TW9kaWZpYWJsZSwgc2V0RGVmYXVsdE1vZGlmaWFibGVdID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpXG4gICAgY29uc3QgW2NvcHlJc0JyZWFrLCBzZXRDb3B5SXNCcmVha10gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSlcbiAgICBjb25zdCBbZGVmYXVsdElzQnJlYWssIHNldERlZmF1bHRJc0JyZWFrXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKVxuICAgIGNvbnN0IFtjb2xvciwgc2V0Q29sb3JdID0gdXNlU3RhdGU8c3RyaW5nPihJTklUSUFMX0NPTE9SKVxuICAgIGNvbnN0IFtjb3B5SXNNZWV0aW5nLCBzZXRDb3B5SXNNZWV0aW5nXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKVxuICAgIGNvbnN0IFtjb3B5SXNFeHRlcm5hbE1lZXRpbmcsIHNldENvcHlJc0V4dGVybmFsTWVldGluZ10gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSlcbiAgICBjb25zdCBbZGVmYXVsdElzTWVldGluZywgc2V0RGVmYXVsdElzTWVldGluZ10gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSlcbiAgICBjb25zdCBbZGVmYXVsdElzRXh0ZXJuYWxNZWV0aW5nLCBzZXREZWZhdWx0SXNFeHRlcm5hbE1lZXRpbmddID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpXG4gICAgY29uc3QgW2RlZmF1bHRNZWV0aW5nTW9kaWZpYWJsZSwgc2V0RGVmYXVsdE1lZXRpbmdNb2RpZmlhYmxlXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKVxuICAgIGNvbnN0IFtkZWZhdWx0RXh0ZXJuYWxNZWV0aW5nTW9kaWZpYWJsZSwgc2V0RGVmYXVsdEV4dGVybmFsTWVldGluZ01vZGlmaWFibGVdID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpXG5cbiAgICBjb25zdCBbbmFtZSwgc2V0TmFtZV0gPSB1c2VTdGF0ZTxzdHJpbmc+KCcnKVxuICAgIGNvbnN0IFthY3RpdmVJbmRleCwgc2V0QWN0aXZlSW5kZXhdID0gdXNlU3RhdGU8bnVtYmVyPigwKVxuICAgIGNvbnN0IFtjb21wbGV0ZWRTdGVwLCBzZXRDb21wbGV0ZWRTdGVwXSA9IHVzZVN0YXRlPG51bWJlciB8IHVuZGVmaW5lZD4oKVxuXG4gICAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKClcbiAgICBjb25zdCB7IHN1YiwgY2xpZW50IH0gPSB1c2VBcHBDb250ZXh0KClcbiAgICBjb25zdCBjYXRlZ29yeUlkID0gcm91dGVyLnF1ZXJ5Py5jYXRlZ29yeUlkIGFzIHN0cmluZ1xuICAgIGNvbnN0IHRvYXN0ID0gdXNlVG9hc3QoKVxuICAgIFxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmIChjYXRlZ29yeUlkKSB7XG4gICAgICAgICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhdGVnb3J5ID0gYXdhaXQgZ2V0Q2F0ZWdvcnlXaXRoSWQoY2xpZW50LCBjYXRlZ29yeUlkKVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGNhdGVnb3J5LCAnY2F0ZWdvcnkgaW5zaWRlIHVzZUVmZmVjdCBvZiBVc2VyRWRpdENhdGVnb3J5JylcbiAgICAgICAgICAgICAgICBpZiAoY2F0ZWdvcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0TmFtZShjYXRlZ29yeS5uYW1lKVxuICAgICAgICAgICAgICAgICAgICBzZXRDb2xvcihjYXRlZ29yeS5jb2xvcilcbiAgICAgICAgICAgICAgICAgICAgc2V0Q29weUF2YWlsYWJpbGl0eShjYXRlZ29yeS5jb3B5QXZhaWxhYmlsaXR5KVxuICAgICAgICAgICAgICAgICAgICBzZXRDb3B5VGltZUJsb2NraW5nKGNhdGVnb3J5LmNvcHlUaW1lQmxvY2tpbmcpXG4gICAgICAgICAgICAgICAgICAgIHNldENvcHlUaW1lUHJlZmVyZW5jZShjYXRlZ29yeS5jb3B5VGltZVByZWZlcmVuY2UpXG4gICAgICAgICAgICAgICAgICAgIHNldENvcHlSZW1pbmRlcnMoY2F0ZWdvcnkuY29weVJlbWluZGVycylcbiAgICAgICAgICAgICAgICAgICAgc2V0Q29weVByaW9yaXR5TGV2ZWwoY2F0ZWdvcnkuY29weVByaW9yaXR5TGV2ZWwpXG4gICAgICAgICAgICAgICAgICAgIHNldENvcHlNb2RpZmlhYmxlKGNhdGVnb3J5LmNvcHlNb2RpZmlhYmxlKVxuICAgICAgICAgICAgICAgICAgICBzZXREZWZhdWx0QXZhaWxhYmlsaXR5KGNhdGVnb3J5LmRlZmF1bHRBdmFpbGFiaWxpdHkpXG4gICAgICAgICAgICAgICAgICAgIHNldERlZmF1bHRUaW1lQmxvY2tpbmcoY2F0ZWdvcnkuZGVmYXVsdFRpbWVCbG9ja2luZylcbiAgICAgICAgICAgICAgICAgICAgc2V0RGVmYXVsdFRpbWVQcmVmZXJlbmNlKGNhdGVnb3J5LmRlZmF1bHRUaW1lUHJlZmVyZW5jZSlcbiAgICAgICAgICAgICAgICAgICAgc2V0RGVmYXVsdFJlbWluZGVycyhjYXRlZ29yeS5kZWZhdWx0UmVtaW5kZXJzKVxuICAgICAgICAgICAgICAgICAgICBzZXREZWZhdWx0UHJpb3JpdHlMZXZlbChjYXRlZ29yeS5kZWZhdWx0UHJpb3JpdHlMZXZlbClcbiAgICAgICAgICAgICAgICAgICAgc2V0RGVmYXVsdE1vZGlmaWFibGUoY2F0ZWdvcnkuZGVmYXVsdE1vZGlmaWFibGUpXG4gICAgICAgICAgICAgICAgICAgIHNldENvcHlJc0JyZWFrKGNhdGVnb3J5LmNvcHlJc0JyZWFrKVxuICAgICAgICAgICAgICAgICAgICBzZXREZWZhdWx0SXNCcmVhayhjYXRlZ29yeS5kZWZhdWx0SXNCcmVhaylcbiAgICAgICAgICAgICAgICAgICAgc2V0Q29weUlzTWVldGluZyhjYXRlZ29yeS5jb3B5SXNNZWV0aW5nKVxuICAgICAgICAgICAgICAgICAgICBzZXRDb3B5SXNFeHRlcm5hbE1lZXRpbmcoY2F0ZWdvcnkuY29weUlzRXh0ZXJuYWxNZWV0aW5nKVxuICAgICAgICAgICAgICAgICAgICBzZXREZWZhdWx0SXNNZWV0aW5nKGNhdGVnb3J5LmRlZmF1bHRJc01lZXRpbmcpXG4gICAgICAgICAgICAgICAgICAgIHNldERlZmF1bHRJc0V4dGVybmFsTWVldGluZyhjYXRlZ29yeS5kZWZhdWx0SXNFeHRlcm5hbE1lZXRpbmcpXG4gICAgICAgICAgICAgICAgICAgIHNldERlZmF1bHRNZWV0aW5nTW9kaWZpYWJsZShjYXRlZ29yeS5kZWZhdWx0TWVldGluZ01vZGlmaWFibGUpXG4gICAgICAgICAgICAgICAgICAgIHNldERlZmF1bHRFeHRlcm5hbE1lZXRpbmdNb2RpZmlhYmxlKGNhdGVnb3J5LmRlZmF1bHRFeHRlcm5hbE1lZXRpbmdNb2RpZmlhYmxlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKClcbiAgICAgICAgfVxuICAgIH0sIFtjYXRlZ29yeUlkLCBjbGllbnRdKVxuICAgIFxuXG4gICAgY29uc3QgdXBkYXRlQ2F0ZWdvcnkgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoIWNhdGVnb3J5SWQgfHwgIWNsaWVudCkge1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdDYXRlZ29yeSA9IGF3YWl0IGdldENhdGVnb3J5V2l0aElkKGNsaWVudCwgY2F0ZWdvcnlJZClcbiAgICAgICAgICAgIGlmICghZXhpc3RpbmdDYXRlZ29yeSkge1xuICAgICAgICAgICAgICAgIHRvYXN0KHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAnZXJyb3InLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0Vycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdFcnJvciB1cGRhdGluZyB0YWcnLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogOTAwMCxcbiAgICAgICAgICAgICAgICAgICAgaXNDbG9zYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc29sZS5sb2coY2F0ZWdvcnlJZCwgbmFtZSwgY29weUF2YWlsYWJpbGl0eSwgY29weVRpbWVCbG9ja2luZyxcbiAgICAgICAgICAgIGNvcHlUaW1lUHJlZmVyZW5jZSwgY29weVJlbWluZGVycywgY29weVByaW9yaXR5TGV2ZWwsIGNvcHlNb2RpZmlhYmxlLCBkZWZhdWx0QXZhaWxhYmlsaXR5LFxuICAgICAgICAgICAgZGVmYXVsdFRpbWVCbG9ja2luZywgZGVmYXVsdFRpbWVQcmVmZXJlbmNlLCBkZWZhdWx0UmVtaW5kZXJzLCBkZWZhdWx0UHJpb3JpdHlMZXZlbCwgXG4gICAgICAgICAgICBkZWZhdWx0TW9kaWZpYWJsZSwgY29weUlzQnJlYWssIGRlZmF1bHRJc0JyZWFrLCBjb3B5SXNNZWV0aW5nLCBjb3B5SXNFeHRlcm5hbE1lZXRpbmcsXG4gICAgICAgICAgICBjb2xvcixcbiAgICAgICAgICAgICAgICBkZWZhdWx0SXNNZWV0aW5nLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRJc0V4dGVybmFsTWVldGluZyxcbiAgICAgICAgICAgICAgICBkZWZhdWx0TWVldGluZ01vZGlmaWFibGUsXG4gICAgICAgICAgICAgICAgZGVmYXVsdEV4dGVybmFsTWVldGluZ01vZGlmaWFibGUsIGAgY2F0ZWdvcnlJZCwgbmFtZSwgY29weUF2YWlsYWJpbGl0eSwgY29weVRpbWVCbG9ja2luZyxcbiAgICAgICAgICAgIGNvcHlUaW1lUHJlZmVyZW5jZSwgY29weVJlbWluZGVycywgY29weVByaW9yaXR5TGV2ZWwsIGNvcHlNb2RpZmlhYmxlLCBkZWZhdWx0QXZhaWxhYmlsaXR5LFxuICAgICAgICAgICAgZGVmYXVsdFRpbWVCbG9ja2luZywgZGVmYXVsdFRpbWVQcmVmZXJlbmNlLCBkZWZhdWx0UmVtaW5kZXJzLCBkZWZhdWx0UHJpb3JpdHlMZXZlbCwgXG4gICAgICAgICAgICBkZWZhdWx0TW9kaWZpYWJsZSwgY29weUlzQnJlYWssIGRlZmF1bHRJc0JyZWFrLCBjb3B5SXNNZWV0aW5nLCBjb3B5SXNFeHRlcm5hbE1lZXRpbmcsXG4gICAgICAgICAgICBjb2xvcixcbiAgICAgICAgICAgICAgICBkZWZhdWx0SXNNZWV0aW5nLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRJc0V4dGVybmFsTWVldGluZyxcbiAgICAgICAgICAgICAgICBkZWZhdWx0TWVldGluZ01vZGlmaWFibGUsXG4gICAgICAgICAgICAgICAgZGVmYXVsdEV4dGVybmFsTWVldGluZ01vZGlmaWFibGUsIGluc2lkZSB1cGRhdGVDYXRlZ29yeSBmb3IgVXNlckVkaXRDYXRlZ29yeWApXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1cGRhdGVDYXRlZ29yeUhlbHBlcihcbiAgICAgICAgICAgICAgICBjbGllbnQsIFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5SWQsXG4gICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICBjb3B5QXZhaWxhYmlsaXR5LFxuICAgICAgICAgICAgICAgIGNvcHlUaW1lQmxvY2tpbmcsXG4gICAgICAgICAgICAgICAgY29weVRpbWVQcmVmZXJlbmNlLFxuICAgICAgICAgICAgICAgIGNvcHlSZW1pbmRlcnMsXG4gICAgICAgICAgICAgICAgY29weVByaW9yaXR5TGV2ZWwsXG4gICAgICAgICAgICAgICAgY29weU1vZGlmaWFibGUsXG4gICAgICAgICAgICAgICAgZGVmYXVsdEF2YWlsYWJpbGl0eSxcbiAgICAgICAgICAgICAgICBkZWZhdWx0VGltZUJsb2NraW5nLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRUaW1lUHJlZmVyZW5jZSxcbiAgICAgICAgICAgICAgICBkZWZhdWx0UmVtaW5kZXJzLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRQcmlvcml0eUxldmVsLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRNb2RpZmlhYmxlLFxuICAgICAgICAgICAgICAgIGNvcHlJc0JyZWFrLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRJc0JyZWFrLFxuICAgICAgICAgICAgICAgIGNvbG9yLFxuICAgICAgICAgICAgICAgIGNvcHlJc01lZXRpbmcsXG4gICAgICAgICAgICAgICAgY29weUlzRXh0ZXJuYWxNZWV0aW5nLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRJc01lZXRpbmcsXG4gICAgICAgICAgICAgICAgZGVmYXVsdElzRXh0ZXJuYWxNZWV0aW5nLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRNZWV0aW5nTW9kaWZpYWJsZSxcbiAgICAgICAgICAgICAgICBkZWZhdWx0RXh0ZXJuYWxNZWV0aW5nTW9kaWZpYWJsZSxcbiAgICAgICAgICAgIClcblxuICAgICAgICAgICAgY29uc29sZS5sb2cocmVzdWx0LCAnIHJlc3VsdCBhZnRlciB1cGRhdGUgZm9yIGNhdGVnb3J5JylcbiAgICAgICAgICAgIHRvYXN0KHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ1RhZyB1cGRhdGVkJyxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogYCR7bmFtZX0gdXBkYXRlZCBzdWNjZXNzZnVsbHlgLFxuICAgICAgICAgICAgICAgIHN0YXR1czogJ3N1Y2Nlc3MnLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiA5MDAwLFxuICAgICAgICAgICAgICAgIGlzQ2xvc2FibGU6IHRydWUsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgcm91dGVyLnB1c2goeyBwYXRobmFtZTogJy9TZXR0aW5ncy9Vc2VyRWRpdENhdGVnb3JpZXMnLCBxdWVyeTogeyBpc1VwZGF0ZTogdXVpZCgpIH19KVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlLCAnIGVycm9yIGZvciB1cGRhdGVDYXRlZ29yeSBpbnNpZGUgVXNlckVkaXRDYXRlZ29yeScpXG4gICAgICAgICAgICB0b2FzdCh7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiAnZXJyb3InLFxuICAgICAgICAgICAgICAgIHRpdGxlOiAnRXJyb3InLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRXJyb3IgdXBkYXRpbmcgdGFnJyxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogOTAwMCxcbiAgICAgICAgICAgICAgICBpc0Nsb3NhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IG9uQWN0aXZlSW5kZXhDaGFuZ2VkID0gKGluZGV4OiBudW1iZXIpID0+IHNldEFjdGl2ZUluZGV4KGluZGV4KVxuICAgIFxuICAgIGNvbnN0IGdvVG9QcmV2U3RlcCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgcHJldkFjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXhcbiAgICAgICAgY29uc3QgbmV3QWN0aXZlSW5kZXggPSBwcmV2QWN0aXZlSW5kZXggPT09IDAgPyAwIDogcHJldkFjdGl2ZUluZGV4IC0gMVxuICAgICAgICBzZXRBY3RpdmVJbmRleChuZXdBY3RpdmVJbmRleClcbiAgICB9XG5cbiAgICBjb25zdCByZW5kZXJQcmV2QnV0dG9uID0gKCkgPT4ge1xuICAgICAgICBpZiAoYWN0aXZlSW5kZXggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiA8Qm94IHB0PXt7IHBob25lOiAnbScsIHRhYmxldDogJ3MnIH19IC8+XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPEJveCBtbD17eyBwaG9uZTogJ3MnLCB0YWJsZXQ6ICdtJyB9fSBtYj17eyBwaG9uZTogJ3MnLCB0YWJsZXQ6ICdtJyB9fT5cbiAgICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e2dvVG9QcmV2U3RlcH0+XG4gICAgICAgICAgICAgICAgICAgIEJhY2tcbiAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvQm94PlxuICAgICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgZ29Ub05leHRTdGVwID0gKCkgPT4ge1xuICAgICAgICBcbiAgICAgICAgY29uc3QgcHJldkFjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXhcbiAgICAgICAgY29uc3QgcHJldkNvbXBsZXRlZFN0ZXAgPSBjb21wbGV0ZWRTdGVwXG5cbiAgICAgICAgaWYgKHByZXZBY3RpdmVJbmRleCA9PT0gMTApIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG5ld0FjdGl2ZUluZGV4ID0gcHJldkFjdGl2ZUluZGV4ICsgMVxuXG4gICAgICAgIGlmICghcHJldkNvbXBsZXRlZFN0ZXAgfHwgKHByZXZDb21wbGV0ZWRTdGVwIDwgcHJldkFjdGl2ZUluZGV4KSkge1xuICAgICAgICAgICAgY29uc3QgbmV3Q29tcGxldGVkU3RlcCA9IHByZXZBY3RpdmVJbmRleFxuICAgICAgICAgICAgc2V0Q29tcGxldGVkU3RlcChuZXdDb21wbGV0ZWRTdGVwKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5ld0FjdGl2ZUluZGV4ICE9PSBwcmV2QWN0aXZlSW5kZXgpIHtcbiAgICAgICAgICAgIHNldEFjdGl2ZUluZGV4KG5ld0FjdGl2ZUluZGV4KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcmVuZGVyTmV4dEJ1dHRvbiA9ICgpID0+IHtcbiAgICAgICAgaWYgKGFjdGl2ZUluZGV4ID09PSA5KSB7XG4gICAgICAgICAgICByZXR1cm4gPEJveCBwdD17eyBwaG9uZTogJ20nLCB0YWJsZXQ6ICdzJyB9fSBtYj17eyBwaG9uZTogJ3MnLCB0YWJsZXQ6ICdtJyB9fSAvPlxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxCb3ggbXI9e3sgcGhvbmU6ICdzJywgdGFibGV0OiAnbScgfX0gbWI9e3sgcGhvbmU6ICdzJywgdGFibGV0OiAnbScgfX0+XG4gICAgICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXtnb1RvTmV4dFN0ZXB9PlxuICAgICAgICAgICAgICAgICAgICBOZXh0XG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICA8L0JveD5cbiAgICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IHJlbmRlckN1cnJlbnRTdGVwID0gKCkgPT4ge1xuICAgICAgICBcbiAgICAgICAgc3dpdGNoIChhY3RpdmVJbmRleCkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIDxCb3ggc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fSBmbGV4PXsxfSBhbGlnbkl0ZW1zPVwiY2VudGVyXCIganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxFZGl0Q2F0ZWdvcnlTdGVwMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9e25hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UGFyZW50TmFtZT17c2V0TmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5QXZhaWxhYmlsaXR5PXtjb3B5QXZhaWxhYmlsaXR5fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFBhcmVudENvcHlBdmFpbGFiaWxpdHk9e3NldENvcHlBdmFpbGFiaWxpdHl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29weVRpbWVCbG9ja2luZz17Y29weVRpbWVCbG9ja2luZ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRQYXJlbnRDb3B5VGltZUJsb2NraW5nPXtzZXRDb3B5VGltZUJsb2NraW5nfVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCb3ggc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fSBmbGV4RGlyZWN0aW9uPVwicm93XCIganVzdGlmeUNvbnRlbnQ9XCJzcGFjZS1iZXR3ZWVuXCIgYWxpZ25JdGVtcz1cImNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Qm94IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyZW5kZXJOZXh0QnV0dG9uKCl9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIDxCb3ggc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fSBmbGV4PXsxfSBhbGlnbkl0ZW1zPVwiY2VudGVyXCIganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxFZGl0Q2F0ZWdvcnlTdGVwMWFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5VGltZVByZWZlcmVuY2U9e2NvcHlUaW1lUHJlZmVyZW5jZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRQYXJlbnRDb3B5VGltZVByZWZlcmVuY2U9e3NldENvcHlUaW1lUHJlZmVyZW5jZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5UmVtaW5kZXJzPXtjb3B5UmVtaW5kZXJzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFBhcmVudENvcHlSZW1pbmRlcnM9e3NldENvcHlSZW1pbmRlcnN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29weVByaW9yaXR5TGV2ZWw9e2NvcHlQcmlvcml0eUxldmVsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFBhcmVudENvcHlQcmlvcml0eUxldmVsPXtzZXRDb3B5UHJpb3JpdHlMZXZlbH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Qm94IHN0eWxlPXt7IHdpZHRoOiAnMTAwJScgfX0gZmxleERpcmVjdGlvbj1cInJvd1wiIGp1c3RpZnlDb250ZW50PVwic3BhY2UtYmV0d2VlblwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cmVuZGVyUHJldkJ1dHRvbigpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyZW5kZXJOZXh0QnV0dG9uKCl9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG5cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICBjYXNlIDI6IFxuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIDxCb3ggc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fSBmbGV4PXsxfSBhbGlnbkl0ZW1zPVwiY2VudGVyXCIganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxFZGl0Q2F0ZWdvcnlTdGVwMWJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5TW9kaWZpYWJsZT17Y29weU1vZGlmaWFibGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UGFyZW50Q29weU1vZGlmaWFibGU9e3NldENvcHlNb2RpZmlhYmxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCb3ggc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fSBmbGV4RGlyZWN0aW9uPVwicm93XCIganVzdGlmeUNvbnRlbnQ9XCJzcGFjZS1iZXR3ZWVuXCIgYWxpZ25JdGVtcz1cImNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyZW5kZXJQcmV2QnV0dG9uKCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3JlbmRlck5leHRCdXR0b24oKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgPEJveCBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19IGZsZXg9ezF9IGFsaWduSXRlbXM9XCJjZW50ZXJcIiBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEVkaXRDYXRlZ29yeVN0ZXAyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdEF2YWlsYWJpbGl0eT17ZGVmYXVsdEF2YWlsYWJpbGl0eX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRQYXJlbnREZWZhdWx0QXZhaWxhYmlsaXR5PXtzZXREZWZhdWx0QXZhaWxhYmlsaXR5fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRUaW1lQmxvY2tpbmc9e2RlZmF1bHRUaW1lQmxvY2tpbmd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UGFyZW50RGVmYXVsdFRpbWVCbG9ja2luZz17c2V0RGVmYXVsdFRpbWVCbG9ja2luZ31cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Qm94IHN0eWxlPXt7IHdpZHRoOiAnMTAwJScgfX0gZmxleERpcmVjdGlvbj1cInJvd1wiIGp1c3RpZnlDb250ZW50PVwic3BhY2UtYmV0d2VlblwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cmVuZGVyUHJldkJ1dHRvbigpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyZW5kZXJOZXh0QnV0dG9uKCl9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIDxCb3ggc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fSBmbGV4PXsxfSBhbGlnbkl0ZW1zPVwiY2VudGVyXCIganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxFZGl0Q2F0ZWdvcnlTdGVwM1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRQcmlvcml0eUxldmVsPXtkZWZhdWx0UHJpb3JpdHlMZXZlbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRQYXJlbnREZWZhdWx0UHJpb3JpdHlMZXZlbD17c2V0RGVmYXVsdFByaW9yaXR5TGV2ZWx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdE1vZGlmaWFibGU9e2RlZmF1bHRNb2RpZmlhYmxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFBhcmVudERlZmF1bHRNb2RpZmlhYmxlPXtzZXREZWZhdWx0TW9kaWZpYWJsZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Qm94IHN0eWxlPXt7IHdpZHRoOiAnMTAwJScgfX0gZmxleERpcmVjdGlvbj1cInJvd1wiIGp1c3RpZnlDb250ZW50PVwic3BhY2UtYmV0d2VlblwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cmVuZGVyUHJldkJ1dHRvbigpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyZW5kZXJOZXh0QnV0dG9uKCl9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIDxCb3ggc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fSBmbGV4PXsxfSBhbGlnbkl0ZW1zPVwiY2VudGVyXCIganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxFZGl0Q2F0ZWdvcnlTdGVwNFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRUaW1lUHJlZmVyZW5jZXM9e2RlZmF1bHRUaW1lUHJlZmVyZW5jZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRQYXJlbnREZWZhdWx0VGltZVByZWZlcmVuY2U9e3NldERlZmF1bHRUaW1lUHJlZmVyZW5jZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Qm94IHN0eWxlPXt7IHdpZHRoOiAnMTAwJScgfX0gZmxleERpcmVjdGlvbj1cInJvd1wiIGp1c3RpZnlDb250ZW50PVwic3BhY2UtYmV0d2VlblwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cmVuZGVyUHJldkJ1dHRvbigpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyZW5kZXJOZXh0QnV0dG9uKCl9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIDxCb3ggc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fSBmbGV4PXsxfSBhbGlnbkl0ZW1zPVwiY2VudGVyXCIganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxFZGl0Q2F0ZWdvcnlTdGVwNVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRSZW1pbmRlcnM9e2RlZmF1bHRSZW1pbmRlcnMgYXMgRGVmYXVsdFJlbWluZGVyc1R5cGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UGFyZW50RGVmYXVsdFJlbWluZGVycz17c2V0RGVmYXVsdFJlbWluZGVycyBhcyBEaXNwYXRjaDxTZXRTdGF0ZUFjdGlvbjxEZWZhdWx0UmVtaW5kZXJzVHlwZT4+fVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCb3ggc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fSBmbGV4RGlyZWN0aW9uPVwicm93XCIganVzdGlmeUNvbnRlbnQ9XCJzcGFjZS1iZXR3ZWVuXCIgYWxpZ25JdGVtcz1cImNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyZW5kZXJQcmV2QnV0dG9uKCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3JlbmRlck5leHRCdXR0b24oKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICA8L0JveD4gXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgY2FzZSA3OiBcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICA8Qm94IHN0eWxlPXt7IHdpZHRoOiAnMTAwJScgfX0gZmxleD17MX0gYWxpZ25JdGVtcz1cImNlbnRlclwiIGp1c3RpZnlDb250ZW50PVwiY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8RWRpdENhdGVnb3J5U3RlcDVhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29weUlzQnJlYWs9e2NvcHlJc0JyZWFrfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFBhcmVudENvcHlJc0JyZWFrPXtzZXRDb3B5SXNCcmVha31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0SXNCcmVhaz17ZGVmYXVsdElzQnJlYWt9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UGFyZW50RGVmYXVsdElzQnJlYWs9e3NldERlZmF1bHRJc0JyZWFrfVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCb3ggc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fSBmbGV4RGlyZWN0aW9uPVwicm93XCIganVzdGlmeUNvbnRlbnQ9XCJzcGFjZS1iZXR3ZWVuXCIgYWxpZ25JdGVtcz1cImNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyZW5kZXJQcmV2QnV0dG9uKCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3JlbmRlck5leHRCdXR0b24oKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgPEJveCBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19IGZsZXg9ezF9IGFsaWduSXRlbXM9XCJjZW50ZXJcIiBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEVkaXRDYXRlZ29yeVN0ZXA2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9e2NvbG9yfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFBhcmVudENvbG9yPXtzZXRDb2xvcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5SXNNZWV0aW5nPXtjb3B5SXNNZWV0aW5nfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFBhcmVudENvcHlJc01lZXRpbmc9e3NldENvcHlJc01lZXRpbmd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29weUlzRXh0ZXJuYWxNZWV0aW5nPXtjb3B5SXNFeHRlcm5hbE1lZXRpbmd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UGFyZW50Q29weUlzRXh0ZXJuYWxNZWV0aW5nPXtzZXRDb3B5SXNFeHRlcm5hbE1lZXRpbmd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdElzTWVldGluZz17ZGVmYXVsdElzTWVldGluZ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRQYXJlbnREZWZhdWx0SXNNZWV0aW5nPXtzZXREZWZhdWx0SXNNZWV0aW5nfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRJc0V4dGVybmFsTWVldGluZz17ZGVmYXVsdElzRXh0ZXJuYWxNZWV0aW5nfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFBhcmVudERlZmF1bHRJc0V4dGVybmFsTWVldGluZz17c2V0RGVmYXVsdElzRXh0ZXJuYWxNZWV0aW5nfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRNZWV0aW5nTW9kaWZpYWJsZT17ZGVmYXVsdE1lZXRpbmdNb2RpZmlhYmxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFBhcmVudERlZmF1bHRNZWV0aW5nTW9kaWZpYWJsZT17c2V0RGVmYXVsdE1lZXRpbmdNb2RpZmlhYmxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRFeHRlcm5hbE1lZXRpbmdNb2RpZmlhYmxlPXtkZWZhdWx0RXh0ZXJuYWxNZWV0aW5nTW9kaWZpYWJsZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRQYXJlbnREZWZhdWx0RXh0ZXJuYWxNZWV0aW5nTW9kaWZpYWJsZT17c2V0RGVmYXVsdEV4dGVybmFsTWVldGluZ01vZGlmaWFibGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJveCBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19IGZsZXhEaXJlY3Rpb249XCJyb3dcIiBqdXN0aWZ5Q29udGVudD1cInNwYWNlLWJldHdlZW5cIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3JlbmRlclByZXZCdXR0b24oKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cmVuZGVyTmV4dEJ1dHRvbigpfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICA8Qm94IHN0eWxlPXt7IHdpZHRoOiAnMTAwJScgfX0gYWxpZ25JdGVtcz1cImNlbnRlclwiIGp1c3RpZnlDb250ZW50PVwiY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Qm94IHN0eWxlPXt7IHdpZHRoOiAnMTAwJScgfX0gYWxpZ25JdGVtcz1cImNlbnRlclwiIGp1c3RpZnlDb250ZW50PVwiY2VudGVyXCIgbWluSGVpZ2h0PVwiNzB2aFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCb3ggc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fSBwPXt7IHBob25lOiAncycsIHRhYmxldDogJ20nIH19IGp1c3RpZnlDb250ZW50PVwiY2VudGVyXCIgYWxpZ25JdGVtcz1cImNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dCB2YXJpYW50PVwic3ViaGVhZGVyTm9ybWFsXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCb3gganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCb3ggcHQ9e3sgcGhvbmU6ICdtJywgdGFibGV0OiAncycgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e3VwZGF0ZUNhdGVnb3J5fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJveCBmbGV4RGlyZWN0aW9uPVwicm93XCIganVzdGlmeUNvbnRlbnQ9XCJmbGV4LXN0YXJ0XCIgd2lkdGg9XCIxMDAlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3JlbmRlclByZXZCdXR0b24oKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgPEJveCBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxSZWd1bGFyQ2FyZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dCB2YXJpYW50PVwiaGVhZGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9vcHMuLi4gc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1JlZ3VsYXJDYXJkPlxuICAgICAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBcbiAgICByZXR1cm4gKFxuICAgICAgICA8Qm94IHN0eWxlPXt7IHdpZHRoOiAnMTAwJScgfX0gZmxleD17MX0gYWxpZ25JdGVtcz1cImNlbnRlclwiIGp1c3RpZnlDb250ZW50PVwiY2VudGVyXCI+XG4gICAgICAgICAgICAgPFdpemFyZFxuICAgICAgICAgICAgICAgIGl0ZW1zPXtbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdTdGVwIDEnLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnU3RlcCAyJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IDIsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ1N0ZXAgMycsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdTdGVwIDQnLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IDQsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ1N0ZXAgNScsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogNSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnU3RlcCA2JyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IDYsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ1N0ZXAgNycsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogNyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnU3RlcCA4JyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiA4LFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdTdGVwIDknLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogOSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF19XG5cbiAgICAgICAgICAgICAgICBjb21wbGV0ZWQ9e2NvbXBsZXRlZFN0ZXB9XG4gICAgICAgICAgICAgICAgYWN0aXZlSW5kZXg9e2FjdGl2ZUluZGV4fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIHtyZW5kZXJDdXJyZW50U3RlcCgpfVxuICAgICAgICA8L0JveD5cbiAgICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IFVzZXJFZGl0Q2F0ZWdvcnlcbiJdfQ==