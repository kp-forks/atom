"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const Switch_1 = __importDefault(require("@components/Switch"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const theme_1 = require("@lib/theme/theme");
const date_utils_1 = require("@lib/date-utils");
const AutopilotHelper_1 = require("@lib/Settings/Autopilot/AutopilotHelper");
const uuid_1 = require("uuid");
const react_3 = require("@chakra-ui/react");
const themed_1 = require("@rneui/themed");
const Button_1 = __importDefault(require("@components/Button"));
const user_context_1 = require("@lib/user-context");
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("@config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function UserViewAutopilot() {
    const [isAutopilot, setIsAutopilot] = (0, react_1.useState)(false);
    const [isConfirmAutopilot, setIsConfirmAutopilot] = (0, react_1.useState)(false);
    const [isCancelAutopilot, setIsCancelAutopilot] = (0, react_1.useState)(false);
    const { sub, client } = (0, user_context_1.useAppContext)();
    const userId = sub;
    const toast = (0, react_3.useToast)();
    console.log(userId, ' userId');
    (0, react_1.useEffect)(() => {
        (async () => {
            try {
                const autopilots = await (0, AutopilotHelper_1.listAutopilotsByUserId)(client, userId);
                if (autopilots?.length > 0) {
                    setIsAutopilot(true);
                    // setEventIds(autopilots?.map(a => a?.id))
                }
            }
            catch (e) {
                console.log(e, ' unable to get autopilot values');
            }
        })();
    }, [client, userId]);
    const activateAutopilot = async () => {
        try {
            // prod
            const startDate = (0, date_utils_1.dayjs)().add(1, 'd').format();
            // dev
            // const startDate = dayjs().format()
            const scheduleAt = (0, date_utils_1.dayjs)(startDate).format();
            const timezone = date_utils_1.dayjs.tz.guess();
            const bodyFeaturesApply = {
                userId,
                windowStartDate: startDate,
                windowEndDate: (0, date_utils_1.dayjs)(startDate).add(6, 'd').format(),
                timezone,
            };
            const autopilotFeaturesApply = {
                id: (0, uuid_1.v4)(),
                userId,
                scheduleAt,
                timezone,
                payload: bodyFeaturesApply,
                updatedAt: (0, date_utils_1.dayjs)().format(),
                createdDate: (0, date_utils_1.dayjs)().format(),
            };
            await (0, AutopilotHelper_1.triggerAddDailyFeaturesApplyUrl)(autopilotFeaturesApply, bodyFeaturesApply);
        }
        catch (e) {
            console.log(e, ' unable to activate autopilot');
        }
    };
    const deactivateAutopilot = async () => {
        try {
            const autopilots = await (0, AutopilotHelper_1.listAutopilotsByUserId)(client, userId);
            console.log(autopilots, ' autopilots');
            for (const autopilot of autopilots) {
                await (0, AutopilotHelper_1.deleteScheduledEvent)(autopilot?.id);
            }
            await (0, AutopilotHelper_1.deleteAutopilotsGivenUserId)(client, userId);
        }
        catch (e) {
            console.log(e, ' unable to deactivate autopilot');
        }
    };
    const showConfirm = () => setIsConfirmAutopilot(true);
    const hideConfirm = () => {
        setIsConfirmAutopilot(false);
    };
    const showCancel = () => setIsCancelAutopilot(true);
    function hideCancel() {
        setIsCancelAutopilot(false);
    }
    const enableAutopilot = async () => {
        try {
            await activateAutopilot();
            hideConfirm();
            toast({
                status: 'success',
                title: 'Activated Autopilot',
                description: 'You have successfully activated autopilot. It will start running tomorrow in AM.',
                duration: 9000,
                isClosable: true,
            });
        }
        catch (e) {
            console.log(e, ' unable to enable autopilot');
            hideConfirm();
            setIsAutopilot(false);
            toast({
                status: 'error',
                title: 'Oops...',
                description: 'Something went wrong. Please let us know so we can look under the hood.',
                duration: 9000,
                isClosable: true,
            });
        }
    };
    const disableAutopilot = async () => {
        try {
            await deactivateAutopilot();
            hideCancel();
            setIsAutopilot(false);
            toast({
                status: 'info',
                title: 'Deactivated Autopilot',
                description: 'You have deactivated Autopilot. Your calendar will no longer be managed automagically',
                duration: 9000,
                isClosable: true,
            });
        }
        catch (e) {
            console.log(e, ' unable to disable autopilot');
            hideCancel();
            toast({
                status: 'error',
                title: 'Oops...',
                description: 'Something went wrong. Please let us know so we can look under the hood.',
                duration: 9000,
                isClosable: true,
            });
        }
    };
    const onChangeAutopilot = (value) => {
        if (value) {
            setIsAutopilot(value);
            showConfirm();
        }
        else {
            setIsAutopilot(value);
            showCancel();
        }
    };
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "flex-start", alignItems: "center", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { p: "m", mt: "l", mb: "m", borderRadius: "md", backgroundColor: "infoBlockBackground", width: { phone: '90%', tablet: '80%' }, alignItems: "center", children: (0, jsx_runtime_1.jsxs)(Text_1.default, { variant: "body", textAlign: "center", color: "infoBlockText", children: ["Enable Autopilot to have Atomic automatically plan and optimize your schedule daily. It can apply your trained event templates and smart tags to new and existing events, helping to keep your calendar organized according to your preferences.", (0, jsx_runtime_1.jsxs)(Text_1.default, { variant: "link", onPress: () => router.push('https://docs.atomiclife.app/docs/features/autopilot'), children: [' ', "Discover Autopilot strategies"] })] }) }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, minHeight: "60vh", children: [" ", (0, jsx_runtime_1.jsxs)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, flexDirection: "row", justifyContent: "space-between", children: [(0, jsx_runtime_1.jsx)(react_2.Tooltip, { hasArrow: true, label: 'Autopilot will apply features & run planner once every day before work start time', bg: 'purple.700', color: 'white', children: (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", children: isAutopilot
                                        ? ((0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", pr: { phone: 's', tablet: 'm' }, children: "Autopilot Active" })) : ((0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", pr: { phone: 's', tablet: 'm' }, children: "Autopilot Inactive" })) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pl: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: isAutopilot, onValueChange: onChangeAutopilot, style: { marginBottom: 20 } }) })] })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { children: [(0, jsx_runtime_1.jsx)(themed_1.Overlay, { overlayStyle: { backgroundColor: theme_1.palette.white, justifyContent: 'center', alignItems: 'center' }, isVisible: isConfirmAutopilot, onBackdropPress: hideConfirm, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", alignItems: "center", style: { width: '80%', backgroundColor: theme_1.palette.white }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Do you want to activate Autopilot?" }) }), (0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: enableAutopilot, children: "Okay" }) }), (0, jsx_runtime_1.jsx)(Button_1.default, { cancel: true, onClick: hideConfirm, children: "Cancel" })] })] }) }), (0, jsx_runtime_1.jsx)(themed_1.Overlay, { overlayStyle: { backgroundColor: theme_1.palette.white, justifyContent: 'center', alignItems: 'center' }, isVisible: isCancelAutopilot, onBackdropPress: hideCancel, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", alignItems: "center", style: { width: '80%', backgroundColor: theme_1.palette.white }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Do you want to disable Autopilot?" }) }), (0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: disableAutopilot, children: "Okay" }) }), (0, jsx_runtime_1.jsx)(Button_1.default, { disabled: true, onClick: hideCancel, children: "Cancel" })] })] }) })] })] }));
}
exports.default = UserViewAutopilot;
//# sourceMappingURL=data:application/json;base64,