"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const Switch_1 = __importDefault(require("@components/Switch"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("@config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function EditCategoryStep2(props) {
    const [copyTimePreference, setCopyTimePreference] = (0, react_1.useState)(props?.copyTimePreference ?? false);
    const [copyReminders, setCopyReminders] = (0, react_1.useState)(props?.copyReminders ?? false);
    const [copyPriorityLevel, setCopyPriorityLevel] = (0, react_1.useState)(props?.copyPriorityLevel ?? false);
    const [isMessage1, setIsMessage1] = (0, react_1.useState)(false);
    const [isMessage2, setIsMessage2] = (0, react_1.useState)(false);
    const setParentCopyTimePreference = props?.setParentCopyTimePreference;
    const setParentCopyReminders = props?.setParentCopyReminders;
    const setParentCopyPriorityLevel = props?.setParentCopyPriorityLevel;
    (0, react_1.useEffect)(() => {
        if (copyTimePreference !== props?.copyTimePreference) {
            setCopyTimePreference(props?.copyTimePreference ?? false);
        }
        if (copyReminders !== props?.copyReminders) {
            setCopyReminders(props?.copyReminders ?? false);
        }
    }, [props?.copyTimePreference, props?.copyReminders, copyTimePreference, copyReminders]);
    const changeCopyPriorityLevel = (value) => {
        setCopyPriorityLevel(value);
        setParentCopyPriorityLevel(value);
    };
    const changeCopyTimePreference = (value) => {
        setCopyTimePreference(value);
        setParentCopyTimePreference(value);
    };
    const changeCopyReminders = (value) => {
        setCopyReminders(value);
        setParentCopyReminders(value);
    };
    return ((0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsxs)("div", { className: "flex-1 flex flex-col justify-center items-center", style: { minHeight: '70vh' }, children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '90%' }, pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(react_2.Tooltip, { hasArrow: true, label: 'New events whose details are similar to this one will have their priority level set to the level found on this event. If priority changes with time, avoid enabling this feature.', bg: 'purple.700', color: 'white', children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", children: "Copy over priority level to any new events whose details are similar in context to this event? (Hint)" }) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, width: "100%", children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyPriorityLevel, onValueChange: changeCopyPriorityLevel, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '90%' }, pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Copy over time preferences to any new events whose details have similar context?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, width: "100%", children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyTimePreference, onValueChange: changeCopyTimePreference, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '90%' }, pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Copy over reminders to any new events whose details have similar context?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, width: "100%", children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyReminders, onValueChange: changeCopyReminders, style: { marginBottom: 20 } }) })] })] }) }));
}
exports.default = EditCategoryStep2;
//# sourceMappingURL=data:application/json;base64,