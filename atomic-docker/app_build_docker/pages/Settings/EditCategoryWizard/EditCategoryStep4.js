"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const io_1 = require("react-icons/io");
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const lodash_1 = __importDefault(require("lodash"));
// import DateTimePicker from 'react-datetime-picker/dist/entry.nostyle'
const react_2 = require("@chakra-ui/react");
const date_utils_1 = require("@lib/date-utils");
const date_fns_1 = require("date-fns");
const react_3 = require("@chakra-ui/react");
const RegularCard_1 = __importDefault(require("@components/RegularCard"));
const react_native_1 = require("react-native");
const theme_1 = require("@lib/theme/theme");
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("@config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
const dayOfWeekInt = [-1, 1, 2, 3, 4, 5, 6, 7];
function EditCategoryStep4(props) {
    const [defaultTimePreferences, setDefaultTimePreferences] = (0, react_1.useState)(props?.defaultTimePreferences || []);
    const [dayOfWeek, setDayOfWeek] = (0, react_1.useState)(-1);
    // const [dayOfWeekObject, setDayOfWeekObject] = useState<{label: string, value: number }>(null)
    const [startTimeRange, setStartTimeRange] = (0, react_1.useState)(new Date());
    const [endTimeRange, setEndTimeRange] = (0, react_1.useState)((0, date_utils_1.dayjs)().add(30, 'm').toDate());
    const [isStartTimeRange, setIsStartTimeRange] = (0, react_1.useState)(false);
    const [isEndTimeRange, setIsEndTimeRange] = (0, react_1.useState)(false);
    const flatlistRef = (0, react_1.useRef)();
    const toast = (0, react_3.useToast)();
    // useEffect(() => {
    //     flatlistRef?.current?.scrollToEnd({animating: true})
    // }, [defaultTimePreference?.length])
    const setParentDefaultTimePreference = props?.setParentDefaultTimePreference;
    const changeDefaultTimePreference = (value) => {
        setDefaultTimePreferences(value);
        setParentDefaultTimePreference(value);
    };
    const hideStartTimeRangePicker = () => setIsStartTimeRange(false);
    const showStartTimeRangePicker = () => setIsStartTimeRange(true);
    const hideEndTimeRangePicker = () => setIsEndTimeRange(false);
    const showEndTimeRangePicker = () => setIsEndTimeRange(true);
    const changeDayOfWeek = (item) => {
        setDayOfWeek(item);
    };
    const addItem = async () => {
        try {
            // validate startTime, endTime, eventId, and dayOfWeek
            if (!startTimeRange) {
                toast({
                    title: 'Start time is required',
                    description: 'Please select a start time',
                    status: 'error',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            if (!endTimeRange) {
                toast({
                    title: 'End time is required',
                    description: 'Please select an end time',
                    status: 'error',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            if (dayOfWeek < -1 || dayOfWeek > 7) {
                toast({
                    title: 'Day of week is required',
                    description: 'Please select a day of week',
                    status: 'error',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            // validate startTimeRange and endTimeRange
            if (startTimeRange.getTime() >= endTimeRange.getTime()) {
                toast({
                    title: 'Start time must be before end time',
                    description: 'Please select a start time before end time',
                    status: 'error',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            const timeRangeDuration = (0, date_utils_1.dayjs)(endTimeRange).diff((0, date_utils_1.dayjs)(startTimeRange), 'm');
            if (timeRangeDuration < 30) {
                toast({
                    title: 'End time must be same or longer than 30 minutes',
                    description: 'Please select a end time that is same or longer than 30 minutes',
                    status: 'error',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            const startTime = (0, date_utils_1.dayjs)(startTimeRange).format('HH:mm');
            const endTime = (0, date_utils_1.dayjs)(endTimeRange).format('HH:mm');
            const newPreferredTimeRange = {
                dayOfWeek,
                startTime,
                endTime,
            };
            const newDefaultTimePreference = (defaultTimePreferences || []).concat([newPreferredTimeRange]);
            changeDefaultTimePreference(newDefaultTimePreference);
            // clear form
            setStartTimeRange(new Date());
            setEndTimeRange((0, date_utils_1.dayjs)().add(30, 'm').toDate());
            setDayOfWeek(-1);
        }
        catch (e) {
            console.log(e, ' e unable to add item to preferred time ranges');
        }
    };
    const removeItem = async (index) => {
        try {
            // validate item
            if (!defaultTimePreferences[index]) {
                toast({
                    title: 'Item is required',
                    description: 'Please select an item',
                    status: 'error',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            const cloneDefulatTimePreferences = lodash_1.default.reverse(lodash_1.default.cloneDeep(defaultTimePreferences));
            const newdefaultTimePreference = cloneDefulatTimePreferences.filter((item, i) => i !== index);
            changeDefaultTimePreference(newdefaultTimePreference);
        }
        catch (e) {
            console.log(e, ' e unable to remove item from preferred time ranges inside editcategorystep3');
        }
    };
    const renderItem = ({ item, index }) => ((0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsxs)(RegularCard_1.default, { children: [(0, jsx_runtime_1.jsx)(Text_1.default, { pt: { phone: 'm', tablet: 's' }, variant: "optionHeader", children: (((item?.dayOfWeek === -1) || (item?.dayOfWeek === null))) ? 'Any day of week' : (0, date_utils_1.dayjs)((0, date_fns_1.setISODay)((0, date_utils_1.dayjs)().toDate(), item.dayOfWeek)).format('dddd') }), (0, jsx_runtime_1.jsxs)(Text_1.default, { pt: { phone: 'm', tablet: 's' }, variant: "optionHeader", children: [(0, date_utils_1.dayjs)(item.startTime, 'HH:mm').format('h:mm A'), ' - ', (0, date_utils_1.dayjs)(item.endTime, 'HH:mm').format('h:mm A')] }), (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: () => removeItem(index), children: (0, jsx_runtime_1.jsxs)(Text_1.default, { pt: { phone: 'm', tablet: 's' }, variant: "buttonLink", children: [(0, jsx_runtime_1.jsx)(io_1.IoIosRemoveCircleOutline, { color: theme_1.palette.pinkPrimary, name: "ios-remove-circle-outline", size: "2em" }), ' ', "Remove"] }) })] }) }));
    const timePreferenceAvailable = defaultTimePreferences?.length > 0;
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { mt: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subheader", children: "Preferred Times" }) }), (0, jsx_runtime_1.jsxs)("div", { className: "flex-1 flex flex-col justify-center items-center", style: { minHeight: '50vh' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "flex-start", style: { width: '100%' }, minHeight: "40vh", maxHeight: "40vh", children: (0, jsx_runtime_1.jsx)(react_native_1.FlatList, { style: { flex: 1 }, data: timePreferenceAvailable ? lodash_1.default.reverse(lodash_1.default.cloneDeep(defaultTimePreferences)) : null, keyExtractor: item => `${item.startTime}-${item.endTime}-${item.dayOfWeek}`, renderItem: renderItem }) }), (0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", alignItems: "flex-start", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex flex-wrap justify-center w-full", children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { pl: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "flex-start", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Start Time" }), (0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Select Time", size: "md", type: "time", onChange: (e) => {
                                                    setStartTimeRange((0, date_utils_1.dayjs)(e?.target?.value, "HH:mm").toDate());
                                                    const timeRangeDuration = (0, date_utils_1.dayjs)(endTimeRange).diff((0, date_utils_1.dayjs)(e?.target?.value), 'm');
                                                    if (timeRangeDuration < 30) {
                                                        setEndTimeRange((0, date_utils_1.dayjs)(e?.target?.value, "HH:mm").add(30, 'm').toDate());
                                                    }
                                                }, value: (0, date_utils_1.dayjs)(startTimeRange).format("HH:mm") })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { pl: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "flex-start", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "End Time" }), (0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Select Time", size: "md", type: "time", onChange: (e) => {
                                                    setEndTimeRange((0, date_utils_1.dayjs)(e?.target?.value, "HH:mm").toDate());
                                                }, value: (0, date_utils_1.dayjs)(endTimeRange).format("HH:mm") })] })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, justifyContent: "center", alignItems: "center", width: "100%", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Day Of Week" }), (0, jsx_runtime_1.jsxs)("select", { value: dayOfWeek, onChange: (e) => changeDayOfWeek(parseInt(e?.target?.value.replace(/[^0-9.]/g, ''), 10) || -1), className: "select select-primary w-full max-w-xs", children: [(0, jsx_runtime_1.jsx)("option", { disabled: true, selected: true, children: "Pick a day of the week" }), lodash_1.default.map(dayOfWeekInt, option => ((0, jsx_runtime_1.jsx)("option", { value: option, children: (option !== -1 ? (0, date_utils_1.dayjs)((0, date_fns_1.setISODay)((0, date_utils_1.dayjs)().toDate(), option)).format('dddd') : 'Any day of the week') }, option)))] })] })] })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: addItem, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", style: { width: '10%' }, children: [(0, jsx_runtime_1.jsx)(io_1.IoIosAdd, { size: "3em", color: theme_1.palette.pinkPrimary }), (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", children: "Add" })] }) }) })] }));
}
exports.default = EditCategoryStep4;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRWRpdENhdGVnb3J5U3RlcDQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJFZGl0Q2F0ZWdvcnlTdGVwNC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUEyQkEsZ0RBcUNDOztBQWhFRCxpQ0FNYztBQUVkLHVDQUFtRTtBQUNuRSxpRUFBd0M7QUFDeEMsbUVBQTBDO0FBRTFDLG9EQUFzQjtBQUN0Qix3RUFBd0U7QUFDeEUsNENBQXdDO0FBQ3hDLGdEQUF1QztBQUN2Qyx1Q0FBK0M7QUFDL0MsNENBQTJDO0FBQzNDLDBFQUFpRDtBQUNqRCwrQ0FBOEQ7QUFDOUQsNENBQTBDO0FBRzFDLHdFQUE4QztBQUM5Qyx5REFBcUQ7QUFDckQsOEVBQXFEO0FBRTlDLEtBQUssVUFBVSxrQkFBa0IsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQWlEO0lBQ2hHLDBGQUEwRjtJQUMxRixzQ0FBc0M7SUFDdEMseUVBQXlFO0lBQ3pFLDBCQUFlLENBQUMsSUFBSSxDQUFDLElBQUEsNkJBQWEsR0FBRSxDQUFDLENBQUE7SUFDckMsSUFBSSxPQUFPLENBQUE7SUFDWCxJQUFJLENBQUM7UUFDRCxPQUFPLEdBQUcsTUFBTSxpQkFBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFO1lBQ3pDLDZCQUE2QixFQUFFLEtBQUs7Z0JBQ2hDLE9BQU8sRUFBRSxDQUFBO1lBQ2IsQ0FBQztTQUNKLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFBQyxPQUFPLEdBQVEsRUFBRSxDQUFDO1FBQ2hCLElBQUksR0FBRyxDQUFDLElBQUksS0FBSyxpQkFBTyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBQy9DLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLEVBQUUsQ0FBQTtRQUMxRCxDQUFDO2FBQU0sSUFBSSxHQUFHLENBQUMsSUFBSSxLQUFLLGlCQUFPLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO1lB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QUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLElBRjVGLE1BQU0sQ0FFZ0csQ0FDOUcsQ0FBQyxJQUNELElBQ1AsSUFDQSxJQUNBLEVBQ1YsdUJBQUMsYUFBRyxJQUFFLGNBQWMsRUFBQyxRQUFRLEVBQUMsVUFBVSxFQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDLFlBQ3RFLHVCQUFDLHdCQUFTLElBQUMsT0FBTyxFQUFFLE9BQU8sWUFDdkIsd0JBQUMsYUFBRyxJQUFDLGFBQWEsRUFBQyxLQUFLLEVBQUMsY0FBYyxFQUFDLGVBQWUsRUFBQyxVQUFVLEVBQUMsUUFBUSxFQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUMsYUFDOUYsdUJBQUMsYUFBUSxJQUFDLElBQUksRUFBQyxLQUFLLEVBQUMsS0FBSyxFQUFFLGVBQU8sQ0FBQyxXQUFXLEdBQUksRUFDbkQsdUJBQUMsY0FBSSxJQUFDLE9BQU8sRUFBQyxZQUFZLG9CQUVuQixJQUNMLEdBQ0UsR0FDVixJQUNKLENBQ1QsQ0FBQTtBQUVMLENBQUM7QUFFRCxrQkFBZSxpQkFBaUIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwge1xuICB1c2VTdGF0ZSxcbiAgRGlzcGF0Y2gsXG4gIFNldFN0YXRlQWN0aW9uLFxuICAgIHVzZVJlZixcbiAgdXNlRWZmZWN0LFxufSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHsgSW9Jb3NSZW1vdmVDaXJjbGVPdXRsaW5lLCBJb0lvc0FkZCB9IGZyb20gXCJyZWFjdC1pY29ucy9pb1wiXG5pbXBvcnQgQm94IGZyb20gJ0Bjb21wb25lbnRzL2NvbW1vbi9Cb3gnXG5pbXBvcnQgVGV4dCBmcm9tICdAY29tcG9uZW50cy9jb21tb24vVGV4dCdcbmltcG9ydCB7IERlZmF1bHRUaW1lUHJlZmVyZW5jZVR5cGUsIERlZmF1bHRUaW1lUHJlZmVyZW5jZVR5cGVzLCBUaW1lIH0gZnJvbSAnQGxpYi9kYXRhVHlwZXMvQ2F0ZWdvcnlUeXBlJ1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJ1xuLy8gaW1wb3J0IERhdGVUaW1lUGlja2VyIGZyb20gJ3JlYWN0LWRhdGV0aW1lLXBpY2tlci9kaXN0L2VudHJ5Lm5vc3R5bGUnXG5pbXBvcnQgeyBJbnB1dCB9IGZyb20gJ0BjaGFrcmEtdWkvcmVhY3QnXG5pbXBvcnQgeyBkYXlqcyB9IGZyb20gJ0BsaWIvZGF0ZS11dGlscydcbmltcG9ydCB7IGdldElTT0RheSwgc2V0SVNPRGF5IH0gZnJvbSAnZGF0ZS1mbnMnXG5pbXBvcnQgeyB1c2VUb2FzdCB9IGZyb20gJ0BjaGFrcmEtdWkvcmVhY3QnXG5pbXBvcnQgUmVndWxhckNhcmQgZnJvbSAnQGNvbXBvbmVudHMvUmVndWxhckNhcmQnXG5pbXBvcnQgeyBGbGF0TGlzdCwgUHJlc3NhYmxlLCBBcHBlYXJhbmNlIH0gZnJvbSAncmVhY3QtbmF0aXZlJ1xuaW1wb3J0IHsgcGFsZXR0ZSB9IGZyb20gJ0BsaWIvdGhlbWUvdGhlbWUnXG5pbXBvcnQgQnV0dG9uIGZyb20gJ0Bjb21wb25lbnRzL0J1dHRvbidcbmltcG9ydCB7IE5leHRBcGlSZXF1ZXN0LCBOZXh0QXBpUmVzcG9uc2UgfSBmcm9tICduZXh0JztcbmltcG9ydCBzdXBlcnRva2Vuc05vZGUgZnJvbSAnc3VwZXJ0b2tlbnMtbm9kZSdcbmltcG9ydCB7IGJhY2tlbmRDb25maWcgfSBmcm9tICdAY29uZmlnL2JhY2tlbmRDb25maWcnXG5pbXBvcnQgU2Vzc2lvbiBmcm9tICdzdXBlcnRva2Vucy1ub2RlL3JlY2lwZS9zZXNzaW9uJ1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U2VydmVyU2lkZVByb3BzKHsgcmVxLCByZXMgfTogeyByZXE6IE5leHRBcGlSZXF1ZXN0LCByZXM6IE5leHRBcGlSZXNwb25zZSB9KSB7XG4gICAgLy8gTm90aWNlIGhvdyB0aGUgc2VydmVyIHVzZXMgYEFQSWAgZnJvbSBgd2l0aFNTUkNvbnRleHRgLCBpbnN0ZWFkIG9mIHRoZSB0b3AtbGV2ZWwgYEFQSWAuXG4gICAgLy8gY29uc3QgU1NSID0gd2l0aFNTUkNvbnRleHQoeyByZXEgfSlcbiAgICAvLyB0aGlzIHJ1bnMgb24gdGhlIGJhY2tlbmQsIHNvIHdlIG11c3QgY2FsbCBpbml0IG9uIHN1cGVydG9rZW5zLW5vZGUgU0RLXG4gICAgc3VwZXJ0b2tlbnNOb2RlLmluaXQoYmFja2VuZENvbmZpZygpKVxuICAgIGxldCBzZXNzaW9uXG4gICAgdHJ5IHtcbiAgICAgICAgc2Vzc2lvbiA9IGF3YWl0IFNlc3Npb24uZ2V0U2Vzc2lvbihyZXEsIHJlcywge1xuICAgICAgICAgICAgb3ZlcnJpZGVHbG9iYWxDbGFpbVZhbGlkYXRvcnM6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW11cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pXG4gICAgfSBjYXRjaCAoZXJyOiBhbnkpIHtcbiAgICAgICAgaWYgKGVyci50eXBlID09PSBTZXNzaW9uLkVycm9yLlRSWV9SRUZSRVNIX1RPS0VOKSB7XG4gICAgICAgICAgICByZXR1cm4geyBwcm9wczogeyBmcm9tU3VwZXJ0b2tlbnM6ICduZWVkcy1yZWZyZXNoJyB9IH1cbiAgICAgICAgfSBlbHNlIGlmIChlcnIudHlwZSA9PT0gU2Vzc2lvbi5FcnJvci5VTkFVVEhPUklTRUQpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgd2lsbCBmb3JjZSB0aGUgZnJvbnRlbmQgdG8gdHJ5IGFuZCByZWZyZXNoIHdoaWNoIHdpbGwgZmFpbFxuICAgICAgICAgICAgLy8gY2xlYXJpbmcgYWxsIGNvb2tpZXMgYW5kIHJlZGlyZWN0aW5nIHRoZSB1c2VyIHRvIHRoZSBsb2dpbiBzY3JlZW4uXG4gICAgICAgICAgICByZXR1cm4geyBwcm9wczogeyBmcm9tU3VwZXJ0b2tlbnM6ICduZWVkcy1yZWZyZXNoJyB9IH1cbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnJcbiAgICB9XG5cbiAgICBpZiAoIXNlc3Npb24/LmdldFVzZXJJZCgpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZWRpcmVjdDoge1xuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uOiAnL1VzZXIvTG9naW4vVXNlckxvZ2luJyxcbiAgICAgICAgICAgICAgICBwZXJtYW5lbnQ6IGZhbHNlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgIHN1Yjogc2Vzc2lvbi5nZXRVc2VySWQoKSxcbiAgICAgICAgfVxuICAgIH1cbn1cblxudHlwZSBQcm9wcyA9IHtcbiAgICBkZWZhdWx0VGltZVByZWZlcmVuY2VzOiBEZWZhdWx0VGltZVByZWZlcmVuY2VUeXBlcyxcbiAgICBzZXRQYXJlbnREZWZhdWx0VGltZVByZWZlcmVuY2U6IERpc3BhdGNoPFNldFN0YXRlQWN0aW9uPERlZmF1bHRUaW1lUHJlZmVyZW5jZVR5cGVzPj4sXG59XG5cbnR5cGUgRGF5T2ZXZWVrSW50VHlwZSA9IC0xIHwgMSB8IDIgfCAzIHwgNCB8IDUgfCA2IHwgN1xuXG50eXBlIFJlbmRlclByZWZlcnJlZFRpbWVSYW5nZVR5cGUgPSB7XG4gICAgaXRlbTogRGVmYXVsdFRpbWVQcmVmZXJlbmNlVHlwZSxcbiAgICBpbmRleDogbnVtYmVyLFxufVxuXG5jb25zdCBkYXlPZldlZWtJbnQgPSBbLTEsIDEsIDIsIDMsIDQsIDUsIDYsIDddXG5cbmZ1bmN0aW9uIEVkaXRDYXRlZ29yeVN0ZXA0KHByb3BzOiBQcm9wcykge1xuICAgIGNvbnN0IFtkZWZhdWx0VGltZVByZWZlcmVuY2VzLCBzZXREZWZhdWx0VGltZVByZWZlcmVuY2VzXSA9IHVzZVN0YXRlPERlZmF1bHRUaW1lUHJlZmVyZW5jZVR5cGVzPihwcm9wcz8uZGVmYXVsdFRpbWVQcmVmZXJlbmNlcyB8fCBbXSlcbiAgICBjb25zdCBbZGF5T2ZXZWVrLCBzZXREYXlPZldlZWtdID0gdXNlU3RhdGU8RGF5T2ZXZWVrSW50VHlwZT4oLTEpXG4gICAgLy8gY29uc3QgW2RheU9mV2Vla09iamVjdCwgc2V0RGF5T2ZXZWVrT2JqZWN0XSA9IHVzZVN0YXRlPHtsYWJlbDogc3RyaW5nLCB2YWx1ZTogbnVtYmVyIH0+KG51bGwpXG4gICAgY29uc3QgW3N0YXJ0VGltZVJhbmdlLCBzZXRTdGFydFRpbWVSYW5nZV0gPSB1c2VTdGF0ZTxEYXRlPihuZXcgRGF0ZSgpKVxuICAgIGNvbnN0IFtlbmRUaW1lUmFuZ2UsIHNldEVuZFRpbWVSYW5nZV0gPSB1c2VTdGF0ZTxEYXRlPihkYXlqcygpLmFkZCgzMCwgJ20nKS50b0RhdGUoKSlcbiAgICBjb25zdCBbaXNTdGFydFRpbWVSYW5nZSwgc2V0SXNTdGFydFRpbWVSYW5nZV0gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSlcbiAgICBjb25zdCBbaXNFbmRUaW1lUmFuZ2UsIHNldElzRW5kVGltZVJhbmdlXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKVxuXG4gICAgY29uc3QgZmxhdGxpc3RSZWYgPSB1c2VSZWY8RmxhdExpc3Q+KClcbiAgICBjb25zdCB0b2FzdCA9IHVzZVRvYXN0KClcbiAgICAvLyB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vICAgICBmbGF0bGlzdFJlZj8uY3VycmVudD8uc2Nyb2xsVG9FbmQoe2FuaW1hdGluZzogdHJ1ZX0pXG4gICAgLy8gfSwgW2RlZmF1bHRUaW1lUHJlZmVyZW5jZT8ubGVuZ3RoXSlcblxuICAgIGNvbnN0IHNldFBhcmVudERlZmF1bHRUaW1lUHJlZmVyZW5jZSA9IHByb3BzPy5zZXRQYXJlbnREZWZhdWx0VGltZVByZWZlcmVuY2VcblxuICAgIGNvbnN0IGNoYW5nZURlZmF1bHRUaW1lUHJlZmVyZW5jZSA9ICh2YWx1ZTogRGVmYXVsdFRpbWVQcmVmZXJlbmNlVHlwZXMpID0+IHtcbiAgICAgICAgc2V0RGVmYXVsdFRpbWVQcmVmZXJlbmNlcyh2YWx1ZSlcbiAgICAgICAgc2V0UGFyZW50RGVmYXVsdFRpbWVQcmVmZXJlbmNlKHZhbHVlKVxuICAgIH1cblxuICAgICBjb25zdCBoaWRlU3RhcnRUaW1lUmFuZ2VQaWNrZXIgPSAoKSA9PiBzZXRJc1N0YXJ0VGltZVJhbmdlKGZhbHNlKVxuICAgIFxuICAgIGNvbnN0IHNob3dTdGFydFRpbWVSYW5nZVBpY2tlciA9ICgpID0+IHNldElzU3RhcnRUaW1lUmFuZ2UodHJ1ZSlcblxuICAgIGNvbnN0IGhpZGVFbmRUaW1lUmFuZ2VQaWNrZXIgPSAoKSA9PiBzZXRJc0VuZFRpbWVSYW5nZShmYWxzZSlcblxuICAgIGNvbnN0IHNob3dFbmRUaW1lUmFuZ2VQaWNrZXIgPSAoKSA9PiBzZXRJc0VuZFRpbWVSYW5nZSh0cnVlKVxuXG4gICAgY29uc3QgY2hhbmdlRGF5T2ZXZWVrID0gKGl0ZW06IG51bWJlcikgPT4ge1xuICAgICAgICBzZXREYXlPZldlZWsoaXRlbSBhcyBEYXlPZldlZWtJbnRUeXBlKVxuICAgIH1cblxuICAgIGNvbnN0IGFkZEl0ZW0gPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyB2YWxpZGF0ZSBzdGFydFRpbWUsIGVuZFRpbWUsIGV2ZW50SWQsIGFuZCBkYXlPZldlZWtcbiAgICAgICAgICAgIGlmICghc3RhcnRUaW1lUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICB0b2FzdCh7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnU3RhcnQgdGltZSBpcyByZXF1aXJlZCcsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnUGxlYXNlIHNlbGVjdCBhIHN0YXJ0IHRpbWUnLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6ICdlcnJvcicsXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiA5MDAwLFxuICAgICAgICAgICAgICAgICAgICBpc0Nsb3NhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghZW5kVGltZVJhbmdlKSB7XG4gICAgICAgICAgICAgICAgdG9hc3Qoe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0VuZCB0aW1lIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdQbGVhc2Ugc2VsZWN0IGFuIGVuZCB0aW1lJyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAnZXJyb3InLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogOTAwMCxcbiAgICAgICAgICAgICAgICAgICAgaXNDbG9zYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGF5T2ZXZWVrIDwgLTEgfHwgZGF5T2ZXZWVrID4gNykge1xuICAgICAgICAgICAgICAgIHRvYXN0KHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdEYXkgb2Ygd2VlayBpcyByZXF1aXJlZCcsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnUGxlYXNlIHNlbGVjdCBhIGRheSBvZiB3ZWVrJyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAnZXJyb3InLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogOTAwMCxcbiAgICAgICAgICAgICAgICAgICAgaXNDbG9zYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyB2YWxpZGF0ZSBzdGFydFRpbWVSYW5nZSBhbmQgZW5kVGltZVJhbmdlXG4gICAgICAgICAgICBpZiAoc3RhcnRUaW1lUmFuZ2UuZ2V0VGltZSgpID49IGVuZFRpbWVSYW5nZS5nZXRUaW1lKCkpIHtcbiAgICAgICAgICAgICAgICB0b2FzdCh7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnU3RhcnQgdGltZSBtdXN0IGJlIGJlZm9yZSBlbmQgdGltZScsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnUGxlYXNlIHNlbGVjdCBhIHN0YXJ0IHRpbWUgYmVmb3JlIGVuZCB0aW1lJyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAnZXJyb3InLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogOTAwMCxcbiAgICAgICAgICAgICAgICAgICAgaXNDbG9zYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCB0aW1lUmFuZ2VEdXJhdGlvbiA9IGRheWpzKGVuZFRpbWVSYW5nZSkuZGlmZihkYXlqcyhzdGFydFRpbWVSYW5nZSksICdtJylcblxuICAgICAgICAgICAgaWYgKHRpbWVSYW5nZUR1cmF0aW9uIDwgMzApIHtcbiAgICAgICAgICAgICAgICB0b2FzdCh7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnRW5kIHRpbWUgbXVzdCBiZSBzYW1lIG9yIGxvbmdlciB0aGFuIDMwIG1pbnV0ZXMnLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1BsZWFzZSBzZWxlY3QgYSBlbmQgdGltZSB0aGF0IGlzIHNhbWUgb3IgbG9uZ2VyIHRoYW4gMzAgbWludXRlcycsXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDkwMDAsXG4gICAgICAgICAgICAgICAgICAgIGlzQ2xvc2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qgc3RhcnRUaW1lID0gZGF5anMoc3RhcnRUaW1lUmFuZ2UpLmZvcm1hdCgnSEg6bW0nKSBhcyBUaW1lXG4gICAgICAgICAgICBjb25zdCBlbmRUaW1lID0gZGF5anMoZW5kVGltZVJhbmdlKS5mb3JtYXQoJ0hIOm1tJykgYXMgVGltZVxuXG4gICAgICAgICAgICBjb25zdCBuZXdQcmVmZXJyZWRUaW1lUmFuZ2U6IERlZmF1bHRUaW1lUHJlZmVyZW5jZVR5cGUgPSB7XG4gICAgICAgICAgICAgICAgZGF5T2ZXZWVrLFxuICAgICAgICAgICAgICAgIHN0YXJ0VGltZSxcbiAgICAgICAgICAgICAgICBlbmRUaW1lLFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBuZXdEZWZhdWx0VGltZVByZWZlcmVuY2UgPSAoZGVmYXVsdFRpbWVQcmVmZXJlbmNlcyB8fCBbXSkuY29uY2F0KFtuZXdQcmVmZXJyZWRUaW1lUmFuZ2VdKVxuICAgICAgICAgICAgY2hhbmdlRGVmYXVsdFRpbWVQcmVmZXJlbmNlKG5ld0RlZmF1bHRUaW1lUHJlZmVyZW5jZSlcblxuICAgICAgICAgICAgLy8gY2xlYXIgZm9ybVxuICAgICAgICAgICAgc2V0U3RhcnRUaW1lUmFuZ2UobmV3IERhdGUoKSlcbiAgICAgICAgICAgIHNldEVuZFRpbWVSYW5nZShkYXlqcygpLmFkZCgzMCwgJ20nKS50b0RhdGUoKSlcbiAgICAgICAgICAgIHNldERheU9mV2VlaygtMSlcblxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlLCAnIGUgdW5hYmxlIHRvIGFkZCBpdGVtIHRvIHByZWZlcnJlZCB0aW1lIHJhbmdlcycpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCByZW1vdmVJdGVtID0gYXN5bmMgKGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIHZhbGlkYXRlIGl0ZW1cbiAgICAgICAgICAgIGlmICghZGVmYXVsdFRpbWVQcmVmZXJlbmNlc1tpbmRleF0pIHtcbiAgICAgICAgICAgICAgICB0b2FzdCh7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnSXRlbSBpcyByZXF1aXJlZCcsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnUGxlYXNlIHNlbGVjdCBhbiBpdGVtJyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAnZXJyb3InLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogOTAwMCxcbiAgICAgICAgICAgICAgICAgICAgaXNDbG9zYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBjbG9uZURlZnVsYXRUaW1lUHJlZmVyZW5jZXMgPSBfLnJldmVyc2UoXy5jbG9uZURlZXAoZGVmYXVsdFRpbWVQcmVmZXJlbmNlcykpXG4gICAgICAgICAgICBjb25zdCBuZXdkZWZhdWx0VGltZVByZWZlcmVuY2UgPSBjbG9uZURlZnVsYXRUaW1lUHJlZmVyZW5jZXMuZmlsdGVyKChpdGVtLCBpKSA9PiBpICE9PSBpbmRleCkgICBcbiAgICAgICAgICAgIGNoYW5nZURlZmF1bHRUaW1lUHJlZmVyZW5jZShuZXdkZWZhdWx0VGltZVByZWZlcmVuY2UpXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUsICcgZSB1bmFibGUgdG8gcmVtb3ZlIGl0ZW0gZnJvbSBwcmVmZXJyZWQgdGltZSByYW5nZXMgaW5zaWRlIGVkaXRjYXRlZ29yeXN0ZXAzJylcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgIGNvbnN0IHJlbmRlckl0ZW0gPSAoeyBpdGVtLCBpbmRleCB9OiBSZW5kZXJQcmVmZXJyZWRUaW1lUmFuZ2VUeXBlKSA9PiAoXG4gICAgICAgIDxCb3gganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XG4gICAgICAgICAgICA8UmVndWxhckNhcmQ+XG4gICAgICAgICAgICAgICAgPFRleHQgcHQ9e3sgcGhvbmU6ICdtJywgdGFibGV0OiAncycgfX0gdmFyaWFudD1cIm9wdGlvbkhlYWRlclwiPlxuICAgICAgICAgICAgICAgICAgICB7KCgoaXRlbT8uZGF5T2ZXZWVrID09PSAtMSkgfHwgKGl0ZW0/LmRheU9mV2VlayA9PT0gbnVsbCkpKSA/ICdBbnkgZGF5IG9mIHdlZWsnIDogZGF5anMoc2V0SVNPRGF5KGRheWpzKCkudG9EYXRlKCksIGl0ZW0uZGF5T2ZXZWVrKSkuZm9ybWF0KCdkZGRkJyl9XG4gICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgICAgIDxUZXh0IHB0PXt7IHBob25lOiAnbScsIHRhYmxldDogJ3MnIH19IHZhcmlhbnQ9XCJvcHRpb25IZWFkZXJcIj5cbiAgICAgICAgICAgICAgICAgICAge2RheWpzKGl0ZW0uc3RhcnRUaW1lLCAnSEg6bW0nKS5mb3JtYXQoJ2g6bW0gQScpfVxuICAgICAgICAgICAgICAgICAgICB7JyAtICd9XG4gICAgICAgICAgICAgICAgICAgIHtkYXlqcyhpdGVtLmVuZFRpbWUsICdISDptbScpLmZvcm1hdCgnaDptbSBBJyl9XG4gICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgICAgIDxQcmVzc2FibGUgb25QcmVzcz17KCkgPT4gcmVtb3ZlSXRlbShpbmRleCl9PlxuICAgICAgICAgICAgICAgICAgICA8VGV4dCBwdD17eyBwaG9uZTogJ20nLCB0YWJsZXQ6ICdzJyB9fSB2YXJpYW50PVwiYnV0dG9uTGlua1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPElvSW9zUmVtb3ZlQ2lyY2xlT3V0bGluZSBjb2xvcj17cGFsZXR0ZS5waW5rUHJpbWFyeX0gbmFtZT1cImlvcy1yZW1vdmUtY2lyY2xlLW91dGxpbmVcIiBzaXplPVwiMmVtXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsnICd9XG4gICAgICAgICAgICAgICAgICAgICAgICBSZW1vdmVcbiAgICAgICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgICAgIDwvUHJlc3NhYmxlPlxuICAgICAgICAgICAgPC9SZWd1bGFyQ2FyZD5cbiAgICAgICAgPC9Cb3g+XG4gICAgKVxuXG4gICAgY29uc3QgdGltZVByZWZlcmVuY2VBdmFpbGFibGUgPSBkZWZhdWx0VGltZVByZWZlcmVuY2VzPy5sZW5ndGggPiAwXG4gICAgcmV0dXJuIChcbiAgICAgICAgPEJveCAganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCIgc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fT5cbiAgICAgICAgICAgIDxCb3ggbXQ9e3sgcGhvbmU6ICdzJywgdGFibGV0OiAnbScgfX0gIGp1c3RpZnlDb250ZW50PVwiY2VudGVyXCIgYWxpZ25JdGVtcz1cImNlbnRlclwiPlxuICAgICAgICAgICAgICAgIDxUZXh0IHZhcmlhbnQ9XCJzdWJoZWFkZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgUHJlZmVycmVkIFRpbWVzXG4gICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgtMSBmbGV4IGZsZXgtY29sIGp1c3RpZnktY2VudGVyIGl0ZW1zLWNlbnRlclwiIHN0eWxlPXt7IG1pbkhlaWdodDogJzUwdmgnIH19PlxuICAgICAgICAgICAgICAgIDxCb3gganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIiBhbGlnbkl0ZW1zPVwiZmxleC1zdGFydFwiICBzdHlsZT17eyB3aWR0aDogJzEwMCUnfX0gbWluSGVpZ2h0PVwiNDB2aFwiIG1heEhlaWdodD1cIjQwdmhcIj5cbiAgICAgICAgICAgICAgICAgICAgPEZsYXRMaXN0XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyBmbGV4OiAxIH19XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhPXt0aW1lUHJlZmVyZW5jZUF2YWlsYWJsZSA/IF8ucmV2ZXJzZShfLmNsb25lRGVlcChkZWZhdWx0VGltZVByZWZlcmVuY2VzKSkgOiBudWxsfVxuICAgICAgICAgICAgICAgICAgICAgICAga2V5RXh0cmFjdG9yPXtpdGVtID0+IGAke2l0ZW0uc3RhcnRUaW1lfS0ke2l0ZW0uZW5kVGltZX0tJHtpdGVtLmRheU9mV2Vla31gfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVySXRlbT17cmVuZGVySXRlbX1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGV4dHJhRGF0YT17YCR7dGltZVJhbmdlUHJlZmVyZW5jZXMubWFwKGkgPT4gaT8uaWQpfWB9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgPEJveCBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiIGFsaWduSXRlbXM9XCJmbGV4LXN0YXJ0XCIgc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fT5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC13cmFwIGp1c3RpZnktY2VudGVyIHctZnVsbFwiPlxuICAgICAgICAgICAgICAgICAgICA8Qm94IHBsPXt7IHBob25lOiAncycsIHRhYmxldDogJ20nIH19IGp1c3RpZnlDb250ZW50PVwiY2VudGVyXCIgYWxpZ25JdGVtcz1cImZsZXgtc3RhcnRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0IHZhcmlhbnQ9XCJvcHRpb25IZWFkZXJcIj5TdGFydCBUaW1lPC9UZXh0PlxuICAgICAgICAgICAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlNlbGVjdCBUaW1lXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplPVwibWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0aW1lXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0U3RhcnRUaW1lUmFuZ2UoZGF5anMoZT8udGFyZ2V0Py52YWx1ZSwgXCJISDptbVwiKS50b0RhdGUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGltZVJhbmdlRHVyYXRpb24gPSBkYXlqcyhlbmRUaW1lUmFuZ2UpLmRpZmYoZGF5anMoZT8udGFyZ2V0Py52YWx1ZSksICdtJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVSYW5nZUR1cmF0aW9uIDwgMzApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEVuZFRpbWVSYW5nZShkYXlqcyhlPy50YXJnZXQ/LnZhbHVlLCBcIkhIOm1tXCIpLmFkZCgzMCwgJ20nKS50b0RhdGUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2RheWpzKHN0YXJ0VGltZVJhbmdlKS5mb3JtYXQoXCJISDptbVwiKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICA8Qm94IHBsPXt7IHBob25lOiAncycsIHRhYmxldDogJ20nIH19IGp1c3RpZnlDb250ZW50PVwiY2VudGVyXCIgYWxpZ25JdGVtcz1cImZsZXgtc3RhcnRcIj5cbiAgICAgICAgICAgICAgICAgICAgPFRleHQgdmFyaWFudD1cIm9wdGlvbkhlYWRlclwiPkVuZCBUaW1lPC9UZXh0PlxuICAgICAgICAgICAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiU2VsZWN0IFRpbWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT1cIm1kXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0aW1lXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEVuZFRpbWVSYW5nZShkYXlqcyhlPy50YXJnZXQ/LnZhbHVlLCBcIkhIOm1tXCIpLnRvRGF0ZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtkYXlqcyhlbmRUaW1lUmFuZ2UpLmZvcm1hdChcIkhIOm1tXCIpfVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxCb3ggcHQ9e3sgcGhvbmU6ICdtJywgdGFibGV0OiAncycgfX0ganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCIgd2lkdGg9XCIxMDAlXCI+XG4gICAgICAgICAgICAgICAgICAgIDxUZXh0IHZhcmlhbnQ9XCJvcHRpb25IZWFkZXJcIj5EYXkgT2YgV2VlazwvVGV4dD5cbiAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCB2YWx1ZT17ZGF5T2ZXZWVrfSBvbkNoYW5nZT17KGUpID0+IGNoYW5nZURheU9mV2VlayhwYXJzZUludChlPy50YXJnZXQ/LnZhbHVlLnJlcGxhY2UoL1teMC05Ll0vZywgJycpLCAxMCkgfHwgLTEpfSBjbGFzc05hbWU9XCJzZWxlY3Qgc2VsZWN0LXByaW1hcnkgdy1mdWxsIG1heC13LXhzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIGRpc2FibGVkIHNlbGVjdGVkPlBpY2sgYSBkYXkgb2YgdGhlIHdlZWs8L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtfLm1hcChkYXlPZldlZWtJbnQsIG9wdGlvbiA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e29wdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e29wdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+eyhvcHRpb24gIT09IC0xID8gZGF5anMoc2V0SVNPRGF5KGRheWpzKCkudG9EYXRlKCksIG9wdGlvbikpLmZvcm1hdCgnZGRkZCcpIDogJ0FueSBkYXkgb2YgdGhlIHdlZWsnKX08L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8Qm94ICBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIiAgc3R5bGU9e3sgd2lkdGg6ICcxMDAlJ319PlxuICAgICAgICAgICAgICAgIDxQcmVzc2FibGUgb25QcmVzcz17YWRkSXRlbX0+XG4gICAgICAgICAgICAgICAgICAgIDxCb3ggZmxleERpcmVjdGlvbj1cInJvd1wiIGp1c3RpZnlDb250ZW50PVwic3BhY2UtYmV0d2VlblwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIiBzdHlsZT17eyB3aWR0aDogJzEwJSd9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxJb0lvc0FkZCBzaXplPVwiM2VtXCIgY29sb3I9e3BhbGV0dGUucGlua1ByaW1hcnl9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VGV4dCB2YXJpYW50PVwiYnV0dG9uTGlua1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFkZFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICA8L1ByZXNzYWJsZT5cbiAgICAgICAgICAgIDwvQm94PlxuICAgICAgICA8L0JveD5cbiAgICApXG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgRWRpdENhdGVnb3J5U3RlcDRcblxuXG5cbiJdfQ==