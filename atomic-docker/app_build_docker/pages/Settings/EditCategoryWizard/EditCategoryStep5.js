"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const io_1 = require("react-icons/io");
const TextField_1 = __importDefault(require("@components/TextField"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const lodash_1 = __importDefault(require("lodash"));
const react_native_1 = require("react-native");
const theme_1 = require("@lib/theme/theme");
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("@config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function EditCategoryStep5(props) {
    const [defaultReminders, setDefaultReminders] = (0, react_1.useState)(props?.defaultReminders || []);
    const [alarm, setAlarm] = (0, react_1.useState)(0);
    const [isMessage1, setIsMessage1] = (0, react_1.useState)(false);
    const [isMessage2, setIsMessage2] = (0, react_1.useState)(false);
    const setParentDefaultReminders = props?.setParentDefaultReminders;
    const changeDefaultReminders = (value) => {
        const newAlarms = lodash_1.default.uniqWith(defaultReminders.concat([value]), lodash_1.default.isEqual);
        setDefaultReminders(newAlarms);
        setParentDefaultReminders(newAlarms);
    };
    const removeItemFromDefaultReminders = (item) => {
        const newAlarms = lodash_1.default.without(defaultReminders, item);
        setDefaultReminders(newAlarms);
        setParentDefaultReminders(newAlarms);
    };
    const changeAlarm = (value) => {
        setAlarm(parseInt(value.replace(/[^0-9.]/g, ''), 10));
    };
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { mt: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subheader", children: "Add reminders" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 'l' }, justifyContent: "center", alignItems: "center", style: { width: '100%' }, minHeight: "30vh", children: (0, jsx_runtime_1.jsx)(react_native_1.FlatList, { data: defaultReminders, renderItem: ({ item, index }) => ((0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "space-between", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: `${item} minutes before` }), (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { hitSlop: 15, onPress: () => removeItemFromDefaultReminders(item), children: (0, jsx_runtime_1.jsx)(io_1.IoIosClose, { size: "3em", color: theme_1.palette.red }) })] }) })), keyExtractor: (item, index) => `${item}-${index}` }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'xs', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { type: "number", onChange: (e) => changeAlarm(e?.target?.value), value: `${alarm}`, placeholder: "0", label: "Reminder" }) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'xs', tablet: 's' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: () => changeDefaultReminders(alarm), children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(io_1.IoIosAdd, { size: "3em", color: theme_1.palette.pinkPrimary }), (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", children: "Add" })] }) }) })] }));
}
exports.default = EditCategoryStep5;
//# sourceMappingURL=data:application/json;base64,