"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const colorsPalette_1 = require("@lib/theme/colorsPalette");
const Switch_1 = __importDefault(require("@components/Switch"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const react_color_circle_1 = __importDefault(require("@uiw/react-color-circle"));
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("@config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function EditCategoryStep6(props) {
    const [copyIsMeeting, setCopyIsMeeting] = (0, react_1.useState)(props?.copyIsMeeting ?? false);
    const [copyIsExternalMeeting, setCopyIsExternalMeeting] = (0, react_1.useState)(props?.copyIsExternalMeeting ?? false);
    const [defaultIsMeeting, setDefaultIsMeeting] = (0, react_1.useState)(props?.defaultIsMeeting ?? false);
    const [defaultIsExternalMeeting, setDefaultIsExternalMeeting] = (0, react_1.useState)(props?.defaultIsExternalMeeting ?? false);
    const [color, setColor] = (0, react_1.useState)(props?.color);
    const [enableSelectColor, setEnableSelectColor] = (0, react_1.useState)(false);
    const [defaultMeetingModifiable, setDefaultMeetingModifiable] = (0, react_1.useState)(props?.defaultMeetingModifiable ?? false);
    const [defaultExternalMeetingModifiable, setDefaultExternalMeetingModifiable] = (0, react_1.useState)(props?.defaultExternalMeetingModifiable ?? false);
    const [isMessage1, setIsMessage1] = (0, react_1.useState)(false);
    const [isMessage2, setIsMessage2] = (0, react_1.useState)(false);
    const [isMessage3, setIsMessage3] = (0, react_1.useState)(false);
    const [isMessage4, setIsMessage4] = (0, react_1.useState)(false);
    const [isMessage5, setIsMessage5] = (0, react_1.useState)(false);
    const setParentCopyIsMeeting = props?.setParentCopyIsMeeting;
    const setParentCopyIsExternalMeeting = props?.setParentCopyIsExternalMeeting;
    const setParentDefaultIsMeeting = props?.setParentDefaultIsMeeting;
    const setParentDefaultIsExternalMeeting = props?.setParentDefaultIsExternalMeeting;
    const setParentColor = props?.setParentColor;
    const setParentDefaultMeetingModifiable = props?.setParentDefaultMeetingModifiable;
    const setParentDefaultExternalMeetingModifiable = props?.setParentDefaultExternalMeetingModifiable;
    const changeCopyIsMeeting = (value) => {
        setCopyIsMeeting(value);
        setParentCopyIsMeeting(value);
    };
    const changeCopyIsExternalMeeting = (value) => {
        setCopyIsExternalMeeting(value);
        setParentCopyIsExternalMeeting(value);
    };
    const changeDefaultIsMeeting = (value) => {
        setDefaultIsMeeting(value);
        setParentDefaultIsMeeting(value);
    };
    const changeDefaultIsExternalMeeting = (value) => {
        setDefaultIsExternalMeeting(value);
        setParentDefaultIsExternalMeeting(value);
    };
    const changeColor = (value) => {
        setColor(value);
        setParentColor(value);
    };
    const changeDefaultMeetingModifiable = (value) => {
        setDefaultMeetingModifiable(value);
        setParentDefaultMeetingModifiable(value);
    };
    const changeDefaultExternalMeetingModifiable = (value) => {
        setDefaultExternalMeetingModifiable(value);
        setParentDefaultExternalMeetingModifiable(value);
    };
    return ((0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", width: "100%", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex-1 flex flex-col justify-center items-center w-full", children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '90%' }, pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '90%' }, flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Select color for any new events with the given tag" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '90%' }, flexDirection: "row", justifyContent: "flex-end", alignItems: "center", children: (0, jsx_runtime_1.jsx)(react_color_circle_1.default, { colors: ['#039be5', '#7986cb', '#33b679', '#8e24aa', '#e67c73', '#f6c026', '#f5511d', '#616161', '#3f51b5', '#0b8043', '#d60000'], color: color, onChange: (color) => {
                                    changeColor(color.hex);
                                } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '90%' }, pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(react_2.Tooltip, { hasArrow: true, label: 'Event will be tagged with Meeting topic (if exists) and settings for the tag will be applied to the event. Note: training settings override tag settings for schedule assists in case of overlap.', bg: 'purple.700', color: 'white', children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Copy over 'meeting type' value to any new event whose details have similar context to a past event and given tag for scheduling assists?" }) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { onColor: colorsPalette_1.colorsPalette.purple30, offColor: colorsPalette_1.colorsPalette.purple60, checked: copyIsMeeting, onValueChange: changeCopyIsMeeting, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '90%' }, pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(react_2.Tooltip, { hasArrow: true, label: 'Tag with External Meeting topic (if available) is a meeting with contact outside the organization. Event will be tagged with external meeting topic and settings for the tag will be applied to the event. Note: training settings override tag settings for schedule assists in case of overlap.', bg: 'purple.700', color: 'white', children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Copy over 'external meeting type' value to any new event whose details have similar context  to a past event and given tag (meeting with a contact outside the organization) for scheduling assists? " }) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { onColor: colorsPalette_1.colorsPalette.purple30, offColor: colorsPalette_1.colorsPalette.purple60, checked: copyIsExternalMeeting, onValueChange: changeCopyIsExternalMeeting }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '90%' }, pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Classify any new events with the given tag as 'meeting type' event for scheduling assists? " }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { onColor: colorsPalette_1.colorsPalette.purple30, offColor: colorsPalette_1.colorsPalette.purple60, checked: defaultIsMeeting, onValueChange: changeDefaultIsMeeting, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '90%' }, pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Classify any new events with the given tag as 'external meeting type' event (meeting with a contact outside the organization) for scheduling assists? " }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { onColor: colorsPalette_1.colorsPalette.purple30, offColor: colorsPalette_1.colorsPalette.purple60, checked: defaultIsExternalMeeting, onValueChange: changeDefaultIsExternalMeeting, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '90%' }, pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "By default lock (make static) any new events that are classified as 'meeting type' event with the given tag for scheduling assists? " }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { onColor: colorsPalette_1.colorsPalette.purple30, offColor: colorsPalette_1.colorsPalette.purple60, checked: defaultMeetingModifiable, onValueChange: changeDefaultMeetingModifiable, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '90%' }, pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "By default lock (make static) any new events that are classified as 'external meeting type' event with the given tag for scheduling assists? " }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { onColor: colorsPalette_1.colorsPalette.purple30, offColor: colorsPalette_1.colorsPalette.purple60, checked: defaultExternalMeetingModifiable, onValueChange: changeDefaultExternalMeetingModifiable, style: { marginBottom: 20 } }) })] })] }) }));
}
exports.default = EditCategoryStep6;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRWRpdENhdGVnb3J5U3RlcDYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJFZGl0Q2F0ZWdvcnlTdGVwNi50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFpQkEsZ0RBcUNDOztBQXRERCxpQ0FJYztBQUNkLDRDQUEwQztBQUMxQyw0REFBa0U7QUFDbEUsZ0VBQXdDO0FBQ3hDLGlFQUF3QztBQUN4QyxtRUFBMEM7QUFFMUMsaUZBQTRDO0FBRTVDLHdFQUE4QztBQUM5Qyx5REFBcUQ7QUFDckQsOEVBQXFEO0FBRTlDLEtBQUssVUFBVSxrQkFBa0IsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQWlEO0lBQ2hHLDBGQUEwRjtJQUMxRixzQ0FBc0M7SUFDdEMseUVBQXlFO0lBQ3pFLDBCQUFlLENBQUMsSUFBSSxDQUFDLElBQUEsNkJBQWEsR0FBRSxDQUFDLENBQUE7SUFDckMsSUFBSSxPQUFPLENBQUE7SUFDWCxJQUFJLENBQUM7UUFDRCxPQUFPLEdBQUcsTUFBTSxpQkFBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFO1lBQ3pDLDZCQUE2QixFQUFFLEtBQUs7Z0JBQ2hDLE9BQU8sRUFBRSxDQUFBO1lBQ2IsQ0FBQztTQUNKLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFBQyxPQUFPLEdBQVEsRUFBRSxDQUFDO1FBQ2hCLElBQUksR0FBRyxDQUFDLElBQUksS0FBSyxpQkFBTyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBQy9DLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLEVBQUUsQ0FBQTtRQUMxRCxDQUFDO2FBQU0sSUFBSSxHQUFHLENBQUMsSUFBSSxLQUFLLGlCQUFPLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQ2pELGtFQUFrRTtZQUNsRSxxRUFBcUU7WUFDckUsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsRUFB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QUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLGFBQzFELHVCQUFDLGFBQUcsSUFBQyxhQUFhLEVBQUMsS0FBSyxFQUFDLGNBQWMsRUFBQyxZQUFZLEVBQUMsVUFBVSxFQUFDLFFBQVEsWUFDcEUsdUJBQUMsY0FBSSxJQUFDLE9BQU8sRUFBQyxjQUFjLDhKQUErSixHQUN6TCxFQUNOLHVCQUFDLGFBQUcsSUFBQyxhQUFhLEVBQUMsS0FBSyxFQUFDLGNBQWMsRUFBQyxVQUFVLEVBQUMsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFlBQzlFLHVCQUFDLGdCQUFPLElBQ0osT0FBTyxFQUFFLDZCQUFNLENBQUMsUUFBUSxFQUN4QixRQUFRLEVBQUUsNkJBQU0sQ0FBQyxRQUFRLEVBQ3pCLE9BQU8sRUFBRSxnQ0FBZ0MsRUFDekMsYUFBYSxFQUFFLHNDQUFzQyxFQUNyRCxLQUFLLEVBQUUsRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLEdBQzdCLEdBQ0EsSUFDSixJQUNKLEdBQ0osQ0FDVCxDQUFBO0FBQ0wsQ0FBQztBQUVELGtCQUFlLGlCQUFpQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7XG4gIHVzZVN0YXRlLFxuICBEaXNwYXRjaCxcbiAgU2V0U3RhdGVBY3Rpb24sXG59IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgVG9vbHRpcCB9IGZyb20gJ0BjaGFrcmEtdWkvcmVhY3QnXG5pbXBvcnQgeyBjb2xvcnNQYWxldHRlIGFzIENvbG9ycyB9IGZyb20gJ0BsaWIvdGhlbWUvY29sb3JzUGFsZXR0ZSdcbmltcG9ydCBTd2l0Y2gxIGZyb20gJ0Bjb21wb25lbnRzL1N3aXRjaCdcbmltcG9ydCBCb3ggZnJvbSAnQGNvbXBvbmVudHMvY29tbW9uL0JveCdcbmltcG9ydCBUZXh0IGZyb20gJ0Bjb21wb25lbnRzL2NvbW1vbi9UZXh0J1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJ1xuaW1wb3J0IENpcmNsZSBmcm9tICdAdWl3L3JlYWN0LWNvbG9yLWNpcmNsZSdcbmltcG9ydCB7IE5leHRBcGlSZXF1ZXN0LCBOZXh0QXBpUmVzcG9uc2UgfSBmcm9tICduZXh0JztcbmltcG9ydCBzdXBlcnRva2Vuc05vZGUgZnJvbSAnc3VwZXJ0b2tlbnMtbm9kZSdcbmltcG9ydCB7IGJhY2tlbmRDb25maWcgfSBmcm9tICdAY29uZmlnL2JhY2tlbmRDb25maWcnXG5pbXBvcnQgU2Vzc2lvbiBmcm9tICdzdXBlcnRva2Vucy1ub2RlL3JlY2lwZS9zZXNzaW9uJ1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U2VydmVyU2lkZVByb3BzKHsgcmVxLCByZXMgfTogeyByZXE6IE5leHRBcGlSZXF1ZXN0LCByZXM6IE5leHRBcGlSZXNwb25zZSB9KSB7XG4gICAgLy8gTm90aWNlIGhvdyB0aGUgc2VydmVyIHVzZXMgYEFQSWAgZnJvbSBgd2l0aFNTUkNvbnRleHRgLCBpbnN0ZWFkIG9mIHRoZSB0b3AtbGV2ZWwgYEFQSWAuXG4gICAgLy8gY29uc3QgU1NSID0gd2l0aFNTUkNvbnRleHQoeyByZXEgfSlcbiAgICAvLyB0aGlzIHJ1bnMgb24gdGhlIGJhY2tlbmQsIHNvIHdlIG11c3QgY2FsbCBpbml0IG9uIHN1cGVydG9rZW5zLW5vZGUgU0RLXG4gICAgc3VwZXJ0b2tlbnNOb2RlLmluaXQoYmFja2VuZENvbmZpZygpKVxuICAgIGxldCBzZXNzaW9uXG4gICAgdHJ5IHtcbiAgICAgICAgc2Vzc2lvbiA9IGF3YWl0IFNlc3Npb24uZ2V0U2Vzc2lvbihyZXEsIHJlcywge1xuICAgICAgICAgICAgb3ZlcnJpZGVHbG9iYWxDbGFpbVZhbGlkYXRvcnM6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW11cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pXG4gICAgfSBjYXRjaCAoZXJyOiBhbnkpIHtcbiAgICAgICAgaWYgKGVyci50eXBlID09PSBTZXNzaW9uLkVycm9yLlRSWV9SRUZSRVNIX1RPS0VOKSB7XG4gICAgICAgICAgICByZXR1cm4geyBwcm9wczogeyBmcm9tU3VwZXJ0b2tlbnM6ICduZWVkcy1yZWZyZXNoJyB9IH1cbiAgICAgICAgfSBlbHNlIGlmIChlcnIudHlwZSA9PT0gU2Vzc2lvbi5FcnJvci5VTkFVVEhPUklTRUQpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgd2lsbCBmb3JjZSB0aGUgZnJvbnRlbmQgdG8gdHJ5IGFuZCByZWZyZXNoIHdoaWNoIHdpbGwgZmFpbFxuICAgICAgICAgICAgLy8gY2xlYXJpbmcgYWxsIGNvb2tpZXMgYW5kIHJlZGlyZWN0aW5nIHRoZSB1c2VyIHRvIHRoZSBsb2dpbiBzY3JlZW4uXG4gICAgICAgICAgICByZXR1cm4geyBwcm9wczogeyBmcm9tU3VwZXJ0b2tlbnM6ICduZWVkcy1yZWZyZXNoJyB9IH1cbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnJcbiAgICB9XG5cbiAgICBpZiAoIXNlc3Npb24/LmdldFVzZXJJZCgpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZWRpcmVjdDoge1xuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uOiAnL1VzZXIvTG9naW4vVXNlckxvZ2luJyxcbiAgICAgICAgICAgICAgICBwZXJtYW5lbnQ6IGZhbHNlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgIHN1Yjogc2Vzc2lvbi5nZXRVc2VySWQoKSxcbiAgICAgICAgfVxuICAgIH1cbn1cblxudHlwZSBQcm9wcyA9IHtcbiAgICBjb2xvcjogc3RyaW5nLFxuICAgIHNldFBhcmVudENvbG9yOiBEaXNwYXRjaDxTZXRTdGF0ZUFjdGlvbjxzdHJpbmc+PixcbiAgICBjb3B5SXNNZWV0aW5nOiBib29sZWFuLFxuICAgIHNldFBhcmVudENvcHlJc01lZXRpbmc6IERpc3BhdGNoPFNldFN0YXRlQWN0aW9uPGJvb2xlYW4+PixcbiAgICBjb3B5SXNFeHRlcm5hbE1lZXRpbmc6IGJvb2xlYW4sXG4gICAgc2V0UGFyZW50Q29weUlzRXh0ZXJuYWxNZWV0aW5nOiBEaXNwYXRjaDxTZXRTdGF0ZUFjdGlvbjxib29sZWFuPj4sXG4gICAgZGVmYXVsdElzTWVldGluZzogYm9vbGVhbixcbiAgICBzZXRQYXJlbnREZWZhdWx0SXNNZWV0aW5nOiBEaXNwYXRjaDxTZXRTdGF0ZUFjdGlvbjxib29sZWFuPj4sXG4gICAgZGVmYXVsdElzRXh0ZXJuYWxNZWV0aW5nOiBib29sZWFuLFxuICAgIHNldFBhcmVudERlZmF1bHRJc0V4dGVybmFsTWVldGluZzogRGlzcGF0Y2g8U2V0U3RhdGVBY3Rpb248Ym9vbGVhbj4+LFxuICAgIGRlZmF1bHRNZWV0aW5nTW9kaWZpYWJsZTogYm9vbGVhbiwgIFxuICAgIHNldFBhcmVudERlZmF1bHRNZWV0aW5nTW9kaWZpYWJsZTogRGlzcGF0Y2g8U2V0U3RhdGVBY3Rpb248Ym9vbGVhbj4+LFxuICAgIGRlZmF1bHRFeHRlcm5hbE1lZXRpbmdNb2RpZmlhYmxlOiBib29sZWFuLFxuICAgIHNldFBhcmVudERlZmF1bHRFeHRlcm5hbE1lZXRpbmdNb2RpZmlhYmxlOiBEaXNwYXRjaDxTZXRTdGF0ZUFjdGlvbjxib29sZWFuPj4sXG59XG5cbmZ1bmN0aW9uIEVkaXRDYXRlZ29yeVN0ZXA2KHByb3BzOiBQcm9wcykge1xuICAgIGNvbnN0IFtjb3B5SXNNZWV0aW5nLCBzZXRDb3B5SXNNZWV0aW5nXSA9IHVzZVN0YXRlPGJvb2xlYW4+KHByb3BzPy5jb3B5SXNNZWV0aW5nID8/IGZhbHNlKVxuICAgIGNvbnN0IFtjb3B5SXNFeHRlcm5hbE1lZXRpbmcsIHNldENvcHlJc0V4dGVybmFsTWVldGluZ10gPSB1c2VTdGF0ZTxib29sZWFuPihwcm9wcz8uY29weUlzRXh0ZXJuYWxNZWV0aW5nID8/IGZhbHNlKVxuICAgIGNvbnN0IFtkZWZhdWx0SXNNZWV0aW5nLCBzZXREZWZhdWx0SXNNZWV0aW5nXSA9IHVzZVN0YXRlPGJvb2xlYW4+KHByb3BzPy5kZWZhdWx0SXNNZWV0aW5nID8/IGZhbHNlKVxuICAgIGNvbnN0IFtkZWZhdWx0SXNFeHRlcm5hbE1lZXRpbmcsIHNldERlZmF1bHRJc0V4dGVybmFsTWVldGluZ10gPSB1c2VTdGF0ZTxib29sZWFuPihwcm9wcz8uZGVmYXVsdElzRXh0ZXJuYWxNZWV0aW5nID8/IGZhbHNlKVxuICAgIGNvbnN0IFtjb2xvciwgc2V0Q29sb3JdID0gdXNlU3RhdGU8c3RyaW5nPihwcm9wcz8uY29sb3IpXG4gICAgY29uc3QgW2VuYWJsZVNlbGVjdENvbG9yLCBzZXRFbmFibGVTZWxlY3RDb2xvcl0gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSlcbiAgICBjb25zdCBbZGVmYXVsdE1lZXRpbmdNb2RpZmlhYmxlLCBzZXREZWZhdWx0TWVldGluZ01vZGlmaWFibGVdID0gdXNlU3RhdGU8Ym9vbGVhbj4ocHJvcHM/LmRlZmF1bHRNZWV0aW5nTW9kaWZpYWJsZSA/PyBmYWxzZSlcbiAgICBjb25zdCBbZGVmYXVsdEV4dGVybmFsTWVldGluZ01vZGlmaWFibGUsIHNldERlZmF1bHRFeHRlcm5hbE1lZXRpbmdNb2RpZmlhYmxlXSA9IHVzZVN0YXRlPGJvb2xlYW4+KHByb3BzPy5kZWZhdWx0RXh0ZXJuYWxNZWV0aW5nTW9kaWZpYWJsZSA/PyBmYWxzZSlcbiAgICBjb25zdCBbaXNNZXNzYWdlMSwgc2V0SXNNZXNzYWdlMV0gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSlcbiAgICBjb25zdCBbaXNNZXNzYWdlMiwgc2V0SXNNZXNzYWdlMl0gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSlcbiAgICBjb25zdCBbaXNNZXNzYWdlMywgc2V0SXNNZXNzYWdlM10gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSlcbiAgICBjb25zdCBbaXNNZXNzYWdlNCwgc2V0SXNNZXNzYWdlNF0gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSlcbiAgICBjb25zdCBbaXNNZXNzYWdlNSwgc2V0SXNNZXNzYWdlNV0gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSlcbiAgICBcbiAgICBjb25zdCBzZXRQYXJlbnRDb3B5SXNNZWV0aW5nID0gcHJvcHM/LnNldFBhcmVudENvcHlJc01lZXRpbmdcbiAgICBjb25zdCBzZXRQYXJlbnRDb3B5SXNFeHRlcm5hbE1lZXRpbmcgPSBwcm9wcz8uc2V0UGFyZW50Q29weUlzRXh0ZXJuYWxNZWV0aW5nXG4gICAgY29uc3Qgc2V0UGFyZW50RGVmYXVsdElzTWVldGluZyA9IHByb3BzPy5zZXRQYXJlbnREZWZhdWx0SXNNZWV0aW5nXG4gICAgY29uc3Qgc2V0UGFyZW50RGVmYXVsdElzRXh0ZXJuYWxNZWV0aW5nID0gcHJvcHM/LnNldFBhcmVudERlZmF1bHRJc0V4dGVybmFsTWVldGluZ1xuICAgIGNvbnN0IHNldFBhcmVudENvbG9yID0gcHJvcHM/LnNldFBhcmVudENvbG9yXG4gICAgY29uc3Qgc2V0UGFyZW50RGVmYXVsdE1lZXRpbmdNb2RpZmlhYmxlID0gcHJvcHM/LnNldFBhcmVudERlZmF1bHRNZWV0aW5nTW9kaWZpYWJsZVxuICAgIGNvbnN0IHNldFBhcmVudERlZmF1bHRFeHRlcm5hbE1lZXRpbmdNb2RpZmlhYmxlID0gcHJvcHM/LnNldFBhcmVudERlZmF1bHRFeHRlcm5hbE1lZXRpbmdNb2RpZmlhYmxlXG4gICAgXG4gICAgY29uc3QgY2hhbmdlQ29weUlzTWVldGluZyA9ICh2YWx1ZTogYm9vbGVhbikgPT4ge1xuICAgICAgICBzZXRDb3B5SXNNZWV0aW5nKHZhbHVlKVxuICAgICAgICBzZXRQYXJlbnRDb3B5SXNNZWV0aW5nKHZhbHVlKVxuICAgIH1cbiAgICBcbiAgICBjb25zdCBjaGFuZ2VDb3B5SXNFeHRlcm5hbE1lZXRpbmcgPSAodmFsdWU6IGJvb2xlYW4pID0+IHtcbiAgICAgICAgc2V0Q29weUlzRXh0ZXJuYWxNZWV0aW5nKHZhbHVlKVxuICAgICAgICBzZXRQYXJlbnRDb3B5SXNFeHRlcm5hbE1lZXRpbmcodmFsdWUpXG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGNoYW5nZURlZmF1bHRJc01lZXRpbmcgPSAodmFsdWU6IGJvb2xlYW4pID0+IHtcbiAgICAgICAgc2V0RGVmYXVsdElzTWVldGluZyh2YWx1ZSlcbiAgICAgICAgc2V0UGFyZW50RGVmYXVsdElzTWVldGluZyh2YWx1ZSlcbiAgICB9XG4gICAgXG4gICAgY29uc3QgY2hhbmdlRGVmYXVsdElzRXh0ZXJuYWxNZWV0aW5nID0gKHZhbHVlOiBib29sZWFuKSA9PiB7XG4gICAgICAgIHNldERlZmF1bHRJc0V4dGVybmFsTWVldGluZyh2YWx1ZSlcbiAgICAgICAgc2V0UGFyZW50RGVmYXVsdElzRXh0ZXJuYWxNZWV0aW5nKHZhbHVlKVxuICAgIH1cbiAgICBcbiAgICBjb25zdCBjaGFuZ2VDb2xvciA9ICh2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgICAgIHNldENvbG9yKHZhbHVlKVxuICAgICAgICBzZXRQYXJlbnRDb2xvcih2YWx1ZSlcbiAgICB9XG5cbiAgICBjb25zdCBjaGFuZ2VEZWZhdWx0TWVldGluZ01vZGlmaWFibGUgPSAodmFsdWU6IGJvb2xlYW4pID0+IHtcbiAgICAgICAgc2V0RGVmYXVsdE1lZXRpbmdNb2RpZmlhYmxlKHZhbHVlKVxuICAgICAgICBzZXRQYXJlbnREZWZhdWx0TWVldGluZ01vZGlmaWFibGUodmFsdWUpXG4gICAgfVxuXG4gICAgY29uc3QgY2hhbmdlRGVmYXVsdEV4dGVybmFsTWVldGluZ01vZGlmaWFibGUgPSAodmFsdWU6IGJvb2xlYW4pID0+IHtcbiAgICAgICAgc2V0RGVmYXVsdEV4dGVybmFsTWVldGluZ01vZGlmaWFibGUodmFsdWUpXG4gICAgICAgIHNldFBhcmVudERlZmF1bHRFeHRlcm5hbE1lZXRpbmdNb2RpZmlhYmxlKHZhbHVlKVxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAgIDxCb3gganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCIgd2lkdGg9XCIxMDAlXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgtMSBmbGV4IGZsZXgtY29sIGp1c3RpZnktY2VudGVyIGl0ZW1zLWNlbnRlciB3LWZ1bGxcIj5cbiAgICAgICAgICAgICAgICA8Qm94ICBzdHlsZT17eyB3aWR0aDogJzkwJScgfX0gcHQ9e3sgcGhvbmU6ICdtJywgdGFibGV0OiAncycgfX0+IFxuICAgICAgICAgICAgICAgICAgICA8Qm94IHN0eWxlPXt7IHdpZHRoOiAnOTAlJyB9fSBmbGV4RGlyZWN0aW9uPVwicm93XCIganVzdGlmeUNvbnRlbnQ9XCJmbGV4LXN0YXJ0XCIgYWxpZ25JdGVtcz1cImNlbnRlclwiPiAgXG4gICAgICAgICAgICAgICAgICAgICAgICA8VGV4dCB2YXJpYW50PVwib3B0aW9uSGVhZGVyXCI+U2VsZWN0IGNvbG9yIGZvciBhbnkgbmV3IGV2ZW50cyB3aXRoIHRoZSBnaXZlbiB0YWc8L1RleHQ+XG4gICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICA8Qm94IHN0eWxlPXt7IHdpZHRoOiAnOTAlJyB9fSBmbGV4RGlyZWN0aW9uPVwicm93XCIganVzdGlmeUNvbnRlbnQ9XCJmbGV4LWVuZFwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIj4gXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q2lyY2xlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzPXtbICcjMDM5YmU1JywgJyM3OTg2Y2InLCAnIzMzYjY3OScsICcjOGUyNGFhJywgJyNlNjdjNzMnLCAnI2Y2YzAyNicsICcjZjU1MTFkJywgJyM2MTYxNjEnLCAnIzNmNTFiNScsICcjMGI4MDQzJywgJyNkNjAwMDAnIF19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9e2NvbG9yfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoY29sb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlQ29sb3IoY29sb3IuaGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgPEJveCAgc3R5bGU9e3sgd2lkdGg6ICc5MCUnIH19IHB0PXt7IHBob25lOiAnbScsIHRhYmxldDogJ3MnIH19PlxuICAgICAgICAgICAgICAgICAgICA8Qm94IGZsZXhEaXJlY3Rpb249XCJyb3dcIiBqdXN0aWZ5Q29udGVudD1cImZsZXgtc3RhcnRcIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VG9vbHRpcCBoYXNBcnJvdyBsYWJlbD0nRXZlbnQgd2lsbCBiZSB0YWdnZWQgd2l0aCBNZWV0aW5nIHRvcGljIChpZiBleGlzdHMpIGFuZCBzZXR0aW5ncyBmb3IgdGhlIHRhZyB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGV2ZW50LiBOb3RlOiB0cmFpbmluZyBzZXR0aW5ncyBvdmVycmlkZSB0YWcgc2V0dGluZ3MgZm9yIHNjaGVkdWxlIGFzc2lzdHMgaW4gY2FzZSBvZiBvdmVybGFwLicgYmc9J3B1cnBsZS43MDAnIGNvbG9yPSd3aGl0ZSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRleHQgdmFyaWFudD1cIm9wdGlvbkhlYWRlclwiPkNvcHkgb3ZlciAmYXBvczttZWV0aW5nIHR5cGUmYXBvczsgdmFsdWUgdG8gYW55IG5ldyBldmVudCB3aG9zZSBkZXRhaWxzIGhhdmUgc2ltaWxhciBjb250ZXh0IHRvIGEgcGFzdCBldmVudCBhbmQgZ2l2ZW4gdGFnIGZvciBzY2hlZHVsaW5nIGFzc2lzdHM/PC9UZXh0PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICAgICAgPEJveCBmbGV4RGlyZWN0aW9uPVwicm93XCIganVzdGlmeUNvbnRlbnQ9XCJmbGV4LWVuZFwiIHB0PXt7IHBob25lOiAnbScsIHRhYmxldDogJ3MnIH19PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFN3aXRjaDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNvbG9yPXtDb2xvcnMucHVycGxlMzB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2ZmQ29sb3I9e0NvbG9ycy5wdXJwbGU2MH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXtjb3B5SXNNZWV0aW5nfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uVmFsdWVDaGFuZ2U9e2NoYW5nZUNvcHlJc01lZXRpbmd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgbWFyZ2luQm90dG9tOiAyMCB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgPEJveCAgc3R5bGU9e3sgd2lkdGg6ICc5MCUnIH19IHB0PXt7IHBob25lOiAnbScsIHRhYmxldDogJ3MnIH19PlxuICAgICAgICAgICAgICAgICAgICA8Qm94IGZsZXhEaXJlY3Rpb249XCJyb3dcIiBqdXN0aWZ5Q29udGVudD1cImZsZXgtc3RhcnRcIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VG9vbHRpcCBoYXNBcnJvdyBsYWJlbD0nVGFnIHdpdGggRXh0ZXJuYWwgTWVldGluZyB0b3BpYyAoaWYgYXZhaWxhYmxlKSBpcyBhIG1lZXRpbmcgd2l0aCBjb250YWN0IG91dHNpZGUgdGhlIG9yZ2FuaXphdGlvbi4gRXZlbnQgd2lsbCBiZSB0YWdnZWQgd2l0aCBleHRlcm5hbCBtZWV0aW5nIHRvcGljIGFuZCBzZXR0aW5ncyBmb3IgdGhlIHRhZyB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGV2ZW50LiBOb3RlOiB0cmFpbmluZyBzZXR0aW5ncyBvdmVycmlkZSB0YWcgc2V0dGluZ3MgZm9yIHNjaGVkdWxlIGFzc2lzdHMgaW4gY2FzZSBvZiBvdmVybGFwLicgYmc9J3B1cnBsZS43MDAnIGNvbG9yPSd3aGl0ZSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRleHQgdmFyaWFudD1cIm9wdGlvbkhlYWRlclwiPkNvcHkgb3ZlciAmYXBvcztleHRlcm5hbCBtZWV0aW5nIHR5cGUmYXBvczsgdmFsdWUgdG8gYW55IG5ldyBldmVudCB3aG9zZSBkZXRhaWxzIGhhdmUgc2ltaWxhciBjb250ZXh0ICB0byBhIHBhc3QgZXZlbnQgYW5kIGdpdmVuIHRhZyAobWVldGluZyB3aXRoIGEgY29udGFjdCBvdXRzaWRlIHRoZSBvcmdhbml6YXRpb24pIGZvciBzY2hlZHVsaW5nIGFzc2lzdHM/IDwvVGV4dD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgICAgIDxCb3ggZmxleERpcmVjdGlvbj1cInJvd1wiIGp1c3RpZnlDb250ZW50PVwiZmxleC1lbmRcIiBwdD17eyBwaG9uZTogJ20nLCB0YWJsZXQ6ICdzJyB9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTd2l0Y2gxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25Db2xvcj17Q29sb3JzLnB1cnBsZTMwfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZkNvbG9yPXtDb2xvcnMucHVycGxlNjB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17Y29weUlzRXh0ZXJuYWxNZWV0aW5nfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uVmFsdWVDaGFuZ2U9e2NoYW5nZUNvcHlJc0V4dGVybmFsTWVldGluZ31cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgIDxCb3ggIHN0eWxlPXt7IHdpZHRoOiAnOTAlJyB9fSBwdD17eyBwaG9uZTogJ20nLCB0YWJsZXQ6ICdzJyB9fT5cbiAgICAgICAgICAgICAgICAgICAgPEJveCBmbGV4RGlyZWN0aW9uPVwicm93XCIganVzdGlmeUNvbnRlbnQ9XCJmbGV4LXN0YXJ0XCIgYWxpZ25JdGVtcz1cImNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFRleHQgdmFyaWFudD1cIm9wdGlvbkhlYWRlclwiPkNsYXNzaWZ5IGFueSBuZXcgZXZlbnRzIHdpdGggdGhlIGdpdmVuIHRhZyBhcyAmYXBvczttZWV0aW5nIHR5cGUmYXBvczsgZXZlbnQgZm9yIHNjaGVkdWxpbmcgYXNzaXN0cz8gPC9UZXh0PlxuICAgICAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICAgICAgPEJveCBmbGV4RGlyZWN0aW9uPVwicm93XCIganVzdGlmeUNvbnRlbnQ9XCJmbGV4LWVuZFwiIHB0PXt7IHBob25lOiAnbScsIHRhYmxldDogJ3MnIH19PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFN3aXRjaDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNvbG9yPXtDb2xvcnMucHVycGxlMzB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2ZmQ29sb3I9e0NvbG9ycy5wdXJwbGU2MH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXtkZWZhdWx0SXNNZWV0aW5nfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uVmFsdWVDaGFuZ2U9e2NoYW5nZURlZmF1bHRJc01lZXRpbmd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgbWFyZ2luQm90dG9tOiAyMCB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgPEJveCAgc3R5bGU9e3sgd2lkdGg6ICc5MCUnIH19IHB0PXt7IHBob25lOiAnbScsIHRhYmxldDogJ3MnIH19PlxuICAgICAgICAgICAgICAgICAgICA8Qm94IGZsZXhEaXJlY3Rpb249XCJyb3dcIiBqdXN0aWZ5Q29udGVudD1cImZsZXgtc3RhcnRcIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VGV4dCB2YXJpYW50PVwib3B0aW9uSGVhZGVyXCI+Q2xhc3NpZnkgYW55IG5ldyBldmVudHMgd2l0aCB0aGUgZ2l2ZW4gdGFnIGFzICZhcG9zO2V4dGVybmFsIG1lZXRpbmcgdHlwZSZhcG9zOyBldmVudCAobWVldGluZyB3aXRoIGEgY29udGFjdCBvdXRzaWRlIHRoZSBvcmdhbml6YXRpb24pIGZvciBzY2hlZHVsaW5nIGFzc2lzdHM/IDwvVGV4dD5cbiAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgICAgIDxCb3ggZmxleERpcmVjdGlvbj1cInJvd1wiIGp1c3RpZnlDb250ZW50PVwiZmxleC1lbmRcIiBwdD17eyBwaG9uZTogJ20nLCB0YWJsZXQ6ICdzJyB9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTd2l0Y2gxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25Db2xvcj17Q29sb3JzLnB1cnBsZTMwfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZkNvbG9yPXtDb2xvcnMucHVycGxlNjB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17ZGVmYXVsdElzRXh0ZXJuYWxNZWV0aW5nfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uVmFsdWVDaGFuZ2U9e2NoYW5nZURlZmF1bHRJc0V4dGVybmFsTWVldGluZ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyBtYXJnaW5Cb3R0b206IDIwIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICA8Qm94ICBzdHlsZT17eyB3aWR0aDogJzkwJScgfX0gcHQ9e3sgcGhvbmU6ICdtJywgdGFibGV0OiAncycgfX0+XG4gICAgICAgICAgICAgICAgICAgIDxCb3ggZmxleERpcmVjdGlvbj1cInJvd1wiIGp1c3RpZnlDb250ZW50PVwiZmxleC1zdGFydFwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0IHZhcmlhbnQ9XCJvcHRpb25IZWFkZXJcIj5CeSBkZWZhdWx0IGxvY2sgKG1ha2Ugc3RhdGljKSBhbnkgbmV3IGV2ZW50cyB0aGF0IGFyZSBjbGFzc2lmaWVkIGFzICZhcG9zO21lZXRpbmcgdHlwZSZhcG9zOyBldmVudCB3aXRoIHRoZSBnaXZlbiB0YWcgZm9yIHNjaGVkdWxpbmcgYXNzaXN0cz8gPC9UZXh0PlxuICAgICAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICAgICAgPEJveCBmbGV4RGlyZWN0aW9uPVwicm93XCIganVzdGlmeUNvbnRlbnQ9XCJmbGV4LWVuZFwiIHB0PXt7IHBob25lOiAnbScsIHRhYmxldDogJ3MnIH19PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFN3aXRjaDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNvbG9yPXtDb2xvcnMucHVycGxlMzB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2ZmQ29sb3I9e0NvbG9ycy5wdXJwbGU2MH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXtkZWZhdWx0TWVldGluZ01vZGlmaWFibGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25WYWx1ZUNoYW5nZT17Y2hhbmdlRGVmYXVsdE1lZXRpbmdNb2RpZmlhYmxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IG1hcmdpbkJvdHRvbTogMjAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgIDxCb3ggIHN0eWxlPXt7IHdpZHRoOiAnOTAlJyB9fSBwdD17eyBwaG9uZTogJ20nLCB0YWJsZXQ6ICdzJyB9fT5cbiAgICAgICAgICAgICAgICAgICAgPEJveCBmbGV4RGlyZWN0aW9uPVwicm93XCIganVzdGlmeUNvbnRlbnQ9XCJmbGV4LXN0YXJ0XCIgYWxpZ25JdGVtcz1cImNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFRleHQgdmFyaWFudD1cIm9wdGlvbkhlYWRlclwiPkJ5IGRlZmF1bHQgbG9jayAobWFrZSBzdGF0aWMpIGFueSBuZXcgZXZlbnRzIHRoYXQgYXJlIGNsYXNzaWZpZWQgYXMgJmFwb3M7ZXh0ZXJuYWwgbWVldGluZyB0eXBlJmFwb3M7IGV2ZW50IHdpdGggdGhlIGdpdmVuIHRhZyBmb3Igc2NoZWR1bGluZyBhc3Npc3RzPyA8L1RleHQ+XG4gICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICA8Qm94IGZsZXhEaXJlY3Rpb249XCJyb3dcIiBqdXN0aWZ5Q29udGVudD1cImZsZXgtZW5kXCIgcHQ9e3sgcGhvbmU6ICdtJywgdGFibGV0OiAncycgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3dpdGNoMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ29sb3I9e0NvbG9ycy5wdXJwbGUzMH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZDb2xvcj17Q29sb3JzLnB1cnBsZTYwfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e2RlZmF1bHRFeHRlcm5hbE1lZXRpbmdNb2RpZmlhYmxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uVmFsdWVDaGFuZ2U9e2NoYW5nZURlZmF1bHRFeHRlcm5hbE1lZXRpbmdNb2RpZmlhYmxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IG1hcmdpbkJvdHRvbTogMjAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvQm94PlxuICAgIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgRWRpdENhdGVnb3J5U3RlcDZcbiJdfQ==