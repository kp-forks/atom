"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Switch_1 = __importDefault(require("@components/Switch"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const TextField_1 = __importDefault(require("@components/TextField"));
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("@config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
const dayOfWeekInt = [-1, 1, 2, 3, 4, 5, 6, 7];
function EditCategoryStep3(props) {
    const [defaultPriorityLevel, setDefaultPriorityLevel] = (0, react_1.useState)(props?.defaultPriorityLevel ?? 1);
    const [defaultModifiable, setDefaultModifiable] = (0, react_1.useState)(props?.defaultModifiable ?? false);
    // const setParentDefaultReminders = props?.setParentDefaultReminders
    const setParentDefaultPriorityLevel = props?.setParentDefaultPriorityLevel;
    const setParentDefaultModifiable = props?.setParentDefaultModifiable;
    // const changeDefaultReminders = (value: DefaultRemindersType) => {
    //     setDefaultReminders(value)
    //     setParentDefaultReminders(value)
    // }
    const changeDefaultPriorityLevel = (value) => {
        setDefaultPriorityLevel(parseInt(value.replace(/[^0-9.]/g, ''), 10));
        setParentDefaultPriorityLevel(parseInt(value.replace(/[^0-9.]/g, ''), 10));
    };
    const changeDefaultModifiable = (value) => {
        setDefaultModifiable(value);
        setParentDefaultModifiable(value);
    };
    return ((0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsxs)("div", { className: "flex-1 flex flex-col justify-center items-center", style: { minHeight: '70vh' }, children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '90%' }, pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Set default priority level for any new events with the given tag?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { type: "number", onChange: (e) => changeDefaultPriorityLevel(e?.target?.value), value: defaultPriorityLevel.toString() }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '90%' }, pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Set default time Modifiable / Not Modifiable value to any new events with the given tag for scheduling assists? " }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: defaultModifiable, onValueChange: changeDefaultModifiable, style: { marginBottom: 20 } }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "flex-end", children: defaultModifiable
                                ? ((0, jsx_runtime_1.jsx)(Text_1.default, { variant: "body", children: "Modifiable" })) : ((0, jsx_runtime_1.jsx)(Text_1.default, { variant: "body", children: " Not Modifiable" })) })] })] }) }));
}
exports.default = EditCategoryStep3;
//# sourceMappingURL=data:application/json;base64,