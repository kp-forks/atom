"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const Switch_1 = __importDefault(require("@components/Switch"));
const TextField_1 = __importDefault(require("@components/TextField"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("@config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
const colorsPalette_1 = require("@lib/theme/colorsPalette");
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function EditCategoryStep1(props) {
    const [name, setName] = (0, react_1.useState)(props.name);
    const [copyAvailability, setCopyAvailability] = (0, react_1.useState)(props?.copyAvailability ?? false);
    const [copyTimeBlocking, setCopyTimeBlocking] = (0, react_1.useState)(props?.copyTimeBlocking ?? false);
    const [isMessage1, setIsMessage1] = (0, react_1.useState)(false);
    const [isMessage2, setIsMessage2] = (0, react_1.useState)(false);
    const setParentName = props?.setParentName;
    const setParentCopyAvailability = props?.setParentCopyAvailability;
    const setParentCopyTimeBlocking = props?.setParentCopyTimeBlocking;
    (0, react_1.useEffect)(() => {
        if (name !== props?.name) {
            setName(props?.name);
        }
        if (copyAvailability !== props?.copyAvailability) {
            setCopyAvailability(props?.copyAvailability ?? false);
        }
        if (copyTimeBlocking !== props?.copyTimeBlocking) {
            setCopyTimeBlocking(props?.copyTimeBlocking ?? false);
        }
    }, [props?.name, props?.copyAvailability, props?.copyTimeBlocking, name, copyAvailability, copyTimeBlocking]);
    const changeCopyAvailability = (value) => {
        setCopyAvailability(value);
        setParentCopyAvailability(value);
    };
    const changeCopyTimeBlocking = (value) => {
        setCopyTimeBlocking(value);
        setParentCopyTimeBlocking(value);
    };
    const changeName = (value) => {
        setName(value);
        setParentName(value);
    };
    return ((0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsxs)("div", { className: "flex-1 flex flex-col jsutify-start items-center", style: { minHeight: '70vh' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "flex-start", style: { width: '90%' }, pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Name", placeholder: "social", onChange: (e) => changeName(e?.target?.value), value: name }) }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '90%' }, pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(react_2.Tooltip, { hasArrow: true, label: 'Event availability shown in your calendar will be copied over to any new events whose details are similar to this one. Helpful for task events that are synced or created inside Atomic.', bg: 'purple.700', color: 'white', children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", pt: { phone: 'm', tablet: 's' }, children: "Once you set time preferences or priority of an event, copy over transparency of event to any new events whose details are similar? (Hint)" }) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { onColor: colorsPalette_1.colorsPalette.purple30, offColor: colorsPalette_1.colorsPalette.purple60, checked: copyAvailability, onValueChange: changeCopyAvailability, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '90%' }, pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(react_2.Tooltip, { hasArrow: true, label: 'Blocked time for before and after the event will be copied over to new events whose details are similar to this one.', bg: 'purple.700', color: 'white', children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", pt: { phone: 'm', tablet: 's' }, children: "Once you set time preferences or priority of an event, copy over buffer times to any new events whose details have similar context? (Hint)" }) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { onColor: colorsPalette_1.colorsPalette.purple30, offColor: colorsPalette_1.colorsPalette.purple60, checked: copyTimeBlocking, onValueChange: changeCopyTimeBlocking, style: { marginBottom: 20 } }) })] })] }) }));
}
exports.default = EditCategoryStep1;
//# sourceMappingURL=data:application/json;base64,