"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Switch_1 = __importDefault(require("@components/Switch"));
const TextField_1 = __importDefault(require("@components/TextField"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("@config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function EditCategoryStep2(props) {
    const [defaultAvailability, setDefaultAvailability] = (0, react_1.useState)(props?.defaultAvailability ?? false);
    const [defaultTimeBlocking, setDefaultTimeBlocking] = (0, react_1.useState)(props?.defaultTimeBlocking);
    const [beforeEvent, setBeforeEvent] = (0, react_1.useState)(props?.defaultTimeBlocking?.beforeEvent ?? 0);
    const [afterEvent, setAfterEvent] = (0, react_1.useState)(props?.defaultTimeBlocking?.afterEvent ?? 0);
    const [enableTimeBlocking, setEnableTimeBlocking] = (0, react_1.useState)(props?.defaultTimeBlocking?.beforeEvent > 0 || props?.defaultTimeBlocking?.afterEvent > 0);
    const setParentDefaultAvailability = props?.setParentDefaultAvailability;
    const setParentDefaultTimeBlocking = props?.setParentDefaultTimeBlocking;
    const changeDefaultAvailability = (value) => {
        setDefaultAvailability(value);
        setParentDefaultAvailability(value);
    };
    const changeDefaultTimeBlocking = (value) => {
        setDefaultTimeBlocking(value);
        setParentDefaultTimeBlocking(value);
    };
    const changeBeforeEvent = (value) => {
        setBeforeEvent(parseInt(value.replace(/[^0-9.]/g, ''), 10));
        setEnableTimeBlocking(parseInt(value.replace(/[^0-9.]/g, ''), 10) > 0);
        changeDefaultTimeBlocking({ ...defaultTimeBlocking, beforeEvent: parseInt(value.replace(/[^0-9.]/g, ''), 10) });
    };
    const changeAfterEvent = (value) => {
        setAfterEvent(parseInt(value.replace(/[^0-9.]/g, ''), 10));
        setEnableTimeBlocking(parseInt(value.replace(/[^0-9.]/g, ''), 10) > 0);
        changeDefaultTimeBlocking({ ...defaultTimeBlocking, afterEvent: parseInt(value.replace(/[^0-9.]/g, ''), 10) });
    };
    const onChangeEnableTimeBlocking = (value) => {
        setEnableTimeBlocking(value);
        if (!value) {
            changeDefaultTimeBlocking({ beforeEvent: 0, afterEvent: 0 });
        }
    };
    return ((0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsxs)("div", { className: "flex-1 flex flex-col justify-center items-center", style: { minHeight: '70vh' }, children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '90%' }, pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '90%' }, children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", pt: { phone: 'xs', tablet: 's' }, children: "Set default availability / transparency for any new events with the given tag?" }), (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "comment", pt: { phone: 'xs', tablet: 's' }, children: defaultAvailability ? 'Transparent/not busy or available for meeting' : 'Opaque/busy or not available for meeting' })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: defaultAvailability, onValueChange: changeDefaultAvailability, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '90%' }, pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", pt: { phone: 'xs', tablet: 's' }, children: "Enable default buffer times for any new events with the given tag?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: enableTimeBlocking, onValueChange: onChangeEnableTimeBlocking, style: { marginBottom: 20 } }) })] }), enableTimeBlocking
                    ? ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '90%' }, pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", p: { phone: 's', tablet: 'm' }, style: { width: '60%' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Default prep time before event", trailingAccessory: (0, jsx_runtime_1.jsx)(Text_1.default, { children: "Minutes" }), value: `${beforeEvent}`, onChange: (e) => changeBeforeEvent(e?.target?.value), type: "number", style: { marginBottom: 20, width: '15%' } }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", p: { phone: 's', tablet: 'm' }, style: { width: '60%' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Default debrief/review time after event", trailingAccessory: (0, jsx_runtime_1.jsx)(Text_1.default, { children: "Minutes" }), value: `${afterEvent}`, onChange: (e) => changeAfterEvent(e?.target?.value), type: "number", style: { marginBottom: 20, width: '15%' } }) })] })) : null] }) }));
}
exports.default = EditCategoryStep2;
//# sourceMappingURL=data:application/json;base64,