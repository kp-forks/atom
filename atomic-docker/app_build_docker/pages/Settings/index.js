"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const userRoleContext_1 = require("../../contexts/userRole/userRoleContext");
/**
 * Settings page component for managing user roles.
 * It allows users to activate or deactivate roles, which in turn
 * controls access to different features within the application.
 */
const SettingsPage = () => {
    // Access the role management context.
    // This hook will fail if the component is not rendered within a UserRoleProvider.
    // We will ensure the provider is added in `_app.tsx`.
    const { availableRoles, hasRole, toggleRole } = (0, userRoleContext_1.useUserRole)();
    return ((0, jsx_runtime_1.jsxs)("div", { style: { padding: '20px', fontFamily: 'Arial, sans-serif' }, children: [(0, jsx_runtime_1.jsx)("h1", { children: "Settings" }), (0, jsx_runtime_1.jsx)("h2", { children: "Manage Your Roles & Agent Skills" }), (0, jsx_runtime_1.jsx)("p", { children: "Select the roles you want to activate. These determine which features and tools are available to you." }), (0, jsx_runtime_1.jsx)("div", { style: { marginTop: '20px', display: 'flex', flexDirection: 'column', gap: '10px' }, children: availableRoles.map((role) => ((0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsxs)("label", { style: { display: 'flex', alignItems: 'center', cursor: 'pointer' }, children: [(0, jsx_runtime_1.jsx)("input", { type: "checkbox", checked: hasRole(role), onChange: () => toggleRole(role), style: { marginRight: '10px', height: '18px', width: '18px' } }), (0, jsx_runtime_1.jsx)("span", { style: { textTransform: 'capitalize' }, children: role.replace('_', ' ') })] }) }, role))) })] }));
};
exports.default = SettingsPage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsNkVBQXNFO0FBRXRFOzs7O0dBSUc7QUFDSCxNQUFNLFlBQVksR0FBRyxHQUFHLEVBQUU7SUFDeEIsc0NBQXNDO0lBQ3RDLGtGQUFrRjtJQUNsRixzREFBc0Q7SUFDdEQsTUFBTSxFQUFFLGNBQWMsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsSUFBQSw2QkFBVyxHQUFFLENBQUM7SUFFOUQsT0FBTyxDQUNMLGlDQUFLLEtBQUssRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLG1CQUFtQixFQUFFLGFBQzlELHNEQUFpQixFQUNqQiw4RUFBeUMsRUFDekMsa0pBQTRHLEVBRTVHLGdDQUFLLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsWUFDckYsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FDNUIsMENBQ0UsbUNBQU8sS0FBSyxFQUFFLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsYUFDeEUsa0NBQ0UsSUFBSSxFQUFDLFVBQVUsRUFDZixPQUFPLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUN0QixRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUNoQyxLQUFLLEVBQUUsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxHQUM3RCxFQUNGLGlDQUFNLEtBQUssRUFBRSxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsWUFDekMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQ2xCLElBQ0QsSUFYQSxJQUFJLENBWVIsQ0FDUCxDQUFDLEdBQ0UsSUFDRixDQUNQLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixrQkFBZSxZQUFZLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlVXNlclJvbGUgfSBmcm9tICcuLi8uLi9jb250ZXh0cy91c2VyUm9sZS91c2VyUm9sZUNvbnRleHQnO1xuXG4vKipcbiAqIFNldHRpbmdzIHBhZ2UgY29tcG9uZW50IGZvciBtYW5hZ2luZyB1c2VyIHJvbGVzLlxuICogSXQgYWxsb3dzIHVzZXJzIHRvIGFjdGl2YXRlIG9yIGRlYWN0aXZhdGUgcm9sZXMsIHdoaWNoIGluIHR1cm5cbiAqIGNvbnRyb2xzIGFjY2VzcyB0byBkaWZmZXJlbnQgZmVhdHVyZXMgd2l0aGluIHRoZSBhcHBsaWNhdGlvbi5cbiAqL1xuY29uc3QgU2V0dGluZ3NQYWdlID0gKCkgPT4ge1xuICAvLyBBY2Nlc3MgdGhlIHJvbGUgbWFuYWdlbWVudCBjb250ZXh0LlxuICAvLyBUaGlzIGhvb2sgd2lsbCBmYWlsIGlmIHRoZSBjb21wb25lbnQgaXMgbm90IHJlbmRlcmVkIHdpdGhpbiBhIFVzZXJSb2xlUHJvdmlkZXIuXG4gIC8vIFdlIHdpbGwgZW5zdXJlIHRoZSBwcm92aWRlciBpcyBhZGRlZCBpbiBgX2FwcC50c3hgLlxuICBjb25zdCB7IGF2YWlsYWJsZVJvbGVzLCBoYXNSb2xlLCB0b2dnbGVSb2xlIH0gPSB1c2VVc2VyUm9sZSgpO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBzdHlsZT17eyBwYWRkaW5nOiAnMjBweCcsIGZvbnRGYW1pbHk6ICdBcmlhbCwgc2Fucy1zZXJpZicgfX0+XG4gICAgICA8aDE+U2V0dGluZ3M8L2gxPlxuICAgICAgPGgyPk1hbmFnZSBZb3VyIFJvbGVzICYgQWdlbnQgU2tpbGxzPC9oMj5cbiAgICAgIDxwPlNlbGVjdCB0aGUgcm9sZXMgeW91IHdhbnQgdG8gYWN0aXZhdGUuIFRoZXNlIGRldGVybWluZSB3aGljaCBmZWF0dXJlcyBhbmQgdG9vbHMgYXJlIGF2YWlsYWJsZSB0byB5b3UuPC9wPlxuXG4gICAgICA8ZGl2IHN0eWxlPXt7IG1hcmdpblRvcDogJzIwcHgnLCBkaXNwbGF5OiAnZmxleCcsIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLCBnYXA6ICcxMHB4JyB9fT5cbiAgICAgICAge2F2YWlsYWJsZVJvbGVzLm1hcCgocm9sZSkgPT4gKFxuICAgICAgICAgIDxkaXYga2V5PXtyb2xlfT5cbiAgICAgICAgICAgIDxsYWJlbCBzdHlsZT17eyBkaXNwbGF5OiAnZmxleCcsIGFsaWduSXRlbXM6ICdjZW50ZXInLCBjdXJzb3I6ICdwb2ludGVyJyB9fT5cbiAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICAgICAgICBjaGVja2VkPXtoYXNSb2xlKHJvbGUpfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoKSA9PiB0b2dnbGVSb2xlKHJvbGUpfVxuICAgICAgICAgICAgICAgIHN0eWxlPXt7IG1hcmdpblJpZ2h0OiAnMTBweCcsIGhlaWdodDogJzE4cHgnLCB3aWR0aDogJzE4cHgnIH19XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxzcGFuIHN0eWxlPXt7IHRleHRUcmFuc2Zvcm06ICdjYXBpdGFsaXplJyB9fT5cbiAgICAgICAgICAgICAgICB7cm9sZS5yZXBsYWNlKCdfJywgJyAnKX1cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKSl9XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNldHRpbmdzUGFnZTtcbiJdfQ==