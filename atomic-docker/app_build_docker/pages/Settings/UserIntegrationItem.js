"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_native_1 = require("react-native");
const TextField_1 = __importDefault(require("@components/TextField"));
const picker_1 = require("@react-native-picker/picker");
const Text_1 = __importDefault(require("@components/common/Text"));
const RegularCard_1 = __importDefault(require("@components/RegularCard"));
const Button_1 = __importDefault(require("@components/Button"));
const theme_1 = require("@lib/theme/theme");
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("@config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function UserIntegrationItem(props) {
    const { index, token: oldToken, resource: oldResource, resourceId: oldResourceId, name: oldName, tableName: oldTableName, updateParentTokenValue, updateParentResourceValue, updateParentResourceIdValue, updateParentNameValue, updateParentTableNameValue, removeParentIntegration, } = props;
    const [token, setToken] = (0, react_1.useState)(oldToken || '');
    const [resource, setResource] = (0, react_1.useState)(oldResource || '');
    const [resourceId, setResourceId] = (0, react_1.useState)(oldResourceId || '');
    const [name, setName] = (0, react_1.useState)(oldName || '');
    const [tableName, setTableName] = (0, react_1.useState)(oldTableName);
    const dark = (0, react_native_1.useColorScheme)() === 'dark';
    const updateTokenValue = (value) => {
        setToken(value);
        updateParentTokenValue(index, value);
    };
    const updateResourceValue = (value) => {
        setResource(value);
        updateParentResourceValue(index, value);
    };
    const updateResourceIdValue = (value) => {
        setResourceId(value);
        updateParentResourceIdValue(index, value);
    };
    const updateNameValue = (value) => {
        setName(value);
        updateParentNameValue(index, value);
    };
    const updateTableNameValue = (value) => {
        setTableName(value);
        updateParentTableNameValue(index, value);
    };
    const removeIntegration = async () => {
        try {
            await removeParentIntegration(index);
        }
        catch (e) {
            console.log(e, ' unable to remove integration');
        }
    };
    return ((0, jsx_runtime_1.jsx)(react_native_1.TouchableWithoutFeedback, { style: { width: '100%' }, onPress: react_native_1.Keyboard.dismiss, children: (0, jsx_runtime_1.jsxs)(RegularCard_1.default, { justifyContent: "center", alignItems: "center", style: { width: '97%' }, children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", p: { phone: 's', tablet: 'm' }, children: name }), (0, jsx_runtime_1.jsx)(TextField_1.default, { onChange: (e) => updateNameValue(e?.target?.value), value: name, placeholder: "Notion", label: "Name", style: { width: '80%' }, hint: "Type name of connected app here - required" }), (0, jsx_runtime_1.jsx)(TextField_1.default, { onChange: (e) => updateTokenValue(e?.target?.value), value: token, placeholder: "abc123", label: "Token", style: { width: '80%' }, hint: "Copy and Paste token here - optional" }), (0, jsx_runtime_1.jsx)(TextField_1.default, { onChange: (e) => updateResourceValue(e?.target?.value), value: resource, placeholder: "database", label: "Resource", style: { width: '80%' }, hint: "Name of resource that is part of the connected app - optional" }), (0, jsx_runtime_1.jsx)(TextField_1.default, { onChange: (e) => updateResourceIdValue(e?.target?.value), value: resourceId, placeholder: "abc123", label: "Resource Id", style: { width: '80%' }, hint: "Resource Id that is part of the connected app - optional" }), (0, jsx_runtime_1.jsxs)(picker_1.Picker, { selectedValue: tableName, onValueChange: updateTableNameValue, style: { width: '80%', color: dark ? theme_1.palette.white : theme_1.palette.textBlack }, children: [(0, jsx_runtime_1.jsx)(picker_1.Picker.Item, { color: dark ? theme_1.palette.white : theme_1.palette.textBlack, value: "Daily", label: "Daily" }, "Daily"), (0, jsx_runtime_1.jsx)(picker_1.Picker.Item, { color: dark ? theme_1.palette.white : theme_1.palette.textBlack, value: "Weekly", label: "Weekly" }, "Weekly"), (0, jsx_runtime_1.jsx)(picker_1.Picker.Item, { color: dark ? theme_1.palette.white : theme_1.palette.textBlack, value: "Master", label: "Master" }, "Master"), (0, jsx_runtime_1.jsx)(picker_1.Picker.Item, { color: dark ? theme_1.palette.white : theme_1.palette.textBlack, value: "Grocery", label: "Grocery" }, "Grocery")] }), (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: () => removeIntegration(), children: "Remove" })] }) }));
}
exports.default = UserIntegrationItem;
//# sourceMappingURL=data:application/json;base64,