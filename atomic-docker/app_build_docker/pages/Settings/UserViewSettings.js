"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const router_1 = require("next/router");
const react_native_1 = require("react-native");
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("@config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
const AtomAgentSettings_1 = __importDefault(require("@components/Settings/AtomAgentSettings")); // Import the new component
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function UserViewSettings() {
    const router = (0, router_1.useRouter)();
    const navigateToChangePass = () => router.push({ pathname: '/User/Login/UserChangePassword' });
    const navigateToCalendarIntegrations = () => router.push({ pathname: '/Settings/UserViewCalendarAndContactIntegrations' });
    const navigateToPrimaryCalendar = () => router.push({ pathname: '/Settings/UserSelectPrimaryCalendarForSettings' });
    const navigateToCategories = () => router.push({ pathname: '/Settings/UserEditCategories' });
    const navigateToCalendarPreferences = () => router.push({ pathname: '/Settings/UserCalendarPreferences' });
    const navigateToUserDeleteAccount = () => router.push({ pathname: '/User/Delete/UserDeleteAccount' });
    const navigateToListUserContactInfo = () => router.push({ pathname: '/Contact/ListUserContactInfo' });
    const navigateToUserViewAutopilot = () => router.push({ pathname: '/Settings/Autopilot/UserViewAutopilot' });
    const navigateToUserChatMeetingPreferences = () => router.push({ pathname: '/Settings/UserChatMeetingPreferences' });
    return ((0, jsx_runtime_1.jsx)(react_native_1.ScrollView, { style: { flex: 1, width: '100%', minHeight: '65vh', maxHeight: '65vh' }, contentContainerStyle: { alignItems: 'center' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", minHeight: "70vh", children: [(0, jsx_runtime_1.jsx)("div", { className: "pt-3", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", onPress: navigateToListUserContactInfo, children: "Your Contact Info" }) }), (0, jsx_runtime_1.jsx)("div", { className: "pt-3", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", onPress: navigateToUserViewAutopilot, children: "Autopilot" }) }), (0, jsx_runtime_1.jsx)("div", { className: "pt-3", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", onPress: navigateToChangePass, children: "Change Password" }) }), (0, jsx_runtime_1.jsx)("div", { className: "pt-3", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", onPress: navigateToCalendarIntegrations, children: "Calendar & Contact Integrations" }) }), (0, jsx_runtime_1.jsx)("div", { className: "pt-3", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", onPress: navigateToPrimaryCalendar, children: "Select Primary Calendar" }) }), (0, jsx_runtime_1.jsx)("div", { className: "pt-3", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", onPress: navigateToCalendarPreferences, children: "Calendar Preferences" }) }), (0, jsx_runtime_1.jsx)("div", { className: "pt-3", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", onPress: navigateToCategories, children: "Edit Tags" }) }), (0, jsx_runtime_1.jsx)("div", { className: "pt-3", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", onPress: navigateToUserChatMeetingPreferences, children: "Meeting Preferences via Chat" }) }), (0, jsx_runtime_1.jsx)("div", { className: "pt-3", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "redLink", onPress: navigateToUserDeleteAccount, children: "Delete Account" }) }), (0, jsx_runtime_1.jsxs)(Box_1.default, { width: "100%", alignItems: "center", mt: "l", children: [" ", (0, jsx_runtime_1.jsx)(AtomAgentSettings_1.default, {})] }), typeof window !== 'undefined' && !window.__TAURI__ && ((0, jsx_runtime_1.jsxs)(Box_1.default, { width: "100%", alignItems: "center", mt: "l", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "sectionHeader", children: "Cloud Settings" }), (0, jsx_runtime_1.jsx)(Box_1.default, { mt: "s", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", children: "Cloud Version Available" }) })] }))] }) }));
}
exports.default = UserViewSettings;
//# sourceMappingURL=data:application/json;base64,