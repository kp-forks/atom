"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const colorsPalette_1 = require("@lib/theme/colorsPalette");
const Switch_1 = __importDefault(require("@components/Switch"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const TextField_1 = __importDefault(require("@components/TextField"));
const styles = {
    minThresholdCount: {
        fontSize: '21px',
        lineHeight: '28px',
    },
    container: {
        flex: 1,
    },
};
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("@config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function CMPWStep5(props) {
    const [anyoneCanAddSelf, setAnyoneCanAddSelf] = (0, react_1.useState)(props?.anyoneCanAddSelf);
    const [guestsCanSeeOtherGuests, setGuestsCanSeeOtherGuests] = (0, react_1.useState)(props?.guestsCanSeeOtherGuests);
    const [primaryEmail, setPrimaryEmail] = (0, react_1.useState)(props?.primaryEmail);
    const [lockAfter, setLockAfter] = (0, react_1.useState)(props?.lockAfter);
    (0, react_1.useEffect)(() => {
        if (primaryEmail !== props?.primaryEmail) {
            setPrimaryEmail(props?.primaryEmail);
        }
    }, [primaryEmail, props?.primaryEmail]);
    const setParentAnyoneCanAddSelf = props?.setParentAnyoneCanAddSelf;
    const setParentGuestsCanSeeOtherGuests = props?.setParentGuestsCanSeeOtherGuests;
    const setParentPrimaryEmail = props?.setParentPrimaryEmail;
    const setParentLockAfter = props?.setParentLockAfter;
    const changeAnyoneCanAddSelf = (value) => {
        setAnyoneCanAddSelf(value);
        setParentAnyoneCanAddSelf(value);
    };
    const changeLockAfter = (value) => {
        setLockAfter(value);
        setParentLockAfter(value);
    };
    const changeGuestsCanSeeOtherGuests = (value) => {
        setGuestsCanSeeOtherGuests(value);
        setParentGuestsCanSeeOtherGuests(value);
    };
    const changePrimaryEmail = (e) => {
        setPrimaryEmail(e?.target?.value);
        setParentPrimaryEmail(e?.target?.value);
    };
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, minHeight: "65vh", maxHeight: "65vh", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: { tablet: "row" }, justifyContent: "space-between", alignItems: "flex-start", width: "70%", children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Primary Email", placeholder: "r@r.r", onChange: changePrimaryEmail, value: primaryEmail }) }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: { tablet: "row" }, justifyContent: "space-between", alignItems: "flex-start", width: "70%", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Can non-invited guests add themselves?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { onColor: colorsPalette_1.colorsPalette.purple30, offColor: colorsPalette_1.colorsPalette.purple60, checked: anyoneCanAddSelf, onValueChange: changeAnyoneCanAddSelf, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: { tablet: "row" }, justifyContent: "space-between", alignItems: "flex-start", width: "70%", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Can guests see other guests?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { onColor: colorsPalette_1.colorsPalette.purple30, offColor: colorsPalette_1.colorsPalette.purple60, checked: guestsCanSeeOtherGuests, onValueChange: changeGuestsCanSeeOtherGuests, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: { tablet: "row" }, justifyContent: "space-between", alignItems: "flex-start", width: "70%", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Lock after event created?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { onColor: colorsPalette_1.colorsPalette.purple30, offColor: colorsPalette_1.colorsPalette.purple60, checked: lockAfter, onValueChange: changeLockAfter, style: { marginBottom: 20 } }) })] })] }));
}
exports.default = CMPWStep5;
//# sourceMappingURL=data:application/json;base64,