"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Switch_1 = __importDefault(require("@components/Switch"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const EditBreakPreferenceColor_1 = __importDefault(require("@pages/Settings/UserPreferenceWizard/EditBreakPreferenceColor"));
const colorsPalette_1 = require("@lib/theme/colorsPalette");
const react_color_circle_1 = __importDefault(require("@uiw/react-color-circle"));
const INITIAL_COLOR = colorsPalette_1.colorsPalette.blue30;
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("@config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function EditPreferenceStep6(props) {
    const [copyIsMeeting, setCopyIsMeeting] = (0, react_1.useState)(props?.copyIsMeeting);
    const [copyIsExternalMeeting, setCopyIsExternalMeeting] = (0, react_1.useState)(props?.copyIsExternalMeeting);
    const [copyColor, setCopyColor] = (0, react_1.useState)(props?.copyColor);
    const [backToBackMeetings, setBackToBackMeetings] = (0, react_1.useState)(props?.backToBackMeetings);
    const [breakColor, setBreakColor] = (0, react_1.useState)(props?.breakColor || INITIAL_COLOR);
    const [enableSelectColor, setEnableSelectColor] = (0, react_1.useState)(false);
    const setParentCopyIsMeeting = props?.setParentCopyIsMeeting;
    const setParentCopyIsExternalMeeting = props?.setParentCopyIsExternalMeeting;
    const setParentCopyColor = props?.setParentCopyColor;
    const setParentBackToBackMeetings = props?.setParentBackToBackMeetings;
    const setParentBreakColor = props?.setParentBreakColor;
    const changeCopyIsMeeting = (value) => {
        setCopyIsMeeting(value);
        setParentCopyIsMeeting(value);
    };
    const changeCopyIsExternalMeeting = (value) => {
        setCopyIsExternalMeeting(value);
        setParentCopyIsExternalMeeting(value);
    };
    const changeCopyColor = (value) => {
        setCopyColor(value);
        setParentCopyColor(value);
    };
    const changeBackToBackMeetings = (value) => {
        setBackToBackMeetings(value);
        setParentBackToBackMeetings(value);
    };
    const changeBreakColor = (value) => {
        setBreakColor(value);
        setParentBreakColor(value);
    };
    if (enableSelectColor) {
        return ((0, jsx_runtime_1.jsx)(EditBreakPreferenceColor_1.default, { breakColor: breakColor, setParentBreakColor: changeBreakColor, setParentEnableSelectColor: setEnableSelectColor }));
    }
    return ((0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", width: "100%", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", alignItems: "center", minHeight: "70vh", children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '90%' }, pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Select color for any new events classified as a 'break type' event" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", alignItems: "center", children: (0, jsx_runtime_1.jsx)(react_color_circle_1.default, { colors: ['#039be5', '#7986cb', '#33b679', '#8e24aa', '#e67c73', '#f6c026', '#f5511d', '#616161', '#3f51b5', '#0b8043', '#d60000'], color: breakColor, onChange: (color) => {
                                    changeBreakColor(color.hex);
                                } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '90%' }, pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Enable back-to-back meetings with no breaks for scheduling assists? " }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { onColor: colorsPalette_1.colorsPalette.purple30, offColor: colorsPalette_1.colorsPalette.purple60, checked: backToBackMeetings, onValueChange: changeBackToBackMeetings }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '90%' }, pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "In general, once trained, classify any new events whose details are similar to a 'meeting type' event as a 'meeting type' for scheduling assists? " }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { onColor: colorsPalette_1.colorsPalette.purple30, offColor: colorsPalette_1.colorsPalette.purple60, checked: copyIsMeeting, onValueChange: changeCopyIsMeeting, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '90%' }, pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "In general, once trained, classify any new events whose details are similar to an 'external meeting type' event (meeting with a contact outside the organization) as an 'external meeting type' for scheduling assists? " }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { onColor: colorsPalette_1.colorsPalette.purple30, offColor: colorsPalette_1.colorsPalette.purple60, checked: copyIsExternalMeeting, onValueChange: changeCopyIsExternalMeeting, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '90%' }, pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Copy over background color to any new events whose details are similar? " }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { onColor: colorsPalette_1.colorsPalette.purple30, offColor: colorsPalette_1.colorsPalette.purple60, checked: copyColor, onValueChange: changeCopyColor }) })] })] }) }));
}
exports.default = EditPreferenceStep6;
//# sourceMappingURL=data:application/json;base64,