"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Switch_1 = __importDefault(require("@components/Switch"));
const TextField_1 = __importDefault(require("@components/TextField"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("@config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function EditPreferenceStep5(props) {
    const [copyCategories, setCopyCategories] = (0, react_1.useState)(props?.copyCategories);
    const [copyIsBreak, setCopyIsBreak] = (0, react_1.useState)(props?.copyIsBreak);
    const [maxWorkLoadPercent, setMaxWorkLoadPercent] = (0, react_1.useState)(props?.maxWorkLoadPercent);
    const [minNumberOfBreaks, setMinNumberOfBreaks] = (0, react_1.useState)(props?.minNumberOfBreaks);
    const [breakLength, setBreakLength] = (0, react_1.useState)(props?.breakLength);
    const setParentCopyCategories = props?.setParentCopyCategories;
    const setParentCopyIsBreak = props?.setParentCopyIsBreak;
    const setParentMaxWorkLoadPercent = props?.setParentMaxWorkLoadPercent;
    const setParentMinNumberOfBreaks = props?.setParentMinNumberOfBreaks;
    const setParentBreakLength = props?.setParentBreakLength;
    const changeCopyCategories = (value) => {
        setCopyCategories(value);
        setParentCopyCategories(value);
    };
    const changeCopyIsBreak = (value) => {
        setCopyIsBreak(value);
        setParentCopyIsBreak(value);
    };
    const changeMaxWorkLoadPercent = (value) => {
        setMaxWorkLoadPercent(value);
        setParentMaxWorkLoadPercent(value);
    };
    const changeMinNumberOfBreaks = (value) => {
        setMinNumberOfBreaks(value);
        setParentMinNumberOfBreaks(value);
    };
    const changeBreakLength = (value) => {
        setBreakLength(value);
        setParentBreakLength(value);
    };
    return ((0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", alignItems: "flex-start", minHeight: "70vh", children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Once you set time preferences or priority of an event, copy over tags to any new events whose details are similar? " }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyCategories, onValueChange: changeCopyCategories, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Classify as a break type event for any new events whose details are similar for scheduling assists? " }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyIsBreak, onValueChange: changeCopyIsBreak, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Max work load percent for a typical work day for scheduling assists?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { type: "number", onChange: (e) => changeMaxWorkLoadPercent(parseInt(e?.target?.value.replace(/[^0-9.]/g, ''), 10)), value: `${maxWorkLoadPercent}`, placeholder: "0", trailingAccessory: ((0, jsx_runtime_1.jsx)(Text_1.default, { pl: { phone: 's', tablet: 'm' }, variant: "cardTitle", children: "%" })) }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Min number of breaks for a typical work day for scheduling assists?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", children: (0, jsx_runtime_1.jsx)(TextField_1.default, { type: "number", onChange: (e) => changeMinNumberOfBreaks(parseInt(e?.target?.value.replace(/[^0-9.]/g, ''), 10)), value: `${minNumberOfBreaks}`, placeholder: "0" }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Break length for a typical work day for scheduling assists?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { type: "number", onChange: (e) => changeBreakLength(parseInt(e?.target?.value.replace(/[^0-9.]/g, ''), 10)), value: `${breakLength}`, placeholder: "0", trailingAccessory: ((0, jsx_runtime_1.jsx)(Text_1.default, { pl: { phone: 's', tablet: 'm' }, variant: "cardTitle", children: "minutes" })) }) })] })] }) }));
}
exports.default = EditPreferenceStep5;
//# sourceMappingURL=data:application/json;base64,