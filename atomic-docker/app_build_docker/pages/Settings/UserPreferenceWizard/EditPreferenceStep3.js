"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Switch_1 = __importDefault(require("@components/Switch"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const react_native_1 = require("react-native");
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("@config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function EditPreferenceStep3(props) {
    const [copyAvailability, setCopyAvailability] = (0, react_1.useState)(props?.copyAvailability);
    const [copyTimeBlocking, setCopyTimeBlocking] = (0, react_1.useState)(props?.copyTimeBlocking);
    const [copyTimePreference, setCopyTimePreference] = (0, react_1.useState)(props?.copyTimePreference);
    const [copyReminders, setCopyReminders] = (0, react_1.useState)(props?.copyReminders);
    const [copyPriorityLevel, setCopyPriorityLevel] = (0, react_1.useState)(props?.copyPriorityLevel);
    const [copyModifiable, setCopyModifiable] = (0, react_1.useState)(props?.copyModifiable);
    const setParentCopyAvailability = props?.setParentCopyAvailability;
    const setParentCopyTimeBlocking = props?.setParentCopyTimeBlocking;
    const setParentCopyTimePreference = props?.setParentCopyTimePreference;
    const setParentCopyReminders = props?.setParentCopyReminders;
    const setParentCopyPriorityLevel = props?.setParentCopyPriorityLevel;
    const setParentCopyModifiable = props?.setParentCopyModifiable;
    const changeCopyAvailability = (value) => {
        setCopyAvailability(value);
        setParentCopyAvailability(value);
    };
    const changeCopyTimeBlocking = (value) => {
        setCopyTimeBlocking(value);
        setParentCopyTimeBlocking(value);
    };
    const changeCopyTimePreference = (value) => {
        setCopyTimePreference(value);
        setParentCopyTimePreference(value);
    };
    const changeCopyReminders = (value) => {
        setCopyReminders(value);
        setParentCopyReminders(value);
    };
    const changeCopyPriorityLevel = (value) => {
        setCopyPriorityLevel(value);
        setParentCopyPriorityLevel(value);
    };
    const changeCopyModifiable = (value) => {
        setCopyModifiable(value);
        setParentCopyModifiable(value);
    };
    return ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsxs)(react_native_1.ScrollView, { style: { width: '100%' }, contentContainerStyle: { width: '100%', justifyContent: 'center', alignItems: 'center' }, children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Once you set time preferences or priority of an event, copy over transparency of event to any new events whose details are similar?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyAvailability, onValueChange: changeCopyAvailability, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Once you set time preferences or priority of an event, copy over buffer times to any new events whose details are similar?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyTimeBlocking, onValueChange: changeCopyTimeBlocking, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Copy over time preference to any new events whose details are similar for scheduling assists?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyTimePreference, onValueChange: changeCopyTimePreference, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Once you set time preferences and priority of an event, copy over reminders to any new events whose details are similar?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyReminders, onValueChange: changeCopyReminders, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "In general, once trained, copy over priority level to any new events whose details are similar for scheduling assists?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyPriorityLevel, onValueChange: changeCopyPriorityLevel, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "In general, once trained, copy over time modifiable / time not modifiable value to any new events whose details are similar for scheduling assists? " }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyModifiable, onValueChange: changeCopyModifiable, style: { marginBottom: 20 } }) })] })] }) }));
}
exports.default = EditPreferenceStep3;
//# sourceMappingURL=data:application/json;base64,