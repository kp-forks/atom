"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_native_1 = require("react-native");
const TextField_1 = __importDefault(require("@components/TextField"));
const io_1 = require("react-icons/io");
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const theme_1 = require("@lib/theme/theme");
const lodash_1 = __importDefault(require("lodash"));
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("@config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
// const dark = Appearance.getColorScheme() === 'dark'
function EditPreferenceStep1(props) {
    const [reminders, setReminders] = (0, react_1.useState)(props?.reminders || []);
    const [reminder, setReminder] = (0, react_1.useState)(0);
    (0, react_1.useEffect)(() => {
        if (!lodash_1.default.isEqual(reminders, props?.reminders)) {
            setReminders(props?.reminders || []);
        }
    }, [props?.reminders, props?.reminders?.length, reminders]);
    const setParentReminders = props?.setParentReminders;
    const addItemToReminders = () => {
        const newReminders = lodash_1.default.uniqWith((reminders || []).concat([reminder]), lodash_1.default.isEqual);
        setReminders(newReminders);
        setParentReminders(newReminders);
    };
    const removeItemFromReminders = (item) => {
        const newReminders = lodash_1.default.without(reminders, item);
        setReminders(newReminders);
        setParentReminders(newReminders);
    };
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { mt: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subheader", children: "Default Reminders" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 'l' }, justifyContent: "center", alignItems: "flex-start", minHeight: "40vh", children: (0, jsx_runtime_1.jsx)(Box_1.default, { alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(react_native_1.FlatList, { data: reminders, renderItem: ({ item }) => ((0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, alignItems: "center", justifyContent: "center", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '70%' }, flexDirection: "row", justifyContent: "space-between", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: `${item} minutes before` }), (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { hitSlop: 15, onPress: () => removeItemFromReminders(item), children: (0, jsx_runtime_1.jsx)(io_1.IoIosClose, { size: "3em", color: theme_1.palette.red }) })] }) })), keyExtractor: (item, index) => `${item}-${index}` }) }) }), (0, jsx_runtime_1.jsxs)(Box_1.default, { pt: { phone: 'xs', tablet: 's' }, justifyContent: "center", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(TextField_1.default, { type: "number", onChange: (e) => setReminder(parseInt(e?.target?.value.replace(/[^0-9.]/g, ''), 10)), value: `${reminder}`, placeholder: "0", label: "Reminder" }) }), (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: addItemToReminders, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(io_1.IoIosAdd, { size: "3em", color: theme_1.palette.pinkPrimary }), (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", children: "Add" })] }) })] })] }));
}
exports.default = EditPreferenceStep1;
//# sourceMappingURL=data:application/json;base64,