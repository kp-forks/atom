"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const react_color_circle_1 = __importDefault(require("@uiw/react-color-circle"));
const react_native_1 = require("react-native");
const colorsPalette_1 = require("@lib/theme/colorsPalette");
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("@config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
const INITIAL_COLOR = colorsPalette_1.colorsPalette.blue30;
const colors = [
    '#20303C', '#43515C', '#66737C', '#858F96', '#A3ABB0', '#C2C7CB', '#E0E3E5', '#F2F4F5',
    '#3182C8', '#4196E0', '#459FED', '#57a8ef', '#8fc5f4', '#b5d9f8', '#daecfb', '#ecf5fd',
    '#00AAAF', '#32BABC', '#3CC7C5', '#64D4D2', '#8BDFDD', '#B1E9E9', '#D8F4F4', '#EBF9F9',
    '#00A65F', '#32B76C', '#65C888', '#84D3A0', '#A3DEB8', '#C1E9CF', '#E8F7EF', '#F3FBF7',
    '#E2902B', '#FAA030', '#FAAD4D', '#FBBD71', '#FCCE94', '#FDDEB8', '#FEEFDB', '#FEF7ED',
    '#D9644A', '#E66A4E', '#F27052', '#F37E63', '#F7A997', '#FAC6BA', '#FCE2DC', '#FEF0ED',
    '#CF262F', '#EE2C38', '#F2564D', '#F57871', '#F79A94', '#FABBB8', '#FCDDDB', '#FEEEED',
    '#8B1079', '#A0138E', '#B13DAC', '#C164BD', '#D08BCD', '#E0B1DE', '#EFD8EE', '#F7EBF7'
];
function EditBreakPreferenceColor(props) {
    const [breakColor, setBreakColor] = (0, react_1.useState)(props?.breakColor ?? INITIAL_COLOR);
    const setParentBreakColor = props.setParentBreakColor;
    const setParentEnableColor = props.setParentEnableSelectColor;
    const close = () => {
        setParentEnableColor(false);
    };
    const onPaletteValueChange = (value) => {
        setBreakColor(value);
        setParentBreakColor(value);
    };
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, justifyContent: "center", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", p: { phone: 'xs', tablet: 's' }, children: "Choose a default break color" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(react_color_circle_1.default, { colors: ['#039be5', '#7986cb', '#33b679', '#8e24aa', '#e67c73', '#f6c026', '#f5511d', '#616161', '#3f51b5', '#0b8043', '#d60000'], color: breakColor, onChange: (color) => {
                        onPaletteValueChange(color.hex);
                    } }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", p: { phone: 'xs', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: close, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", children: "Close" }) }) })] }));
}
exports.default = EditBreakPreferenceColor;
//# sourceMappingURL=data:application/json;base64,