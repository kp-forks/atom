"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = handler;
const nextjs_1 = require("supertokens-node/nextjs");
const notionAndResearchSkills_1 = require("../../../../project/functions/atom-agent/skills/notionAndResearchSkills");
const githubSkills_1 = require("../../../../project/functions/atom-agent/skills/githubSkills");
const slackSkills_1 = require("../../../../project/functions/atom-agent/skills/slackSkills");
const calendarSkills_1 = require("../../../../project/functions/atom-agent/skills/calendarSkills");
const sentiment_1 = require("../../../../desktop/tauri/src/lib/sentiment");
async function handler(req, res) {
    let session;
    try {
        session = await (0, nextjs_1.getSession)(req, res, {
            overrideGlobalClaimValidators: () => [],
        });
    }
    catch (err) {
        return res.status(401).json({ message: 'Unauthorized' });
    }
    const userId = session.getUserId();
    const { notionApiKey, notionDatabaseId, githubOwner, githubRepo, slackChannelId, } = req.body;
    if (!notionApiKey ||
        !notionDatabaseId ||
        !githubOwner ||
        !githubRepo ||
        !slackChannelId) {
        return res
            .status(400)
            .json({ message: 'Notion, GitHub, and Slack credentials are required' });
    }
    try {
        // Notion Task Score
        const tasksResponse = await (0, notionAndResearchSkills_1.queryNotionTasks)(userId, { database_id: notionDatabaseId }, notionApiKey);
        let notionScore = 0;
        if (tasksResponse.ok && tasksResponse.data) {
            const tasks = tasksResponse.data.tasks;
            if (tasks.length > 0) {
                const completedTasks = tasks.filter((task) => task.status === 'Done').length;
                notionScore = Math.round((completedTasks / tasks.length) * 100);
            }
            else {
                notionScore = 100;
            }
        }
        // GitHub Score
        const commitActivity = await (0, githubSkills_1.getRepoCommitActivity)(userId, githubOwner, githubRepo);
        const pullRequests = await getRepoPullRequestActivity(userId, githubOwner, githubRepo);
        let githubScore = 0;
        if (commitActivity && pullRequests) {
            const commitScore = commitActivity.slice(-10).filter((week) => week.total > 0).length *
                5;
            const openPRs = pullRequests.filter((pr) => pr.state === 'open').length;
            const prScore = Math.max(0, 50 - openPRs * 10);
            githubScore = commitScore + prScore;
        }
        // Slack Sentiment Score
        const messages = await (0, slackSkills_1.searchMySlackMessages)(userId, `in:${slackChannelId}`, 100);
        let sentimentScore = 50; // Default to neutral
        if (messages.length > 0) {
            const totalScore = messages.reduce((acc, msg) => acc + (0, sentiment_1.analyzeSentiment)(msg.text), 0);
            sentimentScore = Math.round((totalScore / messages.length) * 10 + 50);
        }
        // Google Calendar Meeting Load Score
        const timeMin = new Date();
        timeMin.setDate(timeMin.getDate() - 7);
        const timeMax = new Date();
        const events = await (0, calendarSkills_1.getMeetingLoad)(userId, timeMin.toISOString(), timeMax.toISOString());
        let meetingLoadScore = 100;
        if (events) {
            const totalMeetingHours = events.reduce((acc, event) => {
                const start = new Date(event.start.dateTime);
                const end = new Date(event.end.dateTime);
                return acc + (end.getTime() - start.getTime()) / 1000 / 60 / 60;
            }, 0);
            // Inverse score: more hours = lower score
            meetingLoadScore = Math.max(0, 100 - Math.round(totalMeetingHours * 5));
        }
        // Combine scores
        const score = Math.round((notionScore + githubScore + sentimentScore + meetingLoadScore) / 4);
        return res.status(200).json({ score });
    }
    catch (error) {
        console.error('Error calculating project health score:', error);
        return res
            .status(500)
            .json({ message: 'Failed to calculate project health score' });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhbHRoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaGVhbHRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBVUEsMEJBNEhDO0FBcklELG9EQUFxRDtBQUVyRCxxSEFBMkc7QUFDM0csK0ZBQXFHO0FBQ3JHLDZGQUFvRztBQUNwRyxtR0FBZ0c7QUFDaEcsMkVBQStFO0FBR2hFLEtBQUssVUFBVSxPQUFPLENBQ25DLEdBQW1CLEVBQ25CLEdBQW9CO0lBRXBCLElBQUksT0FBeUIsQ0FBQztJQUM5QixJQUFJLENBQUM7UUFDSCxPQUFPLEdBQUcsTUFBTSxJQUFBLG1CQUFVLEVBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRTtZQUNuQyw2QkFBNkIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFO1NBQ3hDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2IsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDbkMsTUFBTSxFQUNKLFlBQVksRUFDWixnQkFBZ0IsRUFDaEIsV0FBVyxFQUNYLFVBQVUsRUFDVixjQUFjLEdBQ2YsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDO0lBRWIsSUFDRSxDQUFDLFlBQVk7UUFDYixDQUFDLGdCQUFnQjtRQUNqQixDQUFDLFdBQVc7UUFDWixDQUFDLFVBQVU7UUFDWCxDQUFDLGNBQWMsRUFDZixDQUFDO1FBQ0QsT0FBTyxHQUFHO2FBQ1AsTUFBTSxDQUFDLEdBQUcsQ0FBQzthQUNYLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxvREFBb0QsRUFBRSxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUVELElBQUksQ0FBQztRQUNILG9CQUFvQjtRQUNwQixNQUFNLGFBQWEsR0FBRyxN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QUUsS0FBSyxDQUFDLENBQUM7UUFDaEUsT0FBTyxHQUFHO2FBQ1AsTUFBTSxDQUFDLEdBQUcsQ0FBQzthQUNYLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSwwQ0FBMEMsRUFBRSxDQUFDLENBQUM7SUFDbkUsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0QXBpUmVxdWVzdCwgTmV4dEFwaVJlc3BvbnNlIH0gZnJvbSAnbmV4dCc7XG5pbXBvcnQgeyBnZXRTZXNzaW9uIH0gZnJvbSAnc3VwZXJ0b2tlbnMtbm9kZS9uZXh0anMnO1xuaW1wb3J0IHsgU2Vzc2lvbkNvbnRhaW5lciB9IGZyb20gJ3N1cGVydG9rZW5zLW5vZGUvcmVjaXBlL3Nlc3Npb24nO1xuaW1wb3J0IHsgcXVlcnlOb3Rpb25UYXNrcyB9IGZyb20gJy4uLy4uLy4uLy4uL3Byb2plY3QvZnVuY3Rpb25zL2F0b20tYWdlbnQvc2tpbGxzL25vdGlvbkFuZFJlc2VhcmNoU2tpbGxzJztcbmltcG9ydCB7IGdldFJlcG9Db21taXRBY3Rpdml0eSB9IGZyb20gJy4uLy4uLy4uLy4uL3Byb2plY3QvZnVuY3Rpb25zL2F0b20tYWdlbnQvc2tpbGxzL2dpdGh1YlNraWxscyc7XG5pbXBvcnQgeyBzZWFyY2hNeVNsYWNrTWVzc2FnZXMgfSBmcm9tICcuLi8uLi8uLi8uLi9wcm9qZWN0L2Z1bmN0aW9ucy9hdG9tLWFnZW50L3NraWxscy9zbGFja1NraWxscyc7XG5pbXBvcnQgeyBnZXRNZWV0aW5nTG9hZCB9IGZyb20gJy4uLy4uLy4uLy4uL3Byb2plY3QvZnVuY3Rpb25zL2F0b20tYWdlbnQvc2tpbGxzL2NhbGVuZGFyU2tpbGxzJztcbmltcG9ydCB7IGFuYWx5emVTZW50aW1lbnQgfSBmcm9tICcuLi8uLi8uLi8uLi9kZXNrdG9wL3RhdXJpL3NyYy9saWIvc2VudGltZW50JztcbmltcG9ydCB7IE5vdGlvblRhc2sgfSBmcm9tICcuLi8uLi8uLi8uLi9wcm9qZWN0L2Z1bmN0aW9ucy90eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIoXG4gIHJlcTogTmV4dEFwaVJlcXVlc3QsXG4gIHJlczogTmV4dEFwaVJlc3BvbnNlXG4pIHtcbiAgbGV0IHNlc3Npb246IFNlc3Npb25Db250YWluZXI7XG4gIHRyeSB7XG4gICAgc2Vzc2lvbiA9IGF3YWl0IGdldFNlc3Npb24ocmVxLCByZXMsIHtcbiAgICAgIG92ZXJyaWRlR2xvYmFsQ2xhaW1WYWxpZGF0b3JzOiAoKSA9PiBbXSxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgbWVzc2FnZTogJ1VuYXV0aG9yaXplZCcgfSk7XG4gIH1cblxuICBjb25zdCB1c2VySWQgPSBzZXNzaW9uLmdldFVzZXJJZCgpO1xuICBjb25zdCB7XG4gICAgbm90aW9uQXBpS2V5LFxuICAgIG5vdGlvbkRhdGFiYXNlSWQsXG4gICAgZ2l0aHViT3duZXIsXG4gICAgZ2l0aHViUmVwbyxcbiAgICBzbGFja0NoYW5uZWxJZCxcbiAgfSA9IHJlcS5ib2R5O1xuXG4gIGlmIChcbiAgICAhbm90aW9uQXBpS2V5IHx8XG4gICAgIW5vdGlvbkRhdGFiYXNlSWQgfHxcbiAgICAhZ2l0aHViT3duZXIgfHxcbiAgICAhZ2l0aHViUmVwbyB8fFxuICAgICFzbGFja0NoYW5uZWxJZFxuICApIHtcbiAgICByZXR1cm4gcmVzXG4gICAgICAuc3RhdHVzKDQwMClcbiAgICAgIC5qc29uKHsgbWVzc2FnZTogJ05vdGlvbiwgR2l0SHViLCBhbmQgU2xhY2sgY3JlZGVudGlhbHMgYXJlIHJlcXVpcmVkJyB9KTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgLy8gTm90aW9uIFRhc2sgU2NvcmVcbiAgICBjb25zdCB0YXNrc1Jlc3BvbnNlID0gYXdhaXQgcXVlcnlOb3Rpb25UYXNrcyhcbiAgICAgIHVzZXJJZCxcbiAgICAgIHsgZGF0YWJhc2VfaWQ6IG5vdGlvbkRhdGFiYXNlSWQgfSxcbiAgICAgIG5vdGlvbkFwaUtleVxuICAgICk7XG4gICAgbGV0IG5vdGlvblNjb3JlID0gMDtcbiAgICBpZiAodGFza3NSZXNwb25zZS5vayAmJiB0YXNrc1Jlc3BvbnNlLmRhdGEpIHtcbiAgICAgIGNvbnN0IHRhc2tzOiBOb3Rpb25UYXNrW10gPSB0YXNrc1Jlc3BvbnNlLmRhdGEudGFza3M7XG4gICAgICBpZiAodGFza3MubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBjb21wbGV0ZWRUYXNrcyA9IHRhc2tzLmZpbHRlcihcbiAgICAgICAgICAodGFzaykgPT4gdGFzay5zdGF0dXMgPT09ICdEb25lJ1xuICAgICAgICApLmxlbmd0aDtcbiAgICAgICAgbm90aW9uU2NvcmUgPSBNYXRoLnJvdW5kKChjb21wbGV0ZWRUYXNrcyAvIHRhc2tzLmxlbmd0aCkgKiAxMDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm90aW9uU2NvcmUgPSAxMDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gR2l0SHViIFNjb3JlXG4gICAgY29uc3QgY29tbWl0QWN0aXZpdHkgPSBhd2FpdCBnZXRSZXBvQ29tbWl0QWN0aXZpdHkoXG4gICAgICB1c2VySWQsXG4gICAgICBnaXRodWJPd25lcixcbiAgICAgIGdpdGh1YlJlcG9cbiAgICApO1xuICAgIGNvbnN0IHB1bGxSZXF1ZXN0cyA9IGF3YWl0IGdldFJlcG9QdWxsUmVxdWVzdEFjdGl2aXR5KFxuICAgICAgdXNlcklkLFxuICAgICAgZ2l0aHViT3duZXIsXG4gICAgICBnaXRodWJSZXBvXG4gICAgKTtcbiAgICBsZXQgZ2l0aHViU2NvcmUgPSAwO1xuICAgIGlmIChjb21taXRBY3Rpdml0eSAmJiBwdWxsUmVxdWVzdHMpIHtcbiAgICAgIGNvbnN0IGNvbW1pdFNjb3JlID1cbiAgICAgICAgY29tbWl0QWN0aXZpdHkuc2xpY2UoLTEwKS5maWx0ZXIoKHdlZWs6IGFueSkgPT4gd2Vlay50b3RhbCA+IDApLmxlbmd0aCAqXG4gICAgICAgIDU7XG4gICAgICBjb25zdCBvcGVuUFJzID0gcHVsbFJlcXVlc3RzLmZpbHRlcihcbiAgICAgICAgKHByOiBhbnkpID0+IHByLnN0YXRlID09PSAnb3BlbidcbiAgICAgICkubGVuZ3RoO1xuICAgICAgY29uc3QgcHJTY29yZSA9IE1hdGgubWF4KDAsIDUwIC0gb3BlblBScyAqIDEwKTtcbiAgICAgIGdpdGh1YlNjb3JlID0gY29tbWl0U2NvcmUgKyBwclNjb3JlO1xuICAgIH1cblxuICAgIC8vIFNsYWNrIFNlbnRpbWVudCBTY29yZVxuICAgIGNvbnN0IG1lc3NhZ2VzID0gYXdhaXQgc2VhcmNoTXlTbGFja01lc3NhZ2VzKFxuICAgICAgdXNlcklkLFxuICAgICAgYGluOiR7c2xhY2tDaGFubmVsSWR9YCxcbiAgICAgIDEwMFxuICAgICk7XG4gICAgbGV0IHNlbnRpbWVudFNjb3JlID0gNTA7IC8vIERlZmF1bHQgdG8gbmV1dHJhbFxuICAgIGlmIChtZXNzYWdlcy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCB0b3RhbFNjb3JlID0gbWVzc2FnZXMucmVkdWNlKFxuICAgICAgICAoYWNjLCBtc2cpID0+IGFjYyArIGFuYWx5emVTZW50aW1lbnQobXNnLnRleHQpLFxuICAgICAgICAwXG4gICAgICApO1xuICAgICAgc2VudGltZW50U2NvcmUgPSBNYXRoLnJvdW5kKCh0b3RhbFNjb3JlIC8gbWVzc2FnZXMubGVuZ3RoKSAqIDEwICsgNTApO1xuICAgIH1cblxuICAgIC8vIEdvb2dsZSBDYWxlbmRhciBNZWV0aW5nIExvYWQgU2NvcmVcbiAgICBjb25zdCB0aW1lTWluID0gbmV3IERhdGUoKTtcbiAgICB0aW1lTWluLnNldERhdGUodGltZU1pbi5nZXREYXRlKCkgLSA3KTtcbiAgICBjb25zdCB0aW1lTWF4ID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCBldmVudHMgPSBhd2FpdCBnZXRNZWV0aW5nTG9hZChcbiAgICAgIHVzZXJJZCxcbiAgICAgIHRpbWVNaW4udG9JU09TdHJpbmcoKSxcbiAgICAgIHRpbWVNYXgudG9JU09TdHJpbmcoKVxuICAgICk7XG4gICAgbGV0IG1lZXRpbmdMb2FkU2NvcmUgPSAxMDA7XG4gICAgaWYgKGV2ZW50cykge1xuICAgICAgY29uc3QgdG90YWxNZWV0aW5nSG91cnMgPSBldmVudHMucmVkdWNlKChhY2M6IG51bWJlciwgZXZlbnQ6IGFueSkgPT4ge1xuICAgICAgICBjb25zdCBzdGFydCA9IG5ldyBEYXRlKGV2ZW50LnN0YXJ0LmRhdGVUaW1lKTtcbiAgICAgICAgY29uc3QgZW5kID0gbmV3IERhdGUoZXZlbnQuZW5kLmRhdGVUaW1lKTtcbiAgICAgICAgcmV0dXJuIGFjYyArIChlbmQuZ2V0VGltZSgpIC0gc3RhcnQuZ2V0VGltZSgpKSAvIDEwMDAgLyA2MCAvIDYwO1xuICAgICAgfSwgMCk7XG4gICAgICAvLyBJbnZlcnNlIHNjb3JlOiBtb3JlIGhvdXJzID0gbG93ZXIgc2NvcmVcbiAgICAgIG1lZXRpbmdMb2FkU2NvcmUgPSBNYXRoLm1heCgwLCAxMDAgLSBNYXRoLnJvdW5kKHRvdGFsTWVldGluZ0hvdXJzICogNSkpO1xuICAgIH1cblxuICAgIC8vIENvbWJpbmUgc2NvcmVzXG4gICAgY29uc3Qgc2NvcmUgPSBNYXRoLnJvdW5kKFxuICAgICAgKG5vdGlvblNjb3JlICsgZ2l0aHViU2NvcmUgKyBzZW50aW1lbnRTY29yZSArIG1lZXRpbmdMb2FkU2NvcmUpIC8gNFxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oeyBzY29yZSB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjYWxjdWxhdGluZyBwcm9qZWN0IGhlYWx0aCBzY29yZTonLCBlcnJvcik7XG4gICAgcmV0dXJuIHJlc1xuICAgICAgLnN0YXR1cyg1MDApXG4gICAgICAuanNvbih7IG1lc3NhZ2U6ICdGYWlsZWQgdG8gY2FsY3VsYXRlIHByb2plY3QgaGVhbHRoIHNjb3JlJyB9KTtcbiAgfVxufVxuIl19