"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Switch_1 = __importDefault(require("@components/Switch"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function CreateMeetingAssistVirtualMeet(props) {
    const [zoomMeet, setZoomMeet] = (0, react_1.useState)(props?.zoomMeet);
    const [googleMeet, setGoogleMeet] = (0, react_1.useState)(props?.googleMeet);
    const [enableConference, setEnableConference] = (0, react_1.useState)(props?.enableConference);
    const [notAvailable, setNotAvailable] = (0, react_1.useState)(false);
    const isZoomAvailable = props?.isZoomAvailable;
    const isGoogleMeetAvailable = props?.isGoogleMeetAvailable;
    const setParentZoomMeet = props?.setParentZoomMeet;
    const setParentGoogleMeet = props?.setParentGoogleMeet;
    const setParentConferenceApp = props?.setParentConferenceApp;
    const setParentEnableConference = props?.setParentEnableConference;
    const onEnableVirtual = (value) => {
        setEnableConference(value);
        setParentEnableConference(value);
        if (!isZoomAvailable && !isGoogleMeetAvailable) {
            setNotAvailable(true);
            setParentConferenceApp(null);
        }
        else {
            setNotAvailable(false);
        }
        if (value === false) {
            setParentConferenceApp(null);
        }
    };
    const onZoomMeet = (value) => {
        setZoomMeet(value);
        setParentZoomMeet(value);
        setGoogleMeet(!value);
        setParentGoogleMeet(!value);
        if (value) {
            setParentConferenceApp('zoom');
        }
        else {
            setParentConferenceApp('google');
        }
    };
    const onGoogleMeet = (value) => {
        setGoogleMeet(value);
        setParentGoogleMeet(value);
        setZoomMeet(!value);
        setParentZoomMeet(!value);
        if (value) {
            setParentConferenceApp('google');
        }
        else {
            setParentConferenceApp('zoom');
        }
    };
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", minHeight: "65vh", width: "80%", children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, pt: { phone: 'm', tablet: 's' }, flexDirection: "row", justifyContent: "space-between", alignItems: "flex-start", width: "70%", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", pt: { phone: 'm', tablet: 's' }, children: "Enable a virtual meeting for this event?" }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: enableConference, onValueChange: onEnableVirtual, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, width: "70%", pt: { phone: 'm', tablet: 's' }, children: notAvailable
                    ? ((0, jsx_runtime_1.jsx)(Box_1.default, { width: "100%", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subheader", children: "3rd party providers are not enabled. Please enable either zoom or google to use this feature." }) })) : ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, width: "100%", children: enableConference
                        ? ((0, jsx_runtime_1.jsxs)(Box_1.default, { width: "100%", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { width: "100%", children: isZoomAvailable
                                        ? ((0, jsx_runtime_1.jsxs)(Box_1.default, { width: "100%", children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, pt: { phone: 'm', tablet: 's' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", width: "100%", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", pt: { phone: 'm', tablet: 's' }, children: "Enable a Zoom Meeting for this event?" }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: zoomMeet, onValueChange: onZoomMeet, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsx)(Box_1.default, {})] })) : null }), (0, jsx_runtime_1.jsx)(Box_1.default, { width: "100%", children: isGoogleMeetAvailable
                                        ? ((0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, pt: { phone: 'm', tablet: 's' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", width: "100%", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", pt: { phone: 'm', tablet: 's' }, children: "Enable a Google Meet for this event?" }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: googleMeet, onValueChange: onGoogleMeet, style: { marginBottom: 20 } }) })] })) : null })] })) : null })) })] }));
}
exports.default = CreateMeetingAssistVirtualMeet;
//# sourceMappingURL=data:application/json;base64,