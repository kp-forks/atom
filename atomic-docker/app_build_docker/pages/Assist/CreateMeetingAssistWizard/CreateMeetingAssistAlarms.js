"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_native_1 = require("react-native");
const io5_1 = require("react-icons/io5");
const Switch_1 = __importDefault(require("@components/Switch"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const TextField_1 = __importDefault(require("@components/TextField"));
const theme_1 = require("@lib/theme/theme");
const wizardHelper_1 = require("@lib/Calendar/CreateEventWizard/wizardHelper");
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function CreateMeetingAssistAlarms(props) {
    const [useDefaultAlarms, setUseDefaultAlarms] = (0, react_1.useState)(props?.useDefaultAlarms);
    const [alarms, setAlarms] = (0, react_1.useState)(props?.alarms);
    const [alarm, setAlarm] = (0, react_1.useState)(0);
    const [pageOffset, setPageOffset] = (0, react_1.useState)(0);
    // const dark = useColorScheme() === 'dark'
    const setParentUseDefaultAlarms = props?.setParentUseDefaultAlarms;
    const setParentAlarms = props?.setParentAlarms;
    const changeUseDefaultAlarms = (value) => {
        setUseDefaultAlarms(value);
        setParentUseDefaultAlarms(value);
    };
    const addAlarmToAlarms = () => {
        (0, wizardHelper_1.addItemToAlarms)(alarm, alarms, setAlarms, setParentAlarms, setAlarm);
        if (useDefaultAlarms) {
            changeUseDefaultAlarms(false);
        }
    };
    return ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, style: { width: '100%' }, minHeight: "65vh", maxHeight: "65vh", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, pt: { phone: 'm', tablet: 's' }, flexDirection: { tablet: "row" }, justifyContent: "space-between", alignItems: "center", width: "70%", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Do you want to use default alarms?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: useDefaultAlarms, onValueChange: changeUseDefaultAlarms, style: { marginBottom: 20 } }) })] }), alarms?.length > 0
                    ? ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 3, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(react_native_1.FlatList, { data: alarms, renderItem: ({ item, index }) => ((0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: `${item} minutes before` }), (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { hitSlop: 15, onPress: () => (0, wizardHelper_1.removeItemFromAlarms)(index, alarms, setAlarms, setParentAlarms), children: (0, jsx_runtime_1.jsx)(io5_1.IoTrash, { size: "1.5em", color: theme_1.palette.red }) })] }) })), keyExtractor: (item, index) => `${item}-${index}` }) })) : null, (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, flexDirection: "row", justifyContent: "center", alignItems: "center", style: { width: '40%' }, children: [(0, jsx_runtime_1.jsx)("div", { className: "mr-2", children: (0, jsx_runtime_1.jsx)(TextField_1.default, { type: "number", onChange: (e) => setAlarm(parseInt(e?.target?.value?.replace(/[^0-9.]/g, ''), 10)), value: `${alarm}`, placeholder: "0" }) }), (0, jsx_runtime_1.jsx)("div", { className: "ml-2", children: (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: addAlarmToAlarms, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", children: "Add Alarm" }) }) })] }) })] }) }));
}
exports.default = CreateMeetingAssistAlarms;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3JlYXRlTWVldGluZ0Fzc2lzdEFsYXJtcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNyZWF0ZU1lZXRpbmdBc3Npc3RBbGFybXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBMEJBLGdEQXFDQzs7QUEvREQsaUNBSWM7QUFDZCwrQ0FHcUI7QUFFckIseUNBQTBEO0FBRTFELGdFQUF3QztBQUN4QyxpRUFBd0M7QUFDeEMsbUVBQTBDO0FBQzFDLHNFQUE2QztBQUU3Qyw0Q0FBMEM7QUFFMUMsK0VBQW9HO0FBR3BHLHdFQUE4QztBQUM5QyxpRUFBNkQ7QUFDN0QsOEVBQXFEO0FBRTlDLEtBQUssVUFBVSxrQkFBa0IsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQWlEO0lBQ2xHLDBGQUEwRjtJQUMxRixzQ0FBc0M7SUFDdEMseUVBQXlFO0lBQ3pFLDBCQUFlLENBQUMsSUFBSSxDQUFDLElBQUEsNkJBQWEsR0FBRSxDQUFDLENBQUE7SUFDckMsSUFBSSxPQUFPLENBQUE7SUFDWCxJQUFJLENBQUM7UUFDSCxPQUFPLEdBQUcsTUFBTSxpQkFBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFO1lBQzNDLDZCQUE2QixFQUFFLEtBQUs7Z0JBQ2xDLE9BQU8sRUFBRSxDQUFBO1lBQ1gsQ0FBQztTQUNGLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFBQyxPQUFPLEdBQVEsRUFBRSxDQUFDO1FBQ2xCLElBQUksR0FBRyxDQUFDLElBQUksS0FBSyxpQkFBTyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBQ2pELE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLEVBQUUsQ0FBQTtRQUN4RCxDQUFDO2FBQU0sSUFBSSxHQUFHLENBQUMsSUFBSSxLQUFLLGlCQUFPLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQ25ELGtFQUFrRTtZQUNsRSxxRUFBcUU7WUFDckUsT0FBTyxF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Q0QsWUFBWSxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLElBQUksS0FBSyxFQUFFLEdBQ25ELEdBQ0EsQ0FDTCxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQ1osdUJBQUMsYUFBRyxJQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsY0FBYyxFQUFDLFFBQVEsRUFBQyxVQUFVLEVBQUMsUUFBUSxFQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUMsWUFDN0Usd0JBQUMsYUFBRyxJQUFDLElBQUksRUFBRSxDQUFDLEVBQUcsYUFBYSxFQUFDLEtBQUssRUFBQyxjQUFjLEVBQUMsUUFBUSxFQUFDLFVBQVUsRUFBQyxRQUFRLEVBQUMsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQyxhQUVqRyxnQ0FBSyxTQUFTLEVBQUMsTUFBTSxZQUNqQix1QkFBQyxtQkFBUyxJQUNOLElBQUksRUFBQyxRQUFRLEVBQ2IsUUFBUSxFQUFFLENBQUMsQ0FBa0MsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQ25ILEtBQUssRUFBRSxHQUFHLEtBQUssRUFBRSxFQUNqQixXQUFXLEVBQUMsR0FBRyxHQUNqQixHQUVBLEVBQ04sZ0NBQUssU0FBUyxFQUFDLE1BQU0sWUFDakIsdUJBQUMsd0JBQVMsSUFBQyxPQUFPLEVBQUUsZ0JBQWdCLFlBQ2hDLHVCQUFDLGNBQUksSUFBQyxPQUFPLEVBQUMsWUFBWSwwQkFFbkIsR0FDQyxHQUNWLElBQ0osR0FDSixJQUNKLEdBQ0osQ0FDVCxDQUFBO0FBQ0wsQ0FBQztBQUVELGtCQUFlLHlCQUF5QixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7XG4gIHVzZVN0YXRlLFxuICBEaXNwYXRjaCxcbiAgU2V0U3RhdGVBY3Rpb24sXG59IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtcbiAgIEZsYXRMaXN0LFxuICAgUHJlc3NhYmxlLFxufSBmcm9tICdyZWFjdC1uYXRpdmUnXG5cbmltcG9ydCB7IElvQ2xvc2VPdXRsaW5lLCBJb1RyYXNoIH0gZnJvbSBcInJlYWN0LWljb25zL2lvNVwiO1xuXG5pbXBvcnQgU3dpdGNoMSBmcm9tICdAY29tcG9uZW50cy9Td2l0Y2gnXG5pbXBvcnQgQm94IGZyb20gJ0Bjb21wb25lbnRzL2NvbW1vbi9Cb3gnXG5pbXBvcnQgVGV4dCBmcm9tICdAY29tcG9uZW50cy9jb21tb24vVGV4dCdcbmltcG9ydCBUZXh0RmllbGQgZnJvbSAnQGNvbXBvbmVudHMvVGV4dEZpZWxkJ1xuXG5pbXBvcnQgeyBwYWxldHRlIH0gZnJvbSAnQGxpYi90aGVtZS90aGVtZSdcblxuaW1wb3J0IHsgYWRkSXRlbVRvQWxhcm1zLCByZW1vdmVJdGVtRnJvbUFsYXJtcyB9IGZyb20gJ0BsaWIvQ2FsZW5kYXIvQ3JlYXRlRXZlbnRXaXphcmQvd2l6YXJkSGVscGVyJ1xuXG5pbXBvcnQgeyBOZXh0QXBpUmVxdWVzdCwgTmV4dEFwaVJlc3BvbnNlIH0gZnJvbSAnbmV4dCc7XG5pbXBvcnQgc3VwZXJ0b2tlbnNOb2RlIGZyb20gJ3N1cGVydG9rZW5zLW5vZGUnXG5pbXBvcnQgeyBiYWNrZW5kQ29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vY29uZmlnL2JhY2tlbmRDb25maWcnXG5pbXBvcnQgU2Vzc2lvbiBmcm9tICdzdXBlcnRva2Vucy1ub2RlL3JlY2lwZS9zZXNzaW9uJ1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U2VydmVyU2lkZVByb3BzKHsgcmVxLCByZXMgfTogeyByZXE6IE5leHRBcGlSZXF1ZXN0LCByZXM6IE5leHRBcGlSZXNwb25zZSB9KSB7XG4gIC8vIE5vdGljZSBob3cgdGhlIHNlcnZlciB1c2VzIGBBUElgIGZyb20gYHdpdGhTU1JDb250ZXh0YCwgaW5zdGVhZCBvZiB0aGUgdG9wLWxldmVsIGBBUElgLlxuICAvLyBjb25zdCBTU1IgPSB3aXRoU1NSQ29udGV4dCh7IHJlcSB9KVxuICAvLyB0aGlzIHJ1bnMgb24gdGhlIGJhY2tlbmQsIHNvIHdlIG11c3QgY2FsbCBpbml0IG9uIHN1cGVydG9rZW5zLW5vZGUgU0RLXG4gIHN1cGVydG9rZW5zTm9kZS5pbml0KGJhY2tlbmRDb25maWcoKSlcbiAgbGV0IHNlc3Npb25cbiAgdHJ5IHtcbiAgICBzZXNzaW9uID0gYXdhaXQgU2Vzc2lvbi5nZXRTZXNzaW9uKHJlcSwgcmVzLCB7XG4gICAgICBvdmVycmlkZUdsb2JhbENsYWltVmFsaWRhdG9yczogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gW11cbiAgICAgIH0sXG4gICAgfSlcbiAgfSBjYXRjaCAoZXJyOiBhbnkpIHtcbiAgICBpZiAoZXJyLnR5cGUgPT09IFNlc3Npb24uRXJyb3IuVFJZX1JFRlJFU0hfVE9LRU4pIHtcbiAgICAgIHJldHVybiB7IHByb3BzOiB7IGZyb21TdXBlcnRva2VuczogJ25lZWRzLXJlZnJlc2gnIH0gfVxuICAgIH0gZWxzZSBpZiAoZXJyLnR5cGUgPT09IFNlc3Npb24uRXJyb3IuVU5BVVRIT1JJU0VEKSB7XG4gICAgICAvLyB0aGlzIHdpbGwgZm9yY2UgdGhlIGZyb250ZW5kIHRvIHRyeSBhbmQgcmVmcmVzaCB3aGljaCB3aWxsIGZhaWxcbiAgICAgIC8vIGNsZWFyaW5nIGFsbCBjb29raWVzIGFuZCByZWRpcmVjdGluZyB0aGUgdXNlciB0byB0aGUgbG9naW4gc2NyZWVuLlxuICAgICAgcmV0dXJuIHsgcHJvcHM6IHsgZnJvbVN1cGVydG9rZW5zOiAnbmVlZHMtcmVmcmVzaCcgfSB9XG4gICAgfVxuICAgIHRocm93IGVyclxuICB9XG5cbiAgaWYgKCFzZXNzaW9uPy5nZXRVc2VySWQoKSkge1xuICAgIHJldHVybiB7XG4gICAgICByZWRpcmVjdDoge1xuICAgICAgICBkZXN0aW5hdGlvbjogJy9Vc2VyL0xvZ2luL1VzZXJMb2dpbicsXG4gICAgICAgIHBlcm1hbmVudDogZmFsc2UsXG4gICAgICB9LFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcHJvcHM6IHtcbiAgICAgIHN1Yjogc2Vzc2lvbi5nZXRVc2VySWQoKSxcbiAgICB9XG4gIH1cbn1cblxuXG50eXBlIFByb3BzID0ge1xuICAgIHVzZURlZmF1bHRBbGFybXM6IGJvb2xlYW4sXG4gICAgYWxhcm1zOiBudW1iZXJbXSxcbiAgICBzZXRQYXJlbnRBbGFybXM6IERpc3BhdGNoPFNldFN0YXRlQWN0aW9uPG51bWJlcltdPj4sXG4gICAgc2V0UGFyZW50VXNlRGVmYXVsdEFsYXJtczogRGlzcGF0Y2g8U2V0U3RhdGVBY3Rpb248Ym9vbGVhbj4+LFxufVxuXG5cbmZ1bmN0aW9uIENyZWF0ZU1lZXRpbmdBc3Npc3RBbGFybXMocHJvcHM6IFByb3BzKSB7XG4gICAgY29uc3QgW3VzZURlZmF1bHRBbGFybXMsIHNldFVzZURlZmF1bHRBbGFybXNdID0gdXNlU3RhdGU8Ym9vbGVhbj4ocHJvcHM/LnVzZURlZmF1bHRBbGFybXMpXG4gICAgY29uc3QgW2FsYXJtcywgc2V0QWxhcm1zXSA9IHVzZVN0YXRlPG51bWJlcltdPihwcm9wcz8uYWxhcm1zKVxuICAgIGNvbnN0IFthbGFybSwgc2V0QWxhcm1dID0gdXNlU3RhdGU8bnVtYmVyPigwKVxuICAgIGNvbnN0IFtwYWdlT2Zmc2V0LCBzZXRQYWdlT2Zmc2V0XSA9IHVzZVN0YXRlPG51bWJlcj4oMClcbiAgICBcbiAgICAvLyBjb25zdCBkYXJrID0gdXNlQ29sb3JTY2hlbWUoKSA9PT0gJ2RhcmsnXG5cbiAgICBjb25zdCBzZXRQYXJlbnRVc2VEZWZhdWx0QWxhcm1zID0gcHJvcHM/LnNldFBhcmVudFVzZURlZmF1bHRBbGFybXNcbiAgICBjb25zdCBzZXRQYXJlbnRBbGFybXMgPSBwcm9wcz8uc2V0UGFyZW50QWxhcm1zXG5cblxuICAgIFxuICAgIGNvbnN0IGNoYW5nZVVzZURlZmF1bHRBbGFybXMgPSAodmFsdWU6IGJvb2xlYW4pID0+IHtcbiAgICAgICAgc2V0VXNlRGVmYXVsdEFsYXJtcyh2YWx1ZSlcbiAgICAgICAgc2V0UGFyZW50VXNlRGVmYXVsdEFsYXJtcyh2YWx1ZSlcbiAgICB9XG5cbiAgICBjb25zdCBhZGRBbGFybVRvQWxhcm1zID0gKCkgPT4ge1xuICAgICAgICBhZGRJdGVtVG9BbGFybXMoYWxhcm0sIGFsYXJtcywgc2V0QWxhcm1zLCBzZXRQYXJlbnRBbGFybXMsIHNldEFsYXJtKVxuICAgICAgICBpZiAodXNlRGVmYXVsdEFsYXJtcykge1xuICAgICAgICAgICAgY2hhbmdlVXNlRGVmYXVsdEFsYXJtcyhmYWxzZSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAgIDxCb3ggZmxleD17MX0gc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fSBtaW5IZWlnaHQ9XCI2NXZoXCIgbWF4SGVpZ2h0PVwiNjV2aFwiPlxuICAgICAgICAgICAgPEJveCBmbGV4PXsxfSBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIiBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19PlxuICAgICAgICAgICAgICAgIDxCb3ggZmxleD17MX0gcHQ9e3sgcGhvbmU6ICdtJywgdGFibGV0OiAncycgfX0gZmxleERpcmVjdGlvbj17eyB0YWJsZXQ6IFwicm93XCJ9fSBqdXN0aWZ5Q29udGVudD1cInNwYWNlLWJldHdlZW5cIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCIgd2lkdGg9XCI3MCVcIj5cbiAgICAgICAgICAgICAgICAgICAgPEJveCBmbGV4RGlyZWN0aW9uPVwicm93XCIganVzdGlmeUNvbnRlbnQ9XCJmbGV4LXN0YXJ0XCIgYWxpZ25JdGVtcz1cImNlbnRlclwiIHN0eWxlPXt7IHdpZHRoOiAnMTAwJScgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VGV4dCB2YXJpYW50PVwib3B0aW9uSGVhZGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICBEbyB5b3Ugd2FudCB0byB1c2UgZGVmYXVsdCBhbGFybXM/XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICA8Qm94IGZsZXhEaXJlY3Rpb249XCJyb3dcIiBqdXN0aWZ5Q29udGVudD1cImZsZXgtZW5kXCIgcHQ9e3sgcGhvbmU6ICdtJywgdGFibGV0OiAncycgfX0gc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTd2l0Y2gxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17dXNlRGVmYXVsdEFsYXJtc31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblZhbHVlQ2hhbmdlPXtjaGFuZ2VVc2VEZWZhdWx0QWxhcm1zfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyBtYXJnaW5Cb3R0b206IDIwIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAvPiAgXG4gICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgIHthbGFybXM/Lmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICAgICAgPyAoXG4gICAgICAgICAgICAgICAgICAgIDxCb3ggZmxleD17M30gIGp1c3RpZnlDb250ZW50PVwiY2VudGVyXCIgYWxpZ25JdGVtcz1cImNlbnRlclwiIHN0eWxlPXt7IHdpZHRoOiAnMTAwJSd9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxGbGF0TGlzdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE9e2FsYXJtc31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJJdGVtPXsoeyBpdGVtLCBpbmRleCB9KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCb3gganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCIgc3R5bGU9e3sgd2lkdGg6ICcxMDAlJ319PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Qm94IGZsZXhEaXJlY3Rpb249XCJyb3dcIiBqdXN0aWZ5Q29udGVudD1cInNwYWNlLWJldHdlZW5cIiBzdHlsZT17eyB3aWR0aDogJzEwMCUnfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dCB2YXJpYW50PVwib3B0aW9uSGVhZGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7YCR7aXRlbX0gbWludXRlcyBiZWZvcmVgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFByZXNzYWJsZSBoaXRTbG9wPXsxNX0gb25QcmVzcz17KCkgPT4gcmVtb3ZlSXRlbUZyb21BbGFybXMoaW5kZXgsIGFsYXJtcywgc2V0QWxhcm1zLCBzZXRQYXJlbnRBbGFybXMpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW9UcmFzaCBzaXplPVwiMS41ZW1cIiBjb2xvcj17cGFsZXR0ZS5yZWR9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1ByZXNzYWJsZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5RXh0cmFjdG9yPXsoaXRlbSwgaW5kZXgpID0+IGAke2l0ZW19LSR7aW5kZXh9YH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICAgICAgICA8Qm94IGZsZXg9ezF9IGp1c3RpZnlDb250ZW50PVwiY2VudGVyXCIgYWxpZ25JdGVtcz1cImNlbnRlclwiIHN0eWxlPXt7IHdpZHRoOiAnMTAwJSd9fT5cbiAgICAgICAgICAgICAgICAgICAgPEJveCBmbGV4PXsxfSAgZmxleERpcmVjdGlvbj1cInJvd1wiIGp1c3RpZnlDb250ZW50PVwiY2VudGVyXCIgYWxpZ25JdGVtcz1cImNlbnRlclwiIHN0eWxlPXt7IHdpZHRoOiAnNDAlJ319PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1yLTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJudW1iZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGU6IHsgdGFyZ2V0OiB7IHZhbHVlOiBzdHJpbmc7IH07IH0pID0+IHNldEFsYXJtKHBhcnNlSW50KGU/LnRhcmdldD8udmFsdWU/LnJlcGxhY2UoL1teMC05Ll0vZywgJycpLCAxMCkpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17YCR7YWxhcm19YH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCIwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtbC0yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFByZXNzYWJsZSBvblByZXNzPXthZGRBbGFybVRvQWxhcm1zfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRleHQgdmFyaWFudD1cImJ1dHRvbkxpbmtcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFkZCBBbGFybVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9QcmVzc2FibGU+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICA8L0JveD5cbiAgICAgICAgPC9Cb3g+XG4gICAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBDcmVhdGVNZWV0aW5nQXNzaXN0QWxhcm1zXG5cblxuXG5cbiJdfQ==