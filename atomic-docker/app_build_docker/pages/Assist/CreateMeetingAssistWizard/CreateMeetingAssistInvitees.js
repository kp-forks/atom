"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
/* eslint-disable react/no-unknown-property */
const react_1 = require("react");
const react_native_1 = require("react-native");
const TextField_1 = __importDefault(require("@components/TextField"));
const themed_1 = require("@rneui/themed");
const Fab_1 = __importDefault(require("@mui/material/Fab"));
const Add_1 = __importDefault(require("@mui/icons-material/Add"));
const styles_1 = require("@mui/material/styles");
const Zoom_1 = __importDefault(require("@mui/material/Zoom"));
const SpeedDial_1 = __importDefault(require("@mui/material/SpeedDial"));
const SpeedDialIcon_1 = __importDefault(require("@mui/material/SpeedDialIcon"));
const SpeedDialAction_1 = __importDefault(require("@mui/material/SpeedDialAction"));
const colors_1 = require("@mui/material/colors");
const ImportContacts_1 = __importDefault(require("@mui/icons-material/ImportContacts"));
const Keyboard_1 = __importDefault(require("@mui/icons-material/Keyboard"));
const Edit_1 = __importDefault(require("@mui/icons-material/Edit"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const Button_1 = __importDefault(require("@components/Button"));
const RegularCard_1 = __importDefault(require("@components/RegularCard"));
const ContactHelper_1 = require("@lib/Contact/ContactHelper");
const UserMeetingAssistHelper_1 = require("@lib/Assist/UserMeetingAssistHelper");
const theme_1 = require("@lib/theme/theme");
const styles = {
    safeArea: {
        alignItems: 'flex-end',
    },
    container: {
        ...react_native_1.StyleSheet.absoluteFillObject,
        justifyContent: 'flex-end',
    },
    fab: {
        margin: 16,
        marginTop: 0,
    },
    container2: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
    },
};
const fabStyle = {
    position: 'absolute',
    bottom: 16,
    right: 16,
};
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function SearchContact(props) {
    const [selected, setSelected] = (0, react_1.useState)(props?.invitees.findIndex(i => i.id === props?.contact.id) > -1);
    const { hostId, hostName, meetingId } = props;
    const updateSelected = () => {
        const value = !selected;
        setSelected(value);
        if (value === true) {
            if (props?.searchResults) {
                if (props?.setSearchResults) {
                    props?.updateSearchContactSelection(value, props?.contact, props?.contacts, props?.searchResults, props?.setContacts, props?.setSearchResults, props?.index);
                }
            }
            props?.addContactToInvitees(props?.contact, props?.invitees, props?.setInvitees, props?.setParentI, hostId, hostName, meetingId);
        }
        else if (value === false) {
            if (props?.contacts) {
                if (props?.searchResults) {
                    if (props?.setSearchResults) {
                        props?.updateSearchContactSelection(value, props?.contact, props?.contacts, props?.searchResults, props?.setContacts, props?.setSearchResults, props?.index);
                    }
                }
            }
            if (props?.searchResults) {
                if (props?.setSearchResults) {
                    props?.removeContactFromSearchInvitee(props?.contact, props?.invitees, props?.searchResults, props?.setInvitees, props?.setSearchResults, props?.setParentI);
                }
            }
        }
    };
    return ((0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsxs)(RegularCard_1.default, { children: [(0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: props?.contact?.name }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "caption", children: props?.contact?.emails?.filter(i => (i.primary === true))?.[0]?.value }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: updateSelected, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", children: selected ? 'Remove' : 'Add' }) }) })] }) }));
}
function Contact(props) {
    const [selected, setSelected] = (0, react_1.useState)(props?.invitees.findIndex(i => i.id === props?.contact.id) > -1);
    const { hostId, hostName, meetingId } = props;
    const updateSelected = () => {
        const value = !selected;
        setSelected(value);
        if (value === true) {
            props?.updateContactSelection(value, props?.contact, props?.contacts, props?.setContacts, props?.index);
            props?.addContactToInvitees(props?.contact, props?.invitees, props?.setInvitees, props?.setParentI, hostId, hostName, meetingId);
        }
        else if (value === false) {
            props?.updateContactSelection(value, props?.contact, props?.contacts, props?.setContacts, props?.index);
            props?.removeContactFromInvitee(props?.contact, props?.invitees, props?.setInvitees, props?.setParentI);
        }
    };
    return ((0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsxs)(RegularCard_1.default, { children: [(0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: props?.contact?.name }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "caption", children: props?.contact?.emails?.filter(i => (i.primary === true))?.[0]?.value }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: updateSelected, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", children: selected ? 'Remove' : 'Add' }) }) })] }) }));
}
function Contacts(props) {
    const [contacts, setContacts] = (0, react_1.useState)(props?.contacts);
    const [searchResults, setSearchResults] = (0, react_1.useState)(props?.contacts);
    const [search, setSearch] = (0, react_1.useState)('');
    const { hostId, hostName, meetingId, client } = props;
    const updateSearch = (text) => setSearch(text);
    const onCancelSearch = () => {
        setSearch('');
        setSearchResults([]);
    };
    const onClearSearch = () => setSearch('');
    const onSubmitSearch = async () => {
        try {
            // validate
            if (!search) {
                return;
            }
            console.log(search, ' search search');
            const newResults = await (0, ContactHelper_1.searchContactsByName)(client, hostId, search);
            console.log(newResults, ' newResults post searchContactsByName');
            if (newResults?.length > 0) {
                setSearchResults(newResults?.map(c => ({ ...c, selected: props?.invitees?.findIndex(i => i?.id === c?.id) > -1 })));
            }
        }
        catch (e) {
            console.log(e, ' unable to submit search results');
        }
    };
    const closeContacts = props?.closeContacts;
    console.log(searchResults && searchResults?.length > 0, ' searchResults?.length > 0');
    return ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, minHeight: "65vh", maxHeight: "65vh", style: { width: '100%' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '80%' }, children: (0, jsx_runtime_1.jsxs)("form", { className: "m-4", children: [(0, jsx_runtime_1.jsx)("label", { htmlFor: "default-search", className: "mb-2 text-sm font-medium text-gray-900 sr-only dark:text-white", children: "Search" }), (0, jsx_runtime_1.jsxs)("div", { className: "relative", children: [(0, jsx_runtime_1.jsx)("div", { className: "absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none", children: (0, jsx_runtime_1.jsx)("svg", { "aria-hidden": "true", className: "w-5 h-5 text-gray-500 dark:text-gray-400", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg", children: (0, jsx_runtime_1.jsx)("path", { "stroke-linecap": "round", "stroke-linejoin": "round", "stroke-width": "2", d: "M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" }) }) }), (0, jsx_runtime_1.jsx)("input", { value: search, onChange: (e) => updateSearch(e?.target?.value), type: "search", id: "default-search", className: "block w-full p-4 pl-10 text-sm text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-purple-500 focus:border-purple-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-purple-500 dark:focus:border-purple-500", placeholder: "Type Name Here And Enter...", required: true }), (0, jsx_runtime_1.jsx)("button", { onClick: onSubmitSearch, className: "text-white absolute right-2.5 bottom-2.5 bg-purple-700 hover:bg-purple-800 focus:ring-4 focus:outline-none focus:ring-purple-300 font-medium rounded-lg text-sm px-4 py-2 dark:bg-purple-600 dark:hover:bg-purple-700 dark:focus:ring-purple-800", children: "Search" })] })] }) }), searchResults && searchResults?.length > 0
                    ? ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(react_native_1.FlatList, { data: contacts, renderItem: ({ item, index }) => ((0, jsx_runtime_1.jsx)(SearchContact, { contact: item, addContactToInvitees: UserMeetingAssistHelper_1.addContactToInvitees, removeContactFromSearchInvitee: UserMeetingAssistHelper_1.removeContactFromSearchInvitee, updateSearchContactSelection: UserMeetingAssistHelper_1.updateSearchContactSelection, contacts: contacts, searchResults: searchResults, setContacts: setContacts, setParentI: props?.setParentI, setSearchResults: setSearchResults, invitees: props?.invitees, setInvitees: props?.setInvitees, index: index, hostId: hostId, hostName: hostName, meetingId: meetingId })), keyExtractor: (item, index) => `${item}-${index}` }) })) : ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: contacts?.length > 0
                        ? ((0, jsx_runtime_1.jsx)(react_native_1.FlatList, { data: contacts, renderItem: ({ item, index }) => ((0, jsx_runtime_1.jsx)(Contact, { contact: item, addContactToInvitees: UserMeetingAssistHelper_1.addContactToInvitees, removeContactFromInvitee: UserMeetingAssistHelper_1.removeContactFromInvitee, updateContactSelection: UserMeetingAssistHelper_1.updateContactSelection, contacts: contacts, setContacts: setContacts, setParentI: props?.setParentI, invitees: props?.invitees, setInvitees: props?.setInvitees, index: index, hostId: hostId, hostName: hostName, meetingId: meetingId })), keyExtractor: (item, index) => `${item}-${index}` })) : ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '90%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subheaderNormal", children: "You have no contacts saved. Go to settings to enable and sync Contacts from your phone or 3rd party provider." }) })) })), (0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: closeContacts, children: (0, jsx_runtime_1.jsx)(Text_1.default, { p: { phone: 'm', tablet: 'l' }, variant: "buttonLink", children: "Close" }) }) })] }) }));
}
function ManualEntry(props) {
    const [email, setEmail] = (0, react_1.useState)(props?.email || '');
    const [name, setName] = (0, react_1.useState)('');
    const setManualEntries = props?.setManualEntries;
    const manualEntries = props?.manualEntries;
    const index = props?.index;
    const setParentI = props?.setParentI;
    const parentIndex = props?.parentIndex;
    const invitees = props?.invitees;
    const setInvitees = props?.setInvitees;
    console.log(manualEntries, ' manualEntries');
    console.log(invitees, ' invitees');
    const onEmailChange = (e) => {
        setEmail(e?.target?.value);
        (0, UserMeetingAssistHelper_1.updateEntryInManualEntries)(manualEntries, setManualEntries, index, invitees, setInvitees, setParentI, parentIndex, e?.target?.value, name);
    };
    const onNameChange = (e) => {
        setName(e?.target?.value);
        (0, UserMeetingAssistHelper_1.updateEntryInManualEntries)(manualEntries, setManualEntries, index, invitees, setInvitees, setParentI, parentIndex, email, e?.target?.value);
    };
    return ((0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsxs)(RegularCard_1.default, { children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Email" }), (0, jsx_runtime_1.jsx)(TextField_1.default, { placeholder: "r@r.com", onChange: onEmailChange, value: email || '', style: { width: '60%' }, type: "email", validate: "email", validationMessage: "Please provide a valid email address" })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Display Name" }), (0, jsx_runtime_1.jsx)(TextField_1.default, { placeholder: "name", onChange: onNameChange, value: name || manualEntries?.[index]?.name || '', style: { width: '60%' } })] }), (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: () => (0, UserMeetingAssistHelper_1.removeEntryFromManualEntries)(manualEntries, setManualEntries, invitees, setInvitees, setParentI, index, parentIndex), children: "Remove" })] }) }));
}
function ManualEntries(props) {
    const [pageOffset, setPageOffset] = (0, react_1.useState)(0);
    const { height: fullHeight } = react_native_1.Dimensions.get('window');
    const theme = (0, styles_1.useTheme)();
    const transitionDuration = {
        enter: theme.transitions.duration.enteringScreen,
        exit: theme.transitions.duration.leavingScreen,
    };
    const closeManual = props?.closeManual;
    const addNewEntry = () => {
        (0, UserMeetingAssistHelper_1.addOneToManualEntries)(props?.manualEntries, props?.setManualEntries, props?.invitees, props?.setInvitees, props?.setParentI, props?.hostId, props?.hostName, props?.meetingId);
    };
    return ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, style: { width: '100%' }, minHeight: "65vh", maxHeight: "65vh", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '100%' }, children: [props?.manualEntries?.length > 0
                    ? ((0, jsx_runtime_1.jsx)(react_native_1.FlatList, { data: props?.manualEntries, renderItem: ({ item, index }) => ((0, jsx_runtime_1.jsx)(ManualEntry, { ...item, index: index, setManualEntries: props?.setManualEntries, manualEntries: props?.manualEntries, setParentI: props?.setParentI, parentIndex: props?.invitees.findIndex(a => (a?.id === item?.id)), invitees: props?.invitees, setInvitees: props?.setInvitees })), keyExtractor: (item) => item?.id })) : ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subheader", children: "Add a New Entry" }) })), (0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: closeManual, children: (0, jsx_runtime_1.jsx)(Text_1.default, { p: { phone: 'm', tablet: 'l' }, variant: "buttonLink", children: "Close" }) }) }), (0, jsx_runtime_1.jsx)(Zoom_1.default, { in: true, timeout: transitionDuration, style: {
                        transitionDelay: `${transitionDuration.exit}ms`,
                    }, unmountOnExit: true, children: (0, jsx_runtime_1.jsx)(Fab_1.default, { sx: fabStyle, "aria-label": 'Add', color: "primary", onClick: addNewEntry, children: (0, jsx_runtime_1.jsx)(Add_1.default, { sx: { color: colors_1.pink[500] } }) }) })] }) }));
}
function CreateMeetingAssistInvitees(props) {
    const [invitees, setInvitees] = (0, react_1.useState)(props?.invitees);
    const [isManual, setIsManual] = (0, react_1.useState)(false);
    const [manualEntries, setManualEntries] = (0, react_1.useState)([]);
    const [isContacts, setIsContacts] = (0, react_1.useState)(false);
    const [contacts, setContacts] = (0, react_1.useState)([]);
    const [isOpen, setIsOpen] = (0, react_1.useState)(false);
    const userId = props?.userId;
    const meetingId = props?.meetingId;
    const hostName = props?.hostName;
    const setParentInvitees = props?.setParentInvitees;
    const client = props?.client;
    console.log(invitees, ' parentInvitees');
    // get any contacts
    (0, react_1.useEffect)(() => {
        (async () => {
            if (!client || !userId) {
                return;
            }
            const newContacts = await (0, ContactHelper_1.listUserContactsHelper)(client, userId);
            if (newContacts && newContacts?.length > 0) {
                setContacts(newContacts
                    .map(c => ({ ...c, selected: false }))
                // .filter(c => (c?.emails?.[0]?.value?.length > 0))
                );
            }
        })();
    }, [client, userId]);
    const onManualChange = () => {
        setIsContacts(isManual);
        setIsManual(!isManual);
    };
    const onContactsChange = () => {
        setIsManual(isContacts);
        setIsContacts(!isContacts);
    };
    const closeContacts = () => setIsContacts(false);
    const closeManual = () => setIsManual(false);
    const actions = [
        { icon: (0, jsx_runtime_1.jsx)(ImportContacts_1.default, { color: "secondary" }), name: 'Import Contacts', method: onContactsChange },
        { icon: (0, jsx_runtime_1.jsx)(Keyboard_1.default, { color: "secondary" }), name: 'Manual Entry', method: onManualChange },
    ];
    if (isManual) {
        return ((0, jsx_runtime_1.jsx)(ManualEntries, { setManualEntries: setManualEntries, manualEntries: manualEntries, invitees: invitees, setInvitees: setInvitees, setParentI: setParentInvitees, closeManual: closeManual, hostId: userId, hostName: hostName, meetingId: meetingId }));
    }
    if (isContacts) {
        return ((0, jsx_runtime_1.jsx)(Contacts, { contacts: contacts, setParentI: setParentInvitees, invitees: invitees, setInvitees: setInvitees, closeContacts: closeContacts, hostId: userId, hostName: hostName, meetingId: meetingId, client: client }));
    }
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '100%' }, minHeight: "65vh", maxHeight: "65vh", children: [invitees?.length > 0
                ? ((0, jsx_runtime_1.jsx)(react_native_1.FlatList, { data: invitees, renderItem: ({ item }) => ((0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsx)(themed_1.ListItem, { containerStyle: {
                                backgroundColor: theme_1.palette.white,
                                borderBottomWidth: react_native_1.StyleSheet.hairlineWidth,
                                borderColor: theme_1.palette.darkGray
                            }, children: (0, jsx_runtime_1.jsxs)(themed_1.ListItem.Content, { children: [(0, jsx_runtime_1.jsx)(themed_1.ListItem.Title, { style: { color: theme_1.palette?.textBlack, fontWeight: 'bold' }, children: item?.name }), (0, jsx_runtime_1.jsx)(themed_1.ListItem.Subtitle, { style: { color: theme_1.palette?.textBlack, }, children: item?.email })] }) }) })), keyExtractor: (item) => item?.id })) : ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subheader", children: "Add an invitee from your contacts or manually enter one" }) })), (0, jsx_runtime_1.jsx)("div", { className: "absolute inset-0 z-20 pointer-events-none", children: (0, jsx_runtime_1.jsx)(SpeedDial_1.default, { ariaLabel: "Calendar SpeedDial", sx: { position: 'absolute', bottom: 24, right: 24, zIndex: 'speedDial' }, icon: (0, jsx_runtime_1.jsx)(SpeedDialIcon_1.default, { icon: (0, jsx_runtime_1.jsx)(Edit_1.default, {}), sx: { color: colors_1.pink[500] } }), children: actions.map((action) => ((0, jsx_runtime_1.jsx)(SpeedDialAction_1.default, { icon: action.icon, tooltipTitle: action.name, FabProps: {
                            onClick: action.method,
                        } }, action.name))) }) })] }));
}
exports.default = CreateMeetingAssistInvitees;
//# sourceMappingURL=data:application/json;base64,