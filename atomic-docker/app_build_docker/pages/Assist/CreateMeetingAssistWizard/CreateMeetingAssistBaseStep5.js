"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const date_utils_1 = require("@lib/date-utils");
// import DatePicker from 'react-native-date-picker'
// import DateTimePicker from 'react-datetime-picker/dist/entry.nostyle'
const colorsPalette_1 = require("@lib/theme/colorsPalette");
const react_2 = require("@chakra-ui/react");
const Switch_1 = __importDefault(require("@components/Switch"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const TextField_1 = __importDefault(require("@components/TextField"));
const react_native_1 = require("react-native");
const react_3 = require("@chakra-ui/react");
const react_4 = require("@chakra-ui/react");
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
const dark = react_native_1.Appearance.getColorScheme() === 'dark';
const styles = {
    container: {
        flex: 1,
    },
    duration: {
        fontSize: '21px',
        lineHeight: '28px',
    }
};
function CreateMeetingAssistBaseStep5(props) {
    const [cancelIfAnyRefuse, setCancelIfAnyRefuse] = (0, react_1.useState)(props?.cancelIfAnyRefuse);
    const [enableAttendeePreferences, setEnableAttendeePreferences] = (0, react_1.useState)(props?.enableAttendeePreferences);
    const [attendeeCanModify, setAttendeeCanModify] = (0, react_1.useState)(props?.attendeeCanModify);
    const [expireDate, setExpireDate] = (0, react_1.useState)(props?.expireDate);
    const [duration, setDuration] = (0, react_1.useState)(props?.duration);
    const [isMessage, setIsMessage] = (0, react_1.useState)(false);
    const [isExpireDatePicker, setIsExpireDatePicker] = (0, react_1.useState)(false);
    const setParentCancelIfAnyRefuse = props?.setParentCancelIfAnyRefuse;
    const setParentEnableAttendeePreferences = props?.setParentEnableAttendeePreferences;
    const setParentAttendeeCanModify = props?.setParentAttendeeCanModify;
    const setParentExpireDate = props?.setParentExpireDate;
    const setParentDuration = props?.setParentDuration;
    const toast = (0, react_3.useToast)();
    const changeCancelIfAnyRefuse = (value) => {
        setCancelIfAnyRefuse(value);
        setParentCancelIfAnyRefuse(value);
    };
    const changeEnableAttendeePreferences = (value) => {
        setEnableAttendeePreferences(value);
        setParentEnableAttendeePreferences(value);
    };
    const changeAttendeeCanModify = (value) => {
        setAttendeeCanModify(value);
        setParentAttendeeCanModify(value);
    };
    const changeExpireDate = (value) => {
        setExpireDate(value);
        setParentExpireDate(value);
    };
    // 
    const changeDuration = (e) => {
        const _value = e?.target?.value;
        const intValue = parseInt(_value.replace(/[^0-9.]/g, ''), 10);
        // validate
        if (intValue < 30) {
            toast({
                status: 'error',
                title: 'Too short',
                description: 'Your duration is too short. Make it more than or equal to 30 minutes',
                duration: 9000,
                isClosable: true,
            });
            setDuration(30);
            setParentDuration(30);
            return;
        }
        setDuration(intValue || 30);
        setParentDuration(intValue || 30);
    };
    const hideExpireDatePicker = () => setIsExpireDatePicker(false);
    const showExpireDatePicker = () => setIsExpireDatePicker(true);
    return ((0, jsx_runtime_1.jsx)(react_native_1.ScrollView, { style: { flex: 1, width: '100%', maxHeight: '65vh' }, contentContainerStyle: { alignItems: 'center', maxHeight: '65vh' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, flexDirection: { tablet: "row" }, justifyContent: "space-between", alignItems: "center", width: "70%", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", pt: { phone: 'm', tablet: 's' }, children: "Cancel planning if any refuse?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { onColor: colorsPalette_1.colorsPalette.purple30, offColor: colorsPalette_1.colorsPalette.purple60, checked: cancelIfAnyRefuse, onValueChange: changeCancelIfAnyRefuse, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, flexDirection: { tablet: "row" }, justifyContent: "space-between", alignItems: "center", width: "70%", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", pt: { phone: 'm', tablet: 's' }, children: "Allow attendee to select time preferences (slots) for event?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { onColor: colorsPalette_1.colorsPalette.purple30, offColor: colorsPalette_1.colorsPalette.purple60, checked: enableAttendeePreferences, onValueChange: changeEnableAttendeePreferences, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, flexDirection: { tablet: "row" }, justifyContent: "space-between", alignItems: "center", width: "70%", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", pt: { phone: 'm', tablet: 's' }, children: "Allow attendee to change existing time preferences (slots) for event?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { onColor: colorsPalette_1.colorsPalette.purple30, offColor: colorsPalette_1.colorsPalette.purple60, checked: attendeeCanModify, onValueChange: changeAttendeeCanModify, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, flexDirection: { tablet: "row" }, justifyContent: "space-between", alignItems: "center", width: "70%", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(react_2.Tooltip, { label: "You can select a time when the meeting assist will no longer valid if minimum number of attendees do not say \\'Yes\\'. In other words, no new events will be created.", "aria-label": 'A tooltip', children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "When will planning this event expire if minimum threshold of accepted invites is not met?" }) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", alignItems: "center", children: (0, jsx_runtime_1.jsx)(react_4.Input, { placeholder: "Select Date and Time", size: "md", type: "datetime-local", onChange: (e) => {
                                    changeExpireDate((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").toDate());
                                }, value: (0, date_utils_1.dayjs)(expireDate).format("YYYY-MM-DDTHH:mm") }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, flexDirection: { tablet: "row" }, justifyContent: "space-between", alignItems: "center", width: "70%", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "How long is the event?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", alignItems: "center", children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Duration (minutes)", type: "number", onChange: changeDuration, value: `${duration}`, placeholder: "1", style: styles.duration }) })] })] }) }));
}
exports.default = CreateMeetingAssistBaseStep5;
//# sourceMappingURL=data:application/json;base64,