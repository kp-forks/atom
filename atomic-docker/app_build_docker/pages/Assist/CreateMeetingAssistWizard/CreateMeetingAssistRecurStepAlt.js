"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_native_1 = require("react-native");
const TextField_1 = __importDefault(require("@components/TextField"));
// import DatePicker from 'react-native-date-picker'
// import DateTimePicker from 'react-datetime-picker/dist/entry.nostyle'
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const date_utils_1 = require("@lib/date-utils");
const lodash_1 = __importDefault(require("lodash"));
const react_2 = require("@chakra-ui/react");
const frequencyOptions = [
    { label: 'Daily', value: 'daily' },
    { label: 'Weekly', value: 'weekly' },
    { label: 'Monthly', value: 'monthly' },
];
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function CreateMeetingAssistRecurStepAlt(props) {
    const [frequency, setFrequency] = (0, react_1.useState)(props?.frequency);
    const [interval, setInterval] = (0, react_1.useState)(props?.interval);
    const [until, setUntil] = (0, react_1.useState)(props?.until);
    const [isRecurring, setIsRecurring] = (0, react_1.useState)(false);
    const dark = (0, react_native_1.useColorScheme)() === 'dark';
    const setParentFrequency = props?.setParentFrequency;
    const setParentInterval = props?.setParentInterval;
    const setParentUntil = props?.setParentUntil;
    const changeUntil = (value) => {
        setUntil(value);
        setParentUntil(value);
    };
    const changeFrequency = (value) => {
        setFrequency(value);
        setParentFrequency(value);
    };
    const changeInterval = (value) => {
        setInterval(parseInt(value.replace(/[^0-9.]/g, ''), 10));
        setParentInterval(parseInt(value.replace(/[^0-9.]/g, ''), 10));
    };
    const hideUntilPicker = () => setIsRecurring(false);
    const showUntilPicker = () => setIsRecurring(true);
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "flex-end", alignItems: "center", style: { width: '90%' }, children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Until" }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, justifyContent: "flex-end", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Select Date and Time", size: "md", type: "datetime-local", onChange: (e) => {
                                changeUntil((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").toDate());
                            }, value: (0, date_utils_1.dayjs)(until).format("YYYY-MM-DDTHH:mm") }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, p: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { p: { phone: 's', tablet: 'm' }, variant: "optionHeader", children: "Select how oftern to recur?" }), (0, jsx_runtime_1.jsxs)("select", { value: frequency, onChange: (e) => changeFrequency(e?.target?.value), className: "select select-primary w-full max-w-xs", children: [(0, jsx_runtime_1.jsx)("option", { disabled: true, selected: true, children: "frequency" }), lodash_1.default.map(frequencyOptions, option => ((0, jsx_runtime_1.jsx)("option", { value: option.value, children: option.label }, option.value)))] })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, p: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "flex-start", style: { width: '90%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Interval (ex: every 2 weeks)" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, p: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "flex-end", style: { width: '90%' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { type: "number", onChange: (e) => changeInterval(e?.target?.value), value: `${interval}`, placeholder: "1", validate: "number", validationMessage: "Please type a number" }) })] })] }));
}
exports.default = CreateMeetingAssistRecurStepAlt;
//# sourceMappingURL=data:application/json;base64,