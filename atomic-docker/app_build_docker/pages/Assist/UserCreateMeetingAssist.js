"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Wizard_1 = __importDefault(require("@components/Wizard"));
const react_2 = require("@chakra-ui/react");
const date_utils_1 = require("@lib/date-utils");
const uuid_1 = require("uuid");
const Box_1 = __importDefault(require("@components/common/Box"));
const Button_1 = __importDefault(require("@components/Button"));
const zoomMeetingHelper_1 = require("@lib/zoom/zoomMeetingHelper");
const googleCalendarHelper_1 = require("@lib/calendarLib/googleCalendarHelper");
const getGlobalPrimaryCalendar_1 = __importDefault(require("@lib/apollo/gql/getGlobalPrimaryCalendar"));
const UserMeetingAssistHelper_1 = require("@lib/Assist/UserMeetingAssistHelper");
const CreateMeetingAssistBaseStep_1 = __importDefault(require("@pages/Assist/CreateMeetingAssistWizard/CreateMeetingAssistBaseStep"));
const CreateMeetingAssistVirtualMeet_1 = __importDefault(require("@pages/Assist/CreateMeetingAssistWizard/CreateMeetingAssistVirtualMeet"));
const CreateMeetingAssistBaseStep3_1 = __importDefault(require("@pages/Assist/CreateMeetingAssistWizard/CreateMeetingAssistBaseStep3"));
const CreateMeetingAssistAlarms_1 = __importDefault(require("@pages/Assist/CreateMeetingAssistWizard/CreateMeetingAssistAlarms"));
const CreateMeetingAssistBaseStep5_1 = __importDefault(require("@pages/Assist/CreateMeetingAssistWizard/CreateMeetingAssistBaseStep5"));
const CreateMeetingAssistBaseStep6_1 = __importDefault(require("@pages/Assist/CreateMeetingAssistWizard/CreateMeetingAssistBaseStep6"));
const CreateMeetingAssistBaseStep7_1 = __importDefault(require("@pages/Assist/CreateMeetingAssistWizard/CreateMeetingAssistBaseStep7"));
const CreateMeetingAssistRecurStepAlt_1 = __importDefault(require("@pages/Assist/CreateMeetingAssistWizard/CreateMeetingAssistRecurStepAlt"));
const CreateMeetingAssistInvitees_1 = __importDefault(require("@pages/Assist/CreateMeetingAssistWizard/CreateMeetingAssistInvitees"));
const Text_1 = __importDefault(require("@components/common/Text"));
const RegularCard_1 = __importDefault(require("@components/RegularCard"));
const ContactHelper_1 = require("@lib/Contact/ContactHelper");
const router_1 = require("next/router");
const user_context_1 = require("@lib/user-context");
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
const client_1 = require("@apollo/client"); // Added for defining GraphQL mutation
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
const PROCESS_AUDIO_FOR_NOTE = (0, client_1.gql) `
  mutation ProcessAudioForNote($audioFilePath: String!, $noteId: String, $title: String, $content: String, $source: String, $linkedTaskId: String, $linkedEventId: String) {
    processAudioForNote(input: {
      audio_file_path: $audioFilePath,
      note_id: $noteId,
      title: $title,
      content: $content,
      source: $source,
      linked_task_id: $linkedTaskId,
      linked_event_id: $linkedEventId
    }) {
      note_id # This is what the action currently returns
      status
      error
      # Anticipating that the action might be updated to return full note details
      # If not, a separate query would be needed using the returned note_id
      # For this subtask, we assume the backend might provide this structure:
      # note_details {
      #   notes # or original_content
      #   summary
      #   transcription
      #   key_points
      # }
      # For now, let's assume we get these directly for simplicity in this step,
      # even if it's not what the current Hasura action provides.
      # This part of the response structure is speculative based on frontend needs.
      # The actual implementation of processAudioFile will need to be robust
      # to what the backend *actually* returns.
      # Let's assume for now the backend is enhanced like so:
      transcription_text: String
      summary_text: String
      key_points_text: String
      # The above are hypothetical direct fields. If they are nested, adjust parsing.
    }
  }
`;
function UserCreateMeetingAssist() {
    const [notes, setNotes] = (0, react_1.useState)('');
    const [summary, setSummary] = (0, react_1.useState)('');
    const [transcription, setTranscription] = (0, react_1.useState)('');
    const [keyPoints, setKeyPoints] = (0, react_1.useState)('');
    const [isRecording, setIsRecording] = (0, react_1.useState)(false);
    const [audioFilePath, setAudioFilePath] = (0, react_1.useState)(null);
    const [isLoadingAudio, setIsLoadingAudio] = (0, react_1.useState)(false);
    const [windowStartDate, setWindowStartDate] = (0, react_1.useState)(new Date());
    const [windowEndDate, setWindowEndDate] = (0, react_1.useState)(new Date());
    const [location, setLocation] = (0, react_1.useState)('');
    const [isZoomAvailable, setIsZoomAvailable] = (0, react_1.useState)(false);
    const [isGoogleMeetAvailable, setIsGoogleMeetAvailable] = (0, react_1.useState)(false);
    const [zoomMeet, setZoomMeet] = (0, react_1.useState)(false);
    const [googleMeet, setGoogleMeet] = (0, react_1.useState)(false);
    // const [priority, setPriority] = useState<number>(1)
    const [sendUpdates, setSendUpdates] = (0, react_1.useState)('all');
    const [guestsCanInviteOthers, setGuestsCanInviteOthers] = (0, react_1.useState)(true);
    const [transparency, setTransparency] = (0, react_1.useState)('opaque');
    const [visibility, setVisibility] = (0, react_1.useState)('default');
    const [useDefaultAlarms, setUseDefaultAlarms] = (0, react_1.useState)(true);
    const [alarms, setAlarms] = (0, react_1.useState)([]);
    const [cancelIfAnyRefuse, setCancelIfAnyRefuse] = (0, react_1.useState)(false);
    const [enableAttendeePreferences, setEnableAttendeePreferences] = (0, react_1.useState)(true);
    const [attendeeCanModify, setAttendeeCanModify] = (0, react_1.useState)(false);
    const [expireDate, setExpireDate] = (0, react_1.useState)((0, date_utils_1.dayjs)().add(6, 'd').toDate());
    const [duration, setDuration] = (0, react_1.useState)(30);
    const [enableConference, setEnableConference] = (0, react_1.useState)(false);
    const [conferenceApp, setConferenceApp] = (0, react_1.useState)('google');
    // const [calendarId, setCalendarId] = useState<string>()
    const [isBufferTime, setIsBufferTime] = (0, react_1.useState)(false);
    const [beforeEventMinutes, setBeforeEventMinutes] = (0, react_1.useState)(0);
    const [afterEventMinutes, setAfterEventMinutes] = (0, react_1.useState)(0);
    const [anyoneCanAddSelf, setAnyoneCanAddSelf] = (0, react_1.useState)(true);
    const [guestsCanSeeOtherGuests, setGuestsCanSeeOtherGuests] = (0, react_1.useState)(true);
    const [minThresholdCount, setMinThresholdCount] = (0, react_1.useState)(2);
    const [guaranteeAvailability, setGuaranteeAvailability] = (0, react_1.useState)(false);
    const [isRecurring, setIsRecurring] = (0, react_1.useState)(false);
    const [frequency, setFrequency] = (0, react_1.useState)('daily');
    const [interval, setInterval] = (0, react_1.useState)(1); // every 1, 2... weeks 
    const [until, setUntil] = (0, react_1.useState)(new Date());
    // const [selectedCalendarId, setSelectedCalendarId] = useState<string>()
    const [calendar, setCalendar] = (0, react_1.useState)();
    const [searchName, setSearchName] = (0, react_1.useState)('');
    const [contactResults, setContactResults] = (0, react_1.useState)();
    const [invitees, setInvitees] = (0, react_1.useState)([]);
    const [activeIndex, setActiveIndex] = (0, react_1.useState)(0);
    const [completedStep, setCompletedStep] = (0, react_1.useState)();
    const [hostName, setHostName] = (0, react_1.useState)('');
    const [user, setUser] = (0, react_1.useState)();
    const [meetingId, setMeetingId] = (0, react_1.useState)((0, uuid_1.v4)());
    const [userInfoItems, setUserInfoItems] = (0, react_1.useState)();
    const [lockAfter, setLockAfter] = (0, react_1.useState)(false);
    // const userId = props?.sub
    // const client = props?.client
    const { sub, client } = (0, user_context_1.useAppContext)();
    const userId = sub;
    const router = (0, router_1.useRouter)();
    const toast = (0, react_2.useToast)();
    // --- Audio Processing Functions ---
    const processAudioFile = async (filePath) => {
        if (!filePath) {
            toast({ title: "No audio file selected.", status: "warning", duration: 3000, isClosable: true });
            return;
        }
        setIsLoadingAudio(true);
        try {
            console.log(`Processing audio file: ${filePath}`);
            // For now, we pass the existing notes and summary as content and title respectively
            // if we want the audio processing to potentially use them or add to them.
            // Or, they could be separate if the backend handles merging.
            // Let's assume the action might create a new note or update based on filePath alone for now.
            // The action `processAudioForNote` can take existing note_id, title, content.
            // If we have a note_id from a previously created meeting assist, we could pass it.
            // For a new meeting assist, these would likely be null or defaults.
            const { data } = await client.mutate({
                mutation: PROCESS_AUDIO_FOR_NOTE,
                variables: {
                    audioFilePath: filePath,
                    // Potentially pass other details if relevant for the audio processing context
                    // For example, if audio processing should be linked to an *existing* note:
                    // noteId: existingNoteIdIfAny,
                    // title: summary, // or a dedicated title for the audio note
                    // content: notes, // or leave blank if transcription is the main content
                },
            });
            const result = data?.processAudioForNote;
            if (result?.status === 'success') {
                // ASSUMPTION: Backend returns transcription, summary, key_points
                // Adjust based on actual backend response structure.
                // The GQL mutation above speculatively added these fields to the response.
                const returnedTranscription = result.transcription_text || "Transcription not available.";
                const returnedSummary = result.summary_text || summary; // Keep existing summary if not returned
                const returnedKeyPoints = result.key_points_text || "Key points not available.";
                // const returnedNotes = result.note_details?.notes || notes; // If backend returns original notes
                setTranscription(returnedTranscription);
                setSummary(returnedSummary); // Update summary if backend provides a new one
                setKeyPoints(returnedKeyPoints);
                // setNotes(returnedNotes); // Update notes if backend provides new/merged notes
                // If a note_id is returned, it might be useful for subsequent operations
                // e.g., if the audio processing created a new note in Notion.
                console.log("Audio processed, note_id:", result.note_id);
                toast({ title: "Audio processed successfully!", status: "success", duration: 3000, isClosable: true });
            }
            else {
                console.error("Error processing audio:", result?.error);
                toast({ title: "Error processing audio", description: result?.error || "Unknown error", status: "error", duration: 5000, isClosable: true });
                // Clear fields on error? Or leave them as they are?
                // setTranscription(''); setKeyPoints(''); // Optionally clear
            }
        }
        catch (error) {
            console.error("GraphQL mutation error:", error);
            toast({ title: "Audio processing failed", description: error.message || "Please try again.", status: "error", duration: 5000, isClosable: true });
        }
        finally {
            setIsLoadingAudio(false);
        }
    };
    const handleAudioRecordToggle = () => {
        if (isRecording) {
            // Stop recording
            console.log("Stop recording (simulated)");
            setIsRecording(false);
            const dummyFilePath = "simulated_audio_from_record.wav";
            setAudioFilePath(dummyFilePath); // Store dummy path
            processAudioFile(dummyFilePath);
        }
        else {
            // Start recording
            console.log("Start recording (simulated)");
            setIsRecording(true);
            // Actual recording logic would go here (e.g., MediaRecorder API)
            // For now, we just set the state. The file will be "available" on stop.
        }
    };
    const handleFileUpload = (event) => {
        const file = event.target.files?.[0];
        if (file) {
            console.log(`File uploaded: ${file.name} (simulated processing)`);
            // In a real app, you'd upload this file to a server/S3 and get back a URL/path.
            // For this subtask, we'll simulate it with a dummy path.
            const dummyFilePath = `uploaded_${file.name}`;
            setAudioFilePath(dummyFilePath); // Store dummy path or file name
            processAudioFile(dummyFilePath);
            // Reset file input value so the same file can be selected again if needed
            event.target.value = '';
        }
    };
    // --- End Audio Processing Functions ---
    // list old info items
    (0, react_1.useEffect)(() => {
        (async () => {
            try {
                if (!userId) {
                    return;
                }
                const oldDbInfoItems = await (0, ContactHelper_1.listUserContactInfosGivenUserId)(client, userId);
                if (oldDbInfoItems && oldDbInfoItems?.length > 0) {
                    setUserInfoItems(oldDbInfoItems);
                }
            }
            catch (e) {
                console.log(e, ' unable to list user contact info items');
            }
        })();
    }, [client, userId]);
    // check if zoom available
    (0, react_1.useEffect)(() => {
        (async () => {
            if (!userId || !client) {
                return;
            }
            const isAvailable = await (0, zoomMeetingHelper_1.zoomAvailable)(client, userId);
            if (isAvailable) {
                setIsZoomAvailable(true);
            }
        })();
    }, [client, userId]);
    // check if google available
    (0, react_1.useEffect)(() => {
        (async () => {
            if (!userId || !client) {
                return;
            }
            const isAvailable = await (0, googleCalendarHelper_1.googleMeetAvailable)(client, userId);
            if (isAvailable) {
                setIsGoogleMeetAvailable(isAvailable);
            }
        })();
    }, [client, userId]);
    // get global primary calendar
    (0, react_1.useEffect)(() => {
        (async () => {
            if (!userId || !client) {
                return;
            }
            const result = (await client.query({
                query: getGlobalPrimaryCalendar_1.default,
                variables: {
                    userId,
                },
                fetchPolicy: 'no-cache',
            })).data?.Calendar?.[0];
            console.log(result, ' primary calendar');
            if (!result?.id) {
                console.log(' no primary calendar available');
                toast({
                    status: 'error',
                    title: 'Forgot to set Primary Calendar',
                    description: 'Please go to Settings to Set Primary Calendar. This will not work otherwise.',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            // setSelectedCalendarId(result?.id)
            setCalendar(result);
        })();
    }, [client, toast, userId]);
    // get user and update if necessary
    (0, react_1.useEffect)(() => {
        (async () => {
            try {
                if (!userId) {
                    return;
                }
                const oldUser = await (0, UserMeetingAssistHelper_1.getUserGivenId)(client, userId);
                setUser(oldUser);
                if (oldUser?.name) {
                    setHostName(oldUser?.name);
                }
            }
            catch (e) {
                console.log(e, ' unable to get user');
            }
        })();
    }, [client, userId]);
    const createMeetingAssistInvitees = async () => {
        try {
            console.log(invitees, ' invitees');
            await (0, UserMeetingAssistHelper_1.upsertMeetingAssistInviteMany)(client, invitees);
        }
        catch (e) {
            console.log(e, ' unable to create meeting assist invitees');
        }
    };
    const createHostAttendee = async (meetingId) => {
        try {
            console.log(userInfoItems, ' userInfoItems inside createHostAttendee');
            // validate
            if (!userInfoItems || !user) {
                console.log('user object not present inside UserCreateMeetingAssist');
                toast({
                    status: 'error',
                    title: 'Oops...',
                    description: 'Something went wrong, please let us know so we can fix it',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            const attendeeId = (0, uuid_1.v4)();
            const primaryInfoItem = userInfoItems?.find(u => (u.primary && (u.type === 'email')));
            const hostAttendee = {
                id: attendeeId,
                name: hostName || primaryInfoItem?.name || user?.name,
                hostId: userId,
                userId,
                emails: [{ primary: true, value: primaryInfoItem?.id || user?.email || '', type: 'email', displayName: primaryInfoItem?.name || user?.name || '' }],
                meetingId,
                createdDate: (0, date_utils_1.dayjs)().format(),
                timezone: date_utils_1.dayjs.tz.guess(),
                updatedAt: (0, date_utils_1.dayjs)().format(),
                externalAttendee: false,
                primaryEmail: primaryInfoItem?.id || user?.email,
            };
            await (0, UserMeetingAssistHelper_1.insertMeetingAssistAttendee)(client, hostAttendee);
            return attendeeId;
        }
        catch (e) {
            console.log(e, ' unable to create host attendee');
        }
    };
    const createSingleMeetingAssist = async () => {
        try {
            // Combine notes, transcription, and key points for storage
            let combinedNotes = notes;
            if (transcription) {
                combinedNotes += `\n\n--- Transcription ---\n${transcription}`;
            }
            if (keyPoints) {
                combinedNotes += `\n\n--- Key Points ---\n${keyPoints}`;
            }
            const meetingAssist = {
                id: meetingId,
                userId,
                summary,
                notes: combinedNotes, // Use combined notes
                windowStartDate: (0, date_utils_1.dayjs)(windowStartDate).format(),
                windowEndDate: (0, date_utils_1.dayjs)(windowEndDate).format(),
                timezone: date_utils_1.dayjs.tz.guess(),
                location: { title: (location || '') },
                priority: 1,
                enableConference,
                conferenceApp,
                sendUpdates,
                guestsCanInviteOthers,
                transparency,
                visibility,
                createdDate: (0, date_utils_1.dayjs)().format(),
                updatedAt: (0, date_utils_1.dayjs)().format(),
                useDefaultAlarms,
                reminders: alarms,
                cancelIfAnyRefuse,
                enableAttendeePreferences,
                attendeeCanModify,
                expireDate: (0, date_utils_1.dayjs)(expireDate).format(),
                duration,
                calendarId: calendar?.id || '',
                bufferTime: isBufferTime ? {
                    beforeEvent: beforeEventMinutes,
                    afterEvent: afterEventMinutes,
                } : undefined,
                anyoneCanAddSelf,
                guestsCanSeeOtherGuests,
                minThresholdCount,
                guaranteeAvailability,
                attendeeRespondedCount: 1,
                attendeeCount: 1,
                cancelled: false,
                frequency,
                interval,
                until: (0, date_utils_1.dayjs)(until).format(),
                originalMeetingId: isRecurring ? meetingId : undefined,
                lockAfter,
            };
            await (0, UserMeetingAssistHelper_1.upsertMeetingAssistOne)(client, meetingAssist);
            await createHostAttendee(meetingId);
            await createMeetingAssistInvitees();
            const inviteeEmails = (0, UserMeetingAssistHelper_1.convertInviteeTypeToInviteEmailRecipients)(invitees, meetingId);
            await (0, UserMeetingAssistHelper_1.sendMeetingInfoToHostEmail)(inviteeEmails, user?.email || '', hostName || user?.name || '', summary, notes, (0, date_utils_1.dayjs)(windowStartDate).format(), (0, date_utils_1.dayjs)(windowEndDate).format(), date_utils_1.dayjs.tz.guess());
            const filteredInviteeEmails = inviteeEmails?.filter(i => !!(i?.email));
            await (0, UserMeetingAssistHelper_1.sendBulkMeetingInviteEmail)(filteredInviteeEmails, user?.email || '', hostName || user?.name || '');
            if (hostName && (user?.name !== hostName)) {
                await (0, UserMeetingAssistHelper_1.updateUserNameGivenId)(client, userId, hostName);
            }
        }
        catch (e) {
            console.log(e, ' unable to create single meeting assist');
        }
    };
    const createMeetingAssist = async () => {
        try {
            // validate
            if (!(invitees?.length > 0)) {
                toast({
                    status: 'error',
                    title: 'No invitees set',
                    description: 'Please add at least 1 invitee',
                    duration: 9000,
                    isClosable: true,
                });
            }
            await createSingleMeetingAssist();
            toast({
                status: 'success',
                title: 'Meeting Assist Created',
                description: 'Meeting Assist created successfully',
                duration: 9000,
                isClosable: true,
            });
            router.push('/Calendar/UserViewCalendar');
        }
        catch (e) {
            console.log(e, ' unable to create meeting assist');
        }
    };
    const goToPrevStep = () => {
        const prevActiveIndex = activeIndex;
        const newActiveIndex = prevActiveIndex === 0 ? 0 : prevActiveIndex - 1;
        if ((activeIndex === 8) && !isRecurring) {
            return setActiveIndex(6);
        }
        setActiveIndex(newActiveIndex);
    };
    const renderPrevButton = () => {
        if (activeIndex === 0) {
            return (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' } });
        }
        return ((0, jsx_runtime_1.jsx)(Box_1.default, { ml: { phone: 's', tablet: 'm' }, mb: { phone: 's', tablet: 'm' }, pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: goToPrevStep, children: "Back" }) }));
    };
    const goToNextStep = () => {
        const prevActiveIndex = activeIndex;
        const prevCompletedStep = completedStep;
        /**
         * 0 - CreateMeetingAssistBaseStep
         * 1 - CreateMeetingAssistVirtualMeet
         * 2 - CreateMeetingAssistBaseStep3
         * 3 - CreateMeetingAssistAlarms
         * 4 - CreateMeetingAssistBaseStep5
         * 5 - CreateMeetingAssistBaseStep6
         * 6 - CreateMeetingAssistBaseStep7
         * 7 - CreateMeetingAssistRecurStepAlt
         * 8 - createMeetingAssistInvitees
         */
        if (!isRecurring) {
            let newActiveIndex = prevActiveIndex + 1;
            if (prevActiveIndex === 6) {
                newActiveIndex = 8;
            }
            // validate invitees list
            if (prevActiveIndex === 8) {
                if (invitees?.length === 0) {
                    toast({
                        status: 'info',
                        title: 'No invitees added',
                        description: 'Please add at least one invitee in order to add your meeting',
                        duration: 9000,
                        isClosable: true,
                    });
                    newActiveIndex = 8;
                }
            }
            if (prevActiveIndex === 9) {
                return;
            }
            if (!prevCompletedStep || (prevCompletedStep < prevActiveIndex)) {
                const newCompletedStep = prevActiveIndex;
                setCompletedStep(newCompletedStep);
            }
            if (newActiveIndex !== prevActiveIndex) {
                return setActiveIndex(newActiveIndex);
            }
        }
        if (prevActiveIndex === 9) {
            return;
        }
        let newActiveIndex = prevActiveIndex + 1;
        // validate invitees list
        if (prevActiveIndex === 8) {
            if (invitees?.length === 0) {
                toast({
                    status: 'info',
                    title: 'No invitees added',
                    description: 'Please add at least one invitee in order to add your meeting',
                    duration: 9000,
                    isClosable: true,
                });
                newActiveIndex = 8;
            }
        }
        if (!prevCompletedStep || (prevCompletedStep < prevActiveIndex)) {
            const newCompletedStep = prevActiveIndex;
            setCompletedStep(newCompletedStep);
        }
        if (newActiveIndex !== prevActiveIndex) {
            setActiveIndex(newActiveIndex);
        }
    };
    const renderNextButton = () => {
        if (activeIndex === 9) {
            return (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' } });
        }
        if ((activeIndex === 8) && (invitees?.length === 0)) {
            return (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' } });
        }
        return ((0, jsx_runtime_1.jsx)(Box_1.default, { mr: { phone: 's', tablet: 'm' }, mb: { phone: 's', tablet: 'm' }, pt: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: goToNextStep, children: "Next" }) }));
    };
    const renderCurrentStep = () => {
        /**
         * 0 - CreateMeetingAssistBaseStep
         * 1 - CreateMeetingAssistVirtualMeet
         * 2 - CreateMeetingAssistBaseStep3
         * 3 - CreateMeetingAssistAlarms
         * 4 - CreateMeetingAssistBaseStep5
         * 5 - CreateMeetingAssistBaseStep6
         * 6 - CreateMeetingAssistBaseStep7
         * 7 - CreateMeetingAssistRecurStepAlt
         * 8 - CreateMeetingAssistInvitees
         */
        switch (activeIndex) {
            case 0:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(CreateMeetingAssistBaseStep_1.default, { notes: notes, summary: summary, windowStartDate: windowStartDate, windowEndDate: windowEndDate, location: location, setParentNotes: setNotes, setParentSummary: setSummary, setParentWindowStartDate: setWindowStartDate, setParentWindowEndDate: setWindowEndDate, setParentLocation: setLocation }), (0, jsx_runtime_1.jsxs)(Box_1.default, { mt: "m", p: "m", borderWidth: "1px", borderRadius: "md", borderColor: "gray.200", width: "100%", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "label", mb: "s", children: "Audio Processing (Optional)" }), (0, jsx_runtime_1.jsxs)(Box_1.default, { display: "flex", flexDirection: { phone: "column", tablet: "row" }, alignItems: "center", gap: "m", mb: "m", children: [(0, jsx_runtime_1.jsx)(Button_1.default, { onClick: handleAudioRecordToggle, variant: isRecording ? "danger" : "primary", children: isRecording ? 'Stop Recording' : 'Record Audio (Simulated)' }), (0, jsx_runtime_1.jsxs)(Box_1.default, { children: [(0, jsx_runtime_1.jsx)(Text_1.default, { as: "label", htmlFor: "audio-upload", variant: "label", mr: "s", children: "Or Upload Audio:" }), (0, jsx_runtime_1.jsx)("input", { id: "audio-upload", type: "file", accept: "audio/*", onChange: handleFileUpload, style: { display: 'block', marginTop: '4px' } })] })] }), isLoadingAudio && ((0, jsx_runtime_1.jsx)(Box_1.default, { display: "flex", alignItems: "center", justifyContent: "center", my: "m", children: (0, jsx_runtime_1.jsx)(Text_1.default, { children: "Loading audio data..." }) })), transcription && ((0, jsx_runtime_1.jsxs)(Box_1.default, { mb: "s", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "label", children: "Transcription:" }), (0, jsx_runtime_1.jsx)(Box_1.default, { p: "s", borderWidth: "1px", borderRadius: "md", maxHeight: "150px", overflowY: "auto", bg: "gray.50", children: (0, jsx_runtime_1.jsx)(Text_1.default, { whiteSpace: "pre-wrap", children: transcription }) })] })), keyPoints && ((0, jsx_runtime_1.jsxs)(Box_1.default, { children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "label", children: "Key Points:" }), (0, jsx_runtime_1.jsx)(Box_1.default, { p: "s", borderWidth: "1px", borderRadius: "md", maxHeight: "150px", overflowY: "auto", bg: "gray.50", children: (0, jsx_runtime_1.jsx)(Text_1.default, { whiteSpace: "pre-wrap", children: keyPoints }) })] }))] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Box_1.default, {}), renderNextButton()] })] }));
            case 1:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(CreateMeetingAssistVirtualMeet_1.default, { isZoomAvailable: isZoomAvailable, isGoogleMeetAvailable: isGoogleMeetAvailable, zoomMeet: zoomMeet, googleMeet: googleMeet, enableConference: enableConference, setParentZoomMeet: setZoomMeet, setParentGoogleMeet: setGoogleMeet, setParentEnableConference: setEnableConference, setParentConferenceApp: setConferenceApp }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", style: { width: '100%' }, children: [renderPrevButton(), renderNextButton()] })] }));
            case 2:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(CreateMeetingAssistBaseStep3_1.default, { sendUpdates: sendUpdates, guestsCanInviteOthers: guestsCanInviteOthers, transparency: transparency, visibility: visibility, hostName: hostName, setParentSendUpdates: setSendUpdates, setParentGuestsCanInviteOthers: setGuestsCanInviteOthers, setParentTransparency: setTransparency, setParentVisibility: setVisibility, setParentHostName: setHostName }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", style: { width: '100%' }, children: [renderPrevButton(), renderNextButton()] })] }));
            case 3:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(CreateMeetingAssistAlarms_1.default, { useDefaultAlarms: useDefaultAlarms, alarms: alarms, setParentAlarms: setAlarms, setParentUseDefaultAlarms: setUseDefaultAlarms }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", style: { width: '100%' }, children: [renderPrevButton(), renderNextButton()] })] }));
            case 4:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(CreateMeetingAssistBaseStep5_1.default, { cancelIfAnyRefuse: cancelIfAnyRefuse, enableAttendeePreferences: enableAttendeePreferences, attendeeCanModify: attendeeCanModify, expireDate: expireDate, duration: duration, setParentCancelIfAnyRefuse: setCancelIfAnyRefuse, setParentEnableAttendeePreferences: setEnableAttendeePreferences, setParentAttendeeCanModify: setAttendeeCanModify, setParentExpireDate: setExpireDate, setParentDuration: setDuration }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", style: { width: '100%' }, children: [renderPrevButton(), renderNextButton()] })] }));
            case 5:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(CreateMeetingAssistBaseStep6_1.default, { isBufferTime: isBufferTime, beforeEventMinutes: beforeEventMinutes, afterEventMinutes: afterEventMinutes, setParentIsBufferTime: setIsBufferTime, setParentBeforeEventMinutes: setBeforeEventMinutes, setParentAfterEventMinutes: setAfterEventMinutes }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", style: { width: '100%' }, children: [renderPrevButton(), renderNextButton()] })] }));
            case 6:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(CreateMeetingAssistBaseStep7_1.default, { anyoneCanAddSelf: anyoneCanAddSelf, guestsCanSeeOtherGuests: guestsCanSeeOtherGuests, minThresholdCount: minThresholdCount, guaranteeAvailability: guaranteeAvailability, isRecurring: isRecurring, lockAfter: lockAfter, setParentAnyoneCanAddSelf: setAnyoneCanAddSelf, setParentGuestsCanSeeOtherGuests: setGuestsCanSeeOtherGuests, setParentMinThresholdCount: setMinThresholdCount, setParentGuaranteeAvailability: setGuaranteeAvailability, setParentIsRecurring: setIsRecurring, setParentLockAfter: setLockAfter }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", style: { width: '100%' }, children: [renderPrevButton(), renderNextButton()] })] }));
            case 7:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(CreateMeetingAssistRecurStepAlt_1.default, { frequency: frequency, interval: interval, until: until, setParentFrequency: setFrequency, setParentInterval: setInterval, setParentUntil: setUntil }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", style: { width: '100%' }, children: [renderPrevButton(), renderNextButton()] })] }));
            case 8:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(CreateMeetingAssistInvitees_1.default, { invitees: invitees, userId: userId, client: client, hostName: hostName, meetingId: meetingId, setParentInvitees: setInvitees }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", style: { width: '100%' }, children: [renderPrevButton(), renderNextButton()] })] }));
            case 9:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '100%' }, p: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "center", minHeight: "65vh", maxHeight: "65vh", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 'm', tablet: 'l' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subheaderNormal", children: "Create Meeting Assist" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 'l' }, children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: createMeetingAssist, children: "Create" }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", style: { width: '100%' }, children: [renderPrevButton(), renderNextButton(), (0, jsx_runtime_1.jsx)(Box_1.default, {})] })] }));
            default:
                return ((0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(RegularCard_1.default, { children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "header", children: "Oops... something went wrong" }) }) }));
        }
    };
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", height: "100%", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsx)(Wizard_1.default, { items: [
                    {
                        index: 0,
                        label: 'Set Base',
                    },
                    {
                        index: 1,
                        label: 'Select Virtual Meet',
                    },
                    {
                        index: 2,
                        label: 'Continue Base',
                    },
                    {
                        index: 3,
                        label: 'Set Alarms',
                    },
                    {
                        index: 4,
                        label: 'Continue Base',
                    },
                    {
                        index: 5,
                        label: 'Continue Base',
                    },
                    {
                        index: 6,
                        label: 'Continue Base',
                    },
                    {
                        index: 7,
                        label: 'Create Recurrence',
                    },
                    {
                        index: 8,
                        label: 'Add Invitees',
                    },
                    {
                        index: 9,
                        label: 'Create Event',
                    },
                ], completed: completedStep, activeIndex: activeIndex }), renderCurrentStep()] }));
}
exports.default = UserCreateMeetingAssist;
//# sourceMappingURL=data:application/json;base64,