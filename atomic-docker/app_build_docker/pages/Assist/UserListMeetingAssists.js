"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
/* eslint-disable react/no-unknown-property */
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const client_1 = require("@apollo/client");
const date_utils_1 = require("@lib/date-utils");
const Box_1 = __importDefault(require("@components/common/Box"));
const Button_1 = __importDefault(require("@components/Button"));
const router_1 = require("next/router");
const Text_1 = __importDefault(require("@components/common/Text"));
const RegularCard_1 = __importDefault(require("@components/RegularCard"));
const listMeetingAssists_1 = __importDefault(require("@lib/apollo/gql/listMeetingAssists"));
const theme_1 = require("@lib/theme/theme");
const react_native_1 = require("react-native");
const UserMeetingAssistHelper_1 = require("@lib/Assist/UserMeetingAssistHelper");
const themed_1 = require("@rneui/themed");
// IoMdTrash
const io_1 = require("react-icons/io");
const user_context_1 = require("@lib/user-context");
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
const getFrequencyVocab = (value) => {
    switch (value) {
        case 'daily':
            return 'days';
        case 'weekly':
            return 'weeks';
        case 'monthly':
            return 'months';
        case 'yearly':
            return 'years';
    }
};
function MeetingAssistItem(props) {
    const [isDelete, setIsDelete] = (0, react_1.useState)(false);
    const router = (0, router_1.useRouter)();
    const toast = (0, react_2.useToast)();
    const deleteItem = async () => {
        try {
            await (0, UserMeetingAssistHelper_1.deleteMeetingAssistGivenId)(props?.client, props?.item?.id);
            await props?.refetch();
        }
        catch (e) {
            console.log(e, ' unable to delete item');
            toast({
                status: 'error',
                title: 'Error',
                description: 'Something went wrong with deletion',
                duration: 9000,
                isClosable: true,
            });
        }
    };
    const navigateToEditMeetingAssist = () => {
        router.push({ pathname: '/Assist/UserEditMeetingAssist', query: { meetingId: props?.item?.id } });
    };
    const enableDeletion = async () => {
        try {
            await deleteItem();
        }
        catch (e) {
            console.log(e, ' unable to delete');
        }
        setIsDelete(false);
    };
    const disableDeletion = () => setIsDelete(false);
    const showDeletion = () => setIsDelete(true);
    return ((0, jsx_runtime_1.jsxs)(RegularCard_1.default, { children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsx)(Text_1.default, { pt: { phone: 'm', tablet: 's' }, variant: "cardTitle", style: { color: theme_1.palette.darkGray }, children: props?.item?.summary }), (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, style: { width: '60%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "cardCaption", style: { color: theme_1.palette.darkGray }, children: props?.item?.notes }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, style: { width: '60%' }, children: (0, jsx_runtime_1.jsxs)(Text_1.default, { variant: "cardCaption", children: ["Time Window Start: ", (0, date_utils_1.dayjs)(props?.item?.windowStartDate).format('MM/DD/YYYY h:mm A')] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, style: { width: '60%' }, children: (0, jsx_runtime_1.jsxs)(Text_1.default, { variant: "cardCaption", children: ["Time Window End: ", (0, date_utils_1.dayjs)(props?.item?.windowEndDate).format('MM/DD/YYYY h:mm A')] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, style: { width: '60%' }, children: (0, jsx_runtime_1.jsxs)(Text_1.default, { variant: "cardCaption", children: ["Duration: ", props?.item?.duration] }) }), props?.item?.location?.address?.streetName
                        ? ((0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, style: { width: '60%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "cardCaption", style: { color: theme_1.palette.darkGray }, children: props?.item?.location?.address?.streetName }) })) : null, props?.item?.conferenceApp === 'zoom'
                        ? ((0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, style: { width: '60%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "cardCaption", style: { color: theme_1.palette.darkGray }, children: "Conference App: Zoom" }) })) : null, props?.item?.conferenceApp === 'google'
                        ? ((0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, style: { width: '60%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "cardCaption", style: { color: theme_1.palette.darkGray }, children: "Conference App: Google" }) })) : null, (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, style: { width: '60%' }, children: (0, jsx_runtime_1.jsxs)(Text_1.default, { variant: "cardCaption", children: ["Responded: ", props?.item?.attendeeRespondedCount] }) }), props?.item?.cancelled
                        ? ((0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, style: { width: '60%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "cardCaption", children: "Cancelled" }) })) : null, props?.item?.frequency
                        ? ((0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, style: { width: '60%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "cardCaption", children: `${props?.item?.interval && props?.item?.interval > 1 ? 'Every ' + props?.item?.interval : ''} ${props?.item?.interval && props?.item?.interval > 1 ? getFrequencyVocab(props?.item?.frequency) : props?.item?.frequency?.[0]?.toUpperCase() + props?.item?.frequency?.slice(1)}` }) })) : null, props?.item?.until
                        ? ((0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, style: { width: '60%' }, children: (0, jsx_runtime_1.jsxs)(Text_1.default, { variant: "cardCaption", children: ["Until: ", (0, date_utils_1.dayjs)(props?.item?.until).format('MM/DD/YYYY h:mm A')] }) })) : null, (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, style: { width: '60%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "cardCaption", style: { color: theme_1.palette.darkGray }, children: `Visibility: ${props?.item?.visibility ?? 'default'}` }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, justifyContent: "center", alignItems: "center", width: "100%", children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: navigateToEditMeetingAssist, children: "Edit" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { width: "100%", flexDirection: "row", justifyContent: "flex-end", children: (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: showDeletion, children: (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(io_1.IoMdTrash, { size: "3em", color: theme_1.palette.purplePrimary }) }) }) })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsx)(themed_1.Overlay, { overlayStyle: { backgroundColor: theme_1.palette.white, justifyContent: 'center', alignItems: 'center' }, isVisible: isDelete, onBackdropPress: disableDeletion, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", alignItems: "center", style: { width: '80%', backgroundColor: theme_1.palette.white }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Do you want to delete this meeting assist?" }) }), (0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: enableDeletion, children: "Okay" }) }), (0, jsx_runtime_1.jsx)(Button_1.default, { disabled: true, onClick: disableDeletion, children: "Cancel" })] })] }) }) })] }));
}
function UserListMeetingAssists() {
    const [searchResults, setSearchResults] = (0, react_1.useState)();
    const [search, setSearch] = (0, react_1.useState)('');
    // const sub = props?.sub
    // const client = props?.client
    const router = (0, router_1.useRouter)();
    const { sub, client } = (0, user_context_1.useAppContext)();
    const toast = (0, react_2.useToast)();
    const { loading: assistLoading, error: assistError, data: assistData, refetch } = (0, client_1.useQuery)(listMeetingAssists_1.default, {
        variables: {
            userId: sub,
        }
    });
    const updateSearch = (text) => setSearch(text);
    const onClearSearch = () => setSearch('');
    const onCancelSearch = () => {
        setSearch('');
        setSearchResults([]);
    };
    console.log(searchResults && searchResults?.length > 0, ' searchResults?.length > 0');
    const onSubmitSearch = async () => {
        try {
            // validate
            if (!search) {
                return;
            }
            console.log(search, ' text search');
            const newResults = await (0, UserMeetingAssistHelper_1.searchMeetingAssists)(client, sub, search);
            // searchMeetingAssists
            console.log(newResults, ' newResults inside onSubmitSearch');
            if (newResults && newResults?.length > 0) {
                setSearchResults(newResults);
            }
        }
        catch (e) {
            console.log(e, ' onsubmit search');
        }
    };
    //<ActivityIndicator size="large" color="#00ff00" />
    if (assistLoading) {
        return ((0, jsx_runtime_1.jsx)(Box_1.default, { backgroundColor: "primaryCardBackground", flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, minHeight: "80vh", children: (0, jsx_runtime_1.jsx)(react_native_1.ActivityIndicator, { size: "large", color: theme_1.palette.white }) }));
    }
    if (assistError) {
        toast({
            status: 'error',
            title: 'Error',
            description: assistError.message,
            duration: 9000,
            isClosable: true,
        });
    }
    const renderItem = ({ item, index }) => ((0, jsx_runtime_1.jsx)(MeetingAssistItem, { item: item, refetch: refetch, client: client }));
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsxs)("form", { children: [(0, jsx_runtime_1.jsx)("label", { htmlFor: "default-search", className: "mb-2 text-sm font-medium text-gray-900 sr-only dark:text-white", children: "Search" }), (0, jsx_runtime_1.jsxs)("div", { className: "relative", children: [(0, jsx_runtime_1.jsx)("div", { className: "absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none", children: (0, jsx_runtime_1.jsx)("svg", { "aria-hidden": "true", className: "w-5 h-5 text-gray-500 dark:text-gray-400", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg", children: (0, jsx_runtime_1.jsx)("path", { "stroke-linecap": "round", "stroke-linejoin": "round", "stroke-width": "2", d: "M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" }) }) }), (0, jsx_runtime_1.jsx)("input", { value: search, onChange: (e) => updateSearch(e?.target?.value), type: "search", id: "default-search", className: "block w-full p-4 pl-10 text-sm text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-purple-500 focus:border-purple-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-purple-500 dark:focus:border-purple-500", placeholder: "Type Name Here And Enter...", required: true }), (0, jsx_runtime_1.jsx)("button", { onClick: onSubmitSearch, className: "text-white absolute right-2.5 bottom-2.5 bg-purple-700 hover:bg-purple-800 focus:ring-4 focus:outline-none focus:ring-purple-300 font-medium rounded-lg text-sm px-4 py-2 dark:bg-purple-600 dark:hover:bg-purple-700 dark:focus:ring-purple-800", children: "Search" })] })] }) }), searchResults && searchResults?.length > 0
                ? ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(react_native_1.FlatList, { data: searchResults, keyExtractor: item => item.id, renderItem: renderItem }) }))
                : ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(react_native_1.FlatList, { data: assistData?.Meeting_Assist, keyExtractor: item => item.id, renderItem: renderItem }) }))] }));
}
exports.default = UserListMeetingAssists;
//# sourceMappingURL=data:application/json;base64,