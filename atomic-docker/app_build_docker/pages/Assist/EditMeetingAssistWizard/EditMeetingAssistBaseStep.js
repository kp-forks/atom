"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const date_utils_1 = require("@lib/date-utils");
// import DateTimePicker from 'react-datetime-picker/dist/entry.nostyle'
const Switch_1 = __importDefault(require("@components/Switch"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const TextField_1 = __importDefault(require("@components/TextField"));
const react_native_1 = require("react-native");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function EditMeetingAssistBaseStep(props) {
    const [notes, setNotes] = (0, react_1.useState)(props?.notes);
    const [summary, setSummary] = (0, react_1.useState)(props?.summary);
    const [windowStartDate, setWindowStartDate] = (0, react_1.useState)(props?.windowStartDate);
    const [windowEndDate, setWindowEndDate] = (0, react_1.useState)(props?.windowEndDate);
    const [location, setLocation] = (0, react_1.useState)(props?.location);
    const [isStartDatePickerVisible, setIsStartDatePickerVisible] = (0, react_1.useState)(false);
    const [isEndDatePickerVisible, setIsEndDatePickerVisible] = (0, react_1.useState)(false);
    const [cancel, setCancel] = (0, react_1.useState)(props?.cancel);
    const [pageOffset, setPageOffset] = (0, react_1.useState)(0);
    const { height: fullHeight } = react_native_1.Dimensions.get('window');
    (0, react_1.useEffect)(() => {
        if (windowStartDate !== props?.windowStartDate) {
            setWindowStartDate(props?.windowStartDate);
        }
    }, [props?.windowStartDate, windowStartDate]);
    (0, react_1.useEffect)(() => {
        if (windowEndDate !== props?.windowEndDate) {
            setWindowEndDate(props?.windowEndDate);
        }
    }, [props?.windowEndDate, windowEndDate]);
    const setParentNotes = props?.setParentNotes;
    const setParentSummary = props?.setParentSummary;
    const setParentWindowStartDate = props?.setParentWindowStartDate;
    const setParentWindowEndDate = props?.setParentWindowEndDate;
    const setParentLocation = props?.setParentLocation;
    const setParentCancel = props?.setParentCancel;
    const changeNotes = (value) => {
        setNotes(value);
        setParentNotes(value);
    };
    const changeSummary = (value) => {
        setSummary(value);
        setParentSummary(value);
    };
    const changeWindowStartDate = (value) => {
        setWindowStartDate(value);
        setParentWindowStartDate(value);
    };
    const changeWindowEndDate = (value) => {
        setWindowEndDate(value);
        setParentWindowEndDate(value);
    };
    const changeLocation = (value) => {
        setLocation(value);
        setParentLocation(value);
    };
    const showStartDatePicker = () => {
        setIsStartDatePickerVisible(true);
    };
    const hideStartDatePicker = () => {
        setIsStartDatePickerVisible(false);
    };
    const showEndDatePicker = () => {
        setIsEndDatePickerVisible(true);
    };
    const hideEndDatePicker = () => {
        setIsEndDatePickerVisible(false);
    };
    const changeCancel = (value) => {
        setCancel(value);
        setParentCancel(value);
    };
    return ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, style: { width: '100%' }, children: (0, jsx_runtime_1.jsxs)(react_native_1.ScrollView, { style: { flex: 1, width: '100%' }, contentContainerStyle: { alignItems: 'center' }, children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, p: { phone: 's', tablet: 'm' }, style: { width: '80%' }, children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Start" }), (0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Select Date and Time", size: "md", type: "datetime-local", onChange: (e) => {
                                const durationMinutes = date_utils_1.dayjs.duration((0, date_utils_1.dayjs)(windowEndDate).diff((0, date_utils_1.dayjs)(windowStartDate))).asMinutes();
                                const newEndDate = (0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").add(durationMinutes, 'minutes').toDate();
                                changeWindowStartDate((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").toDate());
                                changeWindowEndDate(newEndDate);
                            }, value: (0, date_utils_1.dayjs)(windowStartDate).format("YYYY-MM-DDTHH:mm") })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, p: { phone: 's', tablet: 'm' }, style: { width: '80%' }, children: [(0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: showEndDatePicker, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "End" }) }), (0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Select Date and Time", size: "md", type: "datetime-local", onChange: (e) => {
                                changeWindowEndDate((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").toDate());
                            }, value: (0, date_utils_1.dayjs)(windowEndDate).format("YYYY-MM-DDTHH:mm") })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", pt: { phone: 'm', tablet: 's' }, style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", pt: { phone: 'm', tablet: 's' }, children: "Do you want to cancel this meeting assist?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: cancel, onValueChange: changeCancel, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, p: { phone: 's', tablet: 'm' }, flexDirection: "row", justifyContent: "flex-start", alignItems: "center", style: { width: '80%' }, children: (0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Title", placeholder: "title", multiline: true, numberOfLines: 4, onChange: (e) => changeSummary(e?.target?.value), value: summary || props?.summary, style: { width: '100%' } }) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, p: { phone: 's', tablet: 'm' }, flexDirection: "row", justifyContent: "flex-start", alignItems: "center", style: { width: '80%' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { placeholder: "notes", onChange: (e) => changeNotes(e?.target?.value), value: notes || props?.notes, style: { width: '100%' }, multiline: true, numberOfLines: 4 }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, p: { phone: 's', tablet: 'm' }, flexDirection: "row", justifyContent: "flex-start", alignItems: "center", style: { width: '80%' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Location", placeholder: "location if any", onChange: (e) => changeLocation(e?.target?.value), value: location || props?.location, style: { width: '100%' } }) })] }) }));
}
exports.default = EditMeetingAssistBaseStep;
//# sourceMappingURL=data:application/json;base64,