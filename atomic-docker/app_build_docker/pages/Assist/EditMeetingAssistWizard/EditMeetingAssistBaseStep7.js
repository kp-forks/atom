"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const colorsPalette_1 = require("@lib/theme/colorsPalette");
const react_2 = require("@chakra-ui/react");
const Switch_1 = __importDefault(require("@components/Switch"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const TextField_1 = __importDefault(require("@components/TextField"));
const react_native_1 = require("react-native");
const styles = {
    minThresholdCount: {
        fontSize: '21px',
        lineHeight: '28px',
    },
    container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        width: '100%',
    },
};
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function EditMeetingAssistBaseStep7(props) {
    const [anyoneCanAddSelf, setAnyoneCanAddSelf] = (0, react_1.useState)(props?.anyoneCanAddSelf);
    const [guestsCanSeeOtherGuests, setGuestsCanSeeOtherGuests] = (0, react_1.useState)(props?.guestsCanSeeOtherGuests);
    const [minThresholdCount, setMinThresholdCount] = (0, react_1.useState)(props?.minThresholdCount);
    const [guaranteeAvailability, setGuaranteeAvailability] = (0, react_1.useState)(props?.guaranteeAvailability);
    const [isRecurring, setIsRecurring] = (0, react_1.useState)(props?.isRecurring);
    const [lockAfter, setLockAfter] = (0, react_1.useState)(props?.lockAfter);
    const [isMessage, setIsMessage] = (0, react_1.useState)(false);
    const { height: fullHeight } = react_native_1.Dimensions.get('window');
    const setParentAnyoneCanAddSelf = props?.setParentAnyoneCanAddSelf;
    const setParentGuestsCanSeeOtherGuests = props?.setParentGuestsCanSeeOtherGuests;
    const setParentMinThresholdCount = props?.setParentMinThresholdCount;
    const setParentGuaranteeAvailability = props?.setParentGuaranteeAvailability;
    const setParentIsRecurring = props?.setParentIsRecurring;
    const setParentLockAfter = props?.setParentLockAfter;
    const changeAnyoneCanAddSelf = (value) => {
        setAnyoneCanAddSelf(value);
        setParentAnyoneCanAddSelf(value);
    };
    const changeGuestsCanSeeOtherGuests = (value) => {
        setGuestsCanSeeOtherGuests(value);
        setParentGuestsCanSeeOtherGuests(value);
    };
    const changeMinThresholdCount = (e) => {
        setMinThresholdCount(parseInt(e?.target?.value.replace(/[^0-9.]/g, ''), 10));
        setParentMinThresholdCount(parseInt(e?.target?.value.replace(/[^0-9.]/g, ''), 10));
    };
    const changeGuaranteeAvailability = (value) => {
        setGuaranteeAvailability(value);
        setParentGuaranteeAvailability(value);
    };
    const changeIsRecurring = (value) => {
        setIsRecurring(value);
        setParentIsRecurring(value);
    };
    const changeLockAfter = (value) => {
        setLockAfter(value);
        setParentLockAfter(value);
    };
    return ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(react_native_1.ScrollView, { style: { flex: 1, width: '100%' }, contentContainerStyle: { alignItems: 'center' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, style: { width: '90%' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", pt: { phone: 'm', tablet: 's' }, style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Can non-invited guests add themselves?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { onColor: colorsPalette_1.colorsPalette.purple30, offColor: colorsPalette_1.colorsPalette.purple60, checked: anyoneCanAddSelf, onValueChange: changeAnyoneCanAddSelf, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, style: { width: '90%' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", pt: { phone: 'm', tablet: 's' }, style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Can guests see other guests?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { onColor: colorsPalette_1.colorsPalette.purple30, offColor: colorsPalette_1.colorsPalette.purple60, checked: guestsCanSeeOtherGuests, onValueChange: changeGuestsCanSeeOtherGuests, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, justifyContent: "center", alignItems: "center", style: { width: '90%' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", pt: { phone: 'm', tablet: 's' }, style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", pt: { phone: 'm', tablet: 's' }, children: "How many minimum number of attendees (including host) needed before creating a new event?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Minimum threshold count", type: "number", onChange: changeMinThresholdCount, value: `${minThresholdCount}`, placeholder: "1", style: styles.minThresholdCount }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, style: { width: '90%' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", pt: { phone: 'm', tablet: 's' }, style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(react_2.Tooltip, { label: 'Users will able to select custom timeslots that can overlap with already registered events', bg: 'purple.700', color: 'white', "aria-label": 'A tooltip', children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", pt: { phone: 'm', tablet: 's' }, children: "Do you like to guarantee availability of any time slot regardless of being busy or not?" }) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { onColor: colorsPalette_1.colorsPalette.purple30, offColor: colorsPalette_1.colorsPalette.purple60, checked: guaranteeAvailability, onValueChange: changeGuaranteeAvailability, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, style: { width: '90%' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", pt: { phone: 'm', tablet: 's' }, style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", pt: { phone: 'm', tablet: 's' }, children: "Do you want this meeting to be recurring?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { onColor: colorsPalette_1.colorsPalette.purple30, offColor: colorsPalette_1.colorsPalette.purple60, checked: isRecurring, onValueChange: changeIsRecurring, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, style: { width: '90%' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(react_2.Tooltip, { label: 'Every time the AI planner runs, it will look for a more optimal time given the schedule context. By enabling lock after, the AI planner will no longer be able to move the meeting after the first cycle.', bg: 'purple.700', color: 'white', "aria-label": 'A tooltip', children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", pt: { phone: 'm', tablet: 's' }, children: "Do you want to lock after or make it not modifiable for AI planner after meeting is formed?" }) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { onColor: colorsPalette_1.colorsPalette.purple30, offColor: colorsPalette_1.colorsPalette.purple60, checked: lockAfter, onValueChange: changeLockAfter, style: { marginBottom: 20 } }) })] })] }) }) }));
}
exports.default = EditMeetingAssistBaseStep7;
//# sourceMappingURL=data:application/json;base64,