"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Switch_1 = __importDefault(require("@components/Switch"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const TextField_1 = __importDefault(require("@components/TextField"));
const react_native_1 = require("react-native");
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function EditMeetingAssistBaseStep6(props) {
    const [isBufferTime, setIsBufferTime] = (0, react_1.useState)(props?.isBufferTime);
    const [beforeEventMinutes, setBeforeEventMinutes] = (0, react_1.useState)(props?.beforeEventMinutes);
    const [afterEventMinutes, setAfterEventMinutes] = (0, react_1.useState)(props?.afterEventMinutes);
    const [pageOffset, setPageOffset] = (0, react_1.useState)(0);
    const { height: fullHeight } = react_native_1.Dimensions.get('window');
    const setParentIsBufferTime = props?.setParentIsBufferTime;
    const setParentBeforeEventMinutes = props?.setParentBeforeEventMinutes;
    const setParentAfterEventMinutes = props?.setParentAfterEventMinutes;
    const changeIsBufferTime = (value) => {
        setIsBufferTime(value);
        setParentIsBufferTime(value);
    };
    const changeBeforeEventMinutes = (e) => {
        setBeforeEventMinutes(parseInt(e?.target?.value.replace(/[^0-9.]/g, ''), 10));
        setParentBeforeEventMinutes(parseInt(e?.target?.value.replace(/[^0-9.]/g, ''), 10));
    };
    const changeAfterEventMinutes = (e) => {
        setAfterEventMinutes(parseInt(e?.target?.value.replace(/[^0-9.]/g, ''), 10));
        setParentAfterEventMinutes(parseInt(e?.target?.value.replace(/[^0-9.]/g, ''), 10));
    };
    return ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, style: { width: '100%' }, children: (0, jsx_runtime_1.jsxs)(react_native_1.ScrollView, { style: { flex: 1, width: '100%' }, contentContainerStyle: { alignItems: 'center' }, children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { p: { phone: 's', tablet: 'm' }, style: { width: '90%' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", pt: { phone: 'm', tablet: 's' }, style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", pt: { phone: 'm', tablet: 's' }, children: "Do you want to add Buffer time to your event?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: isBufferTime, onValueChange: changeIsBufferTime, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: isBufferTime
                        ? ((0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", style: { width: '90%' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Prep time before event:" }), (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "greyComment", children: "30 min steps only" })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { children: [(0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 'm', tablet: 'm' } }), (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Minutes", value: `${beforeEventMinutes}`, onChange: changeBeforeEventMinutes, type: "number", style: { width: '15%' } })] })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Review time after event:" }), (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "greyComment", children: "30 min steps only" })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { children: [(0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 'm', tablet: 'm' } }), (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Minutes", value: `${afterEventMinutes}`, onChange: changeAfterEventMinutes, type: "number", style: { width: '15%' } })] })] }) })] }) })) : null })] }) }));
}
exports.default = EditMeetingAssistBaseStep6;
//# sourceMappingURL=data:application/json;base64,