"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const colorsPalette_1 = require("@lib/theme/colorsPalette");
const react_2 = require("@chakra-ui/react");
const Switch_1 = __importDefault(require("@components/Switch"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const TextField_1 = __importDefault(require("@components/TextField"));
const lodash_1 = __importDefault(require("lodash"));
const sendUpdatesOptions = [
    { label: 'All', value: 'all' },
    { label: 'External Only', value: 'externalOnly' }
];
const transparencyOptions = [
    { label: 'Opaque', value: 'opaque' },
    { label: 'Transparent', value: 'transparent' }
];
const visibilityOptions = [
    { label: 'Default', value: 'default' },
    { label: 'Public', value: 'public' },
    { label: 'Private', value: 'private' }
];
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function EditMeetingAssistBaseStep3(props) {
    const [sendUpdates, setSendUpates] = (0, react_1.useState)(props?.sendUpdates);
    const [guestsCanInviteOthers, setGuestsCanInviteOthers] = (0, react_1.useState)(props?.guestsCanInviteOthers);
    const [transparency, setTransparency] = (0, react_1.useState)(props?.transparency);
    const [visibility, setVisibility] = (0, react_1.useState)(props?.visibility);
    const [isMessage, setIsMessage] = (0, react_1.useState)(false);
    const [hostName, setHostName] = (0, react_1.useState)(props?.hostName);
    (0, react_1.useEffect)(() => {
        if (hostName !== props?.hostName) {
            setHostName(props?.hostName);
        }
    }, [hostName, props?.hostName]);
    const setParentSendUpdates = props?.setParentSendUpdates;
    const setParentGuestsCanInviteOthers = props?.setParentGuestsCanInviteOthers;
    const setParentTransparency = props?.setParentTransparency;
    const setParentVisibility = props?.setParentVisibility;
    const setParentHostName = props?.setParentHostName;
    const changeSendUpdates = (value) => {
        setSendUpates(value);
        setParentSendUpdates(value);
    };
    const changeGuestsCanInviteOthers = (value) => {
        setGuestsCanInviteOthers(value);
        setParentGuestsCanInviteOthers(value);
    };
    const changeTransparency = (value) => {
        setTransparency(value);
        setParentTransparency(value);
    };
    const changeVisibility = (value) => {
        setVisibility(value);
        setParentVisibility(value);
    };
    const changeHostName = (e) => {
        setHostName(e?.target?.value);
        setParentHostName(e?.target?.value);
    };
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, pt: { phone: 'l', tablet: 'xl' }, flexDirection: "row", justifyContent: "flex-start", alignItems: "center", style: { width: '80%' }, children: (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '60%' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Host Name", placeholder: "John Doe", onChange: changeHostName, value: hostName, style: { width: '100%' } }) }) }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, pt: { phone: 'm', tablet: 's' }, justifyContent: "center", alignItems: "flex-start", style: { width: '80%' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(react_2.Tooltip, { label: 'Google calendar option on who to notify - Google users vs non-Google users', "aria-label": 'A tooltip', children: (0, jsx_runtime_1.jsxs)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", children: "Select who should receive updates" }), (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", children: "for event changes?" })] }) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", alignItems: "center", style: { width: '90%' }, children: (0, jsx_runtime_1.jsxs)("select", { value: sendUpdates, onChange: (e) => changeSendUpdates(e?.target?.value), className: "select select-primary w-full max-w-xs", children: [(0, jsx_runtime_1.jsx)("option", { disabled: true, selected: true, children: "Send updates to..." }), lodash_1.default.map(sendUpdatesOptions, option => ((0, jsx_runtime_1.jsx)("option", { value: option.value, children: option.label }, option.value)))] }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, p: { phone: 's', tablet: 'm' }, style: { width: '80%' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", pt: { phone: 'm', tablet: 's' }, style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Can Guests invite others?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { onColor: colorsPalette_1.colorsPalette.purple30, offColor: colorsPalette_1.colorsPalette.purple60, checked: guestsCanInviteOthers, onValueChange: changeGuestsCanInviteOthers, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, p: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "center", style: { width: '80%' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(react_2.Tooltip, { label: 'Should it block time on your calendar', "aria-label": 'A tooltip', children: (0, jsx_runtime_1.jsx)(Text_1.default, { p: { phone: 's', tablet: 'm' }, variant: "buttonLink", children: "Will the event be transparent?" }) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsxs)("select", { value: transparency, onChange: (e) => changeTransparency(e?.target?.value), className: "select select-primary w-full max-w-xs", children: [(0, jsx_runtime_1.jsx)("option", { disabled: true, selected: true, children: "transparency" }), lodash_1.default.map(transparencyOptions, option => ((0, jsx_runtime_1.jsx)("option", { value: option.value, children: option.label }, option.value)))] }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, p: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "center", style: { width: '80%' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(react_2.Tooltip, { label: 'Who can see the details of the event - anyone or just attendees', "aria-label": 'A tooltip', bg: 'purple.700', color: 'white', children: (0, jsx_runtime_1.jsx)(Text_1.default, { p: { phone: 's', tablet: 'm' }, variant: "buttonLink", children: "Who can see this event?" }) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsxs)("select", { value: visibility, onChange: (e) => changeVisibility(e?.target?.value), className: "select select-primary w-full max-w-xs", children: [(0, jsx_runtime_1.jsx)("option", { disabled: true, selected: true, children: "visibility...." }), lodash_1.default.map(visibilityOptions, option => ((0, jsx_runtime_1.jsx)("option", { value: option.value, children: option.label }, option.value)))] }) })] })] }));
}
exports.default = EditMeetingAssistBaseStep3;
//# sourceMappingURL=data:application/json;base64,