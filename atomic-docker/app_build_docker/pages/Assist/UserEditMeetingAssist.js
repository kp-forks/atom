"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Wizard_1 = __importDefault(require("@components/Wizard"));
const react_2 = require("@chakra-ui/react");
const date_utils_1 = require("@lib/date-utils");
const Box_1 = __importDefault(require("@components/common/Box"));
const Button_1 = __importDefault(require("@components/Button"));
const Text_1 = __importDefault(require("@components/common/Text"));
const RegularCard_1 = __importDefault(require("@components/RegularCard"));
const UserMeetingAssistHelper_1 = require("@lib/Assist/UserMeetingAssistHelper");
const getGlobalPrimaryCalendar_1 = __importDefault(require("@lib/apollo/gql/getGlobalPrimaryCalendar"));
const zoomMeetingHelper_1 = require("@lib/zoom/zoomMeetingHelper");
const EditMeetingAssistBaseStep_1 = __importDefault(require("@pages/Assist/EditMeetingAssistWizard/EditMeetingAssistBaseStep"));
const EditMeetingAssistVirtualMeet_1 = __importDefault(require("@pages/Assist/EditMeetingAssistWizard/EditMeetingAssistVirtualMeet"));
const EditMeetingAssistBaseStep3_1 = __importDefault(require("@pages/Assist/EditMeetingAssistWizard/EditMeetingAssistBaseStep3"));
const EditMeetingAssistAlarms_1 = __importDefault(require("./EditMeetingAssistWizard/EditMeetingAssistAlarms"));
const EditMeetingAssistBaseStep5_1 = __importDefault(require("./EditMeetingAssistWizard/EditMeetingAssistBaseStep5"));
const EditMeetingAssistBaseStep6_1 = __importDefault(require("./EditMeetingAssistWizard/EditMeetingAssistBaseStep6"));
const EditMeetingAssistBaseStep7_1 = __importDefault(require("./EditMeetingAssistWizard/EditMeetingAssistBaseStep7"));
const EditMeetingAssistInvitees_1 = __importDefault(require("./EditMeetingAssistWizard/EditMeetingAssistInvitees"));
const EditMeetingAssistRecurStepAlt_1 = __importDefault(require("./EditMeetingAssistWizard/EditMeetingAssistRecurStepAlt"));
const googleCalendarHelper_1 = require("@lib/calendarLib/googleCalendarHelper");
const router_1 = require("next/router");
const user_context_1 = require("@lib/user-context");
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function UserEditMeetingAssist() {
    const [notes, setNotes] = (0, react_1.useState)('');
    const [summary, setSummary] = (0, react_1.useState)('');
    const [windowStartDate, setWindowStartDate] = (0, react_1.useState)(new Date());
    const [windowEndDate, setWindowEndDate] = (0, react_1.useState)(new Date());
    const [location, setLocation] = (0, react_1.useState)('');
    const [isZoomAvailable, setIsZoomAvailable] = (0, react_1.useState)(false);
    const [isGoogleMeetAvailable, setIsGoogleMeetAvailable] = (0, react_1.useState)(false);
    const [zoomMeet, setZoomMeet] = (0, react_1.useState)(false);
    const [googleMeet, setGoogleMeet] = (0, react_1.useState)(false);
    const [sendUpdates, setSendUpdates] = (0, react_1.useState)('all');
    const [guestsCanInviteOthers, setGuestsCanInviteOthers] = (0, react_1.useState)(true);
    const [transparency, setTransparency] = (0, react_1.useState)('opaque');
    const [visibility, setVisibility] = (0, react_1.useState)('default');
    const [useDefaultAlarms, setUseDefaultAlarms] = (0, react_1.useState)(true);
    const [alarms, setAlarms] = (0, react_1.useState)([]);
    const [cancelIfAnyRefuse, setCancelIfAnyRefuse] = (0, react_1.useState)(false);
    const [enableAttendeePreferences, setEnableAttendeePreferences] = (0, react_1.useState)(true);
    const [attendeeCanModify, setAttendeeCanModify] = (0, react_1.useState)(false);
    const [expireDate, setExpireDate] = (0, react_1.useState)(new Date());
    const [duration, setDuration] = (0, react_1.useState)(30);
    const [enableConference, setEnableConference] = (0, react_1.useState)(false);
    const [conferenceApp, setConferenceApp] = (0, react_1.useState)('google');
    const [isBufferTime, setIsBufferTime] = (0, react_1.useState)(false);
    const [beforeEventMinutes, setBeforeEventMinutes] = (0, react_1.useState)(0);
    const [afterEventMinutes, setAfterEventMinutes] = (0, react_1.useState)(0);
    const [anyoneCanAddSelf, setAnyoneCanAddSelf] = (0, react_1.useState)(true);
    const [guestsCanSeeOtherGuests, setGuestsCanSeeOtherGuests] = (0, react_1.useState)(true);
    const [minThresholdCount, setMinThresholdCount] = (0, react_1.useState)(2);
    const [guaranteeAvailability, setGuaranteeAvailability] = (0, react_1.useState)(false);
    const [isRecurring, setIsRecurring] = (0, react_1.useState)(false);
    const [frequency, setFrequency] = (0, react_1.useState)('weekly');
    const [interval, setInterval] = (0, react_1.useState)(1); // every 1, 2... weeks 
    const [until, setUntil] = (0, react_1.useState)(new Date());
    // const [selectedCalendarId, setSelectedCalendarId] = useState<string>()
    const [calendar, setCalendar] = (0, react_1.useState)();
    const [searchName, setSearchName] = (0, react_1.useState)('');
    const [contactResults, setContactResults] = (0, react_1.useState)();
    const [invitees, setInvitees] = (0, react_1.useState)([]);
    const [activeIndex, setActiveIndex] = (0, react_1.useState)(0);
    const [completedStep, setCompletedStep] = (0, react_1.useState)();
    const [hostName, setHostName] = (0, react_1.useState)('');
    const [user, setUser] = (0, react_1.useState)();
    const [meetingAssist, setMeetingAssist] = (0, react_1.useState)();
    const [cancel, setCancel] = (0, react_1.useState)(false);
    const [lockAfter, setLockAfter] = (0, react_1.useState)(false);
    const router = (0, router_1.useRouter)();
    const meetingId = router?.query?.meetingId;
    console.log(meetingId, ' meetingId');
    // const client = props?.client
    // const userId = props?.sub
    const { sub, client } = (0, user_context_1.useAppContext)();
    const userId = sub;
    const toast = (0, react_2.useToast)();
    // get meeting assist
    (0, react_1.useEffect)(() => {
        (async () => {
            try {
                if (!meetingId) {
                    return;
                }
                const oldMeetingAssist = await (0, UserMeetingAssistHelper_1.getMeetingAssistGivenId)(client, meetingId);
                if (!oldMeetingAssist?.id) {
                    toast({
                        status: 'error',
                        title: 'No Meeting Assist found',
                        description: 'Seems like there is no Meeting Assist found. Let us know.',
                        duration: 9000,
                        isClosable: true,
                    });
                    return;
                }
                setMeetingAssist(oldMeetingAssist);
                setNotes(oldMeetingAssist?.notes || '');
                setSummary(oldMeetingAssist?.summary || '');
                setWindowStartDate((0, date_utils_1.dayjs)(oldMeetingAssist?.windowStartDate).toDate());
                setWindowEndDate((0, date_utils_1.dayjs)(oldMeetingAssist?.windowEndDate).toDate());
                setLocation(oldMeetingAssist?.location?.title || '');
                setZoomMeet(oldMeetingAssist?.conferenceApp === 'zoom');
                setGoogleMeet(oldMeetingAssist?.conferenceApp === 'google');
                setSendUpdates(oldMeetingAssist?.sendUpdates);
                setGuestsCanInviteOthers(oldMeetingAssist?.guestsCanInviteOthers || false);
                setTransparency(oldMeetingAssist?.transparency || 'opaque');
                setVisibility(oldMeetingAssist?.visibility || 'default');
                if (oldMeetingAssist?.useDefaultAlarms !== undefined) {
                    setUseDefaultAlarms(oldMeetingAssist?.useDefaultAlarms);
                }
                if (oldMeetingAssist?.reminders && oldMeetingAssist?.reminders?.length > 0) {
                    setAlarms(oldMeetingAssist?.reminders);
                }
                if (oldMeetingAssist?.cancelIfAnyRefuse !== undefined) {
                    setCancelIfAnyRefuse(oldMeetingAssist?.cancelIfAnyRefuse);
                }
                if (oldMeetingAssist?.enableAttendeePreferences !== undefined) {
                    setEnableAttendeePreferences(oldMeetingAssist?.enableAttendeePreferences);
                }
                if (oldMeetingAssist?.attendeeCanModify !== undefined) {
                    setAttendeeCanModify(oldMeetingAssist?.attendeeCanModify);
                }
                setExpireDate((0, date_utils_1.dayjs)(oldMeetingAssist?.expireDate).toDate());
                if (oldMeetingAssist?.duration !== undefined) {
                    setDuration(oldMeetingAssist?.duration);
                }
                if (oldMeetingAssist?.enableConference !== undefined) {
                    setEnableConference(oldMeetingAssist?.enableConference);
                }
                if (oldMeetingAssist?.conferenceApp !== undefined) {
                    setConferenceApp(oldMeetingAssist?.conferenceApp);
                }
                setIsBufferTime(!!(oldMeetingAssist?.bufferTime));
                if (oldMeetingAssist?.bufferTime?.beforeEvent !== undefined) {
                    setBeforeEventMinutes(oldMeetingAssist?.bufferTime?.beforeEvent);
                }
                if (oldMeetingAssist?.bufferTime?.afterEvent !== undefined) {
                    setAfterEventMinutes(oldMeetingAssist?.bufferTime?.afterEvent);
                }
                if (oldMeetingAssist?.anyoneCanAddSelf !== undefined) {
                    setAnyoneCanAddSelf(oldMeetingAssist?.anyoneCanAddSelf);
                }
                if (oldMeetingAssist?.guestsCanSeeOtherGuests !== undefined) {
                    setGuestsCanSeeOtherGuests(oldMeetingAssist?.guestsCanSeeOtherGuests);
                }
                if (oldMeetingAssist?.minThresholdCount !== undefined) {
                    setMinThresholdCount(oldMeetingAssist?.minThresholdCount);
                }
                if (oldMeetingAssist?.guaranteeAvailability !== undefined) {
                    setGuaranteeAvailability(oldMeetingAssist?.guaranteeAvailability);
                }
                setIsRecurring(!!(oldMeetingAssist?.until));
                if (oldMeetingAssist?.frequency !== undefined) {
                    setFrequency(oldMeetingAssist?.frequency);
                }
                if (oldMeetingAssist?.interval !== undefined) {
                    setInterval(oldMeetingAssist?.interval);
                }
                setUntil((0, date_utils_1.dayjs)(oldMeetingAssist?.until).toDate());
                if (oldMeetingAssist?.lockAfter) {
                    setLockAfter(oldMeetingAssist?.lockAfter);
                }
            }
            catch (e) {
                console.log(e, ' unable to get meeting assist');
            }
        })();
    }, [client, meetingId, toast]);
    // check if zoom available
    (0, react_1.useEffect)(() => {
        (async () => {
            if (!userId || !client) {
                return;
            }
            const isAvailable = await (0, zoomMeetingHelper_1.zoomAvailable)(client, userId);
            if (isAvailable) {
                setIsZoomAvailable(true);
            }
        })();
    }, [client, userId]);
    // check if google available
    (0, react_1.useEffect)(() => {
        (async () => {
            if (!userId || !client) {
                return;
            }
            const isAvailable = await (0, googleCalendarHelper_1.googleMeetAvailable)(client, userId);
            if (isAvailable) {
                setIsGoogleMeetAvailable(isAvailable);
            }
        })();
    }, [client, userId]);
    // get global primary calendar
    (0, react_1.useEffect)(() => {
        (async () => {
            if (!userId || !client) {
                return;
            }
            const result = (await client.query({
                query: getGlobalPrimaryCalendar_1.default,
                variables: {
                    userId,
                },
            })).data?.Calendar?.[0];
            if (!result?.id) {
                console.log(' no primary calendar available');
                return;
            }
            // setSelectedCalendarId(result?.id)
            setCalendar(result);
        })();
    }, [client, userId]);
    // get user and update if necessary
    (0, react_1.useEffect)(() => {
        (async () => {
            try {
                const oldUser = await (0, UserMeetingAssistHelper_1.getUserGivenId)(client, userId);
                setUser(oldUser);
                if (oldUser?.name) {
                    setHostName(oldUser?.name);
                }
            }
            catch (e) {
                console.log(e, ' unable to get user');
            }
        })();
    }, [client, userId]);
    // list meeting assist invitees
    (0, react_1.useEffect)(() => {
        (async () => {
            try {
                const oldMeetingAssistInvites = await (0, UserMeetingAssistHelper_1.listMeetingAssistInvitesGivenMeetingId)(client, meetingId);
                if (oldMeetingAssistInvites && oldMeetingAssistInvites?.length > 0) {
                    setInvitees(oldMeetingAssistInvites);
                }
            }
            catch (e) {
                console.log(e, ' unable to list meeting assist invites');
            }
        })();
    }, [client, meetingId, userId]);
    const editMeetingAssistInvitees = async () => {
        try {
            if (invitees?.length > 0) {
                await (0, UserMeetingAssistHelper_1.upsertMeetingAssistInviteMany)(client, invitees);
            }
        }
        catch (e) {
            console.log(e, ' unable to edit meeting assist');
        }
    };
    const editMeetingAssist = async () => {
        try {
            const newMeetingAssist = {
                id: meetingId,
                userId,
                summary,
                notes,
                windowStartDate: (0, date_utils_1.dayjs)(windowStartDate).format(),
                windowEndDate: (0, date_utils_1.dayjs)(windowEndDate).format(),
                timezone: date_utils_1.dayjs.tz.guess(),
                location: { title: location || '' },
                priority: 1,
                enableConference,
                conferenceApp,
                sendUpdates,
                guestsCanInviteOthers,
                transparency,
                visibility,
                createdDate: (0, date_utils_1.dayjs)().format(),
                updatedAt: (0, date_utils_1.dayjs)().format(),
                useDefaultAlarms,
                reminders: alarms,
                cancelIfAnyRefuse,
                enableAttendeePreferences,
                attendeeCanModify,
                expireDate: (0, date_utils_1.dayjs)(expireDate).format(),
                duration,
                calendarId: calendar?.id || '',
                bufferTime: isBufferTime ? {
                    beforeEvent: beforeEventMinutes,
                    afterEvent: afterEventMinutes,
                } : undefined,
                anyoneCanAddSelf,
                guestsCanSeeOtherGuests,
                minThresholdCount,
                attendeeRespondedCount: meetingAssist?.attendeeRespondedCount || 0,
                attendeeCount: meetingAssist?.attendeeCount,
                cancelled: cancel,
                frequency,
                interval,
                until: (0, date_utils_1.dayjs)(until).format(),
                originalMeetingId: isRecurring ? meetingId : undefined,
                lockAfter,
            };
            console.log(newMeetingAssist, ' meetingAssist before update');
            await (0, UserMeetingAssistHelper_1.upsertMeetingAssistOne)(client, newMeetingAssist);
            await editMeetingAssistInvitees();
            if (cancel) {
                if (invitees?.length > 0) {
                    const cancelRecipients = (0, UserMeetingAssistHelper_1.convertInviteeTypeToCancelEmailRecipients)(invitees);
                    const filteredInviteeEmails = cancelRecipients?.filter(i => !!(i?.email));
                    if (filteredInviteeEmails?.length > 0) {
                        await (0, UserMeetingAssistHelper_1.sendBulkMeetingCancelEmail)(filteredInviteeEmails, user?.email || '', hostName || user?.name || '');
                    }
                }
            }
            if (hostName && (user?.name !== hostName)) {
                await (0, UserMeetingAssistHelper_1.updateUserNameGivenId)(client, userId, hostName);
            }
            toast({
                status: 'success',
                title: 'Meeting Assist Edited',
                description: 'Meeting Assist edited successfully',
                duration: 9000,
                isClosable: true,
            });
            router.push('/Assist/UserListMeetingAssists');
        }
        catch (e) {
            console.log(e, ' unable ot edit single meeting assist inside usereditmeetingassist');
        }
    };
    // const onActiveIndexChanged = (index: number) => setActiveIndex(index)
    const goToPrevStep = () => {
        const prevActiveIndex = activeIndex;
        const newActiveIndex = prevActiveIndex === 0 ? 0 : prevActiveIndex - 1;
        if ((activeIndex === 8) && !isRecurring) {
            return setActiveIndex(6);
        }
        setActiveIndex(newActiveIndex);
    };
    const renderPrevButton = () => {
        if (activeIndex === 0) {
            return (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' } });
        }
        return ((0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: goToPrevStep, children: "Back" }) }));
    };
    const goToNextStep = () => {
        const prevActiveIndex = activeIndex;
        const prevCompletedStep = completedStep;
        /**
         * 0 - EditMeetingAssistBaseStep
         * 1 - EditMeetingAssistVirtualMeet
         * 2 - EditMeetingAssistBaseStep3
         * 3 - EditMeetingAssistAlarms
         * 4 - EditMeetingAssistBaseStep5
         * 5 - EditMeetingAssistBaseStep6
         * 6 - EditMeetingAssistBaseStep7
         * 7 - EditMeetingAssistRecurStepAlt
         * 8 - EditMeetingAssistInvitees
         */
        if (!isRecurring) {
            let newActiveIndex = prevActiveIndex + 1;
            if (prevActiveIndex === 6) {
                newActiveIndex = 8;
            }
            // validate invitees list
            if (prevActiveIndex === 8) {
                if (invitees?.length === 0) {
                    toast({
                        status: 'info',
                        title: 'No invitees added',
                        description: 'Please add at least one invitee in order to add your meeting',
                        duration: 9000,
                        isClosable: true,
                    });
                    newActiveIndex = 8;
                }
            }
            if (prevActiveIndex === 9) {
                return;
            }
            if (!prevCompletedStep || (prevCompletedStep < prevActiveIndex)) {
                const newCompletedStep = prevActiveIndex;
                setCompletedStep(newCompletedStep);
            }
            if (newActiveIndex !== prevActiveIndex) {
                return setActiveIndex(newActiveIndex);
            }
        }
        if (prevActiveIndex === 9) {
            return;
        }
        let newActiveIndex = prevActiveIndex + 1;
        // validate invitees list
        if (prevActiveIndex === 8) {
            if (invitees?.length === 0) {
                toast({
                    status: 'info',
                    title: 'No invitees added',
                    description: 'Please add at least one invitee in order to add your meeting',
                    duration: 9000,
                    isClosable: true,
                });
                newActiveIndex = 8;
            }
        }
        if (!prevCompletedStep || (prevCompletedStep < prevActiveIndex)) {
            const newCompletedStep = prevActiveIndex;
            setCompletedStep(newCompletedStep);
        }
        if (newActiveIndex !== prevActiveIndex) {
            setActiveIndex(newActiveIndex);
        }
    };
    const renderNextButton = () => {
        if (activeIndex === 10) {
            return (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' } });
        }
        if ((activeIndex === 9) && (invitees?.length === 0)) {
            return (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' } });
        }
        return ((0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: goToNextStep, children: "Next" }) }));
    };
    const renderSubmitButton = () => {
        return ((0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 'l' }, children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: editMeetingAssist, children: "Submit" }) }));
    };
    const renderCurrentStep = () => {
        /**
         * 0 - EditMeetingAssistBaseStep
         * 1 - EditMeetingAssistVirtualMeet
         * 2 - EditMeetingAssistBaseStep3
         * 3 - EditMeetingAssistAlarms
         * 4 - EditMeetingAssistBaseStep5
         * 5 - EditMeetingAssistBaseStep6
         * 6 - EditMeetingAssistBaseStep7
         * 7 - EditMeetingAssistRecurStepAlt
         * 8 - EditMeetingAssistInvitees
         */
        switch (activeIndex) {
            case 0:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(EditMeetingAssistBaseStep_1.default, { notes: notes, summary: summary, windowStartDate: windowStartDate, windowEndDate: windowEndDate, location: location, setParentNotes: setNotes, setParentSummary: setSummary, setParentWindowStartDate: setWindowStartDate, setParentWindowEndDate: setWindowEndDate, setParentLocation: setLocation, cancel: cancel, setParentCancel: setCancel }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: renderSubmitButton() }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Box_1.default, {}), renderNextButton()] })] }));
            case 1:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(EditMeetingAssistVirtualMeet_1.default, { isZoomAvailable: isZoomAvailable, isGoogleMeetAvailable: isGoogleMeetAvailable, zoomMeet: zoomMeet, googleMeet: googleMeet, enableConference: enableConference, setParentZoomMeet: setZoomMeet, setParentGoogleMeet: setGoogleMeet, setParentEnableConference: setEnableConference, setParentConferenceApp: setConferenceApp }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: renderSubmitButton() }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [renderPrevButton(), renderNextButton()] })] }));
            case 2:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(EditMeetingAssistBaseStep3_1.default, { sendUpdates: sendUpdates, guestsCanInviteOthers: guestsCanInviteOthers, transparency: transparency, visibility: visibility, hostName: hostName, setParentSendUpdates: setSendUpdates, setParentGuestsCanInviteOthers: setGuestsCanInviteOthers, setParentTransparency: setTransparency, setParentVisibility: setVisibility, setParentHostName: setHostName }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: renderSubmitButton() }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [renderPrevButton(), renderNextButton()] })] }));
            case 3:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(EditMeetingAssistAlarms_1.default, { useDefaultAlarms: useDefaultAlarms, alarms: alarms, setParentAlarms: setAlarms, setParentUseDefaultAlarms: setUseDefaultAlarms }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: renderSubmitButton() }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [renderPrevButton(), renderNextButton()] })] }));
            case 4:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(EditMeetingAssistBaseStep5_1.default, { cancelIfAnyRefuse: cancelIfAnyRefuse, enableAttendeePreferences: enableAttendeePreferences, attendeeCanModify: attendeeCanModify, expireDate: expireDate, duration: duration, setParentCancelIfAnyRefuse: setCancelIfAnyRefuse, setParentEnableAttendeePreferences: setEnableAttendeePreferences, setParentAttendeeCanModify: setAttendeeCanModify, setParentExpireDate: setExpireDate, setParentDuration: setDuration }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: renderSubmitButton() }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [renderPrevButton(), renderNextButton()] })] }));
            case 5:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(EditMeetingAssistBaseStep6_1.default, { isBufferTime: isBufferTime, beforeEventMinutes: beforeEventMinutes, afterEventMinutes: afterEventMinutes, setParentIsBufferTime: setIsBufferTime, setParentBeforeEventMinutes: setBeforeEventMinutes, setParentAfterEventMinutes: setAfterEventMinutes }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: renderSubmitButton() }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [renderPrevButton(), renderNextButton()] })] }));
            case 6:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(EditMeetingAssistBaseStep7_1.default, { anyoneCanAddSelf: anyoneCanAddSelf, guestsCanSeeOtherGuests: guestsCanSeeOtherGuests, minThresholdCount: minThresholdCount, guaranteeAvailability: guaranteeAvailability, isRecurring: isRecurring, lockAfter: lockAfter, setParentAnyoneCanAddSelf: setAnyoneCanAddSelf, setParentGuestsCanSeeOtherGuests: setGuestsCanSeeOtherGuests, setParentMinThresholdCount: setMinThresholdCount, setParentGuaranteeAvailability: setGuaranteeAvailability, setParentIsRecurring: setIsRecurring, setParentLockAfter: setLockAfter }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: renderSubmitButton() }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [renderPrevButton(), renderNextButton()] })] }));
            case 7:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(EditMeetingAssistRecurStepAlt_1.default, { frequency: frequency, interval: interval, until: until, setParentFrequency: setFrequency, setParentInterval: setInterval, setParentUntil: setUntil }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: renderSubmitButton() }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [renderPrevButton(), renderNextButton()] })] }));
            case 8:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(EditMeetingAssistInvitees_1.default, { invitees: invitees, userId: userId, client: client, hostName: hostName, meetingId: meetingId, setParentInvitees: setInvitees }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: renderSubmitButton() }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [renderPrevButton(), renderNextButton()] })] }));
            case 9:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '100%' }, p: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "center", minHeight: "65vh", maxHeight: "65vh", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 'm', tablet: 'l' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subheaderNormal", children: "Edit Meeting Assist" }) }), renderSubmitButton()] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", style: { width: '75%' }, children: [renderPrevButton(), (0, jsx_runtime_1.jsx)(Box_1.default, {})] })] }));
            default:
                return ((0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", minHeight: "65vh", maxHeight: "65vh", children: (0, jsx_runtime_1.jsx)(RegularCard_1.default, { children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "header", children: "Oops... something went wrong" }) }) }));
        }
    };
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Wizard_1.default, { items: [
                    {
                        index: 0,
                        label: 'Set Base',
                    },
                    {
                        index: 1,
                        label: 'Select Virtual Meet',
                    },
                    {
                        index: 2,
                        label: 'Continue Base',
                    },
                    {
                        index: 3,
                        label: 'Set Alarms',
                    },
                    {
                        index: 4,
                        label: 'Continue Base',
                    },
                    {
                        index: 5,
                        label: 'Continue Base',
                    },
                    {
                        index: 6,
                        label: 'Continue Base',
                    },
                    {
                        index: 7,
                        label: 'Create Recurrence',
                    },
                    {
                        index: 8,
                        label: 'Add Invitees',
                    },
                    {
                        index: 9,
                        label: 'Update Event',
                    },
                ], completed: completedStep, activeIndex: activeIndex }), renderCurrentStep()] }));
}
exports.default = UserEditMeetingAssist;
//# sourceMappingURL=data:application/json;base64,