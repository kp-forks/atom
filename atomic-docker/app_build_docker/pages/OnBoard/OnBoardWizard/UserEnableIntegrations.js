"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_native_1 = require("react-native");
const image_1 = __importDefault(require("next/image"));
const Switch_1 = __importDefault(require("@components/Switch"));
const react_2 = require("@chakra-ui/react");
const themed_1 = require("@rneui/themed");
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const Button_1 = __importDefault(require("@components/Button"));
const theme_1 = require("@lib/theme/theme");
const calendar_integrationHelper_1 = require("@lib/Settings/calendar_integrationHelper");
const constants_1 = require("@lib/calendarLib/constants");
const constants_2 = require("@lib/contactLib/constants");
const constants_3 = require("@lib/zoom/constants");
const calendarDbHelper_1 = require("@lib/calendarLib/calendarDbHelper");
const client_1 = require("@apollo/client");
const getCalendarWithResource_1 = __importDefault(require("@lib/apollo/gql/getCalendarWithResource"));
const getCalendarIntegrationByResourceAndName_1 = __importDefault(require("@lib/apollo/gql/getCalendarIntegrationByResourceAndName"));
const listCalendarIntegrations_1 = __importDefault(require("@lib/apollo/gql/listCalendarIntegrations"));
const OnBoardHelper2_1 = require("../../../lib/OnBoard/OnBoardHelper2");
const AttendeeHelper_1 = require("@lib/Calendar/Attendee/AttendeeHelper");
const ConferenceHelper_1 = require("@lib/Calendar/Conference/ConferenceHelper");
const ReminderHelper_1 = require("@lib/Calendar/Reminder/ReminderHelper");
const googleCalendarHelper_1 = require("@lib/calendarLib/googleCalendarHelper");
const router_1 = require("next/router");
const google_signin_normal_png_1 = __importDefault(require("@assets/images/google-signin-normal.png"));
const google_signin_pressed_png_1 = __importDefault(require("@assets/images/google-signin-pressed.png"));
// const dark = Appearance.getColorScheme() === 'dark'
// const googleButtonPressed = dark ? googleButtonPressedDarkNormal : googleButtonPressedLightNormal
// const googleButtonNormal = dark ? googleButtonDarkNormal : googleButtonLightNormal
const googleButtonPressed = google_signin_pressed_png_1.default;
const googleButtonNormal = google_signin_normal_png_1.default;
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("@config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
// eslint-disable-next-line react/display-name
const IntegrationCheckBox = (0, react_1.forwardRef)((props, ref) => {
    const { enabled: oldEnabled, updateEnabledValue, index, name, 
    //   dark,
    id, } = props;
    const [enabled, setEnabled] = (0, react_1.useState)(oldEnabled);
    const [pressed, setPressed] = (0, react_1.useState)(false);
    const updateEnabled = async (value) => {
        setEnabled(value);
        return updateEnabledValue(index, value, id);
    };
    const disableEnabled = async () => {
        setEnabled(false);
        return updateEnabledValue(index, false, id);
    };
    (0, react_1.useImperativeHandle)(ref, () => ({
        disableEnabled,
    }));
    const onPressIn = () => setPressed(true);
    const onPressOut = () => setPressed(false);
    const onPress = async () => updateEnabled(!enabled);
    if ((name === constants_1.googleCalendarName) || (name === constants_2.googlePeopleName)) {
        return ((0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, pt: { phone: 'm', tablet: 'l' }, justifyContent: "center", alignItems: "stretch", children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { mr: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { color: theme_1.palette.darkGray }, children: name }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { ml: { phone: 's', tablet: 'm' }, children: enabled
                                ? (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "On" })
                                : (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Off" }) })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, pt: { phone: 'm', tablet: 's' }, children: enabled
                        ? ((0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: onPress, children: (0, jsx_runtime_1.jsx)(Text_1.default, { textAlign: "center", variant: "buttonLink", children: "Disable" }) })) : ((0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPressIn: onPressIn, onPressOut: onPressOut, onPress: onPress, children: (0, jsx_runtime_1.jsx)(image_1.default, { src: pressed ? googleButtonPressed : googleButtonNormal, style: { width: 240, height: 50 }, alt: 'google button' }) })) })] }));
    }
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, pt: { phone: 'm', tablet: 'l' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { mr: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { color: theme_1.palette.darkGray }, children: name }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { ml: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { onValueChange: updateEnabled, checked: enabled }) })] }));
});
function CalendarCheckBox(props) {
    const { enabled: oldEnabled, updateEnabledValue, index, name, 
    // dark,
    id, calendars, } = props;
    const [enabled, setEnabled] = (0, react_1.useState)(oldEnabled);
    (0, react_1.useEffect)(() => {
        (async () => {
            try {
                const index = calendars.findIndex(i => (i?.id === id));
                if (index !== -1) {
                    setEnabled(true);
                }
            }
            catch (e) {
                console.log(e, ' error in calendar checkbox');
            }
        })();
    }, [calendars, calendars.length, id]);
    const updateEnabled = async (value) => {
        setEnabled(value);
        return updateEnabledValue(index, value, id);
    };
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { mb: { phone: 's', tablet: 'm' }, flex: 1, style: { width: '90%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { color: theme_1.palette.darkGray }, children: name }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '30%' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { onValueChange: updateEnabled, checked: enabled }) })] }));
}
function UserViewGoogleCalendarList(props) {
    const { sub } = props;
    const client = props?.client;
    // const calendar_integrationCollection = useRxCollection<calendar_integrationCollection>('calendar_integration')
    const [calendarList, setCalendarList] = (0, react_1.useState)([]);
    const [loading, setLoading] = (0, react_1.useState)(false);
    // const [integration, setIntegration] = useState<CalendarIntegrationType>()
    // const [calendars, setCalendars] = useState<CalendarType[]>([])
    const [enabledCalendars, setEnabledCalendars] = (0, react_1.useState)([]);
    const [enableAllCalendars, setEnableAllCalendars] = (0, react_1.useState)(false);
    const [disableLoading, setDisableLoading] = (0, react_1.useState)(false);
    const token = props?.token;
    const toast = (0, react_2.useToast)();
    const { loading: existingCalendarLoading, error: existingCalendarError, data } = (0, client_1.useQuery)(getCalendarWithResource_1.default, {
        variables: { userId: sub, resource: constants_1.googleResourceName },
    });
    const { loading: integrationLoading, error: integrationError, data: integrationData } = (0, client_1.useQuery)(getCalendarIntegrationByResourceAndName_1.default, {
        variables: {
            name: constants_1.googleCalendarName,
            resource: constants_1.googleResourceName,
            userId: sub,
        }
    });
    if (existingCalendarError) {
        toast({
            status: 'error',
            title: 'Error getting calendars',
            description: existingCalendarError.toString(),
            duration: 9000,
            isClosable: true,
        });
    }
    if (integrationError) {
        toast({
            status: 'error',
            title: 'Error getting calendar integrations',
            description: integrationError.toString(),
            duration: 9000,
            isClosable: true,
        });
    }
    const calendars = data?.Calendar;
    const calendarIntegrations = integrationData?.Calendar_Integration;
    // get calendar list
    (0, react_1.useEffect)(() => {
        if (!token)
            return;
        (async () => {
            try {
                setLoading(true);
                const results = await (0, calendar_integrationHelper_1.listGoogleCalendars)(token);
                console.log(results, ' results from listGoogleCalendars');
                const existingEnabledCalendars = results.map(calendar => {
                    const calendarId = calendar.id;
                    const calendarName = calendar.summary;
                    const calendarIndex = calendars?.findIndex(c => c.id === calendarId);
                    return {
                        id: calendarId,
                        name: calendarName,
                        enabled: (calendarIndex > -1),
                    };
                });
                setCalendarList(results);
                setEnabledCalendars(existingEnabledCalendars);
                setLoading(false);
                setDisableLoading(true);
            }
            catch (e) {
                console.log(e, ' error getting calendars');
                setLoading(false);
                toast({
                    status: 'error',
                    title: 'Error getting calendars',
                    description: e.toString(),
                    duration: 9000,
                    isClosable: true,
                });
                setDisableLoading(true);
            }
        })();
    }, [token, calendars?.length, calendars, toast]);
    // const dark = useColorScheme() === 'dark'
    const updateEnabledCalendarValue = async (index, value) => {
        try {
            const newEnabledCalendars = enabledCalendars.map((c, idx) => {
                if (idx === index) {
                    return {
                        ...c,
                        enabled: value,
                    };
                }
                return c;
            });
            setEnabledCalendars(newEnabledCalendars);
        }
        catch (e) {
            console.log(e, ' error updating enabled value');
            toast({
                status: 'error',
                title: 'Error updating enabled value',
                description: e.toString(),
                duration: 9000,
                isClosable: true,
            });
        }
    };
    const upsertCalendarInDb = async (index) => {
        try {
            console.log(calendarList?.[index], sub, ' calendarList?.[index], sub inside  upsertCalendarInDb');
            return (0, calendarDbHelper_1.upsertGoogleCalendarInDb)(client, calendarList?.[index], sub);
        }
        catch (e) {
            console.log(e, ' error creating calendar');
        }
    };
    const deleteCalendarInDb = async (index) => {
        try {
            await (0, calendarDbHelper_1.deleteGoogleCalendarInDb)(client, calendarList?.[index]?.id);
        }
        catch (e) {
            console.log(e, ' error deleting calendar');
        }
    };
    // delete event trigger in db
    const deleteEventTriggerInDb = async (index) => {
        try {
            await (0, calendar_integrationHelper_1.deleteEventTriggerByResourceId)(calendarList?.[index]?.id);
        }
        catch (e) {
            console.log(e, ' error deleting event trigger');
        }
    };
    const triggerCalendarSync = async (index) => {
        try {
            return (0, calendar_integrationHelper_1.triggerGoogleCalendarSync)(calendarIntegrations?.[0]?.id, calendarList?.[index]?.id, sub);
        }
        catch (e) {
            console.log(e, ' error triggering calendar sync');
        }
    };
    const addCalendarToSync = async (index) => {
        try {
            updateEnabledCalendarValue(index, true);
            await Promise.all([
                upsertCalendarInDb(index),
                triggerCalendarSync(index),
            ]);
            toast({
                status: 'success',
                title: 'Pick a Primary Calendar',
                description: 'Make sure to pick a primary calendar in the next step (or under settings) or Atomic will not work properly ',
                duration: 9000,
                isClosable: true,
            });
        }
        catch (e) {
            console.log(e, ' error adding calendar to sync');
        }
    };
    const removeCalendarFromSync = async (index) => {
        try {
            updateEnabledCalendarValue(index, false);
            const eventsToDelete = await (0, OnBoardHelper2_1.listEventsForCalendar)(client, calendarList?.[index]?.id);
            await (0, AttendeeHelper_1.deleteAttendeesForEvents)(client, eventsToDelete.map(e => e.id));
            const conferenceIds = eventsToDelete.map(e => e.conferenceId)
                .filter(id => !!id);
            await (0, ReminderHelper_1.deleteRemindersForEvents)(client, eventsToDelete.map(e => e.id), sub);
            await Promise.all([
                deleteEventTriggerInDb(index),
                (0, calendarDbHelper_1.deleteEventsByCalendarId)(client, calendarList?.[index]?.id),
            ]);
            if (conferenceIds?.length > 0) {
                await (0, ConferenceHelper_1.deleteConferencesWithIds)(client, conferenceIds);
            }
            await deleteCalendarInDb(index);
            // await deleteCalendarWebhook(client, calendarList?.[index]?.id)
        }
        catch (e) {
            console.log(e, ' error removing calendar from sync');
        }
    };
    const addAllCalendarsToSync = async () => {
        try {
            const promises = [];
            for (let i = 0; i < calendarList.length; i++) {
                promises.push(addCalendarToSync(i));
            }
            await Promise.all(promises);
        }
        catch (e) {
            console.log(e, ' error adding calendar to sync all');
        }
    };
    const removeAllCalendarFromSync = async () => {
        try {
            const promises = [];
            for (let i = 0; i < calendarList.length; i++) {
                promises.push(removeCalendarFromSync(i));
            }
            await Promise.all(promises);
        }
        catch (e) {
            console.log(e, ' error removing calendar from sync all');
        }
    };
    const updateEnabledValue = async (index, value) => {
        try {
            const newEnabledCalendars = enabledCalendars
                ?.slice(0, index)
                ?.concat([{ ...(enabledCalendars?.[index]), enabled: value }])
                ?.concat(enabledCalendars?.slice(index + 1) || [])
                ?.filter(f => !!f);
            setEnabledCalendars(newEnabledCalendars);
            if (value) {
                return addCalendarToSync(index);
            }
            else {
                return removeCalendarFromSync(index);
            }
        }
        catch (e) {
            console.log(e, ' error updating enabled value');
            toast({
                status: 'error',
                title: 'Error updating enabled value',
                description: e.toString(),
            });
        }
    };
    const updateAllCalendars = async (value) => {
        try {
            if (value) {
                setEnableAllCalendars(true);
                return addAllCalendarsToSync();
            }
            setEnableAllCalendars(false);
            return removeAllCalendarFromSync();
        }
        catch (e) {
            console.log(e, ' error updating all calendars');
            toast({
                status: 'error',
                title: 'Error updating all calendars',
                description: e.toString(),
                duration: 9000,
                isClosable: true,
            });
        }
    };
    const closeGoogleCalendarList = () => props.setParentIsGoogleCalendarList(false);
    const renderItem = ({ item, index }) => {
        // console.log(item, ' item inside renderItem') // Reduced console noise
        return ((0, jsx_runtime_1.jsx)(CalendarCheckBox, { updateEnabledValue: updateEnabledValue, index: index, enabled: item?.enabled, name: item?.name, id: item?.id, calendars: calendars }));
    };
    if (loading || existingCalendarLoading || integrationLoading || !disableLoading) {
        return ((0, jsx_runtime_1.jsx)(Box_1.default, { backgroundColor: "primaryCardBackground", flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, minHeight: "80vh", children: (0, jsx_runtime_1.jsx)(react_native_1.ActivityIndicator, { size: "large", color: theme_1.palette.white }) }));
    }
    if (!(calendarIntegrations?.length > 0)) {
        toast({
            status: 'error',
            title: 'Google Not Enabled',
            description: 'Google calendar integration is not enabled',
            duration: 9000,
            isClosable: true,
        });
    }
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "space-around", alignItems: "center", style: { width: '100%' }, minHeight: "70vh", children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '80%' }, flexDirection: "row", justifyContent: "space-around", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { color: theme_1.palette.darkGray }, children: "All Google Calendars" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsx)(Switch_1.default, { onValueChange: updateAllCalendars, checked: enableAllCalendars }) })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '90%' }, flex: 3, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(react_native_1.FlatList, { style: { flex: 1 }, data: enabledCalendars, keyExtractor: item => item.id, renderItem: renderItem, extraData: `${enabledCalendars.map(i => i?.id)}` }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, mt: "m", children: (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: closeGoogleCalendarList, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", textAlign: "center", children: "Confirm Calendar Selection" }) }) })] }));
}
function UserEnableIntegrations(props) {
    const [loading, setLoading] = (0, react_1.useState)(false);
    const [isWarning, setIsWarning] = (0, react_1.useState)(false);
    const [selectedIndex, setSelectedIndex] = (0, react_1.useState)(-1);
    const [selectedId, setSelectedId] = (0, react_1.useState)();
    const [selectedValue, setSelectedValue] = (0, react_1.useState)(false);
    const [isGoogleCalendarList, setIsGoogleCalendarList] = (0, react_1.useState)(false); // Initial state is false
    const [googleToken, setGoogleToken] = (0, react_1.useState)();
    const googleCalendarElement = (0, react_1.useRef)();
    // const dark = useColorScheme() === 'dark'
    const router = (0, router_1.useRouter)();
    const { sub: userId } = props;
    const client = props?.client;
    const toast = (0, react_2.useToast)();
    const { loading: googleIntegrationLoading, error: googleIntegrationError, data: googleIntegrationData, refetch: googleIntRefetch } = (0, client_1.useQuery)(getCalendarIntegrationByResourceAndName_1.default, {
        variables: {
            name: constants_1.googleCalendarName,
            resource: constants_1.googleResourceName,
            userId: userId,
        }
    });
    const { loading: integrationLoading, error: integrationError, data: integrationData, refetch } = (0, client_1.useQuery)(listCalendarIntegrations_1.default, {
        variables: {
            userId: userId,
        }
    });
    const googleCalendarEnabled = googleIntegrationData?.Calendar_Integration?.[0]?.enabled;
    const integrations = integrationData?.Calendar_Integration;
    // Automatically display calendar list when Google Calendar is enabled and token is available
    (0, react_1.useEffect)(() => {
        if (googleCalendarEnabled && googleToken) {
            setIsGoogleCalendarList(true);
        }
    }, [googleCalendarEnabled, googleToken]);
    //  just in case oldIntegrations are not loaded
    (0, react_1.useEffect)(() => {
        (async () => {
            if (!(integrations?.length > 0)) {
                await refetch();
                await googleIntRefetch();
            }
        })();
    }, [googleIntRefetch, integrations?.length, refetch]);
    const disableGoogleCalendarCheckBox = () => {
        setSelectedIndex(-1);
        setSelectedId('');
        setSelectedValue(false);
        setIsWarning(false);
        googleCalendarElement?.current?.disableEnabled();
    };
    const enableGoogleCalendarCheckBox = async () => {
        try {
            setIsWarning(false);
            // const newIntegrations = integrations
            // .slice(0, selectedIndex)
            // .concat([{ ...(integrations?.[selectedIndex]), enabled: selectedValue }])
            // .concat(integrations.slice(selectedIndex + 1))
            // setIntegrations(newIntegrations)
            await submitIntegration(selectedIndex, selectedValue, selectedId);
            await refetch();
            await googleIntRefetch();
            setSelectedIndex(-1);
            setSelectedId('');
            setSelectedValue(false);
        }
        catch (e) {
            setIsWarning(false);
            console.log(e, ' this is error for enable google calendar checkbox');
            toast({
                status: 'error',
                title: 'Error',
                description: 'Something went wrong',
                duration: 9000,
                isClosable: true,
            });
        }
    };
    const updateEnabledValue = async (index, value, id) => {
        const selectedIntegration = integrations[index];
        if ((selectedIntegration.name === constants_1.googleCalendarName)
            && (value === false)) {
            setSelectedIndex(index);
            setSelectedId(id);
            setSelectedValue(value);
            setIsWarning(true);
        }
        else {
            // const newIntegrations = integrations
            //     .slice(0, index)
            //     .concat([{ ...(integrations?.[index]), enabled: value }])
            //     .concat(integrations.slice(index + 1))
            // setIntegrations(newIntegrations)
            await submitIntegration(index, value, id);
            await refetch();
            await googleIntRefetch();
        }
    };
    const disableGoogleCalendarSync = async (integrationId) => {
        try {
            await (0, calendar_integrationHelper_1.updateIntegration)(client, integrationId, false, null, undefined, null);
            await (0, calendar_integrationHelper_1.deleteEventTriggers)(userId, constants_1.googleResourceName, constants_1.googleCalendarName);
            const itemsToRemove = await (0, calendarDbHelper_1.getItemsToRemove)(client, userId, constants_1.googleResourceName);
            await (0, calendarDbHelper_1.bulkRemoveCalendarsInDb)(client, itemsToRemove.map(i => (i?.id)));
            // bulk remove events from db
            const eventsToRemovePromise = [];
            for (const item of itemsToRemove) {
                if (item?.id) {
                    eventsToRemovePromise.push((0, calendarDbHelper_1.deleteEventsByCalendarId)(client, item.id));
                }
            }
            await Promise.all(eventsToRemovePromise);
            await refetch();
            await googleIntRefetch();
        }
        catch (e) {
            console.log(e, ' this is e for disable google calendarsync');
            await refetch();
            await googleIntRefetch();
        }
    };
    const disableZoomAuth = async (integrationId) => {
        try {
            await (0, calendar_integrationHelper_1.updateIntegration)(client, integrationId, false, null, null, null, undefined, undefined, null, null);
        }
        catch (e) {
            console.log(e, ' unable to disable zoom auth');
        }
    };
    const disableGoogleContactSync = async (integrationId) => {
        try {
            await (0, calendar_integrationHelper_1.updateIntegration)(client, integrationId, false, null, undefined, null, undefined, undefined, null, null);
            // delete event triggers
            await (0, calendar_integrationHelper_1.deleteEventTriggerByResourceId)(integrationId);
        }
        catch (e) {
            console.log(e, ' error in disableGoogleContactSync');
        }
    };
    const submitIntegration = async (index, newEnabled, id) => {
        try {
            if (newEnabled === false) {
                // delete triggers
                if (integrations?.[index]?.name === constants_2.googlePeopleName) {
                    return disableGoogleContactSync(integrations?.[index]?.id);
                }
                else if (integrations?.[index]?.name === constants_1.googleCalendarName) {
                    return disableGoogleCalendarSync(integrations?.[index]?.id);
                }
                else if (integrations?.[index]?.resource === constants_3.zoomResourceName) {
                    return disableZoomAuth(integrations?.[index]?.id);
                }
                return (0, calendar_integrationHelper_1.updateIntegration)(client, id, newEnabled, undefined, undefined, undefined, false, undefined, undefined, undefined, integrations?.[index]?.resource === constants_1.googleResourceName ? 'atomic-web' : 'web');
            }
            console.log(integrations?.[index]?.name, ' integrations?.[index]?.name inside submitIntegration');
        }
        catch (e) {
            console.log(e, ' unable to submit integrations');
            setLoading(false);
            toast({
                status: 'error',
                title: 'Unable to submit integration',
                description: 'Please try again',
                duration: 9000,
                isClosable: true,
            });
        }
    };
    const navigateToGoogleCalendars = async () => {
        try {
            const newAccessToken = await (0, googleCalendarHelper_1.getGoogleToken)(client, userId);
            // return navigation.navigate('UserViewGoogleCalendarList', { token: newAccessToken })
            setGoogleToken(newAccessToken);
            return setIsGoogleCalendarList(true);
        }
        catch (e) {
            console.log(e, ' unable to navigate to google calendars');
        }
    };
    const renderItem2 = ({ item, index }) => {
        if ((item?.resource === constants_3.zoomResourceName) && !item?.enabled) {
            return ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, mt: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsxs)("a", { target: "_blank", href: constants_3.zoomOAuthStartUrl, rel: "noopener noreferrer", children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { mr: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { color: theme_1.palette.darkGray }, children: item?.name }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { ml: { phone: 's', tablet: 'm' }, children: item?.enabled
                                        ? (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "On" })
                                        : (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Off" }) })] }), (0, jsx_runtime_1.jsx)("span", { className: "btn btn-link no-underline hover:no-underline", children: "Enable Zoom" })] }) }));
        }
        if ((item?.resource === constants_3.zoomResourceName) && item?.enabled) {
            return ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, children: (0, jsx_runtime_1.jsx)(IntegrationCheckBox, { updateEnabledValue: updateEnabledValue, index: index, enabled: item?.enabled, name: item?.name, id: item?.id }) }));
        }
        if ((item?.resource === constants_1.googleResourceName) && !item?.enabled) {
            return ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, children: (0, jsx_runtime_1.jsx)("a", { target: "_blank", href: constants_1.googleOAuthStartUrl, rel: "noopener noreferrer", children: (0, jsx_runtime_1.jsx)(IntegrationCheckBox, { updateEnabledValue: updateEnabledValue, index: index, enabled: item?.enabled, name: item?.name, id: item?.id, ref: googleCalendarElement }) }) }));
        }
        if ((item?.resource === constants_1.googleResourceName) && item?.enabled) {
            return ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, children: (0, jsx_runtime_1.jsx)(IntegrationCheckBox, { updateEnabledValue: updateEnabledValue, index: index, enabled: item?.enabled, name: item?.name, id: item?.id, ref: googleCalendarElement }) }));
        }
        return ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, children: (0, jsx_runtime_1.jsx)(IntegrationCheckBox, { updateEnabledValue: updateEnabledValue, index: index, enabled: item?.enabled, name: item?.name, id: item?.id }) }));
    };
    if (loading || integrationLoading || googleIntegrationLoading) {
        return ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, backgroundColor: "lightRegularCardBackground", children: (0, jsx_runtime_1.jsx)(react_native_1.ActivityIndicator, { size: "large", color: theme_1.palette.white }) }));
    }
    if (isGoogleCalendarList) {
        return ((0, jsx_runtime_1.jsx)(UserViewGoogleCalendarList, { client: client, token: googleToken, sub: userId, setParentIsGoogleCalendarList: setIsGoogleCalendarList }));
    }
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", alignItems: "center", minHeight: "70vh", children: [integrations?.length > 0
                ? ((0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", alignItems: "center", minHeight: "70vh", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(react_native_1.FlatList, { data: integrations, keyExtractor: item => item.id, renderItem: renderItem2 }) }), googleCalendarEnabled
                            ? ({ /* "View Google Calendars" button is hidden if list is already shown or will be shown automatically */})
                            :
                        , (googleCalendarEnabled && !isGoogleCalendarList && !googleToken) && // Show button only if enabled but list not yet shown (e.g. token fetch in progress)
                            (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: navigateToGoogleCalendars, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", children: "View Google Calendars" }) }) }), (googleCalendarEnabled && googleToken && !isGoogleCalendarList) && // Case where token is fetched but useEffect for auto-show hasn't run yet or user closed it.
                            (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: navigateToGoogleCalendars, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", children: "Manage Google Calendars" }) }) }), !googleCalendarEnabled && (null // No button if Google Calendar is not enabled
                        )] })) : ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subheader", style: { color: theme_1.palette.darkGray }, children: "Still loading ..." }) })), (0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsx)(themed_1.Overlay, { isVisible: isWarning, onBackdropPress: disableGoogleCalendarCheckBox, overlayStyle: { backgroundColor: theme_1.palette.white }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", alignItems: "center", style: { width: '80%', backgroundColor: theme_1.palette.white }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Disabling Google Calendar will delete all google related events from your calendar" }) }), (0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: enableGoogleCalendarCheckBox, children: "Okay" }) }), (0, jsx_runtime_1.jsx)(Button_1.default, { disabled: true, onClick: disableGoogleCalendarCheckBox, children: "Cancel" })] })] }) }) })] }));
}
exports.default = UserEnableIntegrations;
//# sourceMappingURL=data:application/json;base64,