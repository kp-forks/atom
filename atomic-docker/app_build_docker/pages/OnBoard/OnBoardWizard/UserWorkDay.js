"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_native_1 = require("react-native");
// import DateTimePicker from 'react-datetime-picker/dist/entry.nostyle'
const react_2 = require("@chakra-ui/react");
const date_utils_1 = require("@lib/date-utils");
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const lodash_1 = __importDefault(require("lodash"));
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("@config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
const DEFAULT_START_TIMES = [
    {
        day: 1,
        hour: 7,
        minutes: 0,
    },
    {
        day: 2,
        hour: 7,
        minutes: 0,
    },
    {
        day: 3,
        hour: 7,
        minutes: 0,
    },
    {
        day: 4,
        hour: 7,
        minutes: 0,
    },
    {
        day: 5,
        hour: 7,
        minutes: 0,
    },
    {
        day: 6,
        hour: 7,
        minutes: 0,
    },
    {
        day: 7,
        hour: 7,
        minutes: 0,
    }
];
const DEFAULT_END_TIMES = [
    {
        day: 1,
        hour: 19,
        minutes: 0,
    },
    {
        day: 2,
        hour: 19,
        minutes: 0,
    },
    {
        day: 3,
        hour: 19,
        minutes: 0,
    },
    {
        day: 4,
        hour: 19,
        minutes: 0,
    },
    {
        day: 5,
        hour: 19,
        minutes: 0,
    },
    {
        day: 6,
        hour: 19,
        minutes: 0,
    },
    {
        day: 7,
        hour: 19,
        minutes: 0,
    }
];
function UserWorkDay(props) {
    const [startTimes, setStartTimes] = (0, react_1.useState)(props?.startTimes || DEFAULT_START_TIMES);
    const [endTimes, setEndTimes] = (0, react_1.useState)(props?.endTimes || DEFAULT_END_TIMES);
    const [monStartTimeDate, setMonStartTimeDate] = (0, react_1.useState)((0, date_utils_1.dayjs)().hour(props?.startTimes.find(i => (i?.day === 1)).hour).minute(props?.startTimes.find(i => (i?.day === 1)).minutes).toDate() || new Date());
    const [tueStartTimeDate, setTueStartTimeDate] = (0, react_1.useState)((0, date_utils_1.dayjs)().hour(props?.startTimes.find(i => (i?.day === 2)).hour).minute(props?.startTimes.find(i => (i?.day === 2)).minutes).toDate());
    const [wedStartTimeDate, setWedStartTimeDate] = (0, react_1.useState)((0, date_utils_1.dayjs)().hour(props?.startTimes.find(i => (i?.day === 3)).hour).minute(props?.startTimes.find(i => (i?.day === 3)).minutes).toDate());
    const [thuStartTimeDate, setThuStartTimeDate] = (0, react_1.useState)((0, date_utils_1.dayjs)().hour(props?.startTimes.find(i => (i?.day === 4)).hour).minute(props?.startTimes.find(i => (i?.day === 4)).minutes).toDate());
    const [friStartTimeDate, setFriStartTimeDate] = (0, react_1.useState)((0, date_utils_1.dayjs)().hour(props?.startTimes.find(i => (i?.day === 5)).hour).minute(props?.startTimes.find(i => (i?.day === 5)).minutes).toDate());
    const [satStartTimeDate, setSatStartTimeDate] = (0, react_1.useState)((0, date_utils_1.dayjs)().hour(props?.startTimes.find(i => (i?.day === 6)).hour).minute(props?.startTimes.find(i => (i?.day === 6)).minutes).toDate());
    const [sunStartTimeDate, setSunStartTimeDate] = (0, react_1.useState)((0, date_utils_1.dayjs)().hour(props?.startTimes.find(i => (i?.day === 7)).hour).minute(props?.startTimes.find(i => (i?.day === 7)).minutes).toDate());
    const [monEndTimeDate, setMonEndTimeDate] = (0, react_1.useState)((0, date_utils_1.dayjs)().hour(props?.endTimes.find(i => (i?.day === 1)).hour).minute(props?.endTimes.find(i => (i?.day === 1)).minutes).toDate());
    const [tueEndTimeDate, setTueEndTimeDate] = (0, react_1.useState)((0, date_utils_1.dayjs)().hour(props?.endTimes.find(i => (i?.day === 2)).hour).minute(props?.endTimes.find(i => (i?.day === 2)).minutes).toDate());
    const [wedEndTimeDate, setWedEndTimeDate] = (0, react_1.useState)((0, date_utils_1.dayjs)().hour(props?.endTimes.find(i => (i?.day === 3)).hour).minute(props?.endTimes.find(i => (i?.day === 3)).minutes).toDate());
    const [thuEndTimeDate, setThuEndTimeDate] = (0, react_1.useState)((0, date_utils_1.dayjs)().hour(props?.endTimes.find(i => (i?.day === 4)).hour).minute(props?.endTimes.find(i => (i?.day === 4)).minutes).toDate());
    const [friEndTimeDate, setFriEndTimeDate] = (0, react_1.useState)((0, date_utils_1.dayjs)().hour(props?.endTimes.find(i => (i?.day === 5)).hour).minute(props?.endTimes.find(i => (i?.day === 5)).minutes).toDate());
    const [satEndTimeDate, setSatEndTimeDate] = (0, react_1.useState)((0, date_utils_1.dayjs)().hour(props?.endTimes.find(i => (i?.day === 6)).hour).minute(props?.endTimes.find(i => (i?.day === 6)).minutes).toDate());
    const [sunEndTimeDate, setSunEndTimeDate] = (0, react_1.useState)((0, date_utils_1.dayjs)().hour(props?.endTimes.find(i => (i?.day === 7)).hour).minute(props?.endTimes.find(i => (i?.day === 7)).minutes).toDate());
    const setParentStartTimes = props?.setParentStartTimes;
    const setParentEndTimes = props?.setParentEndTimes;
    const onStartTimeChange = (day, hour, minutes) => {
        console.log(day, hour, minutes, 'day, hour, minutes, onStartTimeChange');
        switch (day) {
            case 1:
                const findIndex = startTimes.findIndex(i => i.day === 1);
                console.log(findIndex, 'findIndex');
                if (findIndex !== -1) {
                    const newStartTimes = lodash_1.default.cloneDeep(startTimes);
                    newStartTimes[findIndex].hour = hour;
                    newStartTimes[findIndex].minutes = minutes;
                    console.log(newStartTimes, 'newStartTimes');
                    setStartTimes(newStartTimes);
                    setParentStartTimes(newStartTimes);
                }
                break;
            case 2:
                const findIndex2 = startTimes.findIndex(i => i.day === 2);
                if (findIndex2 !== -1) {
                    const newStartTimes = lodash_1.default.cloneDeep(startTimes);
                    console.log(newStartTimes, 'newStartTimes');
                    newStartTimes[findIndex2].hour = hour;
                    newStartTimes[findIndex2].minutes = minutes;
                    setStartTimes(newStartTimes);
                    setParentStartTimes(newStartTimes);
                }
                break;
            case 3:
                const findIndex3 = startTimes.findIndex(i => i.day === 3);
                if (findIndex3 !== -1) {
                    const newStartTimes = lodash_1.default.cloneDeep(startTimes);
                    newStartTimes[findIndex3].hour = hour;
                    newStartTimes[findIndex3].minutes = minutes;
                    setStartTimes(newStartTimes);
                    setParentStartTimes(newStartTimes);
                }
                break;
            case 4:
                const findIndex4 = startTimes.findIndex(i => i.day === 4);
                if (findIndex4 !== -1) {
                    const newStartTimes = lodash_1.default.cloneDeep(startTimes);
                    newStartTimes[findIndex4].hour = hour;
                    newStartTimes[findIndex4].minutes = minutes;
                    setStartTimes(newStartTimes);
                    setParentStartTimes(newStartTimes);
                }
                break;
            case 5:
                const findIndex5 = startTimes.findIndex(i => i.day === 5);
                if (findIndex5 !== -1) {
                    const newStartTimes = lodash_1.default.cloneDeep(startTimes);
                    newStartTimes[findIndex5].hour = hour;
                    newStartTimes[findIndex5].minutes = minutes;
                    setStartTimes(newStartTimes);
                    setParentStartTimes(newStartTimes);
                }
                break;
            case 6:
                const findIndex6 = startTimes.findIndex(i => i.day === 6);
                if (findIndex6 !== -1) {
                    const newStartTimes = lodash_1.default.cloneDeep(startTimes);
                    newStartTimes[findIndex6].hour = hour;
                    newStartTimes[findIndex6].minutes = minutes;
                    setStartTimes(newStartTimes);
                    setParentStartTimes(newStartTimes);
                }
                break;
            case 7:
                const findIndex7 = startTimes.findIndex(i => i.day === 7);
                if (findIndex7 !== -1) {
                    const newStartTimes = lodash_1.default.cloneDeep(startTimes);
                    newStartTimes[findIndex7].hour = hour;
                    newStartTimes[findIndex7].minutes = minutes;
                    setStartTimes(newStartTimes);
                    setParentStartTimes(newStartTimes);
                }
                break;
        }
    };
    const onEndTimeChange = (day, hour, minutes) => {
        console.log(day, hour, minutes, 'day, hour, minutes, onEndTimeChange');
        switch (day) {
            case 1:
                const findIndex = endTimes.findIndex(i => i.day === 1);
                if (findIndex !== -1) {
                    const newEndTimes = lodash_1.default.cloneDeep(endTimes);
                    newEndTimes[findIndex].hour = hour;
                    newEndTimes[findIndex].minutes = minutes;
                    console.log(newEndTimes, 'newEndTimes');
                    setEndTimes(newEndTimes);
                    setParentEndTimes(newEndTimes);
                }
                break;
            case 2:
                const findIndex2 = endTimes.findIndex(i => i.day === 2);
                if (findIndex2 !== -1) {
                    const newEndTimes = lodash_1.default.cloneDeep(endTimes);
                    newEndTimes[findIndex2].hour = hour;
                    newEndTimes[findIndex2].minutes = minutes;
                    setEndTimes(newEndTimes);
                    setParentEndTimes(newEndTimes);
                }
                break;
            case 3:
                const findIndex3 = endTimes.findIndex(i => i.day === 3);
                if (findIndex3 !== -1) {
                    const newEndTimes = lodash_1.default.cloneDeep(endTimes);
                    newEndTimes[findIndex3].hour = hour;
                    newEndTimes[findIndex3].minutes = minutes;
                    setEndTimes(newEndTimes);
                    setParentEndTimes(newEndTimes);
                }
                break;
            case 4:
                const findIndex4 = endTimes.findIndex(i => i.day === 4);
                if (findIndex4 !== -1) {
                    const newEndTimes = lodash_1.default.cloneDeep(endTimes);
                    newEndTimes[findIndex4].hour = hour;
                    newEndTimes[findIndex4].minutes = minutes;
                    setEndTimes(newEndTimes);
                    setParentEndTimes(newEndTimes);
                }
                break;
            case 5:
                const findIndex5 = endTimes.findIndex(i => i.day === 5);
                if (findIndex5 !== -1) {
                    const newEndTimes = lodash_1.default.cloneDeep(endTimes);
                    newEndTimes[findIndex5].hour = hour;
                    newEndTimes[findIndex5].minutes = minutes;
                    setEndTimes(newEndTimes);
                    setParentEndTimes(newEndTimes);
                }
                break;
            case 6:
                const findIndex6 = endTimes.findIndex(i => i.day === 6);
                if (findIndex6 !== -1) {
                    const newEndTimes = lodash_1.default.cloneDeep(endTimes);
                    newEndTimes[findIndex6].hour = hour;
                    newEndTimes[findIndex6].minutes = minutes;
                    setEndTimes(newEndTimes);
                    setParentEndTimes(newEndTimes);
                }
                break;
            case 7:
                const findIndex7 = endTimes.findIndex(i => i.day === 7);
                if (findIndex7 !== -1) {
                    const newEndTimes = lodash_1.default.cloneDeep(endTimes);
                    newEndTimes[findIndex7].hour = hour;
                    newEndTimes[findIndex7].minutes = minutes;
                    setEndTimes(newEndTimes);
                    setParentEndTimes(newEndTimes);
                }
                break;
        }
    };
    const onMonStartTimeDateChange = (date) => {
        setMonStartTimeDate(date);
        onStartTimeChange(1, (0, date_utils_1.dayjs)(date).hour(), (0, date_utils_1.dayjs)(date).minute());
    };
    const onTueStartTimeDateChange = (date) => {
        setTueStartTimeDate(date);
        onStartTimeChange(2, (0, date_utils_1.dayjs)(date).hour(), (0, date_utils_1.dayjs)(date).minute());
    };
    const onWedStartTimeDateChange = (date) => {
        setWedStartTimeDate(date);
        onStartTimeChange(3, (0, date_utils_1.dayjs)(date).hour(), (0, date_utils_1.dayjs)(date).minute());
    };
    const onThuStartTimeDateChange = (date) => {
        setThuStartTimeDate(date);
        onStartTimeChange(4, (0, date_utils_1.dayjs)(date).hour(), (0, date_utils_1.dayjs)(date).minute());
    };
    const onFriStartTimeDateChange = (date) => {
        setFriStartTimeDate(date);
        onStartTimeChange(5, (0, date_utils_1.dayjs)(date).hour(), (0, date_utils_1.dayjs)(date).minute());
    };
    const onSatStartTimeDateChange = (date) => {
        setSatStartTimeDate(date);
        onStartTimeChange(6, (0, date_utils_1.dayjs)(date).hour(), (0, date_utils_1.dayjs)(date).minute());
    };
    const onSunStartTimeDateChange = (date) => {
        setSunStartTimeDate(date);
        onStartTimeChange(7, (0, date_utils_1.dayjs)(date).hour(), (0, date_utils_1.dayjs)(date).minute());
    };
    const onMonEndTimeDateChange = (date) => {
        setMonEndTimeDate(date);
        onEndTimeChange(1, (0, date_utils_1.dayjs)(date).hour(), (0, date_utils_1.dayjs)(date).minute());
    };
    const onTueEndTimeDateChange = (date) => {
        setTueEndTimeDate(date);
        onEndTimeChange(2, (0, date_utils_1.dayjs)(date).hour(), (0, date_utils_1.dayjs)(date).minute());
    };
    const onWedEndTimeDateChange = (date) => {
        setWedEndTimeDate(date);
        onEndTimeChange(3, (0, date_utils_1.dayjs)(date).hour(), (0, date_utils_1.dayjs)(date).minute());
    };
    const onThuEndTimeDateChange = (date) => {
        setThuEndTimeDate(date);
        onEndTimeChange(4, (0, date_utils_1.dayjs)(date).hour(), (0, date_utils_1.dayjs)(date).minute());
    };
    const onFriEndTimeDateChange = (date) => {
        setFriEndTimeDate(date);
        onEndTimeChange(5, (0, date_utils_1.dayjs)(date).hour(), (0, date_utils_1.dayjs)(date).minute());
    };
    const onSatEndTimeDateChange = (date) => {
        setSatEndTimeDate(date);
        onEndTimeChange(6, (0, date_utils_1.dayjs)(date).hour(), (0, date_utils_1.dayjs)(date).minute());
    };
    const onSunEndTimeDateChange = (date) => {
        setSunEndTimeDate(date);
        onEndTimeChange(7, (0, date_utils_1.dayjs)(date).hour(), (0, date_utils_1.dayjs)(date).minute());
    };
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, style: { width: '100%' }, flex: 1, justifyContent: "center", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '80%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subheader", children: "Default Working Hours" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '80%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "greyComment", children: "Tap on the time to change the default working hours for Monday to Sunday" }) })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 3, style: { width: '100%' }, children: (0, jsx_runtime_1.jsxs)(react_native_1.ScrollView, { style: { width: '100%' }, contentContainerStyle: { width: '100%', justifyContent: 'center', alignItems: 'center' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Monday" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '40%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "cardTitle", children: "Start Time" }), (0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Time", size: "md", type: "time", onChange: (e) => {
                                            onMonStartTimeDateChange((0, date_utils_1.dayjs)(e?.target?.value, "HH:mm").toDate());
                                        }, value: (0, date_utils_1.dayjs)(monStartTimeDate).format("HH:mm") })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { mb: { phone: 'm', tablet: 'l' }, style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '40%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "cardTitle", children: "End Time" }), (0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Time", size: "md", type: "time", onChange: (e) => {
                                            onMonEndTimeDateChange((0, date_utils_1.dayjs)(e?.target?.value, "HH:mm").toDate());
                                        }, value: (0, date_utils_1.dayjs)(monEndTimeDate).format("HH:mm") })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { textAlign: "center", style: { width: '100%' }, variant: "optionHeader", children: "Tuesday" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '40%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "cardTitle", children: "Start Time" }), (0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Time", size: "md", type: "time", onChange: (e) => {
                                            onTueStartTimeDateChange((0, date_utils_1.dayjs)(e?.target?.value, "HH:mm").toDate());
                                        }, value: (0, date_utils_1.dayjs)(tueStartTimeDate).format("HH:mm") })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { mb: { phone: 'm', tablet: 'l' }, style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '40%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "cardTitle", children: "End Time" }), (0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Time", size: "md", type: "time", onChange: (e) => {
                                            onTueEndTimeDateChange((0, date_utils_1.dayjs)(e?.target?.value, "HH:mm").toDate());
                                        }, value: (0, date_utils_1.dayjs)(tueEndTimeDate).format("HH:mm") })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Wednesday" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '40%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "cardTitle", children: "Start Time" }), (0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Time", size: "md", type: "time", onChange: (e) => {
                                            onWedStartTimeDateChange((0, date_utils_1.dayjs)(e?.target?.value, "HH:mm").toDate());
                                        }, value: (0, date_utils_1.dayjs)(wedStartTimeDate).format("HH:mm") })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { mb: { phone: 'm', tablet: 'l' }, style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '40%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "cardTitle", children: "End Time" }), (0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Time", size: "md", type: "time", onChange: (e) => {
                                            onWedEndTimeDateChange((0, date_utils_1.dayjs)(e?.target?.value, "HH:mm").toDate());
                                        }, value: (0, date_utils_1.dayjs)(wedEndTimeDate).format("HH:mm") })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Thursday" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '40%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "cardTitle", children: "Start Time" }), (0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Time", size: "md", type: "time", onChange: (e) => {
                                            onThuStartTimeDateChange((0, date_utils_1.dayjs)(e?.target?.value, "HH:mm").toDate());
                                        }, value: (0, date_utils_1.dayjs)(thuStartTimeDate).format("HH:mm") })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { mb: { phone: 'm', tablet: 'l' }, style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '40%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "cardTitle", children: "End Time" }), (0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Time", size: "md", type: "time", onChange: (e) => {
                                            onThuEndTimeDateChange((0, date_utils_1.dayjs)(e?.target?.value, "HH:mm").toDate());
                                        }, value: (0, date_utils_1.dayjs)(thuEndTimeDate).format("HH:mm") })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Friday" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '40%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "cardTitle", children: "Start Time" }), (0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Time", size: "md", type: "time", onChange: (e) => {
                                            onFriStartTimeDateChange((0, date_utils_1.dayjs)(e?.target?.value, "HH:mm").toDate());
                                        }, value: (0, date_utils_1.dayjs)(friStartTimeDate).format("HH:mm") })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { mb: { phone: 'm', tablet: 'l' }, style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '40%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "cardTitle", children: "End Time" }), (0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Time", size: "md", type: "time", onChange: (e) => {
                                            onFriEndTimeDateChange((0, date_utils_1.dayjs)(e?.target?.value, "HH:mm").toDate());
                                        }, value: (0, date_utils_1.dayjs)(friEndTimeDate).format("HH:mm") })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Saturday" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '40%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "cardTitle", children: "Start Time" }), (0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Time", size: "md", type: "time", onChange: (e) => {
                                            onSatStartTimeDateChange((0, date_utils_1.dayjs)(e?.target?.value, 'HH:mm').toDate());
                                        }, value: (0, date_utils_1.dayjs)(satStartTimeDate).format('HH:mm') })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { mb: { phone: 'm', tablet: 'l' }, style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '40%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "cardTitle", children: "End Time" }), (0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Time", size: "md", type: "time", onChange: (e) => {
                                            onSatEndTimeDateChange((0, date_utils_1.dayjs)(e?.target?.value, 'HH:mm').toDate());
                                        }, value: (0, date_utils_1.dayjs)(satEndTimeDate).format('HH:mm') })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Sunday" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '40%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "cardTitle", children: "Start Time" }), (0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Time", size: "md", type: "time", onChange: (e) => {
                                            onSunStartTimeDateChange((0, date_utils_1.dayjs)(e?.target?.value, 'HH:mm').toDate());
                                        }, value: (0, date_utils_1.dayjs)(sunStartTimeDate).format('HH:mm') })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { mb: { phone: 'm', tablet: 'l' }, style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '40%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "cardTitle", children: "End Time" }), (0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Time", size: "md", type: "time", onChange: (e) => {
                                            onSunEndTimeDateChange((0, date_utils_1.dayjs)(e?.target?.value, 'HH:mm').toDate());
                                        }, value: (0, date_utils_1.dayjs)(sunEndTimeDate).format('HH:mm') })] }) })] }) })] }));
}
exports.default = UserWorkDay;
//# sourceMappingURL=data:application/json;base64,