"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const date_utils_1 = require("@lib/date-utils");
const uuid_1 = require("uuid");
const Button_1 = __importDefault(require("@components/Button"));
const Wizard_1 = __importDefault(require("@components/Wizard"));
const RegularCard_1 = __importDefault(require("@components/RegularCard"));
const OnBoardHelper2_1 = require("@lib/OnBoard/OnBoardHelper2");
const calendar_integrationHelper_1 = require("@lib/Settings/calendar_integrationHelper");
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const UserEnableIntegrations_1 = __importDefault(require("@pages/OnBoard/OnBoardWizard/UserEnableIntegrations"));
const UserSelectPrimaryCalendar_1 = __importDefault(require("@pages/OnBoard/OnBoardWizard/UserSelectPrimaryCalendar"));
const UserAddTags_1 = __importDefault(require("@pages/OnBoard/OnBoardWizard/UserAddTags"));
const UserDefaultAlarms_1 = __importDefault(require("@pages/OnBoard/OnBoardWizard/UserDefaultAlarms"));
const UserWorkDay_1 = __importDefault(require("@pages/OnBoard/OnBoardWizard/UserWorkDay"));
// import UserPreferenceForTimeBlockElements from '@pages/OnBoard/OnBoardWizard/UserPreferenceForTimeBlockElements' // DELETED
// import UserPreferenceForTimeBlockElements2 from '@pages/OnBoard/OnBoardWizard/UserPreferenceForTimeBlockElements2' // DELETED
// import UserPreferenceForTimeBlockElements3 from '@pages/OnBoard/OnBoardWizard/UserPreferenceForTimeBlockElements3' // DELETED
// Consolidated component (conceptual - will be rendered directly in UserOnBoard for now)
// import UserEventDefaultsPreference from '@pages/OnBoard/OnBoardWizard/UserEventDefaultsPreference'
const lodash_1 = __importDefault(require("lodash"));
const client_1 = require("@apollo/client");
const getUserById_1 = __importDefault(require("@lib/apollo/gql/getUserById"));
const react_native_1 = require("react-native");
const Switch_1 = __importDefault(require("@components/Switch"));
const TextField_1 = __importDefault(require("@components/TextField"));
const EditBreakPreferenceColor_1 = __importDefault(require("@pages/Settings/UserPreferenceWizard/EditBreakPreferenceColor"));
const theme_1 = require("@lib/theme/theme");
const ScheduleHelper_1 = require("@lib/Schedule/ScheduleHelper");
const router_1 = require("next/router");
const user_context_1 = require("@lib/user-context");
const OnBoardHelper3_1 = require("@lib/OnBoard/OnBoardHelper3");
const DEFAULT_START_TIMES = [
    {
        day: 1,
        hour: 7,
        minutes: 0,
    },
    {
        day: 2,
        hour: 7,
        minutes: 0,
    },
    {
        day: 3,
        hour: 7,
        minutes: 0,
    },
    {
        day: 4,
        hour: 7,
        minutes: 0,
    },
    {
        day: 5,
        hour: 7,
        minutes: 0,
    },
    {
        day: 6,
        hour: 7,
        minutes: 0,
    },
    {
        day: 7,
        hour: 7,
        minutes: 0,
    }
];
const DEFAULT_END_TIMES = [
    {
        day: 1,
        hour: 23,
        minutes: 0,
    },
    {
        day: 2,
        hour: 23,
        minutes: 0,
    },
    {
        day: 3,
        hour: 23,
        minutes: 0,
    },
    {
        day: 4,
        hour: 23,
        minutes: 0,
    },
    {
        day: 5,
        hour: 23,
        minutes: 0,
    },
    {
        day: 6,
        hour: 23,
        minutes: 0,
    },
    {
        day: 7,
        hour: 23,
        minutes: 0,
    }
];
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("@config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
const thirdpartyemailpassword_1 = __importDefault(require("supertokens-node/recipe/thirdpartyemailpassword"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    const userInfo = await thirdpartyemailpassword_1.default.getUserById(session.getUserId());
    return {
        props: {
            sub: session.getUserId(),
            email: userInfo?.email,
        }
    };
}
function UserOnBoard(props) {
    const [reminders, setReminders] = (0, react_1.useState)([]);
    const [startTimes, setStartTimes] = (0, react_1.useState)([]);
    const [endTimes, setEndTimes] = (0, react_1.useState)([]);
    const [copyAvailability, setCopyAvailability] = (0, react_1.useState)(false);
    const [copyTimeBlocking, setCopyTimeBlocking] = (0, react_1.useState)(false);
    const [copyTimePreference, setCopyTimePreference] = (0, react_1.useState)(false);
    const [copyReminders, setCopyReminders] = (0, react_1.useState)(false);
    const [copyPriorityLevel, setCopyPriorityLevel] = (0, react_1.useState)(false);
    const [copyModifiable, setCopyModifiable] = (0, react_1.useState)(false);
    const [copyCategories, setCopyCategories] = (0, react_1.useState)(false);
    const [copyIsBreak, setCopyIsBreak] = (0, react_1.useState)(false);
    const [maxWorkLoadPercent, setMaxWorkLoadPercent] = (0, react_1.useState)(85);
    const [minNumberOfBreaks, setMinNumberOfBreaks] = (0, react_1.useState)();
    const [breakLength, setBreakLength] = (0, react_1.useState)();
    const [backToBackMeetings, setBackToBackMeetings] = (0, react_1.useState)(false);
    const [maxNumberOfMeetings, setMaxNumberOfMeetings] = (0, react_1.useState)(6);
    const [copyIsMeeting, setCopyIsMeeting] = (0, react_1.useState)(false);
    const [copyIsExternalMeeting, setCopyIsExternalMeeting] = (0, react_1.useState)(false);
    const [copyColor, setCopyColor] = (0, react_1.useState)(true); // Defaulted to true
    const [activeIndex, setActiveIndex] = (0, react_1.useState)(0);
    const [completedStep, setCompletedStep] = (0, react_1.useState)();
    const [breakColor, setBreakColor] = (0, react_1.useState)('#F7EBF7'); // Default break color
    const [selectedCalendarId, setSelectedCalendarId] = (0, react_1.useState)();
    const [enableSelectColor, setEnableSelectColor] = (0, react_1.useState)(false); // For break color picker
    const [showAdvancedOptions, setShowAdvancedOptions] = (0, react_1.useState)(false); // For advanced options toggle
    const { sub, client } = (0, user_context_1.useAppContext)();
    const { email } = props;
    const { loading, error, data, refetch } = (0, client_1.useQuery)(getUserById_1.default, {
        variables: { id: sub },
    });
    const router = (0, router_1.useRouter)();
    const userId = sub;
    const taskType = router.query?.taskType;
    const user = data?.User_by_pk;
    const toast = (0, react_2.useToast)();
    if (error) {
        toast({
            status: 'error',
            title: 'Error',
            description: 'Oops...',
            duration: 9000,
            isClosable: true,
        });
    }
    (0, react_1.useEffect)(() => {
        (async () => {
            if (!userId && !user) {
                return;
            }
            const user_preferenceDoc = await (0, OnBoardHelper2_1.getUserPreference)(client, userId);
            console.log(user_preferenceDoc?.onBoarded, ' user_preferenceDoc?.onBoarded');
            if (user_preferenceDoc?.onBoarded) {
                console.log(' already onBoarded');
                return taskType
                    ? router.push({ pathname: '/Progress/Todo/UserTask', query: { taskType } })
                    : router.push({ pathname: '/' });
            }
        })();
    }, [client, router, taskType, userId]);
    // getglobal primary calendar if any
    (0, react_1.useEffect)(() => {
        (async () => {
            if (!userId) {
                return;
            }
            const result = await (0, ScheduleHelper_1.getGlobalPrimaryCalendarFunction)(client, userId);
            if (result?.id)
                setSelectedCalendarId(result?.id);
        })();
    }, [client, userId]);
    // generateDefaultCategories
    (0, react_1.useEffect)(() => {
        (async () => {
            if (!user?.id) {
                return;
            }
            await (0, OnBoardHelper2_1.generateDefaultCategories)(client, userId);
        })();
    }, [client, user?.id, userId]);
    // createDefaultUser
    (0, react_1.useEffect)(() => {
        (async () => {
            if (!userId) {
                return;
            }
            await (0, OnBoardHelper2_1.createDefaultUser)(client, userId, email);
            await refetch();
        })();
    }, [client, email, refetch, userId]);
    // createuser_preference
    (0, react_1.useEffect)(() => {
        (async () => {
            if (!user?.id) {
                return;
            }
            const user_preferenceDoc = await (0, OnBoardHelper2_1.getUserPreference)(client, userId);
            if (!user_preferenceDoc?.id) {
                await (0, OnBoardHelper2_1.createUserPreference)(client, userId);
            }
        })();
    }, [client, user?.id, userId]);
    (0, react_1.useEffect)(() => {
        (async () => {
            if (!user?.id) {
                return;
            }
            const chatMeetingPreference = {
                id: (0, uuid_1.v4)(),
                userId,
                timezone: date_utils_1.dayjs.tz.guess(),
                enableConference: true,
                updatedAt: (0, date_utils_1.dayjs)().format(),
                createdDate: (0, date_utils_1.dayjs)().format()
            };
            await (0, OnBoardHelper3_1.upsertChatMeetingPreferencesGivenUserId)(client, chatMeetingPreference);
        })();
    }, [client, user?.id, userId]);
    // createInitialcalendar_integrations
    (0, react_1.useEffect)(() => {
        (async () => {
            if (!user?.id) {
                return;
            }
            await (0, calendar_integrationHelper_1.createInitialCalendarIntegrations)(client, userId);
        })();
    }, [client, user?.id, userId]);
    // createInitialSelectedCalendar
    (0, react_1.useEffect)(() => {
        (async () => {
            if (!user?.id) {
                return;
            }
            await (0, OnBoardHelper2_1.createInitialSelectedCalendar)(client, userId, setSelectedCalendarId);
        })();
    }, [client, user?.id, userId]);
    // get user preferences
    (0, react_1.useEffect)(() => {
        (async () => {
            try {
                if (!user?.id) {
                    return;
                }
                const existinguser_preferences = await (0, OnBoardHelper2_1.getUserPreference)(client, userId);
                setReminders(existinguser_preferences?.reminders);
                setStartTimes(existinguser_preferences?.startTimes || DEFAULT_START_TIMES);
                setEndTimes(existinguser_preferences?.endTimes || DEFAULT_END_TIMES);
                setCopyAvailability(existinguser_preferences?.copyAvailability !== undefined ? existinguser_preferences?.copyAvailability : true);
                setCopyTimeBlocking(existinguser_preferences?.copyTimeBlocking !== undefined ? existinguser_preferences?.copyTimeBlocking : true);
                setCopyTimePreference(existinguser_preferences?.copyTimePreference !== undefined ? existinguser_preferences?.copyTimePreference : true);
                setCopyReminders(existinguser_preferences?.copyReminders !== undefined ? existinguser_preferences?.copyReminders : true);
                setCopyPriorityLevel(existinguser_preferences?.copyPriorityLevel !== undefined ? existinguser_preferences?.copyPriorityLevel : true);
                setCopyModifiable(existinguser_preferences?.copyModifiable !== undefined ? existinguser_preferences?.copyModifiable : true);
                setCopyCategories(existinguser_preferences?.copyCategories !== undefined ? existinguser_preferences?.copyCategories : true);
                setCopyIsBreak(existinguser_preferences?.copyIsBreak !== undefined ? existinguser_preferences?.copyIsBreak : true);
                setMaxWorkLoadPercent(existinguser_preferences?.maxWorkLoadPercent || 85);
                setMinNumberOfBreaks(existinguser_preferences?.minNumberOfBreaks || 1);
                setBreakLength(existinguser_preferences?.breakLength || 30);
                setBackToBackMeetings(existinguser_preferences?.backToBackMeetings !== undefined ? existinguser_preferences?.backToBackMeetings : false);
                setMaxNumberOfMeetings(existinguser_preferences?.maxNumberOfMeetings || 6);
                setCopyIsMeeting(existinguser_preferences?.copyIsMeeting !== undefined ? existinguser_preferences?.copyIsMeeting : true);
                setCopyIsExternalMeeting(existinguser_preferences?.copyIsExternalMeeting !== undefined ? existinguser_preferences?.copyIsExternalMeeting : true);
                setCopyColor(existinguser_preferences?.copyColor !== undefined ? existinguser_preferences?.copyColor : true);
                setBreakColor(existinguser_preferences?.breakColor || '#F7EBF7');
            }
            catch (e) {
                console.log(e, ' error in useEffect for UserCalendarPreferences');
            }
        })();
    }, [client, user?.id, userId]);
    // save reminders
    const saveReminders = async () => {
        try {
            // save
            const existinguser_preferences = await (0, OnBoardHelper2_1.getUserPreference)(client, userId);
            if (!existinguser_preferences) {
                toast({
                    title: 'Error',
                    description: 'Error saving user preferences',
                    status: 'error',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            const upsertUserPreferenceMutation = (0, client_1.gql) `
            mutation InsertUserPreference($userPreference: User_Preference_insert_input!) {
                insert_User_Preference_one(
                    object: $userPreference,
                    on_conflict: {
                    constraint: UserPreference_pkey,
                    update_columns: [
                        ${(reminders?.length > 0)
                && !lodash_1.default.isEqual(reminders, existinguser_preferences?.reminders) ? 'reminders,' : ''}
                        updatedAt,
                    ]
                    }
                ) {
                    id
                    reminders
                    followUp
                    isPublicCalendar
                    publicCalendarCategories
                    startTimes
                    endTimes
                    copyAvailability
                    copyTimeBlocking
                    copyTimePreference
                    copyReminders
                    copyPriorityLevel
                    copyModifiable
                    copyCategories
                    copyIsBreak
                    maxWorkLoadPercent
                    backToBackMeetings
                    maxNumberOfMeetings
                    minNumberOfBreaks
                    breakLength
                    breakColor
                    copyIsMeeting
                    copyIsExternalMeeting
                    copyColor
                    deleted
                    createdDate
                    updatedAt
                    userId
                }
                }`;
            const valuesToUpsert = {
                id: existinguser_preferences?.id,
                userId,
            };
            if ((reminders?.length > 0)
                && !lodash_1.default.isEqual(reminders, existinguser_preferences?.reminders)) {
                valuesToUpsert.reminders = reminders;
            }
            if (valuesToUpsert?.reminders?.length > 0) {
                await client.mutate({
                    mutation: upsertUserPreferenceMutation,
                    variables: {
                        userPreference: valuesToUpsert,
                    },
                });
            }
            console.log('reminders saved');
        }
        catch (e) {
            console.log(e, ' error in saveReminders');
        }
    };
    // save selected Calendar
    // const saveSelectedCalendar = async () => {
    //     try {
    //         // save
    //         await setPrimaryCalendar(client, selectedCalendar as CalendarType)
    //     } catch (e) {
    //         console.log(e, ' error in saveSelectedCalendar')
    //     }
    // }
    // save work day
    const saveWorkDay = async () => {
        try {
            // save
            const existinguser_preferences = await (0, OnBoardHelper2_1.getUserPreference)(client, userId);
            if (!existinguser_preferences) {
                toast({
                    title: 'Error',
                    description: 'Error saving user preferences',
                    status: 'error',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            const upsertUserPreferenceMutation = (0, client_1.gql) `
            mutation InsertUserPreference($userPreference: User_Preference_insert_input!) {
                insert_User_Preference_one(
                    object: $userPreference,
                    on_conflict: {
                    constraint: UserPreference_pkey,
                    update_columns: [
                        ${(startTimes?.length > 0)
                && !lodash_1.default.isEqual(startTimes, existinguser_preferences?.startTimes) ? 'startTimes,' : ''}
                        ${(endTimes?.length > 0)
                && !lodash_1.default.isEqual(endTimes, existinguser_preferences?.endTimes) ? 'endTimes,' : ''}
                        updatedAt,
                    ]
                    }
                ) {
                    id
                    reminders
                    followUp
                    isPublicCalendar
                    publicCalendarCategories
                    startTimes
                    endTimes
                    copyAvailability
                    copyTimeBlocking
                    copyTimePreference
                    copyReminders
                    copyPriorityLevel
                    copyModifiable
                    copyCategories
                    copyIsBreak
                    maxWorkLoadPercent
                    backToBackMeetings
                    maxNumberOfMeetings
                    minNumberOfBreaks
                    breakLength
                    breakColor
                    copyIsMeeting
                    copyIsExternalMeeting
                    copyColor
                    deleted
                    createdDate
                    updatedAt
                    userId
                }
                }`;
            const valuesToUpsert = {
                id: existinguser_preferences?.id,
                userId,
            };
            if ((startTimes?.length > 0)
                && !lodash_1.default.isEqual(startTimes, existinguser_preferences?.startTimes)) {
                valuesToUpsert.startTimes = startTimes;
            }
            if ((endTimes?.length > 0)
                && !lodash_1.default.isEqual(endTimes, existinguser_preferences?.endTimes)) {
                valuesToUpsert.endTimes = endTimes;
            }
            if ((valuesToUpsert?.startTimes?.length > 0) || (valuesToUpsert?.endTimes?.length > 0)) {
                const { data } = await client.mutate({
                    mutation: upsertUserPreferenceMutation,
                    variables: {
                        userPreference: valuesToUpsert,
                    },
                });
                console.log(data, 'updated work day saved');
            }
        }
        catch (e) {
            console.log(e, ' error in saveWorkDay');
        }
    };
    // save user preferences for the consolidated step
    const saveEventDefaultPreferences = async () => {
        try {
            const existinguser_preferences = await (0, OnBoardHelper2_1.getUserPreference)(client, userId);
            if (!existinguser_preferences) {
                toast({
                    title: 'Error',
                    description: 'Error saving user preferences',
                    status: 'error',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            const existinguser_preferences = await (0, OnBoardHelper2_1.getUserPreference)(client, userId);
            if (!existinguser_preferences) {
                toast({
                    title: 'Error',
                    description: 'Error saving user preferences',
                    status: 'error',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            const upsertUserPreferenceMutation = (0, client_1.gql) `
            mutation InsertUserPreference($userPreference: User_Preference_insert_input!) {
                insert_User_Preference_one(
                    object: $userPreference,
                    on_conflict: {
                    constraint: UserPreference_pkey,
                    update_columns: [
                        ${copyColor !== undefined ? 'copyColor,' : ''}
                        ${copyIsMeeting !== undefined ? 'copyIsMeeting,' : ''}
                        ${copyIsExternalMeeting !== undefined ? 'copyIsExternalMeeting,' : ''}
                        ${backToBackMeetings !== undefined ? 'backToBackMeetings,' : ''}
                        ${breakColor !== undefined ? 'breakColor,' : ''}
                        updatedAt,
                    ]
                    }
                ) {
                    id
                    reminders
                    followUp
                    isPublicCalendar
                    publicCalendarCategories
                    startTimes
                    endTimes
                    copyAvailability
                    copyTimeBlocking
                    copyTimePreference
                    copyReminders
                    copyPriorityLevel
                    copyModifiable
                    copyCategories
                    copyIsBreak
                    maxWorkLoadPercent
                    backToBackMeetings
                    maxNumberOfMeetings
                    minNumberOfBreaks
                    breakLength
                    breakColor
                    copyIsMeeting
                    copyIsExternalMeeting
                    copyColor
                    deleted
                    createdDate
                    updatedAt
                    userId
                }
                }`;
            const valuesToUpsert = {
                id: existinguser_preferences?.id,
                userId,
            };
            if (copyColor !== undefined) {
                valuesToUpsert.copyColor = copyColor;
            }
            if (copyIsMeeting !== undefined) {
                valuesToUpsert.copyIsMeeting = copyIsMeeting;
            }
            if (copyIsExternalMeeting !== undefined) {
                valuesToUpsert.copyIsExternalMeeting = copyIsExternalMeeting;
            }
            if (backToBackMeetings !== undefined) {
                valuesToUpsert.backToBackMeetings = backToBackMeetings;
            }
            if (breakColor !== undefined) {
                valuesToUpsert.breakColor = breakColor;
            }
            await client.mutate({
                mutation: upsertUserPreferenceMutation,
                variables: {
                    userPreference: valuesToUpsert,
                },
            });
        }
        catch (e) {
            console.log(e, ' error in saveuser_preferencesTimeBlock3');
        }
    };
    const onActiveIndexChanged = (index) => setActiveIndex(index);
    const goToPrevStep = () => {
        const prevActiveIndex = activeIndex;
        const newActiveIndex = prevActiveIndex === 0 ? 0 : prevActiveIndex - 1;
        setActiveIndex(newActiveIndex);
    };
    const renderPrevButton = () => {
        if (activeIndex === 0) {
            return (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' } });
        }
        return ((0, jsx_runtime_1.jsx)(Box_1.default, { mb: { phone: 's', tablet: 'm' }, ml: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: goToPrevStep, children: "Back" }) }));
    };
    const goToNextStep = async () => {
        try {
            /*
                0 - Intro message
                1 - UserEnableIntegrations
                2 - UserSelectPrimaryCalendar
                3 - UserAddTags
                4 - UserDefaultAlarms
                5 - UserWorkDay
                6 - UserEventDefaultsPreference (New Consolidated Step)
                7 - Exit message (Previously 9)
            */
            const prevActiveIndex = activeIndex;
            const prevCompletedStep = completedStep;
            // Adjusted exit condition due to reduced steps
            if (prevActiveIndex === 7) {
                return;
            }
            // if (prevActiveIndex === 2) {
            //     await saveSelectedCalendar()
            // }
            if (prevActiveIndex === 4) { // UserDefaultAlarms
                await saveReminders();
            }
            if (prevActiveIndex === 5) { // UserWorkDay
                console.log(startTimes, ' startTimes in parent');
                await saveWorkDay();
            }
            if (prevActiveIndex === 6) { // New consolidated step: UserEventDefaultsPreference
                await saveEventDefaultPreferences();
            }
            let newActiveIndex = prevActiveIndex + 1;
            if (!prevCompletedStep || (prevCompletedStep < prevActiveIndex)) {
                const newCompletedStep = prevActiveIndex;
                setCompletedStep(newCompletedStep);
            }
            if (newActiveIndex !== prevActiveIndex) {
                setActiveIndex(newActiveIndex);
            }
        }
        catch (e) {
            console.log(e, ' error in goToNextStep');
        }
    };
    const renderNextButton = () => {
        // Adjusted condition due to reduced steps
        if (activeIndex === 7) {
            return (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' } });
        }
        return ((0, jsx_runtime_1.jsx)(Box_1.default, { mb: { phone: 's', tablet: 'm' }, mr: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: goToNextStep, children: "Next" }) }));
    };
    const completeOnboarding = async () => {
        // Ensure preferences are saved if user jumps to complete from the last settings step
        if (activeIndex === 6) {
            await saveEventDefaultPreferences();
        }
        await (0, OnBoardHelper2_1.updateUserPreferenceOnBoarded)(client, userId, true);
        if (taskType) {
            router.push({ pathname: '/Progress/Todo/UserTask', query: { taskType } });
        }
        else {
            router.push('/');
        }
    };
    const renderCurrentStep = () => {
        switch (activeIndex) {
            case 0:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, justifyContent: "center", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subheader", p: { phone: 'm', tablet: 'l' }, children: "Welcome to Atomic! Let's Get You Set Up." }), (0, jsx_runtime_1.jsxs)(Box_1.default, { p: { phone: 'm', tablet: 'l' }, children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", p: { phone: 'm', tablet: 'l' }, children: "This quick setup wizard will personalize Atomic to your work style." }), (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", p: { phone: 'm', tablet: 'l' }, children: "The preferences you set here will power Atomic's intelligent scheduling assistance, helping you save time and stay organized." }), (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", p: { phone: 'm', tablet: 'l' }, children: "You can always adjust these settings later." }), (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", p: { phone: 'm', tablet: 'l' }, children: "For example, soon you'll be able to tell Atomic things like: 'Schedule two project update meetings next Monday morning.'" })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, p: { phone: 'l', tablet: 'xl' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Box_1.default, {}), renderNextButton()] })] }));
            case 1:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, flex: 1, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(UserEnableIntegrations_1.default, { sub: userId, client: client }) }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [renderPrevButton(), renderNextButton()] })] }));
            case 2:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(UserSelectPrimaryCalendar_1.default, { selectedCalendarId: selectedCalendarId, userId: userId, setParentSelectedCalendarId: setSelectedCalendarId, client: client }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [renderPrevButton(), renderNextButton()] })] }));
            case 3:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(UserAddTags_1.default, { sub: userId, client: client }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [renderPrevButton(), renderNextButton()] })] }));
            case 4:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(UserDefaultAlarms_1.default, { reminders: reminders, setParentReminders: setReminders }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [renderPrevButton(), renderNextButton()] })] }));
            case 5:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(UserWorkDay_1.default, { startTimes: startTimes, setParentStartTimes: setStartTimes, endTimes: endTimes, setParentEndTimes: setEndTimes }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [renderPrevButton(), renderNextButton()] })] }));
            case 6: // New Consolidated Step: Customize Event Defaults
                if (enableSelectColor) { // For break color picker
                    return ((0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: (0, jsx_runtime_1.jsx)(EditBreakPreferenceColor_1.default, { breakColor: breakColor, setParentBreakColor: setBreakColor, setParentEnableSelectColor: setEnableSelectColor }) }));
                }
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsxs)(react_native_1.ScrollView, { style: { width: '100%' }, contentContainerStyle: { width: '100%', justifyContent: 'center', alignItems: 'center' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { p: "m", width: "90%", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { textAlign: "center", variant: "optionHeader", children: "Customize your event defaults. These settings help Atomic intelligently schedule and manage your time." }) }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Maximum daily workload percentage:" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { type: "number", onChange: (e) => setMaxWorkLoadPercent(parseInt(e?.target?.value.replace(/[^0-9.]/g, ''), 10)), value: `${maxWorkLoadPercent}`, placeholder: "85", trailingAccessory: ((0, jsx_runtime_1.jsx)(Text_1.default, { pl: { phone: 's', tablet: 'm' }, variant: "cardTitle", children: "%" })) }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Minimum number of daily breaks:" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { type: "number", onChange: (e) => setMinNumberOfBreaks(parseInt(e?.target?.value.replace(/[^0-9.]/g, ''), 10)), value: `${minNumberOfBreaks}`, placeholder: "1" }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Default break length (minutes):" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { type: "number", onChange: (e) => setBreakLength(parseInt(e?.target?.value.replace(/[^0-9.]/g, ''), 10)), value: `${breakLength}`, placeholder: "30", trailingAccessory: ((0, jsx_runtime_1.jsx)(Text_1.default, { pl: { phone: 's', tablet: 'm' }, variant: "cardTitle", children: "minutes" })) }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Allow back-to-back meetings?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: backToBackMeetings, onValueChange: setBackToBackMeetings }) })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Default break color:" }), (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: () => setEnableSelectColor(true), children: (0, jsx_runtime_1.jsx)(Box_1.default, { width: 20, height: 20, style: { backgroundColor: breakColor, borderRadius: 10, borderWidth: 1, borderColor: theme_1.palette.text } }) })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, mt: "l", children: (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: () => setShowAdvancedOptions(!showAdvancedOptions), children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", textAlign: "center", children: showAdvancedOptions ? 'Hide Advanced Options' : 'Show Advanced Options' }) }) }), showAdvancedOptions && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, mt: "m", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subheader", textAlign: "center", children: "Auto-Copy Settings" }), (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "body", textAlign: "center", mt: "s", children: "These settings allow Atomic to learn from your past events to speed up future event creation." })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { flexShrink: 1, marginRight: 's' }, children: "Reuse 'Busy/Free' status from similar events?" }), (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyAvailability, onValueChange: setCopyAvailability })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { flexShrink: 1, marginRight: 's' }, children: "Reuse buffer times (before/after) from similar events?" }), (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyTimeBlocking, onValueChange: setCopyTimeBlocking })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { flexShrink: 1, marginRight: 's' }, children: "Reuse time preferences (e.g., morning, afternoon) for similar events?" }), (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyTimePreference, onValueChange: setCopyTimePreference })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { flexShrink: 1, marginRight: 's' }, children: "Reuse reminder settings for similar events?" }), (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyReminders, onValueChange: setCopyReminders })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { flexShrink: 1, marginRight: 's' }, children: "Reuse priority levels for similar tasks/events?" }), (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyPriorityLevel, onValueChange: setCopyPriorityLevel })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { flexShrink: 1, marginRight: 's' }, children: "Reuse 'modifiable by assistant' setting for similar events?" }), (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyModifiable, onValueChange: setCopyModifiable })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { flexShrink: 1, marginRight: 's' }, children: "Reuse tags/categories for similar events?" }), (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyCategories, onValueChange: setCopyCategories })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { flexShrink: 1, marginRight: 's' }, children: "Mark similar future events as breaks if original was a break?" }), (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyIsBreak, onValueChange: setCopyIsBreak })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { flexShrink: 1, marginRight: 's' }, children: "Mark similar future events as meetings if original was a meeting?" }), (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyIsMeeting, onValueChange: setCopyIsMeeting })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { flexShrink: 1, marginRight: 's' }, children: "Mark similar as external meetings if original was external?" }), (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyIsExternalMeeting, onValueChange: setCopyIsExternalMeeting })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { flexShrink: 1, marginRight: 's' }, children: "Reuse event background color for similar new events?" }), (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyColor, onValueChange: setCopyColor })] }) })] }))] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", mt: "m", children: [renderPrevButton(), renderNextButton()] })] }));
            case 7: // Previously 9 (Exit Message)
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { p: { phone: 's', tablet: 'm' }, variant: "subheader", textAlign: "center", children: "You are almost done!" }), (0, jsx_runtime_1.jsx)(Text_1.default, { p: { phone: 's', tablet: 'm' }, variant: "optionHeader", textAlign: "center", children: "Finalize your choices by pressing below." }), (0, jsx_runtime_1.jsx)(Text_1.default, { p: { phone: 's', tablet: 'm' }, variant: "optionHeader", textAlign: "center", children: "Atomic is now set up to intelligently assist you with scheduling, thanks to the preferences you've provided!" }), (0, jsx_runtime_1.jsx)(Text_1.default, { p: { phone: 's', tablet: 'm' }, variant: "optionHeader", textAlign: "center", children: "P.S. Once you're in, explore Task Management to track your to-dos and our built-in Chat for quick discussions!" }), (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: completeOnboarding, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", textAlign: "center", children: "Complete Onboarding" }) })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 's', tablet: 'm' }, flexDirection: "row", justifyContent: "flex-start", width: "100%", children: renderPrevButton() })] }));
            default:
                return ((0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(RegularCard_1.default, { children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "header", children: "Oops... something went wrong" }) }) }));
        }
    };
    const darkMode = (0, react_native_1.useColorScheme)() === 'dark';
    if (loading) {
        return ((0, jsx_runtime_1.jsx)(Box_1.default, { backgroundColor: "primaryCardBackground", flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, minHeight: "80vh", children: (0, jsx_runtime_1.jsx)(react_native_1.ActivityIndicator, { size: "large", color: darkMode ? theme_1.palette.textBlack : theme_1.palette.white }) }));
    }
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", minHeight: "70vh", children: [(0, jsx_runtime_1.jsx)(Wizard_1.default, { items: [
                    {
                        index: 0,
                        label: 'Welcome',
                    },
                    {
                        index: 1,
                        label: 'Integrations',
                    },
                    {
                        index: 2,
                        label: 'Calendar',
                    },
                    {
                        index: 3,
                        label: 'Tags',
                    },
                    {
                        index: 4,
                        label: 'Alarms',
                    },
                    {
                        index: 5,
                        label: 'Work Hours',
                    },
                    {
                        index: 6,
                        label: 'Event Defaults', // Consolidated step
                    },
                    {
                        index: 7, // Previously 9
                        label: 'All Done!',
                    },
                ], completed: completedStep, activeIndex: activeIndex }), renderCurrentStep()] }));
}
exports.default = UserOnBoard;
//# sourceMappingURL=data:application/json;base64,