"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const TextField_1 = __importDefault(require("@components/TextField"));
const date_utils_1 = require("@lib/date-utils");
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const UserCreateCalendarHelper_1 = require("@lib/Calendar/UserCreateCalendarHelper");
const UserEditCalendarHelper_1 = require("@lib/Calendar/UserEditCalendarHelper");
const react_2 = require("@chakra-ui/react");
const Button_1 = __importDefault(require("@components/Button"));
const listCategoriesForEventId_1 = __importDefault(require("@lib/apollo/gql/listCategoriesForEventId"));
const listRemindersForEventId_1 = __importDefault(require("@lib/apollo/gql/listRemindersForEventId"));
const updateEventForPreEventId_1 = __importDefault(require("@lib/apollo/gql/updateEventForPreEventId"));
const updateEventForPostEventId_1 = __importDefault(require("@lib/apollo/gql/updateEventForPostEventId"));
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function UserPreAndPostForEventModal(props) {
    const [beforeEventMinutes, setBeforeEventMinutes] = (0, react_1.useState)(props?.event?.timeBlocking?.beforeEvent ?? 0);
    const [afterEventMinutes, setAfterEventMinutes] = (0, react_1.useState)(props?.event?.timeBlocking?.afterEvent ?? 0);
    const [pageOffset, setPageOffset] = (0, react_1.useState)(0);
    const event = props?.event;
    const client = props?.client;
    console.log(event?.id, ' event id inside userpreandpostforeventmodal');
    console.log(event?.timeBlocking, ' event?.timeBlocking inside userpreandpostforeventmodal');
    console.log(beforeEventMinutes, ' beforeEventMinutes');
    console.log(event?.preEventId, ' event?.preEventId');
    console.log(event?.postEventId, ' event?.postEventId');
    console.log(afterEventMinutes, ' afterEventMinutes');
    const toast = (0, react_2.useToast)();
    (0, react_1.useEffect)(() => {
        if ((props?.event?.timeBlocking?.beforeEvent > 0) && (props?.event?.timeBlocking?.beforeEvent !== beforeEventMinutes)) {
            setBeforeEventMinutes(props?.event?.timeBlocking?.beforeEvent);
        }
    }, [beforeEventMinutes, props?.event?.timeBlocking?.beforeEvent]);
    (0, react_1.useEffect)(() => {
        if ((props?.event?.timeBlocking?.afterEvent > 0) && (props?.event?.timeBlocking?.afterEvent !== afterEventMinutes)) {
            setAfterEventMinutes(props?.event?.timeBlocking?.afterEvent);
        }
    }, [afterEventMinutes, props?.event?.timeBlocking?.afterEvent]);
    const createEvent = async (minutes, eventType) => {
        try {
            // validate
            if (minutes === 0) {
                toast({
                    status: 'error',
                    title: 'Please enter a valid time',
                    description: 'Please enter a valid time',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            if (event?.allDay) {
                toast({
                    title: 'All day event',
                    description: 'All day events cannot have prep or debrief events',
                    status: 'success',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            const categoryIds = (await client.query({
                query: listCategoriesForEventId_1.default,
                variables: {
                    eventId: event?.id,
                },
            }))?.data?.Category?.map(c => c?.id);
            const reminders = (await client.query({
                query: listRemindersForEventId_1.default,
                variables: {
                    eventId: event.id,
                },
            })).data?.Reminder?.map(r => r.minutes);
            if (eventType === 'pre') {
                const id = await (0, UserCreateCalendarHelper_1.createNewEvent)((0, date_utils_1.dayjs)(event.startDate).subtract(minutes, 'minute').format(), (0, date_utils_1.dayjs)(event.startDate).format(), event?.userId, client, event?.calendarId, categoryIds, 'Buffer time', false, undefined, undefined, undefined, reminders, 'Buffer time', event?.location, false, true, false, true, false, false, false, false, event?.timezone, undefined, undefined, undefined, undefined, undefined, event?.id, false, false, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, 'opaque', undefined, undefined, undefined, undefined, event?.colorId, event?.originalTimezone, event?.backgroundColor, event?.foregroundColor, event?.useDefaultAlarms, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, true, true, true, true, true, true, true, true, undefined, undefined, undefined, undefined, true, true, minutes, undefined, true, 'create', undefined);
                console.log(id, ' eventId inside pre createEvent');
                if (id) {
                    // setPreEventId(eventId)
                    return updateForEvent(id, eventType, minutes);
                }
                else {
                    toast({
                        title: 'Error creating prep event',
                        description: 'Error creating prep event',
                        status: 'error',
                        duration: 9000,
                        isClosable: true,
                    });
                }
            }
            else if (eventType == 'post') {
                const id = await (0, UserCreateCalendarHelper_1.createNewEvent)((0, date_utils_1.dayjs)(event.endDate).format(), (0, date_utils_1.dayjs)(event.endDate).add(minutes, 'minute').format(), event?.userId, client, event?.calendarId, categoryIds, 'Buffer time', false, undefined, undefined, undefined, reminders, 'Buffer time', event?.location, false, false, true, true, false, false, false, false, event?.timezone, undefined, undefined, undefined, undefined, undefined, event?.id, false, false, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, 'Buffer time', 'opaque', undefined, undefined, undefined, undefined, event?.colorId, event?.originalTimezone, event?.backgroundColor, event?.foregroundColor, event?.useDefaultAlarms, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, true, true, true, true, true, true, undefined, undefined, undefined, undefined, undefined, true, minutes, undefined, true, 'create', undefined);
                console.log(id, ' eventId inside post createEvent');
                if (id) {
                    // setPostEventId(eventId)
                    return updateForEvent(id, eventType, undefined, minutes);
                }
                else {
                    toast({
                        title: 'Error creating debrief event',
                        description: 'Error creating debrief event',
                        status: 'error',
                        duration: 9000,
                        isClosable: true,
                    });
                }
            }
        }
        catch (e) {
            console.log(e, ' unable to create event');
        }
    };
    const updateForEvent = async (id, eventType, beforeMinutes, afterMinutes) => {
        console.log(id, ' id inside updateForEvent');
        try {
            if (eventType === 'pre') {
                await client.mutate({
                    mutation: updateEventForPreEventId_1.default,
                    variables: {
                        id: event?.id,
                        preEventId: id,
                        timeBlocking: {
                            beforeEvent: beforeMinutes || beforeEventMinutes,
                            afterEvent: afterMinutes || afterEventMinutes || event?.timeBlocking?.afterEvent || 0,
                        }
                    },
                });
            }
            else if (eventType === 'post') {
                await client.mutate({
                    mutation: updateEventForPostEventId_1.default,
                    variables: {
                        id: event?.id,
                        postEventId: id,
                        timeBlocking: {
                            beforeEvent: beforeMinutes || beforeEventMinutes || event?.timeBlocking?.beforeEvent || 0,
                            afterEvent: afterMinutes || afterEventMinutes,
                        }
                    },
                });
            }
        }
        catch (e) {
            console.log(e, 'Error updating existing event for prep/debrief');
            toast({
                title: 'Error updating event',
                description: 'Error updating event',
                status: 'error',
                duration: 9000,
                isClosable: true,
            });
        }
    };
    const updateLocalEvent = async (id, minutes, eventType) => {
        try {
            // validate
            if (minutes === 0) {
                toast({
                    status: 'error',
                    title: 'Please enter a valid time',
                    description: 'Please enter a valid time',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            if (event?.allDay) {
                toast({
                    title: 'All day event',
                    description: 'All day events cannot have prep or debrief events',
                    status: 'success',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            const categoryIds = (await client.query({
                query: listCategoriesForEventId_1.default,
                variables: {
                    eventId: event?.id,
                },
            }))?.data?.Category?.map(c => c?.id);
            const reminders = (await client.query({
                query: listRemindersForEventId_1.default,
                variables: {
                    eventId: event.id,
                },
            })).data?.Reminder?.map(r => r.minutes);
            if (eventType === 'pre') {
                await (0, UserEditCalendarHelper_1.updateEvent)(id, (0, date_utils_1.dayjs)(event.startDate).subtract(minutes, 'minute').format(), (0, date_utils_1.dayjs)(event.startDate).format(), event?.userId, client, event?.calendarId, categoryIds, 'Buffer time', false, undefined, undefined, undefined, reminders, 'Buffer time', event?.location, false, true, false, true, false, false, false, false, event?.timezone, undefined, undefined, undefined, undefined, undefined, event?.id, false, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, 'Buffer time', 'opaque', undefined, undefined, undefined, undefined, event?.colorId, event?.originalTimezone, event?.backgroundColor, event?.foregroundColor, event?.useDefaultAlarms, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, true, true, true, true, true, true, true, true, undefined, undefined, undefined, undefined, true, true, minutes, undefined, true, 'update', true);
                return updateForEvent(id, eventType, minutes);
            }
            else if (eventType === 'post') {
                await (0, UserEditCalendarHelper_1.updateEvent)(id, (0, date_utils_1.dayjs)(event.endDate).format(), (0, date_utils_1.dayjs)(event.endDate).add(minutes, 'minute').format(), event?.userId, client, event?.calendarId, categoryIds, 'Buffer time', false, undefined, undefined, undefined, reminders, 'Buffer time', event?.location, false, false, true, true, false, false, false, false, event?.timezone, undefined, undefined, undefined, undefined, undefined, event?.id, false, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, 'Buffer time', 'opaque', undefined, undefined, undefined, undefined, event?.colorId, event?.originalTimezone, event?.backgroundColor, event?.foregroundColor, event?.useDefaultAlarms, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, true, undefined, undefined, true, true, true, true, true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, true, 'update', true);
                return updateForEvent(id, eventType, undefined, minutes);
            }
        }
        catch (e) {
            console.log(e, 'Error updating existing event for prep/debrief');
            toast({
                title: 'Error updating event',
                description: 'Error updating event',
                status: 'error',
                duration: 9000,
                isClosable: true,
            });
        }
    };
    const onBeforeEventMinutesChange = (e) => {
        setBeforeEventMinutes(parseInt(e?.target?.value.replace(/[^0-9.]/g, ''), 10));
    };
    const onAfterEventMinutesChange = (e) => {
        setAfterEventMinutes(parseInt(e?.target?.value.replace(/[^0-9.]/g, ''), 10));
    };
    const onSubmit = async () => {
        try {
            const promises = [];
            if (event?.preEventId
                && (beforeEventMinutes > 0)
                && (event?.timeBlocking?.beforeEvent !== beforeEventMinutes)) {
                console.log(event?.id, event?.preEventId, ' event?.id, event?.preEventId inside onSubmit');
                promises.push(updateLocalEvent(event?.preEventId, beforeEventMinutes, 'pre'));
            }
            if (event?.postEventId
                && (afterEventMinutes > 0)
                && (event?.timeBlocking?.afterEvent !== afterEventMinutes)) {
                console.log(event?.id, event?.postEventId, ' event?.id, event?.postEventId inside onSubmit');
                promises.push(updateLocalEvent(event?.postEventId, afterEventMinutes, 'post'));
            }
            if (!event?.preEventId && (beforeEventMinutes > 0)) {
                console.log(beforeEventMinutes, ' beforeEventMinutes inside onSubmit');
                promises.push(createEvent(beforeEventMinutes, 'pre'));
            }
            if (!event?.postEventId && (afterEventMinutes > 0)) {
                console.log(afterEventMinutes, ' afterEventMinutes inside onSubmit');
                promises.push(createEvent(afterEventMinutes, 'post'));
            }
            await Promise.all(promises);
            props.hidePrepAndReview();
        }
        catch (e) {
            console.log(e, ' Error updating event');
            toast({
                title: 'Error updating event',
                description: 'Error updating event',
                status: 'error',
                duration: 9000,
                isClosable: true,
            });
        }
    };
    return ((0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { flex: 1, width: '100%' }, children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Prep time before event:" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Minutes", value: `${beforeEventMinutes}`, onChange: onBeforeEventMinutesChange, type: "number" }) })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Review time after event:" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Minutes", value: `${afterEventMinutes}`, onChange: onAfterEventMinutesChange, type: "number" }) })] }) })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: onSubmit, children: "Submit" }) }), (0, jsx_runtime_1.jsx)("button", { className: "btn btn-link no-underline hover:no-underline", onClick: props.hidePrepAndReview, children: "Close" })] }) }));
}
exports.default = UserPreAndPostForEventModal;
//# sourceMappingURL=data:application/json;base64,