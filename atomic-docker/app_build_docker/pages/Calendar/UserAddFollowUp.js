"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const date_utils_1 = require("@lib/date-utils");
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const Button_1 = __importDefault(require("@components/Button"));
const UserCreateCalendarHelper_1 = require("@lib/Calendar/UserCreateCalendarHelper");
const TextField_1 = __importDefault(require("@components/TextField"));
const react_native_1 = require("react-native");
// import DatePicker from 'react-native-date-picker';
// import DateTimePicker from 'react-datetime-picker/dist/entry.nostyle'
const react_3 = require("@chakra-ui/react");
const listCategoriesForEventId_1 = __importDefault(require("@lib/apollo/gql/listCategoriesForEventId"));
const listRemindersForEventId_1 = __importDefault(require("@lib/apollo/gql/listRemindersForEventId"));
const getConferenceById_1 = __importDefault(require("@lib/apollo/gql/getConferenceById"));
const listAttendeesByEventId_1 = __importDefault(require("@lib/apollo/gql/listAttendeesByEventId"));
const calendarDbHelper_1 = require("@lib/calendarLib/calendarDbHelper");
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function UserAddFollowUp(props) {
    const [event, setEvent] = (0, react_1.useState)();
    const [title, setTitle] = (0, react_1.useState)('');
    const [description, setDescription] = (0, react_1.useState)('');
    const [startDate, setStartDate] = (0, react_1.useState)(new Date());
    const [duration, setDuration] = (0, react_1.useState)(0);
    const [isStartDatePicker, setIsStartDatePicker] = (0, react_1.useState)(false);
    const [pageOffset, setPageOffset] = (0, react_1.useState)(0);
    const { height: fullHeight } = react_native_1.Dimensions.get('window');
    const client = props?.client;
    const userId = props?.sub;
    const eventId = props?.id;
    const toast = (0, react_2.useToast)();
    // const dark = useColorScheme() === 'dark'
    const closeAddFollowUp = props?.closeAddFollowUp;
    (0, react_1.useEffect)(() => {
        (async () => {
            try {
                if (!eventId) {
                    toast({
                        title: 'Something went wrong',
                        description: 'Please try again',
                        status: 'error',
                        duration: 9000,
                        isClosable: true,
                    });
                    console.log('no eventId inside UserAddFollowUp');
                    return;
                }
                const event = await (0, calendarDbHelper_1.getEventWithId)(client, eventId);
                if (event?.id) {
                    setEvent(event);
                    setTitle('Follow up to ' + (event.title || event?.summary));
                    setDescription(event.notes);
                    if (event?.duration) {
                        setDuration(duration);
                    }
                    else {
                        const duration = (0, date_utils_1.dayjs)(event.endDate).diff((0, date_utils_1.dayjs)(event.startDate), 'minute');
                        setDuration(duration);
                    }
                    setStartDate(new Date(event.endDate));
                }
                else {
                    toast({
                        status: 'error',
                        title: 'Event not found',
                        description: 'Please try again',
                        duration: 9000,
                        isClosable: true,
                    });
                }
            }
            catch (e) {
                console.log(e, 'error getting event inside useEffect of UserAddFollowUp');
                toast({
                    status: 'error',
                    title: 'Error getting event',
                    description: 'Please try again',
                    duration: 9000,
                    isClosable: true,
                });
            }
        })();
    }, [client, duration, eventId]);
    const hideStartDatePicker = () => {
        setIsStartDatePicker(false);
    };
    const showStartDatePicker = () => {
        setIsStartDatePicker(true);
    };
    const handleSubmit = async () => {
        try {
            // validate
            if (!startDate || !duration) {
                toast({
                    status: 'error',
                    title: 'All fields required',
                    description: 'Please fill in all fields',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            if (!event?.id) {
                toast({
                    status: 'error',
                    title: 'Event not found',
                    description: 'Please try again',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            const categoryIds = (await client.query({
                query: listCategoriesForEventId_1.default,
                variables: {
                    eventId: event.id,
                },
            })).data?.Category?.map(c => c.id);
            const reminders = (await client.query({
                query: listRemindersForEventId_1.default,
                variables: {
                    eventId: event.id,
                },
            })).data?.Reminder?.map(r => r.minutes);
            let conference;
            if (event?.conferenceId) {
                conference = (await client.query({
                    query: getConferenceById_1.default,
                    variables: {
                        id: event.conferenceId,
                    },
                })).data?.Conference_by_pk;
            }
            const attendees = (await client.query({
                query: listAttendeesByEventId_1.default,
                variables: {
                    eventId: event.id,
                },
            })).data?.Attendee;
            await (0, UserCreateCalendarHelper_1.createNewEvent)((0, date_utils_1.dayjs)(startDate).toISOString(), (0, date_utils_1.dayjs)(startDate).add(duration, 'minute').toISOString(), event?.userId, client, event?.calendarId, categoryIds, title, event?.allDay, undefined, undefined, undefined, reminders, description, event?.location, true, event?.isPreEvent, event?.isPostEvent, event?.modifiable, event?.anyoneCanAddSelf, event?.guestsCanInviteOthers, event?.guestsCanSeeOtherGuests, event?.originalAllDay, event?.timezone, event?.taskId, event?.taskType, event?.followUpEventId, event?.preEventId, event?.postEventId, event?.forEventId, conference?.app === 'zoom', conference?.app === 'google', conference?.type, (conference?.app === 'zoom') && conference?.entryPoints?.find((e) => e?.entryPointType === 'video')?.password, conference?.zoomPrivateMeeting, attendees, event?.conferenceId, event?.maxAttendees, event?.sendUpdates, event?.status, event?.summary || title, event?.transparency, event?.visibility, undefined, undefined, event?.htmlLink, event?.colorId, event?.originalTimezone, event?.backgroundColor, event?.foregroundColor, event?.useDefaultAlarms, event?.positiveImpactScore, event?.negativeImpactScore, event?.positiveImpactDayOfWeek, event?.positiveImpactTime, event?.negativeImpactDayOfWeek, event?.negativeImpactTime, event?.preferredDayOfWeek, event?.preferredTime, event?.isExternalMeeting, event?.isExternalMeeting, event?.isMeetingModifiable, event?.isMeeting, event?.dailyTaskList, event?.weeklyTaskList, event?.isBreak, event?.preferredStartTimeRange, event?.preferredEndTimeRange, event?.copyAvailability, event?.copyTimeBlocking, event?.copyTimePreference, event?.copyReminders, event?.copyPriorityLevel, event?.copyModifiable, event?.copyCategories, event?.copyIsBreak, event?.timeBlocking, event?.userModifiedAvailability, event?.userModifiedTimeBlocking, event?.userModifiedTimePreference, event?.userModifiedReminders, event?.userModifiedPriorityLevel, event?.userModifiedCategories, event?.userModifiedModifiable, event?.userModifiedIsBreak, event?.hardDeadline, event?.softDeadline, event?.copyIsMeeting, event?.copyIsExternalMeeting, event?.userModifiedIsMeeting, event?.userModifiedIsExternalMeeting, event?.duration, event?.copyDuration, event?.userModifiedDuration, event?.method, event?.unlink, event?.byWeekDay);
            toast({
                status: 'success',
                title: 'Follow up event created',
                description: title || event?.summary || '',
                duration: 9000,
                isClosable: true,
            });
            closeAddFollowUp();
        }
        catch (e) {
            console.log(e, 'error in handleSubmit of UserAddFollowUp');
            toast({
                status: 'error',
                title: 'Error adding follow up',
                description: 'Please try again',
                duration: 9000,
                isClosable: true,
            });
        }
    };
    return ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, style: { width: '100%' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { flex: 1, width: '100%' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, alignItems: "flex-start", children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Title", placeholder: "title", onChange: (e) => setTitle(e?.target?.value), value: title || '' }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, alignItems: "flex-start", children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Notes", onChange: (e) => setDescription(e?.target?.value), value: description || '', numberOfLines: 3, multiline: true }) }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, alignItems: "flex-start", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Start" }), (0, jsx_runtime_1.jsx)(react_3.Input, { placeholder: "Select Date and Time", size: "md", type: "datetime-local", onChange: (e) => {
                                setStartDate((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").toDate());
                            }, value: (0, date_utils_1.dayjs)(startDate).format("YYYY-MM-DDTHH:mm") })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, alignItems: "flex-start", children: (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Duration (minutes)", type: "number", onChange: (e) => setDuration(parseInt(e?.target?.value.replace(/[^0-9.]/g, ''), 10)), value: `${duration}`, placeholder: "1" }) }) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { children: [(0, jsx_runtime_1.jsx)(Button_1.default, { onClick: handleSubmit, children: "Submit" }), (0, jsx_runtime_1.jsx)("button", { className: "btn btn-link no-underline hover:no-underline", onClick: closeAddFollowUp, children: "Close" })] }) })] }) }));
}
exports.default = UserAddFollowUp;
//# sourceMappingURL=data:application/json;base64,