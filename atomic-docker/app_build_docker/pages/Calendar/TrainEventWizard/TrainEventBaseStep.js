"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const Switch_1 = __importDefault(require("@components/Switch"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function TrainEventBaseStep(props) {
    const [copyAvailability, setCopyAvailability] = (0, react_1.useState)(props?.copyAvailability ?? false);
    const [copyTimeBlocking, setCopyTimeBlocking] = (0, react_1.useState)(props?.copyTimeBlocking ?? false);
    const [copyTimePreference, setCopyTimePreference] = (0, react_1.useState)(props?.copyTimePreference ?? false);
    // const [enablePreferredTime, setEnablePreferredTime] = useState<boolean>(props?.enablePreferredTime ?? false)
    const [isMessage1, setIsMessage1] = (0, react_1.useState)(false);
    const [isMessage2, setIsMessage2] = (0, react_1.useState)(false);
    const setParentCopyAvailability = props?.setParentCopyAvailability;
    const setParentCopyTimeBlocking = props?.setParentCopyTimeBlocking;
    const setParentCopyTimePreference = props?.setParentCopyTimePreference;
    // const setParentEnablePreferredTime = props?.setParentEnablePreferredTime
    // console.log(props?.enablePreferredTime, '   props?.enablePreferredTime')
    const changeCopyAvailability = (value) => {
        setCopyAvailability(value);
        setParentCopyAvailability(value);
    };
    const changeCopyTimeBlocking = (value) => {
        setCopyTimeBlocking(value);
        setParentCopyTimeBlocking(value);
    };
    const changeCopyTimePreference = (value) => {
        setCopyTimePreference(value);
        setParentCopyTimePreference(value);
    };
    // const changeEnablePreferredTime = (value: boolean) => {
    //     setEnablePreferredTime(value)
    //     setParentEnablePreferredTime(value)
    // }
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '95%' }, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(react_2.Tooltip, { hasArrow: true, label: 'Event availability shown in your calendar will be copied over to any new events whose details are similar to this one. Helpful for task events that are synced or created inside Atomic.', bg: 'purple.700', color: 'white', children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", children: "Copy over transparency of event to any new events whose details have similar context? (Hint)" }) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyAvailability || props?.copyAvailability, onValueChange: changeCopyAvailability, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '95%' }, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(react_2.Tooltip, { hasArrow: true, label: 'Blocked time for before and after the event will be copied over to new events whose details are similar to this one.', bg: 'purple.700', color: 'white', children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", children: "Copy over buffer times to any new events whose details have similar context? (Hint)" }) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyTimeBlocking || props?.copyTimeBlocking, onValueChange: changeCopyTimeBlocking, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '95%' }, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Copy over time preference to any new events whose details have similar context for scheduling assists?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyTimePreference || props?.copyTimePreference, onValueChange: changeCopyTimePreference, style: { marginBottom: 20 } }) })] })] }));
}
exports.default = TrainEventBaseStep;
//# sourceMappingURL=data:application/json;base64,