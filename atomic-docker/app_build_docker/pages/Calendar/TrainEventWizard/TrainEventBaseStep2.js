"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const Switch_1 = __importDefault(require("@components/Switch"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function TrainEventBaseStep2(props) {
    const [copyModifiable, setCopyModifiable] = (0, react_1.useState)(props?.copyModifiable ?? false);
    const [copyCategories, setCopyCategories] = (0, react_1.useState)(props?.copyCategories ?? false);
    const [copyIsBreak, setCopyIsBreak] = (0, react_1.useState)(props?.copyIsBreak ?? false);
    const [isMessage1, setIsMessage1] = (0, react_1.useState)(false);
    const [isMessage2, setIsMessage2] = (0, react_1.useState)(false);
    const setParentCopyModifiable = props?.setParentCopyModifiable;
    const setParentCopyCategories = props?.setParentCopyCategories;
    const setParentCopyIsBreak = props?.setParentCopyIsBreak;
    const changeCopyModifiable = (value) => {
        setCopyModifiable(value);
        setParentCopyModifiable(value);
    };
    const changeCopyCategories = (value) => {
        setCopyCategories(value);
        setParentCopyCategories(value);
    };
    const changeCopyIsBreak = (value) => {
        setCopyIsBreak(value);
        setParentCopyIsBreak(value);
    };
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '95%' }, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(react_2.Tooltip, { hasArrow: true, label: 'Copy over start time modifiability of the event to any new events whose details are similar for schedule assists. This keeps the event static and immobile on the calendar.', bg: 'purple.700', color: 'white', children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", children: "Copy over time modifiable value to any new events whose details are similar for scheduling assists? (Hint) " }) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyModifiable, onValueChange: changeCopyModifiable }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '95%' }, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Copy over tags to any new events whose details have similar context? " }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyCategories, onValueChange: changeCopyCategories }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '95%' }, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(react_2.Tooltip, { hasArrow: true, label: 'Classify any new events whose details are similar as a break for schedule assists.', bg: 'purple.700', color: 'white', children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", children: "Classify as a break type event for any new events whose details have similar context for scheduling assists? (Hint) " }) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyIsBreak, onValueChange: changeCopyIsBreak }) })] })] }));
}
exports.default = TrainEventBaseStep2;
//# sourceMappingURL=data:application/json;base64,