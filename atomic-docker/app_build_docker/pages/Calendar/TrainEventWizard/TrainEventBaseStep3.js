"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const Switch_1 = __importDefault(require("@components/Switch"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function TrainEventBaseStep3(props) {
    const [copyIsMeeting, setCopyIsMeeting] = (0, react_1.useState)(props?.copyIsMeeting ?? false);
    const [copyIsExternalMeeting, setCopyIsExternalMeeting] = (0, react_1.useState)(props?.copyIsExternalMeeting ?? false);
    const [copyDuration, setCopyDuration] = (0, react_1.useState)(props?.copyDuration ?? false);
    const [copyColor, setCopyColor] = (0, react_1.useState)(props?.copyColor ?? false);
    const [isMessage1, setIsMessage1] = (0, react_1.useState)(false);
    const [isMessage2, setIsMessage2] = (0, react_1.useState)(false);
    const [isMessage3, setIsMessage3] = (0, react_1.useState)(false);
    const [isMessage4, setIsMessage4] = (0, react_1.useState)(false);
    const setParentCopyIsExternalMeeting = props?.setParentCopyIsExternalMeeting;
    const setParentCopyDuration = props?.setParentCopyDuration;
    const setParentCopyIsMeeting = props?.setParentCopyIsMeeting;
    const setParentCopyColor = props?.setParentCopyColor;
    const changeCopyIsExternalMeeting = (value) => {
        setCopyIsExternalMeeting(value);
        setParentCopyIsExternalMeeting(value);
    };
    const changeCopyDuration = (value) => {
        setCopyDuration(value);
        setParentCopyDuration(value);
    };
    const changeCopyIsMeeting = (value) => {
        setCopyIsMeeting(value);
        setParentCopyIsMeeting(value);
    };
    const changeCopyColor = (value) => {
        setCopyColor(value);
        setParentCopyColor(value);
    };
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(react_2.Tooltip, { hasArrow: true, label: 'Event will be tagged with Meeting topic and settings for the tag will be applied to the event. Note: training settings override tag settings for schedule assists in case of overlap.', bg: 'purple.700', color: 'white', children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", children: "Classify any new events whose details are similar as a 'Meeting type' event? (Hint) " }) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyIsMeeting, onValueChange: changeCopyIsMeeting, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(react_2.Tooltip, { hasArrow: true, label: 'Tag with External Meeting topic is a meeting with contact outside the organization. Event will be tagged with external meeting topic and settings for the tag will be applied to the event. Note: training settings override tag settings for schedule assists in case of overlap.', bg: 'purple.700', color: 'white', children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", children: "Classify any new events whose details have similar context as an 'External Meeting type' event? (Hint) " }) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyIsExternalMeeting, onValueChange: changeCopyIsExternalMeeting }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(react_2.Tooltip, { hasArrow: true, label: 'New events whose details are similar will change their end time to match the duration to this event. Usually useful to sync task events from 3rd party apps.', bg: 'purple.700', color: 'white', children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", children: "Copy over duration value to any new events whose details have similar context? (Hint)" }) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyDuration, onValueChange: changeCopyDuration }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Copy over background color to any new events whose details have similar context? " }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: copyColor, onValueChange: changeCopyColor }) })] })] }));
}
exports.default = TrainEventBaseStep3;
//# sourceMappingURL=data:application/json;base64,