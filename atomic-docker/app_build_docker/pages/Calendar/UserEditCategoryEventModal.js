"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_native_1 = require("react-native");
const io_1 = require("react-icons/io");
const picker_1 = require("@react-native-picker/picker");
const react_2 = require("@chakra-ui/react");
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const Button_1 = __importDefault(require("@components/Button"));
const theme_1 = require("@lib/theme/theme");
const lodash_1 = __importDefault(require("lodash"));
const CategoryHelper_1 = require("@lib/Category/CategoryHelper");
const getEventById_1 = __importDefault(require("@lib/apollo/gql/getEventById"));
const updateEventForUserModifiedCategories_1 = __importDefault(require("@lib/apollo/gql/updateEventForUserModifiedCategories"));
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function UserEditCategoryEventModal(props) {
    const [selectedTag, setSelectedTag] = (0, react_1.useState)(null);
    const [eventTags, setEventTags] = (0, react_1.useState)([]);
    const [categories, setCategories] = (0, react_1.useState)([]);
    const [selectedTagId, setSelectedTagId] = (0, react_1.useState)('');
    // const dark = useColorScheme() === 'dark'
    const client = props?.client;
    const eventId = props?.eventId;
    const toast = (0, react_2.useToast)();
    // get categories
    (0, react_1.useEffect)(() => {
        (async () => {
            try {
                const userCategories = await (0, CategoryHelper_1.listUserCategories)(client, props?.sub);
                setCategories(userCategories);
                setSelectedTag(userCategories?.[0]);
                setSelectedTagId(userCategories?.[0]?.id);
            }
            catch (e) {
                console.log(e, ' error in useEffect for UserEditcategory_event');
            }
        })();
    }, [client, props?.sub]);
    // get event categories
    (0, react_1.useEffect)(() => {
        (async () => {
            try {
                const existingCategories = await (0, CategoryHelper_1.listCategoriesForEvent)(client, eventId);
                console.log(existingCategories, ' existingCategories in useEffect for UserEditcategory_event');
                setEventTags(existingCategories);
            }
            catch (e) {
                console.log(e, 'error for get categories');
            }
        })();
    }, [client, eventId]);
    const addItemToTags = async () => {
        try {
            if (!selectedTag?.id) {
                toast({
                    status: 'error',
                    title: 'Select a tag',
                    description: 'Please select a tag',
                    duration: 9000,
                    isClosable: true,
                });
                return null;
            }
            const newCategories = lodash_1.default.uniqWith(eventTags?.concat([selectedTag]), lodash_1.default.isEqual);
            setEventTags(newCategories);
            const foundIndex = eventTags?.findIndex((cat) => cat?.id === selectedTag?.id);
            if (foundIndex === -1) {
                await (0, CategoryHelper_1.upsertCategoryEventConnection)(client, props.sub, selectedTag.id, eventId);
                // update Event
                const existingEvent = (await client.query({
                    query: getEventById_1.default,
                    variables: {
                        id: eventId,
                    },
                })).data?.Event_by_pk;
                if (existingEvent?.id) {
                    await client.mutate({
                        mutation: updateEventForUserModifiedCategories_1.default,
                        variables: {
                            id: existingEvent.id,
                        },
                    });
                }
            }
        }
        catch (e) {
            console.log(e, 'error in addItemToTags');
        }
    };
    const removeItemFromTags = async (categoryId) => {
        try {
            const newCategories = eventTags.filter((cat) => cat.id !== categoryId);
            setEventTags(newCategories);
            await (0, CategoryHelper_1.removeCategoryConnectionForEvent)(client, categoryId, eventId);
            // update Event
            const existingEvent = (await client.query({
                query: getEventById_1.default,
                variables: {
                    id: eventId,
                },
            })).data?.Event_by_pk;
            if (existingEvent?.id) {
                await client.mutate({
                    mutation: updateEventForUserModifiedCategories_1.default,
                    variables: {
                        id: existingEvent.id,
                    },
                });
            }
        }
        catch (e) {
            console.log(e, 'error in removeItemFromTags');
        }
    };
    const changeSelectedTag = (id) => {
        const foundCategory = categories.find((cat) => (cat.id === id));
        if (foundCategory) {
            setSelectedTag(foundCategory);
            setSelectedTagId(id);
        }
    };
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { width: "100%", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 'm', tablet: 'l' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Manage tags to this event" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", width: "100%", children: (0, jsx_runtime_1.jsx)(react_native_1.FlatList, { data: eventTags, renderItem: ({ item }) => ((0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", alignItems: "center", justifyContent: "space-between", style: { width: '60%' }, children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: item.name }), (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { hitSlop: 15, onPress: () => removeItemFromTags(item?.id), children: (0, jsx_runtime_1.jsx)(io_1.IoIosClose, { size: "3em", color: theme_1.palette.red }) })] }) })), keyExtractor: (item) => item.id }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 3, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(picker_1.Picker, { selectedValue: selectedTagId, onValueChange: changeSelectedTag, children: categories.map((category) => ((0, jsx_runtime_1.jsx)(picker_1.Picker.Item, { color: theme_1.palette.textBlack, value: category?.id, label: category?.name }, category?.id))) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: addItemToTags, children: "Add" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: props.hideTags, children: "Done" }) })] }));
}
exports.default = UserEditCategoryEventModal;
//# sourceMappingURL=data:application/json;base64,