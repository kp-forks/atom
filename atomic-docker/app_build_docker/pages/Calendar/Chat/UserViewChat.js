"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
/* eslint-disable react-hooks/exhaustive-deps */
const react_1 = require("@chakra-ui/react");
const Button_1 = __importDefault(require("@components/Button"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const ChatHelper_1 = require("@lib/Chat/ChatHelper");
const date_utils_1 = require("@lib/date-utils");
const constants_1 = require("@lib/GPT/MeetingRequest/constants");
const theme_1 = require("@lib/theme/theme");
const user_context_1 = require("@lib/user-context");
const session_1 = __importDefault(require("supertokens-web-js/recipe/session"));
const router_1 = require("next/router");
const react_2 = require("react");
const io_1 = require("react-icons/io");
const react_native_1 = require("react-native");
const ScrollContainer_1 = __importDefault(require("@components/chat/ScrollContainer"));
const Message_1 = __importDefault(require("@components/chat/Message"));
const ChatInput_1 = __importDefault(require("@components/chat/ChatInput"));
const googleCalendarHelper_1 = require("@lib/calendarLib/googleCalendarHelper");
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../../config/backendConfig");
const session_2 = __importDefault(require("supertokens-node/recipe/session"));
const OnBoardHelper_1 = require("@lib/OnBoard/OnBoardHelper");
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_2.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_2.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_2.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
const styles = {
    container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        width: '100%',
    },
    duration: {
        fontSize: '21px',
        lineHeight: '28px',
    },
    centeredView: {
        flex: 1,
        justifyContent: "center",
        alignItems: "center",
        marginTop: 22,
        marginBottom: 22,
    },
    modalView: {
        flex: 1,
        alignItems: "center",
    },
};
let socket;
function UserViewChat() {
    const [chatHistory, setChatHistory] = (0, react_2.useState)([{
            role: 'assistant',
            content: 'How can I help you today?',
            id: 0,
            date: (0, date_utils_1.dayjs)().format(),
        }]);
    const [messageHistory, setMessageHistory] = (0, react_2.useState)([{
            skill: 'pending',
            query: 'pending',
            messages: [],
        }]);
    const [isNewSession, setIsNewSession] = (0, react_2.useState)(false);
    const [isLoading, setIsLoading] = (0, react_2.useState)(false);
    // const [token, setToken] = useState<string>('')
    // const [socket, setSocket] = useState<WebSocket>()
    const [formData, setFormData] = (0, react_2.useState)({
        type: 'select',
        value: date_utils_1.dayjs.tz.guess(),
        name: date_utils_1.dayjs.tz.guess(),
    });
    const [receiverTimezone, setReceiverTimezone] = (0, react_2.useState)(date_utils_1.dayjs.tz.guess());
    const [search, setSearch] = (0, react_2.useState)('');
    const [isSelect, setIsSelect] = (0, react_2.useState)(false);
    const [checkBoxArray, setCheckBoxArray] = (0, react_2.useState)([]);
    const [filteredTimezones, setFilteredTimezones] = (0, react_2.useState)([]);
    const [isForm, setIsForm] = (0, react_2.useState)(false);
    const [reconnect, setReconnect] = (0, react_2.useState)(false);
    const [htmlEmail, setHtmlEmail] = (0, react_2.useState)('');
    // formattedTimezones: TimezoneObjectType[]
    const router = (0, router_1.useRouter)();
    const { sub, client } = (0, user_context_1.useAppContext)();
    const userId = sub;
    const toast = (0, react_1.useToast)();
    const { dispatchAgentCommand } = useAgentAudioControl(); // Import from context
    // renew push notifictions
    (0, react_2.useEffect)(() => {
        if (userId) {
            (async () => (0, googleCalendarHelper_1.checkIfCalendarWebhookExpired)(client, userId))();
        }
    }, [client, userId]);
    // check onboarding
    (0, react_2.useEffect)(() => {
        (async () => {
            if (!sub) {
                return;
            }
            const user_preferenceDoc = await (0, OnBoardHelper_1.getUserPreference)(client, sub);
            console.log(user_preferenceDoc?.onBoarded, ' user_preferenceDoc?.onBoarded');
            if (!user_preferenceDoc?.onBoarded) {
                console.log(' no user preference created');
                return router.push({ pathname: '/OnBoard/UserOnBoard' });
            }
        })();
    }, [client, router, sub]);
    (0, react_2.useEffect)(() => {
        // This effect manages the WebSocket connection lifecycle.
        let currentSocketInstance = null;
        const connectAndSetupSocket = async () => {
            try {
                const access_token = await session_1.default.getAccessToken();
                if (!access_token) {
                    console.warn("UserViewChat: No access token, WebSocket connection not attempted.");
                    return;
                }
                const newSocket = await (0, ChatHelper_1.createChatSocket)(access_token);
                if (newSocket) {
                    socket = newSocket; // Assign to module-level variable (as per existing pattern)
                    currentSocketInstance = newSocket; // Local instance for this effect's cleanup
                    console.log("UserViewChat: WebSocket connection initiated.");
                    setReconnect(false);
                    newSocket.onopen = (event) => {
                        console.log("UserViewChat: WebSocket connection established.", event);
                    };
                    newSocket.onmessage = async (event) => {
                        console.log("UserViewChat: Raw message from server: ", event.data);
                        try {
                            const rawData = JSON.parse(event.data);
                            // TYPE GUARD for AgentAudioCommand
                            // Assuming AgentClientCommand has 'action' and 'command_id'
                            // and a wrapper type like { type: 'AGENT_COMMAND', payload: AgentAudioCommand }
                            if (rawData && rawData.type === 'AGENT_COMMAND' &&
                                rawData.payload && typeof rawData.payload.action === 'string' &&
                                typeof rawData.payload.command_id === 'string') {
                                const commandPayload = rawData.payload; // AgentAudioCommand needs to be imported or defined
                                console.log("UserViewChat: Received AGENT_COMMAND for audio:", commandPayload);
                                if (dispatchAgentCommand) {
                                    dispatchAgentCommand(commandPayload);
                                }
                                else {
                                    console.error("UserViewChat: dispatchAgentCommand from AgentAudioControlContext is not available.");
                                }
                                return; // Command handled
                            }
                            if (rawData === 'ping') {
                                console.log("UserViewChat: Received ping.");
                                return;
                            }
                            // Process general agent messages (expected to include text, and optionally structuredData, audioUrl)
                            const agentMessagePayload = rawData; // Define a proper type for this payload later
                            const newAssistantMessage = {
                                id: chatHistory.length, // Placeholder for ID, ideally replace "working..."
                                role: 'assistant',
                                content: agentMessagePayload.text || "Received a message with no text.",
                                date: (0, date_utils_1.dayjs)().format(),
                                audioUrl: agentMessagePayload.audioUrl,
                            };
                            if (agentMessagePayload.structuredData && agentMessagePayload.structuredData.displayType === 'semantic_search_results') {
                                newAssistantMessage.customComponentType = 'semantic_search_results';
                                newAssistantMessage.customComponentProps = { results: agentMessagePayload.structuredData.data };
                                newAssistantMessage.content = agentMessagePayload.structuredData.summaryText || agentMessagePayload.text;
                                console.log("UserViewChat (WebSocket): Populated customComponent for semantic_search_results", newAssistantMessage);
                            }
                            else if (agentMessagePayload.structuredData && agentMessagePayload.structuredData.displayType === 'meeting_prep_results') {
                                newAssistantMessage.customComponentType = 'meeting_prep_results';
                                // Assuming the 'data' field in structuredData contains the AggregatedPrepResults object
                                newAssistantMessage.customComponentProps = { briefing: agentMessagePayload.structuredData.data };
                                // Use a summary text or the original text if no specific summary is provided for the component
                                newAssistantMessage.content = agentMessagePayload.structuredData.summaryText || agentMessagePayload.text || "Here's your meeting preparation:";
                                console.log("UserViewChat (WebSocket): Populated customComponent for meeting_prep_results", newAssistantMessage);
                            }
                            // Update chatHistory: Replace "working..." or append
                            setChatHistory(prevChatHistory => {
                                const reversePrevChat = [...prevChatHistory].reverse();
                                const workingIndex = reversePrevChat.findIndex(m => m.role === 'assistant' && m.content === 'working ...');
                                if (workingIndex !== -1) {
                                    const originalIndex = prevChatHistory.length - 1 - workingIndex;
                                    const updatedHistory = [...prevChatHistory];
                                    updatedHistory[originalIndex] = { ...newAssistantMessage, id: prevChatHistory[originalIndex].id }; // Preserve ID
                                    return updatedHistory;
                                }
                                // If "working..." not found (shouldn't happen if optimistic update is correct), append
                                return [...prevChatHistory, { ...newAssistantMessage, id: prevChatHistory.length }];
                            });
                            setIsLoading(false); // Message displayed
                            // Still call onReceiveMessage if it's used for logging or other side effects with messageHistory
                            // but it should NOT call setChatHistory anymore for this flow.
                            // The rawData might still be useful for skill-specific logging if it matches SkillMessageHistoryType.
                            if (rawData.skill && rawData.query) { // Heuristic: if it looks like SkillMessageHistoryType
                                await onReceiveMessage(rawData);
                            }
                        }
                        catch (e) {
                            console.error("UserViewChat: Error processing WebSocket message from server:", e, "Raw data:", event.data);
                            // Potentially add an error message to chatHistory here
                            setChatHistory(prev => [...prev, {
                                    id: prev.length, role: 'assistant', content: "Error processing message from server.", date: (0, date_utils_1.dayjs)().format()
                                }]);
                            setIsLoading(false);
                        }
                    };
                    newSocket.onerror = (event) => {
                        console.error("UserViewChat: WebSocket error observed.", event);
                    };
                    newSocket.onclose = (event) => {
                        console.log("UserViewChat: WebSocket connection closed.", event);
                        if (socket === currentSocketInstance) { // Avoid issues if a new socket was created by reconnect logic
                            socket = null;
                        }
                        // Optionally trigger reconnect logic here if needed, e.g., by setting `setReconnect(true)`
                        // if (!event.wasClean) { setReconnect(true); }
                    };
                }
                else {
                    console.error("UserViewChat: createChatSocket returned null or undefined.");
                }
            }
            catch (e) {
                console.error("UserViewChat: Error in connectAndSetupSocket:", e);
            }
        };
        if (sub) { // Only connect if user (sub) is available
            connectAndSetupSocket();
        }
        return () => {
            // Cleanup function
            if (currentSocketInstance) {
                console.log("UserViewChat: Cleaning up WebSocket instance.");
                currentSocketInstance.onopen = null;
                currentSocketInstance.onmessage = null;
                currentSocketInstance.onerror = null;
                currentSocketInstance.onclose = null;
                if (currentSocketInstance.readyState === WebSocket.OPEN || currentSocketInstance.readyState === WebSocket.CONNECTING) {
                    currentSocketInstance.close();
                }
                if (socket === currentSocketInstance) { // Ensure module-level var is also cleared if it's this instance
                    socket = null;
                }
            }
        };
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [reconnect, isNewSession, sub, dispatchAgentCommand]); // Added sub and dispatchAgentCommand
    const onReceiveMessage = async (
    // This function is now primarily for updating messageHistory (skill log)
    // It should not call setChatHistory. That's handled directly in onmessage for WebSockets
    // or in onSendMessage for HTTP.
    skillDataForLog) => {
        try {
            // Pass only the necessary setters for messageHistory
            await (0, ChatHelper_1.receiveMessageFromBrain)(skillDataForLog, 
            // chatHistory, // Not needed if receiveMessageFromBrain doesn't setChatHistory
            messageHistory, 
            // setChatHistory, // Removed
            setMessageHistory);
        }
        catch (e) {
            console.log(e, ' unable to process skill data for message history log');
        }
    };
    // Removed direct socket.addEventListener calls as they are now handled within the useEffect's socket instance
    (0, react_2.useEffect)(() => {
        (() => {
            // generate checked array
            const newCheckedArray = constants_1.formattedTimezones?.map(_ => false);
            setCheckBoxArray(newCheckedArray);
        })();
    }, []);
    const onSelectedItem = (index) => {
        // set selected checkbox
        const newCheckBoxArray = checkBoxArray?.map(_ => false);
        newCheckBoxArray[index] = true;
        setCheckBoxArray(newCheckBoxArray);
        const selectedTimezone = constants_1.formattedTimezones[index];
        setReceiverTimezone(selectedTimezone?.value);
        setFormData({
            type: 'select',
            value: selectedTimezone?.value,
            name: selectedTimezone?.label,
        });
    };
    const closeIsSelect = async () => {
        setIsSelect(false);
        await onSendMessage(formData?.value);
    };
    const openIsSelect = () => setIsSelect(true);
    const updateSearch = (text) => {
        setSearch(text);
        const regex = new RegExp(`\.*${text || ''}\.*`, 'gmi');
        const newFilteredArray = constants_1.formattedTimezones?.filter(t => (regex.test(t?.label)));
        setFilteredTimezones(newFilteredArray);
    };
    const RenderItem = ({ item }) => {
        const foundIndex = constants_1.formattedTimezones?.findIndex(t => (t?.value === item?.value));
        return ((0, jsx_runtime_1.jsx)("button", { onClick: () => onSelectedItem(foundIndex), children: (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { borderColor: theme_1.palette.darkGray, borderBottomWidth: react_native_1.StyleSheet.hairlineWidth }, p: { phone: 'm', tablet: 's' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '70%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: item?.label }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '30%' }, pr: { phone: 'l', tablet: 'm' }, flexDirection: "row", justifyContent: "flex-end", alignItems: "center", children: checkBoxArray?.[foundIndex] ? (0, jsx_runtime_1.jsx)(io_1.IoIosCheckmark, { size: "3em", color: theme_1.palette.pinkPrimary }) : null })] }) }));
    };
    const callNewSession = () => {
        (0, ChatHelper_1.newSession)(setChatHistory, setMessageHistory, setReconnect, reconnect);
        setIsNewSession(false);
    };
    const onSendMessage = async (text) => {
        try {
            const index = messageHistory?.length === 0 ? 0 : messageHistory?.length - 1;
            switch (messageHistory[index]?.skill) {
                case 'generate-meeting-invite':
                    messageHistory[index].formData = formData;
                case 'send-meeting-invite':
                    messageHistory[index].formData = formData;
            }
            console.log(text, ' text inside onSendMessage');
            // Add user's message to chat history immediately
            const newUserMessage = {
                id: chatHistory.length, // Or a more robust ID generation
                content: text,
                role: 'user',
                date: (0, date_utils_1.dayjs)().format(),
            };
            setChatHistory(prevChatHistory => [...prevChatHistory, newUserMessage]);
            setIsLoading(true);
            try {
                const response = await fetch('/api/atom/message', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ message: text }),
                });
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || `API Error: ${response.status}`);
                }
                const data = await response.json(); // data is expected to be { text: string, audioUrl?: string, error?: string }
                let content = data.text;
                if (!content) {
                    if (data.error) {
                        content = `Error: ${data.error}`;
                    }
                    else {
                        content = "Atom didn't provide a text response.";
                    }
                }
                const atomResponse = {
                    id: chatHistory.length + 1, // Or a more robust ID generation, consider uuid
                    content: data.text, // Default to data.text
                    role: 'assistant',
                    date: (0, date_utils_1.dayjs)().format(),
                    audioUrl: data.audioUrl,
                };
                // Check for structured data from the agent
                if (data.structuredData && data.structuredData.displayType === 'semantic_search_results') {
                    atomResponse.customComponentType = 'semantic_search_results';
                    atomResponse.customComponentProps = { results: data.structuredData.data };
                    atomResponse.content = data.structuredData.summaryText || data.text;
                    console.log("UserViewChat (HTTP): Populated customComponent for semantic_search_results", atomResponse);
                }
                else if (data.structuredData && data.structuredData.displayType === 'meeting_prep_results') {
                    atomResponse.customComponentType = 'meeting_prep_results';
                    atomResponse.customComponentProps = { briefing: data.structuredData.data };
                    atomResponse.content = data.structuredData.summaryText || data.text || "Here's your meeting preparation:";
                    console.log("UserViewChat (HTTP): Populated customComponent for meeting_prep_results", atomResponse);
                }
                else {
                    // Ensure content is set if no structuredData or not the expected type
                    atomResponse.content = content;
                }
                setChatHistory(prevChatHistory => [...prevChatHistory, atomResponse]);
            }
            catch (e) {
                console.error(e, ' unable to send message to Atom API');
                const errorMessage = {
                    id: chatHistory.length + 1,
                    content: `Error: ${e.message || 'Failed to get response from Atom.'}`,
                    role: 'assistant', // Display error as an assistant message
                    date: (0, date_utils_1.dayjs)().format(),
                };
                setChatHistory(prevChatHistory => [...prevChatHistory, errorMessage]);
            }
            finally {
                setIsLoading(false);
            }
        }
        catch (e) {
            console.log(e, ' general error in onSendMessage');
            // Fallback for unexpected errors before API call attempt
            const errorMessage = {
                id: chatHistory.length + (chatHistory.find(m => m.role === 'user' && m.content === text) ? 1 : 0), // avoid duplicate id if user message was added
                content: `An unexpected error occurred.`,
                role: 'assistant',
                date: (0, date_utils_1.dayjs)().format(),
            };
            // Check if user message was already added to avoid duplicates if error is before API call
            setChatHistory(prevChatHistory => {
                if (!prevChatHistory.find(m => m.role === 'user' && m.content === text && m.id === newUserMessage.id)) {
                    return [...prevChatHistory, newUserMessage, errorMessage];
                }
                return [...prevChatHistory, errorMessage];
            });
            setIsLoading(false);
        }
    };
    const renderSelectTimezone = () => ((0, jsx_runtime_1.jsx)("div", { children: isForm ?
            ((0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "flex-start", alignItems: "center", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsx)(Text_1.default, { textAlign: "center", p: { phone: 's', tablet: 'm' }, variant: "optionHeader", style: { width: '80%' }, children: "Select Receiver's timezone" }), (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: openIsSelect, children: (0, jsx_runtime_1.jsx)(Text_1.default, { textAlign: "center", variant: "buttonLink", children: receiverTimezone }) })] })) : null }));
    return ((0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col items-center h-[60vh] bg-gray-500", children: [(0, jsx_runtime_1.jsxs)("div", { className: "bg-primary-content flex flex-col justify-center items-center w-full lg:w-1/2 h-full", children: [(0, jsx_runtime_1.jsx)(ScrollContainer_1.default, { scrollCta: "New Message!", isNewSession: isNewSession, children: chatHistory?.map((m, i) => {
                            // isLoading for a specific message can be true if it's the last assistant message and global isLoading is true.
                            const showLoadingForThisMessage = m.role === 'assistant' && isLoading && (chatHistory.length - 1 === i);
                            // For forms/custom components, they are now part of the message object itself if customComponentType is set.
                            // The `formData` prop in Message.tsx will be used for this.
                            return ((0, jsx_runtime_1.jsxs)("div", { children: [" ", (0, jsx_runtime_1.jsx)(Message_1.default, { message: m, isLoading: showLoadingForThisMessage, 
                                        // The formData prop in Message.tsx will now directly use m.customComponentProps
                                        // if m.customComponentType indicates it.
                                        // No need to pass complex React.createElement here.
                                        // Message.tsx will handle the rendering based on m.customComponentType.
                                        formData: undefined, htmlEmail: m.role === 'assistant' ? htmlEmail : undefined }, m.id || `msg-item-${i}`)] }, m.id || `msg-${i}`));
                        }) }), (0, jsx_runtime_1.jsx)(ChatInput_1.default, { sendMessage: onSendMessage, 
                        // For Atom, isNewSession and callNewSession might not be directly applicable in the same way
                        // but we'll keep them for now to avoid breaking ChatInput's expected props.
                        // Consider how "new session" should behave with Atom later.
                        isNewSession: false, callNewSession: () => {
                            console.log("New session clicked, behavior for Atom TBD");
                            // Potentially clear chatHistory for Atom or send a specific new session signal
                            // For now, let's just log it. A simple clear:
                            // setChatHistory([{ role: 'assistant', content: 'How can I help you today?', id:0, date: dayjs().format() }]);
                        } })] }), isForm && ((0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsx)(react_native_1.Modal, { animationType: "slide", visible: isSelect, onRequestClose: closeIsSelect, children: (0, jsx_runtime_1.jsx)(Box_1.default, { style: styles.centeredView, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { style: styles.modalView, children: [(0, jsx_runtime_1.jsxs)("form", { children: [(0, jsx_runtime_1.jsx)("label", { htmlFor: "default-search", className: "mb-2 text-sm font-medium text-gray-900 sr-only dark:text-white", children: "Search" }), (0, jsx_runtime_1.jsxs)("div", { className: "relative", children: [(0, jsx_runtime_1.jsx)("div", { className: "absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none", children: (0, jsx_runtime_1.jsx)("svg", { "aria-hidden": "true", className: "w-5 h-5 text-gray-500 dark:text-gray-400", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg", children: (0, jsx_runtime_1.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: "2", d: "M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" }) }) }), (0, jsx_runtime_1.jsx)("input", { value: search, onChange: (e) => updateSearch(e?.target?.value), type: "search", id: "default-search", className: "block w-full p-4 pl-10 text-sm text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-purple-500 focus:border-purple-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-purple-500 dark:focus:border-purple-500", placeholder: "Type Timezone", required: true })] })] }), filteredTimezones?.length > 0
                                    ? ((0, jsx_runtime_1.jsx)(react_native_1.FlatList, { data: filteredTimezones, keyExtractor: item => item.key, renderItem: RenderItem }))
                                    : ((0, jsx_runtime_1.jsx)(react_native_1.FlatList, { data: constants_1.formattedTimezones, keyExtractor: item => item.key, renderItem: RenderItem })), (0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: closeIsSelect, children: "Close" }) })] }) }) }) }))] }));
}
exports.default = UserViewChat;
//# sourceMappingURL=data:application/json;base64,