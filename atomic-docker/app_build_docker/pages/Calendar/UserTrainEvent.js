"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Wizard_1 = __importDefault(require("@components/Wizard"));
const react_2 = require("@chakra-ui/react");
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const Button_1 = __importDefault(require("@components/Button"));
const RegularCard_1 = __importDefault(require("@components/RegularCard"));
const UserTrainCalendarHelper_1 = require("@lib/Calendar/UserTrainCalendarHelper");
const TrainEventBaseStep_1 = __importDefault(require("@pages/Calendar/TrainEventWizard/TrainEventBaseStep"));
const TrainEventBaseStep2_1 = __importDefault(require("@pages/Calendar/TrainEventWizard/TrainEventBaseStep2"));
const TrainEventBaseStep3_1 = __importDefault(require("@pages/Calendar/TrainEventWizard/TrainEventBaseStep3"));
const TrainEventBaseStep4_1 = __importDefault(require("@pages/Calendar/TrainEventWizard/TrainEventBaseStep4"));
const calendarDbHelper_1 = require("@lib/calendarLib/calendarDbHelper");
const router_1 = require("next/router");
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function UserTrainEvent(props) {
    const [copyAvailability, setCopyAvailability] = (0, react_1.useState)(false);
    const [copyTimeBlocking, setCopyTimeBlocking] = (0, react_1.useState)(false);
    const [copyTimePreference, setCopyTimePreference] = (0, react_1.useState)(false);
    const [copyReminders, setCopyReminders] = (0, react_1.useState)(false);
    const [copyPriorityLevel, setCopyPriorityLevel] = (0, react_1.useState)(false);
    const [copyModifiable, setCopyModifiable] = (0, react_1.useState)(false);
    const [copyCategories, setCopyCategories] = (0, react_1.useState)(false);
    const [copyIsBreak, setCopyIsBreak] = (0, react_1.useState)(false);
    const [copyIsMeeting, setCopyIsMeeting] = (0, react_1.useState)(false);
    const [copyIsExternalMeeting, setCopyIsExternalMeeting] = (0, react_1.useState)(false);
    const [copyDuration, setCopyDuration] = (0, react_1.useState)(false);
    const [activeIndex, setActiveIndex] = (0, react_1.useState)(0);
    const [completedStep, setCompletedStep] = (0, react_1.useState)();
    const [copyColor, setCopyColor] = (0, react_1.useState)(false);
    const toast = (0, react_2.useToast)();
    const router = (0, router_1.useRouter)();
    const id = props?.id;
    const userId = props?.sub;
    const client = props?.client;
    const closeTrainEvent = props?.closeTrainEvent;
    console.log(id, ' id inside userTrainEvent');
    (0, react_1.useEffect)(() => {
        (async () => {
            try {
                if (!id || !client) {
                    return;
                }
                const event = await (0, calendarDbHelper_1.getEventWithId)(client, id);
                if (!event) {
                    console.log('event not found');
                    return;
                }
                if (event?.id) {
                    setCopyAvailability(event.copyAvailability);
                    setCopyTimeBlocking(event.copyTimeBlocking);
                    setCopyTimePreference(event.copyTimePreference);
                    setCopyReminders(event.copyReminders);
                    setCopyPriorityLevel(event.copyPriorityLevel);
                    setCopyModifiable(event.copyModifiable);
                    setCopyCategories(event.copyCategories);
                    setCopyIsBreak(event.copyIsBreak);
                    setCopyIsMeeting(event.copyIsMeeting);
                    setCopyIsExternalMeeting(event.copyIsExternalMeeting);
                    setCopyDuration(event.copyDuration);
                    setCopyColor(event.copyColor || false);
                }
            }
            catch (e) {
                console.log(e, ' error getting event');
            }
        })();
    }, [client, id]);
    const trainEvent = async () => {
        try {
            if (!client) {
                return;
            }
            await (0, UserTrainCalendarHelper_1.trainEventForPlanning)(client, id, copyAvailability, copyTimeBlocking, copyTimePreference, copyReminders, copyPriorityLevel, copyModifiable, copyCategories, copyIsBreak, copyIsMeeting, copyIsExternalMeeting, copyDuration, copyColor);
            toast({
                title: 'Event trained',
                status: 'success',
                description: 'Event trained successfully',
                duration: 9000,
                isClosable: true,
            });
            closeTrainEvent();
        }
        catch (e) {
            console.log(e, ' error training event');
            toast({
                title: 'Event was trained',
                status: 'error',
                description: 'Event is not trained successfully',
                duration: 9000,
                isClosable: true,
            });
        }
    };
    const onActiveIndexChanged = (index) => setActiveIndex(index);
    const goToPrevStep = () => {
        const prevActiveIndex = activeIndex;
        const newActiveIndex = prevActiveIndex === 0 ? 0 : prevActiveIndex - 1;
        setActiveIndex(newActiveIndex);
    };
    const renderPrevButton = () => {
        if (activeIndex === 0) {
            return (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' } });
        }
        return ((0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: goToPrevStep, children: "Back" }) }));
    };
    const goToNextStep = () => {
        const prevActiveIndex = activeIndex;
        const prevCompletedStep = completedStep;
        if (prevActiveIndex === 4) {
            return;
        }
        let newActiveIndex = prevActiveIndex + 1;
        if (!prevCompletedStep || (prevCompletedStep < prevActiveIndex)) {
            const newCompletedStep = prevActiveIndex;
            setCompletedStep(newCompletedStep);
        }
        if (newActiveIndex !== prevActiveIndex) {
            setActiveIndex(newActiveIndex);
        }
    };
    const renderNextButton = () => {
        if (activeIndex === 4) {
            return (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' } });
        }
        return ((0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: goToNextStep, children: "Next" }) }));
    };
    const renderCurrentStep = () => {
        switch (activeIndex) {
            case 0:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(TrainEventBaseStep_1.default, { copyAvailability: copyAvailability, copyTimeBlocking: copyTimeBlocking, copyTimePreference: copyTimePreference, setParentCopyAvailability: setCopyAvailability, setParentCopyTimeBlocking: setCopyTimeBlocking, setParentCopyTimePreference: setCopyTimePreference }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, p: { phone: 's', tablet: 'm' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Box_1.default, {}), renderNextButton()] }), (0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsx)("button", { className: "btn btn-link no-underline hover:no-underline", onClick: closeTrainEvent, children: "Close" }) })] }));
            case 1:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(TrainEventBaseStep2_1.default, { copyModifiable: copyModifiable, copyCategories: copyCategories, copyIsBreak: copyIsBreak, setParentCopyModifiable: setCopyModifiable, setParentCopyCategories: setCopyCategories, setParentCopyIsBreak: setCopyIsBreak }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [renderPrevButton(), renderNextButton()] }), (0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsx)("button", { className: "btn btn-link no-underline hover:no-underline", onClick: closeTrainEvent, children: "Close" }) })] }));
            case 2:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(TrainEventBaseStep3_1.default, { copyIsMeeting: copyIsMeeting, copyIsExternalMeeting: copyIsExternalMeeting, copyDuration: copyDuration, setParentCopyIsMeeting: setCopyIsMeeting, setParentCopyIsExternalMeeting: setCopyIsExternalMeeting, setParentCopyDuration: setCopyDuration, copyColor: copyColor, setParentCopyColor: setCopyColor }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, p: { phone: 's', tablet: 'm' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [renderPrevButton(), renderNextButton()] }), (0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsx)("button", { className: "btn btn-link no-underline hover:no-underline", onClick: closeTrainEvent, children: "Close" }) })] }));
            case 3:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(TrainEventBaseStep4_1.default, { setParentCopyReminders: setCopyReminders, setParentCopyPriorityLevel: setCopyPriorityLevel, copyReminders: copyReminders, copyPriorityLevel: copyPriorityLevel }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, p: { phone: 's', tablet: 'm' }, flexDirection: "row", justifyContent: "space-between", alignItems: "center", children: [renderPrevButton(), renderNextButton()] }), (0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsx)("button", { className: "btn btn-link no-underline hover:no-underline", onClick: closeTrainEvent, children: "Close" }) })] }));
            case 4:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", height: "100%", children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '100%' }, justifyContent: "center", alignItems: "center", height: "100%", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subheaderNormal", children: "Train Event" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: trainEvent, children: "Train" }) }) })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, p: { phone: 's', tablet: 'm' }, flexDirection: "row", justifyContent: "flex-start", width: "100%", children: renderPrevButton() }), (0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsx)("button", { className: "btn btn-link no-underline hover:no-underline", onClick: closeTrainEvent, children: "Close" }) })] }));
            default:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(RegularCard_1.default, { children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "header", children: "Oops... something went wrong" }) }), (0, jsx_runtime_1.jsx)("button", { className: "btn btn-link no-underline hover:no-underline", onClick: closeTrainEvent, children: "Close" })] }));
        }
    };
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, height: "100%", flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { p: "m", m: "m", borderRadius: "md", backgroundColor: "infoBlockBackground", width: { phone: '90%', tablet: '80%' }, alignItems: "center", children: (0, jsx_runtime_1.jsxs)(Text_1.default, { variant: "body", textAlign: "center", color: "infoBlockText", children: ["You are training this event to become a reusable template. When you create new events with similar titles or details in the future, Atomic can automatically apply settings (like duration, color, priority, notes, etc.) from this trained event. You can manage which attributes get copied in Settings > Event Defaults.", (0, jsx_runtime_1.jsxs)(Text_1.default, { variant: "link", onPress: () => router.push('https://docs.atomiclife.app/docs/features/event-training'), children: [' ', "Learn more about event training"] })] }) }), (0, jsx_runtime_1.jsx)(Wizard_1.default, { items: [
                    {
                        index: 0,
                        label: 'Step 1',
                    },
                    {
                        index: 1,
                        label: 'Step 2',
                    },
                    {
                        index: 2,
                        label: 'Step 3',
                    },
                    {
                        index: 3,
                        label: 'Step 4',
                    },
                    {
                        index: 4,
                        label: 'Train Event',
                    },
                ], completed: completedStep, activeIndex: activeIndex }), renderCurrentStep()] }));
}
exports.default = UserTrainEvent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlclRyYWluRXZlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJVc2VyVHJhaW5FdmVudC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUEyQkEsZ0RBcUNDOztBQWhFRCxpQ0FJYztBQUVkLGdFQUF1QztBQUN2Qyw0Q0FBMkM7QUFDM0MsaUVBQXdDO0FBQ3hDLG1FQUEwQztBQUMxQyxnRUFBdUM7QUFDdkMsMEVBQWlEO0FBRWpELG1GQUE4RTtBQUU5RSw2R0FBb0Y7QUFDcEYsK0dBQXNGO0FBQ3RGLCtHQUFzRjtBQUN0RiwrR0FBc0Y7QUFFdEYsd0VBQWtFO0FBQ2xFLHdDQUF1QztBQUV2Qyx3RUFBOEM7QUFDOUMsOERBQTBEO0FBQzFELDhFQUFxRDtBQUU5QyxLQUFLLFVBQVUsa0JBQWtCLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFpRDtJQUNsRywwRkFBMEY7SUFDMUYsc0NBQXNDO0lBQ3RDLHlFQUF5RTtJQUN6RSwwQkFBZSxDQUFDLElBQUksQ0FBQyxJQUFBLDZCQUFhLEdBQUUsQ0FBQyxDQUFBO0lBQ3JDLElBQUksT0FBTyxDQUFBO0lBQ1gsSUFBSSxDQUFDO1FBQ0gsT0FBTyxHQUFHLE1BQU0saUJBQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRTtZQUMzQyw2QkFBNkIsRUFBRSxLQUFLO2dCQUNsQyxPQUFPLEVBQUUsQ0FBQTtZQUNYLENBQUM7U0FDRixDQUFDLENBQUE7SUFDSixDQUFDO0lBQUMsT0FBTyxHQUFRLEVBQUUsQ0FBQztRQUNsQixJQUFJLEdBQUcsQ0FBQyxJQUFJLEtBQUssaUJBQU8sQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztZQUNqRCxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxFQUFFLENBQUE7UUFDeEQsQ0FBQzthQUFNLElBQUksR0FBRyxDQUFDLElBQUksS0FBSyxpQkFBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUs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QUcsdUNBQ0QsSUFDSixHQUNMLEVBQ0wsdUJBQUMsZ0JBQU0sSUFDSixLQUFLLEVBQUU7b0JBQ0g7d0JBQ0ksS0FBSyxFQUFFLENBQUM7d0JBQ1IsS0FBSyxFQUFFLFFBQVE7cUJBQ2xCO29CQUNEO3dCQUNJLEtBQUssRUFBRSxDQUFDO3dCQUNSLEtBQUssRUFBRSxRQUFRO3FCQUNsQjtvQkFDRDt3QkFDSSxLQUFLLEVBQUUsQ0FBQzt3QkFDUixLQUFLLEVBQUUsUUFBUTtxQkFDbEI7b0JBQ0Q7d0JBQ0ksS0FBSyxFQUFFLENBQUM7d0JBQ1IsS0FBSyxFQUFFLFFBQVE7cUJBQ2xCO29CQUNEO3dCQUNJLEtBQUssRUFBRSxDQUFDO3dCQUNSLEtBQUssRUFBRSxhQUFhO3FCQUN2QjtpQkFDSixFQUVELFNBQVMsRUFBRSxhQUFhLEVBQ3hCLFdBQVcsRUFBRSxXQUFXLEdBQzFCLEVBQ0QsaUJBQWlCLEVBQUUsSUFDbEIsQ0FDVCxDQUFBO0FBQ0wsQ0FBQztBQUVELGtCQUFlLGNBQWMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwge1xuICAgIHVzZVN0YXRlLFxuICAgIHVzZUVmZmVjdCxcbiAgICB1c2VDYWxsYmFjayxcbn0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCBXaXphcmQgZnJvbSAnQGNvbXBvbmVudHMvV2l6YXJkJ1xuaW1wb3J0IHsgdXNlVG9hc3QgfSBmcm9tICdAY2hha3JhLXVpL3JlYWN0J1xuaW1wb3J0IEJveCBmcm9tICdAY29tcG9uZW50cy9jb21tb24vQm94J1xuaW1wb3J0IFRleHQgZnJvbSAnQGNvbXBvbmVudHMvY29tbW9uL1RleHQnXG5pbXBvcnQgQnV0dG9uIGZyb20gJ0Bjb21wb25lbnRzL0J1dHRvbidcbmltcG9ydCBSZWd1bGFyQ2FyZCBmcm9tICdAY29tcG9uZW50cy9SZWd1bGFyQ2FyZCdcblxuaW1wb3J0IHsgdHJhaW5FdmVudEZvclBsYW5uaW5nIH0gZnJvbSAnQGxpYi9DYWxlbmRhci9Vc2VyVHJhaW5DYWxlbmRhckhlbHBlcic7XG5cbmltcG9ydCBUcmFpbkV2ZW50QmFzZVN0ZXAgZnJvbSAnQHBhZ2VzL0NhbGVuZGFyL1RyYWluRXZlbnRXaXphcmQvVHJhaW5FdmVudEJhc2VTdGVwJ1xuaW1wb3J0IFRyYWluRXZlbnRCYXNlU3RlcDIgZnJvbSAnQHBhZ2VzL0NhbGVuZGFyL1RyYWluRXZlbnRXaXphcmQvVHJhaW5FdmVudEJhc2VTdGVwMidcbmltcG9ydCBUcmFpbkV2ZW50QmFzZVN0ZXAzIGZyb20gJ0BwYWdlcy9DYWxlbmRhci9UcmFpbkV2ZW50V2l6YXJkL1RyYWluRXZlbnRCYXNlU3RlcDMnXG5pbXBvcnQgVHJhaW5FdmVudEJhc2VTdGVwNCBmcm9tICdAcGFnZXMvQ2FsZW5kYXIvVHJhaW5FdmVudFdpemFyZC9UcmFpbkV2ZW50QmFzZVN0ZXA0J1xuaW1wb3J0IHsgQXBvbGxvQ2xpZW50LCBOb3JtYWxpemVkQ2FjaGVPYmplY3QgfSBmcm9tICdAYXBvbGxvL2NsaWVudCdcbmltcG9ydCB7IGdldEV2ZW50V2l0aElkIH0gZnJvbSAnQGxpYi9jYWxlbmRhckxpYi9jYWxlbmRhckRiSGVscGVyJ1xuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSAnbmV4dC9yb3V0ZXInXG5pbXBvcnQgeyBOZXh0QXBpUmVxdWVzdCwgTmV4dEFwaVJlc3BvbnNlIH0gZnJvbSAnbmV4dCc7XG5pbXBvcnQgc3VwZXJ0b2tlbnNOb2RlIGZyb20gJ3N1cGVydG9rZW5zLW5vZGUnXG5pbXBvcnQgeyBiYWNrZW5kQ29uZmlnIH0gZnJvbSAnLi4vLi4vY29uZmlnL2JhY2tlbmRDb25maWcnXG5pbXBvcnQgU2Vzc2lvbiBmcm9tICdzdXBlcnRva2Vucy1ub2RlL3JlY2lwZS9zZXNzaW9uJ1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U2VydmVyU2lkZVByb3BzKHsgcmVxLCByZXMgfTogeyByZXE6IE5leHRBcGlSZXF1ZXN0LCByZXM6IE5leHRBcGlSZXNwb25zZSB9KSB7XG4gIC8vIE5vdGljZSBob3cgdGhlIHNlcnZlciB1c2VzIGBBUElgIGZyb20gYHdpdGhTU1JDb250ZXh0YCwgaW5zdGVhZCBvZiB0aGUgdG9wLWxldmVsIGBBUElgLlxuICAvLyBjb25zdCBTU1IgPSB3aXRoU1NSQ29udGV4dCh7IHJlcSB9KVxuICAvLyB0aGlzIHJ1bnMgb24gdGhlIGJhY2tlbmQsIHNvIHdlIG11c3QgY2FsbCBpbml0IG9uIHN1cGVydG9rZW5zLW5vZGUgU0RLXG4gIHN1cGVydG9rZW5zTm9kZS5pbml0KGJhY2tlbmRDb25maWcoKSlcbiAgbGV0IHNlc3Npb25cbiAgdHJ5IHtcbiAgICBzZXNzaW9uID0gYXdhaXQgU2Vzc2lvbi5nZXRTZXNzaW9uKHJlcSwgcmVzLCB7XG4gICAgICBvdmVycmlkZUdsb2JhbENsYWltVmFsaWRhdG9yczogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gW11cbiAgICAgIH0sXG4gICAgfSlcbiAgfSBjYXRjaCAoZXJyOiBhbnkpIHtcbiAgICBpZiAoZXJyLnR5cGUgPT09IFNlc3Npb24uRXJyb3IuVFJZX1JFRlJFU0hfVE9LRU4pIHtcbiAgICAgIHJldHVybiB7IHByb3BzOiB7IGZyb21TdXBlcnRva2VuczogJ25lZWRzLXJlZnJlc2gnIH0gfVxuICAgIH0gZWxzZSBpZiAoZXJyLnR5cGUgPT09IFNlc3Npb24uRXJyb3IuVU5BVVRIT1JJU0VEKSB7XG4gICAgICAvLyB0aGlzIHdpbGwgZm9yY2UgdGhlIGZyb250ZW5kIHRvIHRyeSBhbmQgcmVmcmVzaCB3aGljaCB3aWxsIGZhaWxcbiAgICAgIC8vIGNsZWFyaW5nIGFsbCBjb29raWVzIGFuZCByZWRpcmVjdGluZyB0aGUgdXNlciB0byB0aGUgbG9naW4gc2NyZWVuLlxuICAgICAgcmV0dXJuIHsgcHJvcHM6IHsgZnJvbVN1cGVydG9rZW5zOiAnbmVlZHMtcmVmcmVzaCcgfSB9XG4gICAgfVxuICAgIHRocm93IGVyclxuICB9XG5cbiAgaWYgKCFzZXNzaW9uPy5nZXRVc2VySWQoKSkge1xuICAgIHJldHVybiB7XG4gICAgICByZWRpcmVjdDoge1xuICAgICAgICBkZXN0aW5hdGlvbjogJy9Vc2VyL0xvZ2luL1VzZXJMb2dpbicsXG4gICAgICAgIHBlcm1hbmVudDogZmFsc2UsXG4gICAgICB9LFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcHJvcHM6IHtcbiAgICAgIHN1Yjogc2Vzc2lvbi5nZXRVc2VySWQoKSxcbiAgICB9XG4gIH1cbn1cblxuXG50eXBlIFByb3BzID0ge1xuICAgIGlkOiBzdHJpbmcsXG4gICAgY2xvc2VUcmFpbkV2ZW50OiAoKSA9PiB2b2lkLFxuICAgIGNsaWVudDogQXBvbGxvQ2xpZW50PE5vcm1hbGl6ZWRDYWNoZU9iamVjdD4sXG4gICAgc3ViOiBzdHJpbmcsXG59XG5cblxuZnVuY3Rpb24gVXNlclRyYWluRXZlbnQocHJvcHM6IFByb3BzKSB7XG4gICAgY29uc3QgW2NvcHlBdmFpbGFiaWxpdHksIHNldENvcHlBdmFpbGFiaWxpdHldID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpXG4gICAgY29uc3QgW2NvcHlUaW1lQmxvY2tpbmcsIHNldENvcHlUaW1lQmxvY2tpbmddID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpXG4gICAgY29uc3QgW2NvcHlUaW1lUHJlZmVyZW5jZSwgc2V0Q29weVRpbWVQcmVmZXJlbmNlXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKVxuICAgIGNvbnN0IFtjb3B5UmVtaW5kZXJzLCBzZXRDb3B5UmVtaW5kZXJzXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKVxuICAgIGNvbnN0IFtjb3B5UHJpb3JpdHlMZXZlbCwgc2V0Q29weVByaW9yaXR5TGV2ZWxdID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpXG4gICAgY29uc3QgW2NvcHlNb2RpZmlhYmxlLCBzZXRDb3B5TW9kaWZpYWJsZV0gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSlcbiAgICBjb25zdCBbY29weUNhdGVnb3JpZXMsIHNldENvcHlDYXRlZ29yaWVzXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKVxuICAgIGNvbnN0IFtjb3B5SXNCcmVhaywgc2V0Q29weUlzQnJlYWtdID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpXG4gICAgY29uc3QgW2NvcHlJc01lZXRpbmcsIHNldENvcHlJc01lZXRpbmddID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpXG4gICAgY29uc3QgW2NvcHlJc0V4dGVybmFsTWVldGluZywgc2V0Q29weUlzRXh0ZXJuYWxNZWV0aW5nXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKVxuICAgIGNvbnN0IFtjb3B5RHVyYXRpb24sIHNldENvcHlEdXJhdGlvbl0gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSlcbiAgICBjb25zdCBbYWN0aXZlSW5kZXgsIHNldEFjdGl2ZUluZGV4XSA9IHVzZVN0YXRlPG51bWJlcj4oMClcbiAgICBjb25zdCBbY29tcGxldGVkU3RlcCwgc2V0Q29tcGxldGVkU3RlcF0gPSB1c2VTdGF0ZTxudW1iZXIgfCB1bmRlZmluZWQ+KClcbiAgICBjb25zdCBbY29weUNvbG9yLCBzZXRDb3B5Q29sb3JdID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpXG4gICAgXG4gICAgY29uc3QgdG9hc3QgPSB1c2VUb2FzdCgpXG4gICAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKClcbiAgICBcblxuICAgIGNvbnN0IGlkID0gcHJvcHM/LmlkXG4gICAgY29uc3QgdXNlcklkID0gcHJvcHM/LnN1YlxuICAgIGNvbnN0IGNsaWVudCA9IHByb3BzPy5jbGllbnRcbiAgICBjb25zdCBjbG9zZVRyYWluRXZlbnQgPSBwcm9wcz8uY2xvc2VUcmFpbkV2ZW50XG5cbiAgICBjb25zb2xlLmxvZyhpZCwgJyBpZCBpbnNpZGUgdXNlclRyYWluRXZlbnQnKVxuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpZCB8fCAhY2xpZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBldmVudCA9IGF3YWl0IGdldEV2ZW50V2l0aElkKGNsaWVudCwgaWQpXG4gICAgICAgICAgICAgICAgaWYgKCFldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZXZlbnQgbm90IGZvdW5kJylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChldmVudD8uaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICAgICAgICAgIHNldENvcHlBdmFpbGFiaWxpdHkoZXZlbnQuY29weUF2YWlsYWJpbGl0eSlcbiAgICAgICAgICAgICAgICAgICAgc2V0Q29weVRpbWVCbG9ja2luZyhldmVudC5jb3B5VGltZUJsb2NraW5nKVxuICAgICAgICAgICAgICAgICAgICBzZXRDb3B5VGltZVByZWZlcmVuY2UoZXZlbnQuY29weVRpbWVQcmVmZXJlbmNlKVxuICAgICAgICAgICAgICAgICAgICBzZXRDb3B5UmVtaW5kZXJzKGV2ZW50LmNvcHlSZW1pbmRlcnMpXG4gICAgICAgICAgICAgICAgICAgIHNldENvcHlQcmlvcml0eUxldmVsKGV2ZW50LmNvcHlQcmlvcml0eUxldmVsKVxuICAgICAgICAgICAgICAgICAgICBzZXRDb3B5TW9kaWZpYWJsZShldmVudC5jb3B5TW9kaWZpYWJsZSlcbiAgICAgICAgICAgICAgICAgICAgc2V0Q29weUNhdGVnb3JpZXMoZXZlbnQuY29weUNhdGVnb3JpZXMpXG4gICAgICAgICAgICAgICAgICAgIHNldENvcHlJc0JyZWFrKGV2ZW50LmNvcHlJc0JyZWFrKVxuICAgICAgICAgICAgICAgICAgICBzZXRDb3B5SXNNZWV0aW5nKGV2ZW50LmNvcHlJc01lZXRpbmcpXG4gICAgICAgICAgICAgICAgICAgIHNldENvcHlJc0V4dGVybmFsTWVldGluZyhldmVudC5jb3B5SXNFeHRlcm5hbE1lZXRpbmcpXG4gICAgICAgICAgICAgICAgICAgIHNldENvcHlEdXJhdGlvbihldmVudC5jb3B5RHVyYXRpb24pXG4gICAgICAgICAgICAgICAgICAgIHNldENvcHlDb2xvcihldmVudC5jb3B5Q29sb3IgfHwgZmFsc2UpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUsICcgZXJyb3IgZ2V0dGluZyBldmVudCcpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKClcbiAgICB9LCBbY2xpZW50LCBpZF0pXG5cbiAgICBjb25zdCB0cmFpbkV2ZW50ID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKCFjbGllbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHRyYWluRXZlbnRGb3JQbGFubmluZyhcbiAgICAgICAgICAgICAgICBjbGllbnQsXG4gICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgY29weUF2YWlsYWJpbGl0eSxcbiAgICAgICAgICAgICAgICBjb3B5VGltZUJsb2NraW5nLFxuICAgICAgICAgICAgICAgIGNvcHlUaW1lUHJlZmVyZW5jZSxcbiAgICAgICAgICAgICAgICBjb3B5UmVtaW5kZXJzLFxuICAgICAgICAgICAgICAgIGNvcHlQcmlvcml0eUxldmVsLFxuICAgICAgICAgICAgICAgIGNvcHlNb2RpZmlhYmxlLFxuICAgICAgICAgICAgICAgIGNvcHlDYXRlZ29yaWVzLFxuICAgICAgICAgICAgICAgIGNvcHlJc0JyZWFrLFxuICAgICAgICAgICAgICAgIGNvcHlJc01lZXRpbmcsXG4gICAgICAgICAgICAgICAgY29weUlzRXh0ZXJuYWxNZWV0aW5nLFxuICAgICAgICAgICAgICAgIGNvcHlEdXJhdGlvbixcbiAgICAgICAgICAgICAgICBjb3B5Q29sb3IsXG4gICAgICAgICAgICApXG5cbiAgICAgICAgICAgIHRvYXN0KHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0V2ZW50IHRyYWluZWQnLFxuICAgICAgICAgICAgICAgIHN0YXR1czogJ3N1Y2Nlc3MnLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRXZlbnQgdHJhaW5lZCBzdWNjZXNzZnVsbHknLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiA5MDAwLFxuICAgICAgICAgICAgICAgIGlzQ2xvc2FibGU6IHRydWUsXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBjbG9zZVRyYWluRXZlbnQoKVxuICAgICAgICAgICAgXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUsICcgZXJyb3IgdHJhaW5pbmcgZXZlbnQnKVxuICAgICAgICAgICAgdG9hc3Qoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnRXZlbnQgd2FzIHRyYWluZWQnLFxuICAgICAgICAgICAgICAgIHN0YXR1czogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0V2ZW50IGlzIG5vdCB0cmFpbmVkIHN1Y2Nlc3NmdWxseScsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDkwMDAsXG4gICAgICAgICAgICAgICAgaXNDbG9zYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBvbkFjdGl2ZUluZGV4Q2hhbmdlZCA9IChpbmRleDogbnVtYmVyKSA9PiBzZXRBY3RpdmVJbmRleChpbmRleClcbiAgICBcbiAgICBjb25zdCBnb1RvUHJldlN0ZXAgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHByZXZBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4XG4gICAgICAgIGNvbnN0IG5ld0FjdGl2ZUluZGV4ID0gcHJldkFjdGl2ZUluZGV4ID09PSAwID8gMCA6IHByZXZBY3RpdmVJbmRleCAtIDFcbiAgICAgICAgc2V0QWN0aXZlSW5kZXgobmV3QWN0aXZlSW5kZXgpXG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHJlbmRlclByZXZCdXR0b24gPSAoKSA9PiB7XG4gICAgICAgIGlmIChhY3RpdmVJbmRleCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gPEJveCBwdD17eyBwaG9uZTogJ20nLCB0YWJsZXQ6ICdzJyB9fSAvPlxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxCb3ggcD17eyBwaG9uZTogJ3MnLCB0YWJsZXQ6ICdtJyB9fT5cbiAgICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e2dvVG9QcmV2U3RlcH0+XG4gICAgICAgICAgICAgICAgICAgIEJhY2tcbiAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgKVxuICAgIH1cbiAgXG4gICAgY29uc3QgZ29Ub05leHRTdGVwID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBwcmV2QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleFxuICAgICAgICBjb25zdCBwcmV2Q29tcGxldGVkU3RlcCA9IGNvbXBsZXRlZFN0ZXBcblxuICAgICAgICBpZiAocHJldkFjdGl2ZUluZGV4ID09PSA0KSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBuZXdBY3RpdmVJbmRleCA9IHByZXZBY3RpdmVJbmRleCArIDFcblxuICAgICAgICBpZiAoIXByZXZDb21wbGV0ZWRTdGVwIHx8IChwcmV2Q29tcGxldGVkU3RlcCA8IHByZXZBY3RpdmVJbmRleCkpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0NvbXBsZXRlZFN0ZXAgPSBwcmV2QWN0aXZlSW5kZXhcbiAgICAgICAgICAgIHNldENvbXBsZXRlZFN0ZXAobmV3Q29tcGxldGVkU3RlcClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXdBY3RpdmVJbmRleCAhPT0gcHJldkFjdGl2ZUluZGV4KSB7XG4gICAgICAgICAgICBzZXRBY3RpdmVJbmRleChuZXdBY3RpdmVJbmRleClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHJlbmRlck5leHRCdXR0b24gPSAoKSA9PiB7XG4gICAgICAgIGlmIChhY3RpdmVJbmRleCA9PT0gNCkge1xuICAgICAgICByZXR1cm4gPEJveCBwdD17eyBwaG9uZTogJ20nLCB0YWJsZXQ6ICdzJyB9fS8+XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICA8Qm94IHA9e3sgcGhvbmU6ICdzJywgdGFibGV0OiAnbScgfX0+XG4gICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e2dvVG9OZXh0U3RlcH0+XG4gICAgICAgICAgICAgICAgTmV4dFxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvQm94PlxuICAgICAgICApXG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHJlbmRlckN1cnJlbnRTdGVwID0gKCkgPT4ge1xuICAgICAgIFxuICAgICAgICBzd2l0Y2ggKGFjdGl2ZUluZGV4KSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgPEJveCBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19IGZsZXg9ezF9IGFsaWduSXRlbXM9XCJjZW50ZXJcIiBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFRyYWluRXZlbnRCYXNlU3RlcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHlBdmFpbGFiaWxpdHk9e2NvcHlBdmFpbGFiaWxpdHl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29weVRpbWVCbG9ja2luZz17Y29weVRpbWVCbG9ja2luZ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5VGltZVByZWZlcmVuY2U9e2NvcHlUaW1lUHJlZmVyZW5jZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRQYXJlbnRDb3B5QXZhaWxhYmlsaXR5PXtzZXRDb3B5QXZhaWxhYmlsaXR5fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFBhcmVudENvcHlUaW1lQmxvY2tpbmc9e3NldENvcHlUaW1lQmxvY2tpbmd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UGFyZW50Q29weVRpbWVQcmVmZXJlbmNlPXtzZXRDb3B5VGltZVByZWZlcmVuY2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJveCBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19IHA9e3sgcGhvbmU6ICdzJywgdGFibGV0OiAnbScgfX0gZmxleERpcmVjdGlvbj1cInJvd1wiIGp1c3RpZnlDb250ZW50PVwic3BhY2UtYmV0d2VlblwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Qm94IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3JlbmRlck5leHRCdXR0b24oKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJveD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tbGluayBuby11bmRlcmxpbmUgaG92ZXI6bm8tdW5kZXJsaW5lXCIgb25DbGljaz17Y2xvc2VUcmFpbkV2ZW50fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2xvc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgPEJveCBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19IGZsZXg9ezF9IGFsaWduSXRlbXM9XCJjZW50ZXJcIiBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFRyYWluRXZlbnRCYXNlU3RlcDIgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29weU1vZGlmaWFibGU9e2NvcHlNb2RpZmlhYmxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHlDYXRlZ29yaWVzPXtjb3B5Q2F0ZWdvcmllc31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5SXNCcmVhaz17Y29weUlzQnJlYWt9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UGFyZW50Q29weU1vZGlmaWFibGU9e3NldENvcHlNb2RpZmlhYmxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFBhcmVudENvcHlDYXRlZ29yaWVzPXtzZXRDb3B5Q2F0ZWdvcmllc31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRQYXJlbnRDb3B5SXNCcmVhaz17c2V0Q29weUlzQnJlYWt9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJveCBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19IGZsZXhEaXJlY3Rpb249XCJyb3dcIiBqdXN0aWZ5Q29udGVudD1cInNwYWNlLWJldHdlZW5cIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3JlbmRlclByZXZCdXR0b24oKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cmVuZGVyTmV4dEJ1dHRvbigpfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Qm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1saW5rIG5vLXVuZGVybGluZSBob3Zlcjpuby11bmRlcmxpbmVcIiBvbkNsaWNrPXtjbG9zZVRyYWluRXZlbnR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbG9zZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICA8Qm94IHN0eWxlPXt7IHdpZHRoOiAnMTAwJScgfX0gZmxleD17MX0gYWxpZ25JdGVtcz1cImNlbnRlclwiIGp1c3RpZnlDb250ZW50PVwiY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHJhaW5FdmVudEJhc2VTdGVwM1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHlJc01lZXRpbmc9e2NvcHlJc01lZXRpbmd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29weUlzRXh0ZXJuYWxNZWV0aW5nPXtjb3B5SXNFeHRlcm5hbE1lZXRpbmd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29weUR1cmF0aW9uPXtjb3B5RHVyYXRpb259XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UGFyZW50Q29weUlzTWVldGluZz17c2V0Q29weUlzTWVldGluZ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRQYXJlbnRDb3B5SXNFeHRlcm5hbE1lZXRpbmc9e3NldENvcHlJc0V4dGVybmFsTWVldGluZ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRQYXJlbnRDb3B5RHVyYXRpb249e3NldENvcHlEdXJhdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5Q29sb3I9e2NvcHlDb2xvcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRQYXJlbnRDb3B5Q29sb3I9e3NldENvcHlDb2xvcn1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Qm94IHN0eWxlPXt7IHdpZHRoOiAnMTAwJScgfX0gcD17eyBwaG9uZTogJ3MnLCB0YWJsZXQ6ICdtJyB9fSBmbGV4RGlyZWN0aW9uPVwicm93XCIganVzdGlmeUNvbnRlbnQ9XCJzcGFjZS1iZXR3ZWVuXCIgYWxpZ25JdGVtcz1cImNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyZW5kZXJQcmV2QnV0dG9uKCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3JlbmRlck5leHRCdXR0b24oKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJveD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tbGluayBuby11bmRlcmxpbmUgaG92ZXI6bm8tdW5kZXJsaW5lXCIgb25DbGljaz17Y2xvc2VUcmFpbkV2ZW50fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2xvc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxCb3ggc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fSBmbGV4PXsxfSBhbGlnbkl0ZW1zPVwiY2VudGVyXCIganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPFRyYWluRXZlbnRCYXNlU3RlcDRcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFBhcmVudENvcHlSZW1pbmRlcnM9e3NldENvcHlSZW1pbmRlcnN9XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRQYXJlbnRDb3B5UHJpb3JpdHlMZXZlbD17c2V0Q29weVByaW9yaXR5TGV2ZWx9ICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcHlSZW1pbmRlcnM9e2NvcHlSZW1pbmRlcnN9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3B5UHJpb3JpdHlMZXZlbD17Y29weVByaW9yaXR5TGV2ZWx9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDxCb3ggc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fSBwPXt7IHBob25lOiAncycsIHRhYmxldDogJ20nIH19IGZsZXhEaXJlY3Rpb249XCJyb3dcIiBqdXN0aWZ5Q29udGVudD1cInNwYWNlLWJldHdlZW5cIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICB7cmVuZGVyUHJldkJ1dHRvbigpfVxuICAgICAgICAgICAgICAgICAgICAgICAge3JlbmRlck5leHRCdXR0b24oKX1cbiAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgICAgIDxCb3g+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tbGluayBuby11bmRlcmxpbmUgaG92ZXI6bm8tdW5kZXJsaW5lXCIgb25DbGljaz17Y2xvc2VUcmFpbkV2ZW50fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbG9zZVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIDxCb3ggc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fSBmbGV4PXsxfSBhbGlnbkl0ZW1zPVwiY2VudGVyXCIganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIiBoZWlnaHQ9XCIxMDAlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Qm94IGZsZXg9ezF9IHN0eWxlPXt7IHdpZHRoOiAnMTAwJScgfX0ganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCIgaGVpZ2h0PVwiMTAwJVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCb3ggc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fSBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRleHQgdmFyaWFudD1cInN1YmhlYWRlck5vcm1hbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVHJhaW4gRXZlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCb3gganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCb3ggcHQ9e3sgcGhvbmU6ICdtJywgdGFibGV0OiAncycgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e3RyYWluRXZlbnR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRyYWluXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCb3ggc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fSBwPXt7IHBob25lOiAncycsIHRhYmxldDogJ20nIH19IGZsZXhEaXJlY3Rpb249XCJyb3dcIiBqdXN0aWZ5Q29udGVudD1cImZsZXgtc3RhcnRcIiB3aWR0aD1cIjEwMCVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cmVuZGVyUHJldkJ1dHRvbigpfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Qm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1saW5rIG5vLXVuZGVybGluZSBob3Zlcjpuby11bmRlcmxpbmVcIiBvbkNsaWNrPXtjbG9zZVRyYWluRXZlbnR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbG9zZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgPEJveCBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxSZWd1bGFyQ2FyZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0IHZhcmlhbnQ9XCJoZWFkZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPb3BzLi4uIHNvbWV0aGluZyB3ZW50IHdyb25nXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1JlZ3VsYXJDYXJkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLWxpbmsgbm8tdW5kZXJsaW5lIGhvdmVyOm5vLXVuZGVybGluZVwiIG9uQ2xpY2s9e2Nsb3NlVHJhaW5FdmVudH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2xvc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICApXG4gICAgICAgIH0gICAgICAgXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPEJveCBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19IGhlaWdodD1cIjEwMCVcIiBmbGV4PXsxfSBhbGlnbkl0ZW1zPVwiY2VudGVyXCIganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgIDxCb3ggcD1cIm1cIiBtPVwibVwiIGJvcmRlclJhZGl1cz1cIm1kXCIgYmFja2dyb3VuZENvbG9yPVwiaW5mb0Jsb2NrQmFja2dyb3VuZFwiIHdpZHRoPXt7IHBob25lOiAnOTAlJywgdGFibGV0OiAnODAlJ319IGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgICAgICA8VGV4dCB2YXJpYW50PVwiYm9keVwiIHRleHRBbGlnbj1cImNlbnRlclwiIGNvbG9yPVwiaW5mb0Jsb2NrVGV4dFwiPlxuICAgICAgICAgICAgICAgICAgICBZb3UgYXJlIHRyYWluaW5nIHRoaXMgZXZlbnQgdG8gYmVjb21lIGEgcmV1c2FibGUgdGVtcGxhdGUuIFdoZW4geW91IGNyZWF0ZSBuZXcgZXZlbnRzIHdpdGggc2ltaWxhciB0aXRsZXMgb3IgZGV0YWlscyBpbiB0aGUgZnV0dXJlLCBBdG9taWMgY2FuIGF1dG9tYXRpY2FsbHkgYXBwbHkgc2V0dGluZ3MgKGxpa2UgZHVyYXRpb24sIGNvbG9yLCBwcmlvcml0eSwgbm90ZXMsIGV0Yy4pIGZyb20gdGhpcyB0cmFpbmVkIGV2ZW50LiBZb3UgY2FuIG1hbmFnZSB3aGljaCBhdHRyaWJ1dGVzIGdldCBjb3BpZWQgaW4gU2V0dGluZ3MgJmd0OyBFdmVudCBEZWZhdWx0cy5cbiAgICAgICAgICAgICAgICAgICAgPFRleHQgdmFyaWFudD1cImxpbmtcIiBvblByZXNzPXsoKSA9PiByb3V0ZXIucHVzaCgnaHR0cHM6Ly9kb2NzLmF0b21pY2xpZmUuYXBwL2RvY3MvZmVhdHVyZXMvZXZlbnQtdHJhaW5pbmcnKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7JyAnfUxlYXJuIG1vcmUgYWJvdXQgZXZlbnQgdHJhaW5pbmdcbiAgICAgICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgIDxXaXphcmRcbiAgICAgICAgICAgICAgICBpdGVtcz17W1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnU3RlcCAxJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ1N0ZXAgMicsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdTdGVwIDMnLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogMyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnU3RlcCA0JyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IDQsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ1RyYWluIEV2ZW50JyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdfVxuXG4gICAgICAgICAgICAgICAgY29tcGxldGVkPXtjb21wbGV0ZWRTdGVwfVxuICAgICAgICAgICAgICAgIGFjdGl2ZUluZGV4PXthY3RpdmVJbmRleH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7cmVuZGVyQ3VycmVudFN0ZXAoKX1cbiAgICAgICAgPC9Cb3g+XG4gICAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBVc2VyVHJhaW5FdmVudFxuXG5cblxuXG5cbiJdfQ==