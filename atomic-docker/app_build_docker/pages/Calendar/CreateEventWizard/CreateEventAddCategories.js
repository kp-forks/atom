"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_native_1 = require("react-native");
const io_1 = require("react-icons/io");
const react_select_1 = __importDefault(require("react-select"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const wizardHelper_1 = require("@lib/Calendar/CreateEventWizard/wizardHelper");
const theme_1 = require("@lib/theme/theme");
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function CreateEventAddCategories(props) {
    const [selectedTagObject, setSelectedTagObject] = (0, react_1.useState)(null);
    const [selectedTag, setSelectedTag] = (0, react_1.useState)();
    // const dark = useColorScheme() === 'dark'
    const setParentSelectedCategories = props?.setParentSelectedCategories;
    const tags = props?.categories;
    const [selectedTagObjects, setSelectedTagObjects] = (0, react_1.useState)(props?.selectedCategories);
    const changeSelectedTag = (item) => {
        console.log(item, ' value inside changeselectedtag');
        setSelectedTag(item);
        setSelectedTagObject((tags?.find(tag => tag?.id === item?.value)) || null);
    };
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Add tags to this event" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 2, justifyContent: "flex-start", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(react_select_1.default, { className: "basic-single", classNamePrefix: "select", defaultValue: { value: tags?.[0]?.id ?? 'null', label: tags?.[0]?.name ?? 'null' }, isSearchable: true, isClearable: true, options: tags?.map(t => ({ label: t?.name, value: t?.id })), value: selectedTag, onChange: changeSelectedTag }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(react_native_1.FlatList, { data: selectedTagObjects, renderItem: ({ item, index }) => ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", alignItems: "center", style: { width: '60%' }, children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: item.name }), (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { hitSlop: 15, onPress: () => (0, wizardHelper_1.removeItemFromCategories)(selectedTagObjects, setSelectedTagObjects, setParentSelectedCategories, index), children: (0, jsx_runtime_1.jsx)(io_1.IoIosClose, { size: "3em", color: theme_1.palette.red }) })] }) })), keyExtractor: (item) => item.id }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 0.5, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)("button", { onClick: () => (0, wizardHelper_1.addItemToCategories)(setSelectedTag, selectedTagObject, setSelectedTagObject, selectedTagObjects, setSelectedTagObjects, setParentSelectedCategories), children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, flexDirection: "row", justifyContent: "center", alignItems: "center", children: [(0, jsx_runtime_1.jsx)("span", { className: "mr-2", children: (0, jsx_runtime_1.jsx)(io_1.IoIosAdd, { size: "3em", color: theme_1.palette.pinkPrimary }) }), (0, jsx_runtime_1.jsx)("span", { children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", children: "Add" }) })] }) }) })] }));
}
exports.default = CreateEventAddCategories;
//# sourceMappingURL=data:application/json;base64,