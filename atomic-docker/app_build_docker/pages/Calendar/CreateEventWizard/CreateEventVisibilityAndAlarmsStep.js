"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_native_1 = require("react-native");
const io5_1 = require("react-icons/io5");
const picker_1 = require("@react-native-picker/picker");
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const TextField_1 = __importDefault(require("@components/TextField"));
const theme_1 = require("@lib/theme/theme");
const wizardHelper_1 = require("@lib/Calendar/CreateEventWizard/wizardHelper");
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function CreateEventVisibilityAndAlarmsStep(props) {
    const [visibility, setVisibility] = (0, react_1.useState)(props?.visibility);
    const [alarms, setAlarms] = (0, react_1.useState)([]);
    const [alarm, setAlarm] = (0, react_1.useState)(0);
    const [pageOffset, setPageOffset] = (0, react_1.useState)(0);
    const dark = (0, react_native_1.useColorScheme)() === 'dark';
    const setParentVisibility = props?.setParentVisibility;
    const setParentAlarms = props?.setParentAlarms;
    const onVisibilityChange = (value) => {
        setVisibility(value);
        setParentVisibility(value);
    };
    return ((0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '100%' }, flex: 1, alignItems: "center", justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Make this event private or public" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 3, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsxs)(picker_1.Picker, { selectedValue: visibility, onValueChange: onVisibilityChange, children: [(0, jsx_runtime_1.jsx)(picker_1.Picker.Item, { color: dark ? theme_1.palette.white : theme_1.palette.textBlack, value: "default", label: "Default" }, "default"), (0, jsx_runtime_1.jsx)(picker_1.Picker.Item, { color: dark ? theme_1.palette.white : theme_1.palette.textBlack, value: "public", label: "Public" }, "public"), (0, jsx_runtime_1.jsx)(picker_1.Picker.Item, { color: dark ? theme_1.palette.white : theme_1.palette.textBlack, value: "private", label: "Private" }, "private")] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 3, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(react_native_1.FlatList, { data: alarms, renderItem: ({ item, index }) => ((0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", style: { width: '70%' }, children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: `${item} minutes before` }), (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { hitSlop: 15, onPress: () => (0, wizardHelper_1.removeItemFromAlarms)(index, alarms, setAlarms, setParentAlarms), children: (0, jsx_runtime_1.jsx)(io5_1.IoTrash, { size: "1.5em", color: theme_1.palette.red }) })] }) })), keyExtractor: (item, index) => `${item}-${index}` }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, flexDirection: "row", justifyContent: "center", alignItems: "center", style: { width: '40%' }, children: [(0, jsx_runtime_1.jsx)("div", { className: "mr-2", children: (0, jsx_runtime_1.jsx)(TextField_1.default, { type: "number", onChange: (e) => setAlarm(parseInt(e?.target?.value?.replace(/[^0-9.]/g, ''), 10)), value: `${alarm}`, placeholder: "0" }) }), (0, jsx_runtime_1.jsx)("div", { className: "ml-2", children: (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: () => (0, wizardHelper_1.addItemToAlarms)(alarm, alarms, setAlarms, setParentAlarms, setAlarm), children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", children: "Add Alarm" }) }) })] }) })] }) }));
}
exports.default = CreateEventVisibilityAndAlarmsStep;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3JlYXRlRXZlbnRWaXNpYmlsaXR5QW5kQWxhcm1zU3RlcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNyZWF0ZUV2ZW50VmlzaWJpbGl0eUFuZEFsYXJtc1N0ZXAudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBd0JBLGdEQXFDQzs7QUE3REQsaUNBSWU7QUFDZCwrQ0FJcUI7QUFFdEIseUNBQTBDO0FBQzFDLHdEQUFrRDtBQUNsRCxpRUFBd0M7QUFDeEMsbUVBQTBDO0FBQzFDLHNFQUE2QztBQUM3Qyw0Q0FBMEM7QUFFMUMsK0VBQW9HO0FBRXBHLHdFQUE4QztBQUM5QyxpRUFBNkQ7QUFDN0QsOEVBQXFEO0FBRTlDLEtBQUssVUFBVSxrQkFBa0IsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQWlEO0lBQ2xHLDBGQUEwRjtJQUMxRixzQ0FBc0M7SUFDdEMseUVBQXlFO0lBQ3pFLDBCQUFlLENBQUMsSUFBSSxDQUFDLElBQUEsNkJBQWEsR0FBRSxDQUFDLENBQUE7SUFDckMsSUFBSSxPQUFPLENBQUE7SUFDWCxJQUFJLENBQUM7UUFDSCxPQUFPLEdBQUcsTUFBTSxpQkFBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFO1lBQzNDLDZCQUE2QixFQUFFLEtBQUs7Z0JBQ2xDLE9BQU8sRUFBRSxDQUFBO1lBQ1gsQ0FBQztTQUNGLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFBQyxPQUFPLEdBQVEsRUFBRSxDQUFDO1FBQ2xCLElBQUksR0FBRyxDQUFDLElBQUksS0FBSyxpQkFBTyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBQ2pELE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLEVBQUUsQ0FBQTtRQUN4RCxDQUFDO2FBQU0sSUFBSSxHQUFHLENBQUMsSUFBSSxLQUFLLGlCQUFPLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQ25ELGtFQUFrRTtZQUNsRSxxRUFBcUU7WUFDckUsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsRUFBRSxDQUFBO1FBQ3hELENBQUM7UUFDRCxNQUFNLEdBQUcsQ0FBQTtJQUNYLENBQUM7SUFFRCxJQUFJLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUM7UUFDMUIsT0FBTztZQUNMLFFBQVEsRUFBRTtnQkFDUixXQUFXLEVBQUUsdUJBQXVCO2dCQUNwQyxTQUFTLEVBQUUsS0FBSzthQUNqQjtTQUNGLENBQUE7SUFDSCxDQUFDO0lBRUQsT0FBTztRQUNMLEtBQUssRUFBRTtZQUNMLEdBQUcsRUFBRSxPQUFPLENBQUMsU0FBUyxFQUFFO1NBQ3pCO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUFXRCxTQUFTLGtDQUFrQyxDQUFDLEtBQVk7SUFDdEQsTUFBTSxDQUFDLFVBQVUsRUFBRSxhQUFhLENBQUMsR0FBRyxJQUFBLGdCQUFRLEVBQWlCLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQTtJQUMvRSxNQUFNLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxHQUFHLElBQUEsZ0JBQVEsRUFBVyxFQUFFLENBQUMsQ0FBQTtJQUNsRCxNQUFNLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxHQUFHLElBQUEsZ0JBQVEsRUFBUyxDQUFDLENBQUMsQ0FBQTtJQUM3QyxNQUFNLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxHQUFHLElBQUEsZ0JBQVEsRUFBUyxDQUFDLENBQUMsQ0FBQTtJQUl2RCxNQUFNLElBQUksR0FBRyxJQUFBLDZCQUFjLEdBQUUsS0FBSyxNQUFNLENBQUE7SUFDeEMsTUFBTSxtQkFBbUIsR0FBRyxLQUFLLEVBQUUsbUJBQW1CLENBQUE7SUFDdEQsTUFBTSxlQUFlLEdBQUcsS0FBSyxFQUFFLGVBQWUsQ0FBQTtJQUU5QyxNQUFNLGtCQUFrQixHQUFHLENBQUMsS0FBcUIsRUFBRSxFQUFFO1FBQ25ELGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUNwQixtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUM1QixDQUFDLENBQUE7SUFFRCxPQUFPLENBQ0wsdUJBQUMsYUFBRyxJQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBQyxRQUFRLEVBQUMsY0FBYyxFQUFDLFFBQVEsWUFDL0Usd0JBQUMsYUFBRyxJQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBQyxRQUFRLEVBQUMsY0FBYyxFQUFDLFFBQVEsYUFDakYsdUJBQUMsYUFBRyxJQUFDLElBQUksRUFBRSxDQUFDLEVBQUcsY0FBYyxFQUFDLFFBQVEsRUFBQyxVQUFVLEVBQUMsUUFBUSxFQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUMsWUFDaEYsdUJBQUMsY0FBSSxJQUFDLE9BQU8sRUFBQyxjQUFjLGtEQUVyQixHQUNILEVBQ04sdUJBQUMsYUFBRyxJQUFDLElBQUksRUFBRSxDQUFDLEVBQUcsY0FBYyxFQUFDLFFBQVEsRUFBQyxVQUFVLEVBQUMsUUFBUSxFQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUMsWUFDaEYsd0JBQUMsZUFBTSxJQUNMLGFBQWEsRUFBRSxVQUFVLEVBQ3pCLGFBQWEsRUFBRSxrQkFBa0IsYUFFL0IsdUJBQUMsZUFBTSxDQUFDLElBQUksSUFBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxlQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxlQUFPLENBQUMsU0FBUyxFQUFpQixLQUFLLEVBQUMsU0FBUyxFQUFDLEtBQUssRUFBQyxTQUFTLElBQXpDLFNBQVMsQ0FBbUMsRUFDL0csdUJBQUMsZUFBTSxDQUFDLElBQUksSUFBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxlQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxlQUFPLENBQUMsU0FBUyxFQUFnQixLQUFLLEVBQUMsUUFBUSxFQUFDLEtBQUssRUFBQyxRQUFRLElBQXRDLFFBQVEsQ0FBaUMsRUFDNUcsdUJBQUMsZUFBTSxDQUFDLElBQUksSUFBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxlQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxlQUFPLENBQUMsU0FBUyxFQUFpQixLQUFLLEVBQUMsU0FBUyxFQUFDLEtBQUssRUFBQyxTQUFTLElBQXpDLFNBQVMsQ0FBbUMsSUFDMUcsR0FDTCxFQUNOLHVCQUFDLGFBQUcsSUFBQyxJQUFJLEVBQUUsQ0FBQyxFQUFHLGNBQWMsRUFBQyxRQUFRLEVBQUMsVUFBVSxFQUFDLFFBQVEsRUFBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDLFlBQ2hGLHVCQUFDLHVCQUFRLElBQ1AsSUFBSSxFQUFFLE1BQU0sRUFDWixVQUFVLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FDL0IsdUJBQUMsYUFBRyxJQUFDLGNBQWMsRUFBQyxRQUFRLEVBQUMsVUFBVSxFQUFDLFFBQVEsRUFBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDLFlBQ3RFLHdCQUFDLGFBQUcsSUFBQyxhQUFhLEVBQUMsS0FBSyxFQUFDLGNBQWMsRUFBQyxlQUFlLEVBQUMsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQyxhQUM1RSx1QkFBQyxjQUFJLElBQUMsT0FBTyxFQUFDLGNBQWMsWUFDekIsR0FBRyxJQUFJLGlCQUFpQixHQUNwQixFQUNQLHVCQUFDLHdCQUFTLElBQUMsT0FBTyxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBQSxtQ0FBb0IsRUFBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxlQUFlLENBQUMsWUFDcEcsdUJBQUMsYUFBTyxJQUFDLElBQUksRUFBQyxPQUFPLEVBQUMsS0FBSyxFQUFFLGVBQU8sQ0FBQyxHQUFHLEdBQUksR0FDbEMsSUFDUixHQUNGLENBQ1AsRUFDRCxZQUFZLEVBQUUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUksSUFBSSxLQUFLLEVBQUUsR0FDakQsR0FDRSxFQUNOLHVCQUFDLGFBQUcsSUFBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLGNBQWMsRUFBQyxRQUFRLEVBQUMsVUFBVSxFQUFDLFFBQVEsRUFBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDLFlBQy9FLHdCQUFDLGFBQUcsSUFBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLGFBQWEsRUFBQyxLQUFLLEVBQUMsY0FBYyxFQUFDLFFBQVEsRUFBQyxVQUFVLEVBQUMsUUFBUSxFQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsYUFFbkcsZ0NBQUssU0FBUyxFQUFDLE1BQU0sWUFDbkIsdUJBQUMsbUJBQVMsSUFDUixJQUFJLEVBQUMsUUFBUSxFQUNiLFFBQVEsRUFBRSxDQUFDLENBQWdDLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUNqSCxLQUFLLEVBQUUsR0FBRyxLQUFLLEVBQUUsRUFDakIsV0FBVyxFQUFDLEdBQUcsR0FDZixHQUNFLEVBQ04sZ0NBQUssU0FBUyxFQUFDLE1BQU0sWUFDbkIsdUJBQUMsd0JBQVMsSUFBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBQSw4QkFBZSxFQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxRQUFRLENBQUMsWUFDNUYsdUJBQUMsY0FBSSxJQUFDLE9BQU8sRUFBQyxZQUFZLDBCQUVuQixHQUNHLEdBQ1IsSUFDRixHQUNGLElBQ0YsR0FDSixDQUNQLENBQUE7QUFDSCxDQUFDO0FBRUQsa0JBQWUsa0NBQWtDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHtcbiAgdXNlU3RhdGUsXG4gIERpc3BhdGNoLFxuICBTZXRTdGF0ZUFjdGlvbixcbiB9IGZyb20gJ3JlYWN0J1xuIGltcG9ydCB7XG4gICBGbGF0TGlzdCxcbiAgIFByZXNzYWJsZSxcbiAgdXNlQ29sb3JTY2hlbWUsXG4gfSBmcm9tICdyZWFjdC1uYXRpdmUnXG5cbmltcG9ydCB7ICBJb1RyYXNoIH0gZnJvbSBcInJlYWN0LWljb25zL2lvNVwiXG5pbXBvcnQge1BpY2tlcn0gZnJvbSAnQHJlYWN0LW5hdGl2ZS1waWNrZXIvcGlja2VyJ1xuaW1wb3J0IEJveCBmcm9tICdAY29tcG9uZW50cy9jb21tb24vQm94J1xuaW1wb3J0IFRleHQgZnJvbSAnQGNvbXBvbmVudHMvY29tbW9uL1RleHQnXG5pbXBvcnQgVGV4dEZpZWxkIGZyb20gJ0Bjb21wb25lbnRzL1RleHRGaWVsZCdcbmltcG9ydCB7IHBhbGV0dGUgfSBmcm9tICdAbGliL3RoZW1lL3RoZW1lJ1xuaW1wb3J0IHsgVmlzaWJpbGl0eVR5cGUgfSBmcm9tICdAbGliL2NhbGVuZGFyTGliL3R5cGVzJ1xuaW1wb3J0IHsgYWRkSXRlbVRvQWxhcm1zLCByZW1vdmVJdGVtRnJvbUFsYXJtcyB9IGZyb20gJ0BsaWIvQ2FsZW5kYXIvQ3JlYXRlRXZlbnRXaXphcmQvd2l6YXJkSGVscGVyJ1xuaW1wb3J0IHsgTmV4dEFwaVJlcXVlc3QsIE5leHRBcGlSZXNwb25zZSB9IGZyb20gJ25leHQnO1xuaW1wb3J0IHN1cGVydG9rZW5zTm9kZSBmcm9tICdzdXBlcnRva2Vucy1ub2RlJ1xuaW1wb3J0IHsgYmFja2VuZENvbmZpZyB9IGZyb20gJy4uLy4uLy4uL2NvbmZpZy9iYWNrZW5kQ29uZmlnJ1xuaW1wb3J0IFNlc3Npb24gZnJvbSAnc3VwZXJ0b2tlbnMtbm9kZS9yZWNpcGUvc2Vzc2lvbidcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFNlcnZlclNpZGVQcm9wcyh7IHJlcSwgcmVzIH06IHsgcmVxOiBOZXh0QXBpUmVxdWVzdCwgcmVzOiBOZXh0QXBpUmVzcG9uc2UgfSkge1xuICAvLyBOb3RpY2UgaG93IHRoZSBzZXJ2ZXIgdXNlcyBgQVBJYCBmcm9tIGB3aXRoU1NSQ29udGV4dGAsIGluc3RlYWQgb2YgdGhlIHRvcC1sZXZlbCBgQVBJYC5cbiAgLy8gY29uc3QgU1NSID0gd2l0aFNTUkNvbnRleHQoeyByZXEgfSlcbiAgLy8gdGhpcyBydW5zIG9uIHRoZSBiYWNrZW5kLCBzbyB3ZSBtdXN0IGNhbGwgaW5pdCBvbiBzdXBlcnRva2Vucy1ub2RlIFNES1xuICBzdXBlcnRva2Vuc05vZGUuaW5pdChiYWNrZW5kQ29uZmlnKCkpXG4gIGxldCBzZXNzaW9uXG4gIHRyeSB7XG4gICAgc2Vzc2lvbiA9IGF3YWl0IFNlc3Npb24uZ2V0U2Vzc2lvbihyZXEsIHJlcywge1xuICAgICAgb3ZlcnJpZGVHbG9iYWxDbGFpbVZhbGlkYXRvcnM6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFtdXG4gICAgICB9LFxuICAgIH0pXG4gIH0gY2F0Y2ggKGVycjogYW55KSB7XG4gICAgaWYgKGVyci50eXBlID09PSBTZXNzaW9uLkVycm9yLlRSWV9SRUZSRVNIX1RPS0VOKSB7XG4gICAgICByZXR1cm4geyBwcm9wczogeyBmcm9tU3VwZXJ0b2tlbnM6ICduZWVkcy1yZWZyZXNoJyB9IH1cbiAgICB9IGVsc2UgaWYgKGVyci50eXBlID09PSBTZXNzaW9uLkVycm9yLlVOQVVUSE9SSVNFRCkge1xuICAgICAgLy8gdGhpcyB3aWxsIGZvcmNlIHRoZSBmcm9udGVuZCB0byB0cnkgYW5kIHJlZnJlc2ggd2hpY2ggd2lsbCBmYWlsXG4gICAgICAvLyBjbGVhcmluZyBhbGwgY29va2llcyBhbmQgcmVkaXJlY3RpbmcgdGhlIHVzZXIgdG8gdGhlIGxvZ2luIHNjcmVlbi5cbiAgICAgIHJldHVybiB7IHByb3BzOiB7IGZyb21TdXBlcnRva2VuczogJ25lZWRzLXJlZnJlc2gnIH0gfVxuICAgIH1cbiAgICB0aHJvdyBlcnJcbiAgfVxuXG4gIGlmICghc2Vzc2lvbj8uZ2V0VXNlcklkKCkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVkaXJlY3Q6IHtcbiAgICAgICAgZGVzdGluYXRpb246ICcvVXNlci9Mb2dpbi9Vc2VyTG9naW4nLFxuICAgICAgICBwZXJtYW5lbnQ6IGZhbHNlLFxuICAgICAgfSxcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHByb3BzOiB7XG4gICAgICBzdWI6IHNlc3Npb24uZ2V0VXNlcklkKCksXG4gICAgfVxuICB9XG59XG5cblxudHlwZSBQcm9wcyA9IHtcbiAgc2V0UGFyZW50VmlzaWJpbGl0eTogRGlzcGF0Y2g8U2V0U3RhdGVBY3Rpb248VmlzaWJpbGl0eVR5cGU+PixcbiAgdXNlcklkOiBzdHJpbmcsXG4gIHZpc2liaWxpdHk6IFZpc2liaWxpdHlUeXBlLFxuICBhbGFybXM6IG51bWJlcltdLFxuICBzZXRQYXJlbnRBbGFybXM6IERpc3BhdGNoPFNldFN0YXRlQWN0aW9uPG51bWJlcltdPj4sXG59XG5cbmZ1bmN0aW9uIENyZWF0ZUV2ZW50VmlzaWJpbGl0eUFuZEFsYXJtc1N0ZXAocHJvcHM6IFByb3BzKSB7XG4gIGNvbnN0IFt2aXNpYmlsaXR5LCBzZXRWaXNpYmlsaXR5XSA9IHVzZVN0YXRlPFZpc2liaWxpdHlUeXBlPihwcm9wcz8udmlzaWJpbGl0eSlcbiAgY29uc3QgW2FsYXJtcywgc2V0QWxhcm1zXSA9IHVzZVN0YXRlPG51bWJlcltdPihbXSlcbiAgY29uc3QgW2FsYXJtLCBzZXRBbGFybV0gPSB1c2VTdGF0ZTxudW1iZXI+KDApXG4gIGNvbnN0IFtwYWdlT2Zmc2V0LCBzZXRQYWdlT2Zmc2V0XSA9IHVzZVN0YXRlPG51bWJlcj4oMClcblxuICBcblxuICBjb25zdCBkYXJrID0gdXNlQ29sb3JTY2hlbWUoKSA9PT0gJ2RhcmsnXG4gIGNvbnN0IHNldFBhcmVudFZpc2liaWxpdHkgPSBwcm9wcz8uc2V0UGFyZW50VmlzaWJpbGl0eVxuICBjb25zdCBzZXRQYXJlbnRBbGFybXMgPSBwcm9wcz8uc2V0UGFyZW50QWxhcm1zXG5cbiAgY29uc3Qgb25WaXNpYmlsaXR5Q2hhbmdlID0gKHZhbHVlOiBWaXNpYmlsaXR5VHlwZSkgPT4ge1xuICAgIHNldFZpc2liaWxpdHkodmFsdWUpXG4gICAgc2V0UGFyZW50VmlzaWJpbGl0eSh2YWx1ZSlcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPEJveCBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19IGZsZXg9ezF9IGFsaWduSXRlbXM9XCJjZW50ZXJcIiBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiPlxuICAgICAgICA8Qm94IHN0eWxlPXt7IHdpZHRoOiAnMTAwJScgfX0gZmxleD17MX0gYWxpZ25JdGVtcz1cImNlbnRlclwiIGp1c3RpZnlDb250ZW50PVwiY2VudGVyXCI+XG4gICAgICAgICAgPEJveCBmbGV4PXsxfSAganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCIgc3R5bGU9e3sgd2lkdGg6ICcxMDAlJ319PlxuICAgICAgICAgICAgPFRleHQgdmFyaWFudD1cIm9wdGlvbkhlYWRlclwiPlxuICAgICAgICAgICAgICBNYWtlIHRoaXMgZXZlbnQgcHJpdmF0ZSBvciBwdWJsaWNcbiAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICA8L0JveD5cbiAgICAgICAgICA8Qm94IGZsZXg9ezN9ICBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIiBzdHlsZT17eyB3aWR0aDogJzEwMCUnfX0+XG4gICAgICAgICAgICA8UGlja2VyXG4gICAgICAgICAgICAgIHNlbGVjdGVkVmFsdWU9e3Zpc2liaWxpdHl9XG4gICAgICAgICAgICAgIG9uVmFsdWVDaGFuZ2U9e29uVmlzaWJpbGl0eUNoYW5nZX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8UGlja2VyLkl0ZW0gY29sb3I9e2RhcmsgPyBwYWxldHRlLndoaXRlIDogcGFsZXR0ZS50ZXh0QmxhY2t9ICBrZXk9XCJkZWZhdWx0XCIgdmFsdWU9XCJkZWZhdWx0XCIgbGFiZWw9XCJEZWZhdWx0XCIgLz5cbiAgICAgICAgICAgICAgICA8UGlja2VyLkl0ZW0gY29sb3I9e2RhcmsgPyBwYWxldHRlLndoaXRlIDogcGFsZXR0ZS50ZXh0QmxhY2t9ICBrZXk9XCJwdWJsaWNcIiB2YWx1ZT1cInB1YmxpY1wiIGxhYmVsPVwiUHVibGljXCIgLz5cbiAgICAgICAgICAgICAgICA8UGlja2VyLkl0ZW0gY29sb3I9e2RhcmsgPyBwYWxldHRlLndoaXRlIDogcGFsZXR0ZS50ZXh0QmxhY2t9ICBrZXk9XCJwcml2YXRlXCIgdmFsdWU9XCJwcml2YXRlXCIgbGFiZWw9XCJQcml2YXRlXCIgLz5cbiAgICAgICAgICAgIDwvUGlja2VyPlxuICAgICAgICAgIDwvQm94PlxuICAgICAgICAgIDxCb3ggZmxleD17M30gIGp1c3RpZnlDb250ZW50PVwiY2VudGVyXCIgYWxpZ25JdGVtcz1cImNlbnRlclwiIHN0eWxlPXt7IHdpZHRoOiAnMTAwJSd9fT5cbiAgICAgICAgICAgIDxGbGF0TGlzdFxuICAgICAgICAgICAgICBkYXRhPXthbGFybXN9XG4gICAgICAgICAgICAgIHJlbmRlckl0ZW09eyh7IGl0ZW0sIGluZGV4IH0pID0+IChcbiAgICAgICAgICAgICAgICA8Qm94IGp1c3RpZnlDb250ZW50PVwiY2VudGVyXCIgYWxpZ25JdGVtcz1cImNlbnRlclwiIHN0eWxlPXt7IHdpZHRoOiAnMTAwJSd9fT5cbiAgICAgICAgICAgICAgICAgIDxCb3ggZmxleERpcmVjdGlvbj1cInJvd1wiIGp1c3RpZnlDb250ZW50PVwic3BhY2UtYmV0d2VlblwiIHN0eWxlPXt7IHdpZHRoOiAnNzAlJ319PlxuICAgICAgICAgICAgICAgICAgICA8VGV4dCB2YXJpYW50PVwib3B0aW9uSGVhZGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAge2Ake2l0ZW19IG1pbnV0ZXMgYmVmb3JlYH1cbiAgICAgICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgICAgICAgICA8UHJlc3NhYmxlIGhpdFNsb3A9ezE1fSBvblByZXNzPXsoKSA9PiByZW1vdmVJdGVtRnJvbUFsYXJtcyhpbmRleCwgYWxhcm1zLCBzZXRBbGFybXMsIHNldFBhcmVudEFsYXJtcyl9PlxuICAgICAgICAgICAgICAgICAgICAgIDxJb1RyYXNoIHNpemU9XCIxLjVlbVwiIGNvbG9yPXtwYWxldHRlLnJlZH0gLz5cbiAgICAgICAgICAgICAgICAgICAgPC9QcmVzc2FibGU+XG4gICAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAga2V5RXh0cmFjdG9yPXsoaXRlbSwgaW5kZXgpID0+IGAke2l0ZW19LSR7aW5kZXh9YH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgPEJveCBmbGV4PXsxfSBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIiBzdHlsZT17eyB3aWR0aDogJzEwMCUnfX0+XG4gICAgICAgICAgICA8Qm94IGZsZXg9ezF9IGZsZXhEaXJlY3Rpb249XCJyb3dcIiBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIiBzdHlsZT17eyB3aWR0aDogJzQwJScgfX0+XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1yLTJcIj5cbiAgICAgICAgICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgICAgICAgICB0eXBlPVwibnVtYmVyXCJcbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZTogeyB0YXJnZXQ6IHsgdmFsdWU6IHN0cmluZyB9IH0pID0+IHNldEFsYXJtKHBhcnNlSW50KGU/LnRhcmdldD8udmFsdWU/LnJlcGxhY2UoL1teMC05Ll0vZywgJycpLCAxMCkpfVxuICAgICAgICAgICAgICAgICAgdmFsdWU9e2Ake2FsYXJtfWB9XG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIjBcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1sLTJcIj5cbiAgICAgICAgICAgICAgICA8UHJlc3NhYmxlIG9uUHJlc3M9eygpID0+IGFkZEl0ZW1Ub0FsYXJtcyhhbGFybSwgYWxhcm1zLCBzZXRBbGFybXMsIHNldFBhcmVudEFsYXJtcywgc2V0QWxhcm0pfT5cbiAgICAgICAgICAgICAgICAgIDxUZXh0IHZhcmlhbnQ9XCJidXR0b25MaW5rXCI+XG4gICAgICAgICAgICAgICAgICAgIEFkZCBBbGFybVxuICAgICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgICAgIDwvUHJlc3NhYmxlPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgIDwvQm94PlxuICAgICAgICA8L0JveD5cbiAgICA8L0JveD5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBDcmVhdGVFdmVudFZpc2liaWxpdHlBbmRBbGFybXNTdGVwXG4gLyoqIGVuZCAqL1xuIl19