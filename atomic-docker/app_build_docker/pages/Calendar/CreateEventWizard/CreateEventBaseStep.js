"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const date_utils_1 = require("@lib/date-utils");
// import DatePicker from 'react-native-date-picker'
// import DateTimePicker from 'react-datetime-picker/dist/entry.nostyle'
const react_2 = require("@chakra-ui/react");
const TextField_1 = __importDefault(require("@components/TextField"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const react_native_1 = require("react-native");
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
const dark = react_native_1.Appearance.getColorScheme() === 'dark';
function CreateEventBaseStep(props) {
    const [title, setTitle] = (0, react_1.useState)(props?.title);
    const [notes, setNotes] = (0, react_1.useState)(props?.notes);
    const [location, setLocation] = (0, react_1.useState)(props?.location);
    const [startDate, setStartDate] = (0, react_1.useState)(props?.startDate);
    const [endDate, setEndDate] = (0, react_1.useState)(props?.endDate);
    const [isStartDatePickerVisible, setIsStartDatePickerVisible] = (0, react_1.useState)(false);
    const [isEndDatePickerVisible, setIsEndDatePickerVisible] = (0, react_1.useState)(false);
    const [pageOffset, setPageOffset] = (0, react_1.useState)(0);
    const { height: fullHeight } = react_native_1.Dimensions.get('window');
    const setParentTitle = props?.setParentTitle;
    const setParentNotes = props?.setParentNotes;
    const setParentLocation = props?.setParentLocation;
    const setParentEndDate = props?.setParentEndDate;
    const setParentStartDate = props?.setParentStartDate;
    const onLayout = ({ nativeEvent: { layout: { height: height1 }, }, }) => {
        const pageOffset1 = fullHeight - height1;
        setPageOffset(pageOffset1);
    };
    // useEffect(() => {}, [])
    const changeTitle = (value) => {
        setTitle(value);
        setParentTitle(value);
    };
    const changeNotes = (value) => {
        setNotes(value);
        setParentNotes(value);
    };
    const changeLocation = (value) => {
        setLocation(value);
        setParentLocation(value);
    };
    const changeStartDate = (value) => {
        setStartDate(value);
        setParentStartDate(value);
    };
    const changeEndDate = (value) => {
        setEndDate(value);
        setParentEndDate(value);
    };
    const showStartDatePicker = () => {
        setIsStartDatePickerVisible(true);
    };
    const hideStartDatePicker = () => {
        setIsStartDatePickerVisible(false);
    };
    const showEndDatePicker = () => {
        setIsEndDatePickerVisible(true);
    };
    const hideEndDatePicker = () => {
        setIsEndDatePickerVisible(false);
    };
    return ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, style: { width: '100%' }, onLayout: onLayout, children: (0, jsx_runtime_1.jsx)(react_native_1.ScrollView, { style: { flex: 1, width: '100%' }, contentContainerStyle: { alignItems: 'center' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, p: { phone: 's', tablet: 'm' }, style: { width: '60%' }, children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Start" }), (0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Select Date and Time", size: "md", type: "datetime-local", onChange: (e) => {
                                    const durationMinutes = date_utils_1.dayjs.duration((0, date_utils_1.dayjs)(endDate).diff((0, date_utils_1.dayjs)(startDate))).asMinutes();
                                    const newEndDate = (0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").add(durationMinutes, 'minutes').toDate();
                                    changeStartDate((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").toDate());
                                    changeEndDate(newEndDate);
                                }, value: (0, date_utils_1.dayjs)(startDate).format("YYYY-MM-DDTHH:mm") })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, p: { phone: 's', tablet: 'm' }, style: { width: '60%' }, children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "End" }), (0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Select Date and Time", size: "md", type: "datetime-local", onChange: (e) => {
                                    changeEndDate((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").toDate());
                                }, value: (0, date_utils_1.dayjs)(endDate).format("YYYY-MM-DDTHH:mm") })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, p: { phone: 's', tablet: 'm' }, flexDirection: "row", justifyContent: "flex-start", alignItems: "center", style: { width: '60%' }, children: (0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Title", placeholder: "title", onChange: (e) => changeTitle(e?.target?.value), value: title || props?.title, style: { width: '100%' } }) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 3, p: { phone: 's', tablet: 'm' }, flexDirection: "row", justifyContent: "flex-start", alignItems: "center", style: { width: '60%' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Notes", onChange: (e) => changeNotes(e?.target?.value), value: notes || props?.notes, style: { width: '100%' }, multiline: true, numberOfLines: 3 }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, p: { phone: 's', tablet: 'm' }, flexDirection: "row", justifyContent: "flex-start", alignItems: "center", style: { width: '60%' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Location", placeholder: "location if any", onChange: (e) => changeLocation(e?.target?.value), value: location || props?.location, style: { width: '100%' } }) })] }) }) }));
}
exports.default = CreateEventBaseStep;
//# sourceMappingURL=data:application/json;base64,