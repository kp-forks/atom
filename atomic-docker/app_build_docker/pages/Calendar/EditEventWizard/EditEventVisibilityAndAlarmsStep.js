"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_native_1 = require("react-native");
const TextField_1 = __importDefault(require("@components/TextField"));
const io_1 = require("react-icons/io");
const picker_1 = require("@react-native-picker/picker");
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const theme_1 = require("@lib/theme/theme");
const wizardHelper_1 = require("@lib/Calendar/CreateEventWizard/wizardHelper");
const lodash_1 = __importDefault(require("lodash"));
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function EditEventVisibilityAndAlarmsStep(props) {
    const [visibility, setVisibility] = (0, react_1.useState)(props?.visibility);
    const [alarms, setAlarms] = (0, react_1.useState)(props?.alarms || []);
    const [alarm, setAlarm] = (0, react_1.useState)(0);
    const [pageOffset, setPageOffset] = (0, react_1.useState)(0);
    const { height: fullHeight } = react_native_1.Dimensions.get('window');
    const dark = (0, react_native_1.useColorScheme)() === 'dark';
    const setParentVisibility = props?.setParentVisibility;
    const setParentAlarms = props?.setParentAlarms;
    console.log(props?.alarms, ' props?.alarms');
    (0, react_1.useEffect)(() => {
        if (props?.visibility !== visibility) {
            setVisibility(props?.visibility);
        }
        if (!lodash_1.default.isEqual(props?.alarms, alarms)) {
            setAlarms(props?.alarms);
        }
    }, [visibility, alarms, props?.visibility, props?.alarms]);
    const onVisibilityChange = (value) => {
        setVisibility(value);
        setParentVisibility(value);
    };
    return ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, style: { width: '100%' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Make this event private or public" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 3, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsxs)(picker_1.Picker, { selectedValue: visibility, onValueChange: onVisibilityChange, children: [(0, jsx_runtime_1.jsx)(picker_1.Picker.Item, { color: dark ? theme_1.palette.white : theme_1.palette.textBlack, value: "default", label: "Default" }, "default"), (0, jsx_runtime_1.jsx)(picker_1.Picker.Item, { color: dark ? theme_1.palette.white : theme_1.palette.textBlack, value: "public", label: "Public" }, "public"), (0, jsx_runtime_1.jsx)(picker_1.Picker.Item, { color: dark ? theme_1.palette.white : theme_1.palette.textBlack, value: "private", label: "Private" }, "private")] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 3, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(react_native_1.FlatList, { data: alarms, renderItem: ({ item, index }) => ((0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", style: { width: '70%' }, children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: `${item} minutes before` }), (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { hitSlop: 15, onPress: () => (0, wizardHelper_1.removeItemFromAlarms)(index, alarms, setAlarms, setParentAlarms), children: (0, jsx_runtime_1.jsx)(io_1.IoIosClose, { size: "3em", color: theme_1.palette.red }) })] }) })), keyExtractor: (item, index) => `${item}-${index}` }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, flexDirection: "row", justifyContent: "space-between", alignItems: "center", style: { width: '40%' }, children: [(0, jsx_runtime_1.jsx)("div", { className: "mr-2", children: (0, jsx_runtime_1.jsx)(TextField_1.default, { type: "number", onChange: (e) => setAlarm(parseInt(e?.target?.value.replace(/[^0-9.]/g, ''), 10)), value: `${alarm}`, placeholder: "0" }) }), (0, jsx_runtime_1.jsx)("div", { className: "ml-4", children: (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: () => (0, wizardHelper_1.addItemToAlarms)(alarm, alarms, setAlarms, setParentAlarms, setAlarm), children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", children: "Add Reminder" }) }) })] }) })] }) }));
}
exports.default = EditEventVisibilityAndAlarmsStep;
//# sourceMappingURL=data:application/json;base64,