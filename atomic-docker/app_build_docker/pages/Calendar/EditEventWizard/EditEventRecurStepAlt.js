"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_native_1 = require("react-native");
const react_2 = require("@chakra-ui/react");
const picker_1 = require("@react-native-picker/picker");
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const TextField_1 = __importDefault(require("@components/TextField"));
const Button_1 = __importDefault(require("@components/Button"));
// import DatePicker from 'react-native-date-picker'
// import DateTimePicker from 'react-datetime-picker/dist/entry.nostyle'
const react_3 = require("@chakra-ui/react");
const theme_1 = require("@lib/theme/theme");
const RegularCard_1 = __importDefault(require("@components/RegularCard"));
const date_utils_1 = require("@lib/date-utils");
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
const constants_1 = require("@lib/Schedule/constants");
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
const styles = {
    day: {
        borderRadius: 50,
        justifyContent: 'center',
        alignItems: 'center',
        height: 50,
        width: 50,
    },
    container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
    },
};
function EditEventRecurStepAlt(props) {
    const [recurringEndDate, setRecurringEndDate] = (0, react_1.useState)(props?.recurringEndDate);
    const [frequency, setFrequency] = (0, react_1.useState)(props?.frequency || 'daily');
    const [interval, setInterval1] = (0, react_1.useState)('1');
    const [byWeekDay, setByWeekDay] = (0, react_1.useState)(props?.byWeekDay);
    const [MO, setMO] = (0, react_1.useState)(props?.byWeekDay?.includes(constants_1.Day.MO) || false);
    const [TU, setTU] = (0, react_1.useState)(props?.byWeekDay?.includes(constants_1.Day.TU) || false);
    const [WE, setWE] = (0, react_1.useState)(props?.byWeekDay?.includes(constants_1.Day.WE) || false);
    const [TH, setTH] = (0, react_1.useState)(props?.byWeekDay?.includes(constants_1.Day.TH) || false);
    const [FR, setFR] = (0, react_1.useState)(props?.byWeekDay?.includes(constants_1.Day.FR) || false);
    const [SA, setSA] = (0, react_1.useState)(props?.byWeekDay?.includes(constants_1.Day.SA) || false);
    const [SU, setSU] = (0, react_1.useState)(props?.byWeekDay?.includes(constants_1.Day.SU) || false);
    const [isWeekDay, setIsWeekDay] = (0, react_1.useState)(props?.byWeekDay?.length > 0 || false);
    const [isRecurring, setIsRecurring] = (0, react_1.useState)(false);
    const { isOpen, onOpen, onClose } = (0, react_2.useDisclosure)();
    // const dark = useColorScheme() === 'dark'
    const setParentRecurringEndDate = props?.setParentRecurringEndDate;
    const setParentFrequency = props?.setParentFrequency;
    const setParentInterval = props?.setParentInterval;
    const setParentByWeekDay = props?.setParentByWeekDay;
    const hideIsWeekDay = () => setIsWeekDay(false);
    const showIsWeekDay = () => setIsWeekDay(true);
    const hideRecurringEndDatePicker = () => setIsRecurring(false);
    const showRecurringEndDatePicker = () => setIsRecurring(true);
    const changeRecurringEndDate = (value) => {
        setRecurringEndDate(value);
        setParentRecurringEndDate(value);
    };
    const changeFrequency = (value) => {
        setFrequency(value);
        setParentFrequency(value);
    };
    const changeInterval = (value) => {
        setInterval1(value);
        setParentInterval(value);
    };
    const changeWeekDay = (value) => {
        setByWeekDay(value);
        setParentByWeekDay(value);
    };
    const changeMO = () => {
        setMO(!MO);
        if (!MO) {
            if (byWeekDay?.length > 0) {
                const newWeekDay = [...byWeekDay, constants_1.Day.MO];
                changeWeekDay(newWeekDay);
            }
            else {
                const newWeekDay = [constants_1.Day.MO];
                changeWeekDay(newWeekDay);
            }
        }
        else {
            changeWeekDay(byWeekDay.filter(day => day !== constants_1.Day.MO));
        }
    };
    const changeTU = () => {
        setTU(!TU);
        if (!TU) {
            if (byWeekDay?.length > 0) {
                const newWeekDay = [...byWeekDay, constants_1.Day.TU];
                changeWeekDay(newWeekDay);
            }
            else {
                const newWeekDay = [constants_1.Day.TU];
                changeWeekDay(newWeekDay);
            }
        }
        else {
            changeWeekDay(byWeekDay.filter(day => day !== constants_1.Day.TU));
        }
    };
    const changeWE = () => {
        setWE(!WE);
        if (!WE) {
            if (byWeekDay?.length > 0) {
                const newWeekDay = [...byWeekDay, constants_1.Day.WE];
                changeWeekDay(newWeekDay);
            }
            else {
                const newWeekDay = [constants_1.Day.WE];
                changeWeekDay(newWeekDay);
            }
        }
        else {
            changeWeekDay(byWeekDay.filter(day => day !== constants_1.Day.WE));
        }
    };
    const changeTH = () => {
        setTH(!TH);
        if (!TH) {
            if (byWeekDay?.length > 0) {
                const newWeekDay = [...byWeekDay, constants_1.Day.TH];
                changeWeekDay(newWeekDay);
            }
            else {
                const newWeekDay = [constants_1.Day.TH];
                changeWeekDay(newWeekDay);
            }
        }
        else {
            changeWeekDay(byWeekDay.filter(day => day !== constants_1.Day.TH));
        }
    };
    const changeFR = () => {
        setFR(!FR);
        if (!FR) {
            if (byWeekDay?.length > 0) {
                const newWeekDay = [...byWeekDay, constants_1.Day.FR];
                changeWeekDay(newWeekDay);
            }
            else {
                const newWeekDay = [constants_1.Day.FR];
                changeWeekDay(newWeekDay);
            }
        }
        else {
            changeWeekDay(byWeekDay.filter(day => day !== constants_1.Day.FR));
        }
    };
    const changeSA = () => {
        setSA(!SA);
        if (!SA) {
            if (byWeekDay?.length > 0) {
                const newWeekDay = [...byWeekDay, constants_1.Day.SA];
                changeWeekDay(newWeekDay);
            }
            else {
                const newWeekDay = [constants_1.Day.SA];
                changeWeekDay(newWeekDay);
            }
        }
        else {
            changeWeekDay(byWeekDay.filter(day => day !== constants_1.Day.SA));
        }
    };
    const changeSU = () => {
        setSU(!SU);
        if (!SU) {
            if (byWeekDay?.length > 0) {
                const newWeekDay = [...byWeekDay, constants_1.Day.SU];
                changeWeekDay(newWeekDay);
            }
            else {
                const newWeekDay = [constants_1.Day.SU];
                changeWeekDay(newWeekDay);
            }
        }
        else {
            changeWeekDay(byWeekDay.filter(day => day !== constants_1.Day.SU));
        }
    };
    const changeEnableWeekDay = (value) => {
        setIsWeekDay(value);
    };
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "flex-end", alignItems: "center", style: { width: '90%' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, justifyContent: "flex-end", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "End Date for Recurrence" }) }), (0, jsx_runtime_1.jsx)(react_3.Input, { placeholder: "Select Date and Time", size: "md", type: "datetime-local", onChange: (e) => {
                            changeRecurringEndDate((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").toDate());
                        }, value: (0, date_utils_1.dayjs)(recurringEndDate).format("YYYY-MM-DDTHH:mm") })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 3, p: { phone: 's', tablet: 'm' }, justifyContent: "flex-start", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsxs)(picker_1.Picker, { selectedValue: frequency, onValueChange: changeFrequency, style: { color: theme_1.palette.textBlack, height: 150, width: '70%' }, children: [(0, jsx_runtime_1.jsx)(picker_1.Picker.Item, { color: theme_1.palette.textBlack, value: "daily", label: "Daily" }, "daily"), (0, jsx_runtime_1.jsx)(picker_1.Picker.Item, { color: theme_1.palette.textBlack, value: "weekly", label: "Weekly" }, "weekly"), (0, jsx_runtime_1.jsx)(picker_1.Picker.Item, { color: theme_1.palette.textBlack, value: "monthly", label: "Monthly" }, "monthly"), (0, jsx_runtime_1.jsx)(picker_1.Picker.Item, { color: theme_1.palette.textBlack, value: "yearly", label: "Yearly" }, "yearly")] }) }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, p: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "flex-start", style: { width: '90%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Interval (ex: every 2 weeks)" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, p: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "flex-end", style: { width: '90%' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { type: "number", onChange: (e) => changeInterval(e?.target?.value?.replace(/[^0-9.]/g, '') || '0'), value: interval, placeholder: "1", style: { width: '20%' } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, p: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "flex-start", style: { width: '90%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", pt: { phone: 'm', tablet: 's' }, children: `Choose specific days of the week? ${byWeekDay?.length > 0 ? ' specific days selected' : ''}` }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, style: { width: '90%' }, children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: onOpen, children: "Open to choose days" }) })] }), (0, jsx_runtime_1.jsxs)(react_2.Modal, { isOpen: isOpen, onClose: onClose, children: [(0, jsx_runtime_1.jsx)(react_2.ModalOverlay, {}), (0, jsx_runtime_1.jsxs)(react_2.ModalContent, { children: [(0, jsx_runtime_1.jsx)(react_2.ModalHeader, { children: "Pick days of the week" }), (0, jsx_runtime_1.jsx)(react_2.ModalCloseButton, {}), (0, jsx_runtime_1.jsx)(react_2.ModalBody, { children: (0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsxs)(RegularCard_1.default, { children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { width: "100%", flexDirection: "row", justifyContent: "space-evenly", p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)("button", { onClick: changeMO, style: { ...(styles.day), ...{ backgroundColor: MO ? theme_1.palette.purplePrimary : theme_1.palette.lightGray } }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { color: MO ? theme_1.palette.white : theme_1.palette.textBlack }, children: "MO" }) }), (0, jsx_runtime_1.jsx)("button", { onClick: changeTU, style: { ...styles.day, ...{ backgroundColor: TU ? theme_1.palette.purplePrimary : theme_1.palette.lightGray } }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { color: TU ? theme_1.palette.white : theme_1.palette.textBlack }, children: "TU" }) }), (0, jsx_runtime_1.jsx)("button", { onClick: changeWE, style: { ...styles.day, ...{ backgroundColor: WE ? theme_1.palette.purplePrimary : theme_1.palette.lightGray } }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { color: WE ? theme_1.palette.white : theme_1.palette.textBlack }, children: "WE" }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { width: "100%", flexDirection: "row", justifyContent: "space-evenly", p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)("button", { onClick: changeTH, style: { ...(styles.day), ...{ backgroundColor: TH ? theme_1.palette.purplePrimary : theme_1.palette.lightGray } }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { color: TH ? theme_1.palette.white : theme_1.palette.textBlack }, children: "TH" }) }), (0, jsx_runtime_1.jsx)("button", { onClick: changeFR, style: { ...(styles.day), ...{ backgroundColor: FR ? theme_1.palette.purplePrimary : theme_1.palette.lightGray } }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { color: FR ? theme_1.palette.white : theme_1.palette.textBlack }, children: "FR" }) }), (0, jsx_runtime_1.jsx)("button", { onClick: changeSA, style: { ...styles.day, ...{ backgroundColor: SA ? theme_1.palette.purplePrimary : theme_1.palette.lightGray } }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { color: SA ? theme_1.palette.white : theme_1.palette.textBlack }, children: "SA" }) }), (0, jsx_runtime_1.jsx)("button", { onClick: changeSU, style: { ...(styles.day), ...{ backgroundColor: SU ? theme_1.palette.purplePrimary : theme_1.palette.lightGray } }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { color: SU ? theme_1.palette.white : theme_1.palette.textBlack }, children: "SU" }) })] }), (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: hideIsWeekDay, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", children: " Close" }) })] }) }) })] }), (0, jsx_runtime_1.jsx)(react_2.ModalFooter, { children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: onClose, children: "Close" }) })] })] }));
}
exports.default = EditEventRecurStepAlt;
//# sourceMappingURL=data:application/json;base64,