"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
// import DatePicker from 'react-native-date-picker'
// import DateTimePicker from 'react-datetime-picker/dist/entry.nostyle'
const date_utils_1 = require("@lib/date-utils");
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const TextField_1 = __importDefault(require("@components/TextField"));
const react_2 = require("@chakra-ui/react");
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function EditEventBaseStep(props) {
    const [title, setTitle] = (0, react_1.useState)(props?.title);
    const [notes, setNotes] = (0, react_1.useState)(props?.notes);
    const [location, setLocation] = (0, react_1.useState)(props?.location);
    const [startDate, setStartDate] = (0, react_1.useState)(props?.startDate);
    const [endDate, setEndDate] = (0, react_1.useState)(props?.endDate);
    const setParentTitle = props?.setParentTitle;
    const setParentNotes = props?.setParentNotes;
    const setParentLocation = props?.setParentLocation;
    const setParentStartDate = props?.setParentStartDate;
    const setParentEndDate = props?.setParentEndDate;
    console.log(props?.title, ' props?.title inside EditEventBaseStep');
    console.log(props?.startDate, ' props?.startDate inside editeventbasestep');
    console.log(props?.endDate, ' props?.endDate inside editeventbasestep');
    (0, react_1.useEffect)(() => {
        if (props?.title) {
            setTitle(props?.title);
        }
        if (props?.notes) {
            setNotes(props?.notes);
        }
        if (props?.location) {
            setLocation(props?.location);
        }
        if (props?.startDate) {
            setStartDate(props?.startDate);
        }
        if (props?.endDate) {
            setEndDate(props?.endDate);
        }
    }, [props?.title, props?.notes, props?.location, props?.startDate, props?.endDate]);
    const changeTitle = (value) => {
        setTitle(value);
        setParentTitle(value);
    };
    const changeNotes = (value) => {
        setNotes(value);
        setParentNotes(value);
    };
    const changeLocation = (value) => {
        setLocation(value);
        setParentLocation(value);
    };
    const changeStartDate = (value) => {
        setStartDate(value);
        setParentStartDate(value);
    };
    const changeEndDate = (value) => {
        setEndDate(value);
        setParentEndDate(value);
    };
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%', height: '100%' }, minHeight: "70vh", children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, m: { phone: 's', tablet: 'm' }, style: { width: '60%' }, children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Start" }), (0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Select Date and Time", size: "md", type: "datetime-local", onChange: (e) => {
                            const durationMinutes = date_utils_1.dayjs.duration((0, date_utils_1.dayjs)(endDate).diff((0, date_utils_1.dayjs)(startDate))).asMinutes();
                            const newEndDate = (0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").add(durationMinutes, 'minutes').toDate();
                            changeStartDate((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").toDate());
                            changeEndDate(newEndDate);
                        }, value: (0, date_utils_1.dayjs)(startDate).format("YYYY-MM-DDTHH:mm") })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, m: { phone: 's', tablet: 'm' }, style: { width: '60%' }, children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "End" }), (0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Select Date and Time", size: "md", type: "datetime-local", onChange: (e) => {
                            changeEndDate((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").toDate());
                        }, value: (0, date_utils_1.dayjs)(endDate).format("YYYY-MM-DDTHH:mm") })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, m: { phone: 's', tablet: 'm' }, flexDirection: "row", justifyContent: "flex-start", alignItems: "center", style: { width: '60%' }, children: (0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Title", placeholder: "title", onChange: (e) => changeTitle(e?.target?.value), value: title || props?.title, style: { width: '100%' } }) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, m: { phone: 's', tablet: 'm' }, flexDirection: "row", justifyContent: "flex-start", alignItems: "center", style: { width: '60%' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Notes", onChange: (e) => changeNotes(e?.target?.value), value: notes || props?.notes, style: { width: '100%' }, multiline: true }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, m: { phone: 's', tablet: 'm' }, flexDirection: "row", justifyContent: "flex-start", alignItems: "center", style: { width: '60%' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Location", placeholder: "location if any", onChange: (e) => changeLocation(e?.target?.value), value: location || props?.location, style: { width: '100%' } }) })] }));
}
exports.default = EditEventBaseStep;
//# sourceMappingURL=data:application/json;base64,