"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Switch_1 = __importDefault(require("@components/Switch"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function EditEventBaseStep2(props) {
    const [isAttendees, setIsAttendees] = (0, react_1.useState)(props?.isAttendees);
    const [allDay, setAllDay] = (0, react_1.useState)(props?.allDay);
    const [isRecurring, setIsRecurring] = (0, react_1.useState)(props?.isRecurring);
    const [isBreak, setIsBreak] = (0, react_1.useState)(props?.isBreak);
    const setParentAllDay = props?.setParentAllDay;
    const setParentIsRecurring = props?.setParentIsRecurring;
    const setParentIsAttendees = props?.setParentIsAttendees;
    const setParentIsBreak = props?.setParentIsBreak;
    (0, react_1.useEffect)(() => {
        if (props?.isAttendees !== isAttendees) {
            setIsAttendees(props?.isAttendees);
        }
        if (props?.allDay !== allDay) {
            setAllDay(props?.allDay);
        }
        if (props?.isRecurring !== isRecurring) {
            setIsRecurring(props?.isRecurring);
        }
        if (props?.isBreak !== isBreak) {
            setIsBreak(props?.isBreak);
        }
    }, [isAttendees, allDay, isRecurring, isBreak, props?.isAttendees, props?.allDay, props?.isRecurring, props?.isBreak]);
    const changeAllDay = (value) => {
        setAllDay(value);
        setParentAllDay(value);
    };
    const changeIsRecurring = (value) => {
        setIsRecurring(value);
        setParentIsRecurring(value);
    };
    const changeIsAttendees = (value) => {
        setIsAttendees(value);
        setParentIsAttendees(value);
    };
    const changeIsBreak = (value) => {
        setIsBreak(value);
        setParentIsBreak(value);
    };
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", pt: { phone: 'm', tablet: 's' }, children: "Change this to an all day event?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: allDay, onValueChange: changeAllDay, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", pt: { phone: 'm', tablet: 's' }, children: "Make this a recurring event?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: isRecurring, onValueChange: changeIsRecurring, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, flexDirection: { phone: 'column', tablet: 'row' }, justifyContent: { phone: 'center', tablet: 'space-between' }, style: { width: '90%' }, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", pt: { phone: 'm', tablet: 's' }, children: "Add attendees to this event?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: isAttendees, onValueChange: changeIsAttendees, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { style: { width: '90%' }, flex: 1, p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, flexDirection: "row", justifyContent: "flex-start", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", pt: { phone: 'm', tablet: 's' }, children: "Is this your break?" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, flexDirection: "row", justifyContent: "flex-end", pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: isBreak, onValueChange: changeIsBreak, style: { marginBottom: 20 } }) })] })] }));
}
exports.default = EditEventBaseStep2;
//# sourceMappingURL=data:application/json;base64,