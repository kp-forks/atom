"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_native_1 = require("react-native");
const TextField_1 = __importDefault(require("@components/TextField"));
const themed_1 = require("@rneui/themed");
const Fab_1 = __importDefault(require("@mui/material/Fab"));
const Add_1 = __importDefault(require("@mui/icons-material/Add"));
const styles_1 = require("@mui/material/styles");
const Zoom_1 = __importDefault(require("@mui/material/Zoom"));
const SpeedDial_1 = __importDefault(require("@mui/material/SpeedDial"));
const SpeedDialIcon_1 = __importDefault(require("@mui/material/SpeedDialIcon"));
const SpeedDialAction_1 = __importDefault(require("@mui/material/SpeedDialAction"));
const colors_1 = require("@mui/material/colors");
const ImportContacts_1 = __importDefault(require("@mui/icons-material/ImportContacts"));
const Keyboard_1 = __importDefault(require("@mui/icons-material/Keyboard"));
const Edit_1 = __importDefault(require("@mui/icons-material/Edit"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const RegularCard_1 = __importDefault(require("@components/RegularCard"));
const ContactHelper_1 = require("@lib/Contact/ContactHelper");
const wizardHelper_1 = require("@lib/Calendar/CreateEventWizard/wizardHelper");
const theme_1 = require("@lib/theme/theme");
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
const styles = {
    safeArea: {
        alignItems: 'flex-end',
    },
    container: {
        ...react_native_1.StyleSheet.absoluteFillObject,
        justifyContent: 'flex-end',
    },
    fab: {
        margin: 16,
        marginTop: 0,
    },
    container2: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
    },
};
const fabStyle = {
    position: 'absolute',
    bottom: 16,
    right: 16,
};
function Contacts(props) {
    const [contacts, setContacts] = (0, react_1.useState)(props?.contacts);
    const closeContacts = props?.closeContacts;
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '100%' }, minHeight: "65vh", maxHeight: "65vh", children: [contacts?.length > 0
                ? ((0, jsx_runtime_1.jsx)(react_native_1.FlatList, { data: contacts, renderItem: ({ item, index }) => ((0, jsx_runtime_1.jsx)(Contact, { contact: item, addContactToAttendees: props?.addContactToAttendees, removeContactFromAttendee: props?.removeContactFromAttendee, updateContactSelection: props?.updateContactSelection, contacts: contacts, setContacts: setContacts, setParentA: props?.setParentA, attendees: props?.attendees, setAttendees: props?.setAttendees, index: index })), keyExtractor: (item, index) => `${item}-${index}` })) : ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '95%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subheaderNormal", children: "You have no contacts saved. Go to settings to enable and sync Contacts from your phone or 3rd party provider." }) }) })), (0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: closeContacts, children: (0, jsx_runtime_1.jsx)(Text_1.default, { p: { phone: 'm', tablet: 'l' }, variant: "buttonLink", children: "Close" }) }) })] }));
}
function Contact(props) {
    const [selected, setSelected] = (0, react_1.useState)(props?.attendees.findIndex(i => i.id === props?.contact.id) > -1);
    const updateSelected = () => {
        const value = !selected;
        setSelected(value);
        if (value === true) {
            props?.updateContactSelection(value, props?.contact, props?.contacts, props?.setContacts, props?.index);
            props?.addContactToAttendees(props?.contact, props?.attendees, props?.setAttendees, props?.setParentA);
        }
        else if (value === false) {
            props?.updateContactSelection(value, props?.contact, props?.contacts, props?.setContacts, props?.index);
            props?.removeContactFromAttendee(props?.contact, props?.attendees, props?.setAttendees, props?.setParentA);
        }
    };
    return ((0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsxs)(RegularCard_1.default, { children: [(0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: props?.contact?.name }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "caption", children: props?.contact?.emails?.filter(i => (i.primary === true))?.[0]?.value }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: updateSelected, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", children: selected ? 'Remove' : 'Add' }) }) })] }) }));
}
/**
const newValue: Person = {
  id: uuid(),
  emails: [{ primary: false, value: '', type: '', displayName: ''}],
  additionalGuests: 0,
}
*/
function ManualEntry(props) {
    const [emails, setEmails] = (0, react_1.useState)(props?.emails || [{ primary: true, value: '', displayName: '', type: '' }]);
    const [additionalGuests, setAdditionalGuests] = (0, react_1.useState)(props?.additionalGuests || 0);
    const updateEntryInManualEntries = props?.updateEntryInManualEntries;
    const removeEntryFromManualEntries = props?.removeEntryFromManualEntries;
    const setManualEntries = props?.setManualEntries;
    const manualEntries = props?.manualEntries;
    const index = props?.index;
    const setParentA = props?.setParentA;
    const parentIndex = props?.parentIndex;
    const attendees = props?.attendees;
    const setAttendees = props?.setAttendees;
    const onEmailChange = (value) => {
        setEmails([{ ...emails?.[0], primary: true, value, type: '' }]);
        updateEntryInManualEntries(manualEntries, setManualEntries, index, attendees, setAttendees, setParentA, parentIndex, [{ ...emails?.[0], primary: true, value, type: '' }], undefined, additionalGuests);
    };
    const onNameChange = (value) => {
        setEmails([{ ...emails?.[0], primary: true, displayName: value, type: '' }]);
        updateEntryInManualEntries(manualEntries, setManualEntries, index, attendees, setAttendees, setParentA, parentIndex, [{ ...emails?.[0], primary: true, displayName: value, type: '' }], value, additionalGuests);
    };
    const onAdditionalGuestsChange = (text) => {
        setAdditionalGuests(parseInt(text.replace(/[^0-9.]/g, ''), 10));
        updateEntryInManualEntries(manualEntries, setManualEntries, index, attendees, setAttendees, setParentA, parentIndex, emails, undefined, parseInt(text.replace(/[^0-9.]/g, ''), 10));
    };
    return ((0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsxs)(RegularCard_1.default, { children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Email" }), (0, jsx_runtime_1.jsx)(TextField_1.default, { placeholder: "r@r.com", onChange: (e) => onEmailChange(e?.target?.value), value: emails?.[0]?.value || '', style: { width: '60%' }, validate: "email", validationMessage: "Please input a valid email address" })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Display Name" }), (0, jsx_runtime_1.jsx)(TextField_1.default, { placeholder: "name", onChange: (e) => onNameChange(e?.target?.value), value: manualEntries?.[index]?.name || '', style: { width: '60%' } })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Additional Guests?" }), (0, jsx_runtime_1.jsx)(TextField_1.default, { type: "number", onChange: (e) => onAdditionalGuestsChange(e?.target?.value), value: `${additionalGuests}`, placeholder: "0", style: { width: '15%' } })] }), (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: () => removeEntryFromManualEntries(manualEntries, setManualEntries, attendees, setAttendees, setParentA, index, parentIndex), children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", children: "Remove" }) })] }) }));
}
function ManualEntries(props) {
    const [pageOffset, setPageOffset] = (0, react_1.useState)(0);
    const { height: fullHeight } = react_native_1.Dimensions.get('window');
    const theme = (0, styles_1.useTheme)();
    const transitionDuration = {
        enter: theme.transitions.duration.enteringScreen,
        exit: theme.transitions.duration.leavingScreen,
    };
    const closeManual = props?.closeManual;
    const addNewEntry = () => {
        const addOneToManualEntries = props?.addOneToManualEntries;
        addOneToManualEntries(props?.manualEntries, props?.setManualEntries, props?.attendees, props?.setAttendees, props?.setParentA);
    };
    return ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, style: { width: '100%' }, minHeight: "65vh", maxHeight: "65vh", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '100%' }, children: [props?.manualEntries?.length > 0
                    ? ((0, jsx_runtime_1.jsx)(react_native_1.FlatList, { data: props?.manualEntries, renderItem: ({ item, index }) => ((0, jsx_runtime_1.jsx)(ManualEntry, { ...item, updateEntryInManualEntries: props?.updateEntryInManualEntries, removeEntryFromManualEntries: props?.removeEntryFromManualEntries, index: index, setManualEntries: props?.setManualEntries, manualEntries: props?.manualEntries, setParentA: props?.setParentA, parentIndex: props?.attendees.findIndex(a => (a?.id === item?.id)), attendees: props?.attendees, setAttendees: props?.setAttendees })), keyExtractor: (item) => item?.id })) : ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subheader", children: "Add a New Entry" }) })), (0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: closeManual, children: (0, jsx_runtime_1.jsx)(Text_1.default, { p: { phone: 'm', tablet: 'l' }, variant: "buttonLink", children: "Close" }) }) }), (0, jsx_runtime_1.jsx)(Zoom_1.default, { in: true, timeout: transitionDuration, style: {
                        transitionDelay: `${transitionDuration.exit}ms`,
                    }, unmountOnExit: true, children: (0, jsx_runtime_1.jsx)(Fab_1.default, { sx: fabStyle, "aria-label": 'Add', color: "primary", onClick: addNewEntry, children: (0, jsx_runtime_1.jsx)(Add_1.default, { sx: { color: colors_1.pink[500] } }) }) })] }) }));
}
function EditEventAttendees(props) {
    const [attendees, setAttendees] = (0, react_1.useState)(props?.attendees);
    const [isManual, setIsManual] = (0, react_1.useState)(false);
    const [manualEntries, setManualEntries] = (0, react_1.useState)([]);
    const [isContacts, setIsContacts] = (0, react_1.useState)(false);
    const [contacts, setContacts] = (0, react_1.useState)([]);
    const [isOpen, setIsOpen] = (0, react_1.useState)(false);
    // const [contactChecks, setContactChecks] = useState<boolean[]>([])
    const userId = props?.userId;
    // const parentAttendees = props?.attendees
    const setParentAttendees = props?.setParentAttendees;
    const client = props?.client;
    // get any contacts
    (0, react_1.useEffect)(() => {
        (async () => {
            if (!client || !userId) {
                return;
            }
            const newContacts = await (0, ContactHelper_1.listUserContactsHelper)(client, userId);
            console.log(newContacts, ' newContacts');
            if (newContacts?.length > 0) {
                setContacts(newContacts
                    .map(c => ({ ...c, selected: false }))
                    .filter(c => (c?.emails?.[0]?.value?.length > 0)));
            }
        })();
    }, [client, userId]);
    const onManualChange = () => {
        setIsContacts(isManual);
        setIsManual(!isManual);
    };
    const onContactsChange = () => {
        setIsManual(isContacts);
        setIsContacts(!isContacts);
    };
    const closeContacts = () => setIsContacts(false);
    const closeManual = () => setIsManual(false);
    const actions = [
        { icon: (0, jsx_runtime_1.jsx)(ImportContacts_1.default, { color: "secondary" }), name: 'Import Contacts', method: onContactsChange },
        { icon: (0, jsx_runtime_1.jsx)(Keyboard_1.default, { color: "secondary" }), name: 'Manual Entry', method: onManualChange },
    ];
    if (isManual) {
        return ((0, jsx_runtime_1.jsx)(ManualEntries, { setManualEntries: setManualEntries, manualEntries: manualEntries, attendees: attendees, setAttendees: setAttendees, setParentA: setParentAttendees, updateEntryInManualEntries: wizardHelper_1.updateEntryInManualEntries, removeEntryFromManualEntries: wizardHelper_1.removeEntryFromManualEntries, addOneToManualEntries: wizardHelper_1.addOneToManualEntries, closeManual: closeManual }));
    }
    if (isContacts) {
        return ((0, jsx_runtime_1.jsx)(Contacts, { addContactToAttendees: wizardHelper_1.addContactToAttendees, removeContactFromAttendee: wizardHelper_1.removeContactFromAttendee, updateContactSelection: wizardHelper_1.updateContactSelection, contacts: contacts, setParentA: setParentAttendees, attendees: attendees, setAttendees: setAttendees, closeContacts: closeContacts }));
    }
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, style: { width: '100%' }, minHeight: "65vh", maxHeight: "65vh", children: [attendees?.length > 0
                ? ((0, jsx_runtime_1.jsx)(react_native_1.FlatList, { data: attendees, renderItem: ({ item }) => ((0, jsx_runtime_1.jsx)(themed_1.ListItem, { containerStyle: {
                            backgroundColor: theme_1.palette.white,
                            borderBottomWidth: react_native_1.StyleSheet.hairlineWidth,
                            borderColor: theme_1.palette.darkGray
                        }, children: (0, jsx_runtime_1.jsxs)(themed_1.ListItem.Content, { children: [(0, jsx_runtime_1.jsx)(themed_1.ListItem.Title, { style: { color: theme_1.palette.textBlack, fontWeight: 'bold' }, children: item?.name }), (0, jsx_runtime_1.jsx)(themed_1.ListItem.Subtitle, { style: { color: theme_1.palette.textBlack, }, children: item?.emails?.[0]?.value })] }) })), keyExtractor: (item) => item?.id })) : ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '90%' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subheaderNormal", children: "Add an attendee from your contacts or manually enter one" }) }) })), (0, jsx_runtime_1.jsx)("div", { className: "absolute inset-0 z-20 pointer-events-none", children: (0, jsx_runtime_1.jsx)(SpeedDial_1.default, { ariaLabel: "Calendar SpeedDial", sx: { position: 'absolute', bottom: 24, right: 24, zIndex: 'speedDial' }, icon: (0, jsx_runtime_1.jsx)(SpeedDialIcon_1.default, { icon: (0, jsx_runtime_1.jsx)(Edit_1.default, {}), sx: { color: colors_1.pink[500] } }), children: actions.map((action) => ((0, jsx_runtime_1.jsx)(SpeedDialAction_1.default, { icon: action.icon, tooltipTitle: action.name, FabProps: {
                            onClick: action.method,
                        } }, action.name))) }) })] }));
}
exports.default = EditEventAttendees;
//# sourceMappingURL=data:application/json;base64,