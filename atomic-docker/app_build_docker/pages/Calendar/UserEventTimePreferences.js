"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
// import DatePicker from 'react-native-date-picker'
// import DateTimePicker from 'react-datetime-picker/dist/entry.nostyle'
const react_2 = require("@chakra-ui/react");
const uuid_1 = require("uuid");
const date_fns_1 = require("date-fns");
const react_3 = require("@chakra-ui/react");
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const Button_1 = __importDefault(require("@components/Button"));
const RegularCard_1 = __importDefault(require("@components/RegularCard"));
const date_utils_1 = require("@lib/date-utils");
const UserTrainCalendarHelper_1 = require("@lib/Calendar/UserTrainCalendarHelper");
const calendarDbHelper_1 = require("@lib/calendarLib/calendarDbHelper");
const react_native_1 = require("react-native");
const io_1 = require("react-icons/io");
// 
const theme_1 = require("@lib/theme/theme");
const lodash_1 = __importDefault(require("lodash"));
const UserCreateCalendarHelper_1 = require("@lib/Calendar/UserCreateCalendarHelper");
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
const dayOfWeekInt = [-1, 1, 2, 3, 4, 5, 6, 7];
const dark = react_native_1.Appearance.getColorScheme() === 'dark';
function UserEventTimePreferences(props) {
    const [timeRangePreferences, setTimeRangePreferences] = (0, react_1.useState)([]);
    const [summary, setSummary] = (0, react_1.useState)('');
    const [startDate, setStartDate] = (0, react_1.useState)('');
    const [endDate, setEndDate] = (0, react_1.useState)('');
    const [dayOfWeek, setDayOfWeek] = (0, react_1.useState)(-1);
    // const [dayOfWeekObject, setDayOfWeekObject] = useState<{label: string, value: number }>(null)
    const [startTimeRange, setStartTimeRange] = (0, react_1.useState)(new Date());
    const [endTimeRange, setEndTimeRange] = (0, react_1.useState)((0, date_utils_1.dayjs)().add(30, 'm').toDate());
    const [isStartTimeRange, setIsStartTimeRange] = (0, react_1.useState)(false);
    const [isEndTimeRange, setIsEndTimeRange] = (0, react_1.useState)(false);
    const [calendarId, setCalendarId] = (0, react_1.useState)('');
    const [error, setError] = (0, react_1.useState)('');
    const sub = props?.sub;
    const client = props?.client;
    const toast = (0, react_3.useToast)();
    const userId = sub;
    const eventId = props?.id;
    const closeTimePreferences = props?.closeTimePreferences;
    // const navigation = useNavigation<UserEventTimePreferencesNavigationProp>()
    console.log(eventId, ' eventId prerender inside UserEventTimePreferences');
    // get event
    (0, react_1.useEffect)(() => {
        (async () => {
            // validate
            if (!eventId) {
                console.log(eventId, ' no eventId');
                return;
            }
            if (!client) {
                console.log(' no client');
                return;
            }
            const event = await (0, calendarDbHelper_1.getEventWithId)(client, eventId);
            setSummary(event?.summary);
            setStartDate(event?.startDate);
            setEndDate(event?.endDate);
            setCalendarId(event?.calendarId);
        })();
    }, [client, eventId]);
    // list time range preferences for event
    (0, react_1.useEffect)(() => {
        (async () => {
            try {
                // validate
                if (!eventId) {
                    return;
                }
                if (!client) {
                    return;
                }
                const res = await (0, UserTrainCalendarHelper_1.listPreferredTimeRangesByEvent)(client, eventId);
                if (res?.length > 0) {
                    setTimeRangePreferences(res);
                }
            }
            catch (e) {
                console.log(e, ' unable to list time ranges');
            }
        })();
    }, [client, eventId]);
    const hideStartTimeRangePicker = () => setIsStartTimeRange(false);
    const showStartTimeRangePicker = () => setIsStartTimeRange(true);
    const hideEndTimeRangePicker = () => setIsEndTimeRange(false);
    const showEndTimeRangePicker = () => setIsEndTimeRange(true);
    const changeDayOfWeek = (item) => {
        console.log(item, ' item inside change day of week');
        setDayOfWeek(item);
        // setDayOfWeekObject(item)
    };
    const addItem = async () => {
        try {
            console.log('addItem called');
            // validate startTime, endTime, eventId, and dayOfWeek
            if (!startTimeRange) {
                setError('Please select a start time');
                setTimeout(() => setError(''), 3000);
                toast({
                    title: 'Start time is required',
                    description: 'Please select a start time',
                    status: 'error',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            if (!endTimeRange) {
                setError('Please select an end time');
                setTimeout(() => setError(''), 3000);
                toast({
                    title: 'End time is required',
                    description: 'Please select an end time',
                    status: 'error',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            if (!eventId) {
                setError('Please select an event');
                setTimeout(() => setError(''), 3000);
                toast({
                    title: 'Event is required',
                    description: 'Please select an event',
                    status: 'error',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            if (dayOfWeek < -1 || dayOfWeek > 7) {
                setError('Please select a day of week');
                setTimeout(() => setError(''), 3000);
                toast({
                    title: 'Day of week is required',
                    description: 'Please select a day of week',
                    status: 'error',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            // validate startTimeRange and endTimeRange
            if (startTimeRange.getTime() >= endTimeRange.getTime()) {
                setError('Please select a start time before end time');
                setTimeout(() => setError(''), 3000);
                toast({
                    title: 'Start time must be before end time',
                    description: 'Please select a start time before end time',
                    status: 'error',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            const timeRangeDuration = (0, date_utils_1.dayjs)(endTimeRange).diff((0, date_utils_1.dayjs)(startTimeRange), 'm');
            const dateDuration = (0, date_utils_1.dayjs)(startDate.slice(0, 19)).diff((0, date_utils_1.dayjs)(endDate.slice(0, 19)), 'm');
            if (timeRangeDuration < dateDuration) {
                setError('Please select a end time that is same or longer than event duration');
                setTimeout(() => setError(''), 3000);
                toast({
                    title: 'End time must be same or longer than event duration',
                    description: 'Please select a end time that is same or longer than event duration',
                    status: 'error',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            const startTime = (0, date_utils_1.dayjs)(startTimeRange).format('HH:mm');
            const endTime = (0, date_utils_1.dayjs)(endTimeRange).format('HH:mm');
            const id = (0, uuid_1.v4)();
            const createdDate = (0, date_utils_1.dayjs)().toISOString();
            const updatedAt = createdDate;
            const newPreferredTimeRange = {
                id,
                eventId,
                dayOfWeek,
                startTime,
                endTime,
                createdDate,
                updatedAt,
                userId,
            };
            const newTimeRangePreferences = (timeRangePreferences || []).concat([newPreferredTimeRange]);
            setTimeRangePreferences(newTimeRangePreferences);
            // save to database
            await (0, UserTrainCalendarHelper_1.insertPreferredTimeRangeOneForEvent)(client, id, eventId, startTime, endTime, dayOfWeek, userId, createdDate, updatedAt, toast);
            // update event in db with boolean to true for modified preferredtime range
            /**
             * must include:
             * userId,
                startDate,
                endDate,

             */
            await (0, UserCreateCalendarHelper_1.atomicUpsertEventInDb)(client, eventId, eventId.split('#')[0], userId, startDate, endDate, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, calendarId, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, true);
            // clear form
            setStartTimeRange(new Date());
            setEndTimeRange(new Date());
            setDayOfWeek(-1);
            console.log('done processing');
        }
        catch (e) {
            setError('unable to add item to preferred time ranges');
            setTimeout(() => setError(''), 3000);
            console.log(e, ' e unable to add item to preferred time ranges');
        }
    };
    const removeItem = async (index) => {
        try {
            // validate item
            if (!timeRangePreferences[index]) {
                toast({
                    title: 'Item is required',
                    description: 'Please select an item',
                    status: 'error',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            const cloneTimeRangePreferences = lodash_1.default.reverse(lodash_1.default.cloneDeep(timeRangePreferences));
            const newTimeRangePreferences = cloneTimeRangePreferences.filter((item, i) => i !== index);
            setTimeRangePreferences(newTimeRangePreferences);
            // deletePreferredTimeRangeWithId
            await (0, UserTrainCalendarHelper_1.deletePreferredTimeRangeWithId)(client, cloneTimeRangePreferences[index].id);
        }
        catch (e) {
            console.log(e, ' e unable to remove item from preferred time ranges');
        }
    };
    const renderItem = ({ item, index }) => ((0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsxs)(RegularCard_1.default, { children: [(0, jsx_runtime_1.jsx)(Text_1.default, { p: { phone: 's', tablet: 'm' }, variant: "optionHeader", children: (((item?.dayOfWeek === -1) || (item?.dayOfWeek === null))) ? 'Any day of week' : (0, date_utils_1.dayjs)((0, date_fns_1.setISODay)((0, date_utils_1.dayjs)().toDate(), item.dayOfWeek)).format('dddd') }), (0, jsx_runtime_1.jsxs)(Text_1.default, { p: { phone: 's', tablet: 'm' }, variant: "optionHeader", children: [(0, date_utils_1.dayjs)(item.startTime, 'HH:mm').format('h:mm A'), ' - ', (0, date_utils_1.dayjs)(item.endTime, 'HH:mm').format('h:mm A')] }), (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: () => removeItem(index), children: (0, jsx_runtime_1.jsx)(Text_1.default, { p: { phone: 's', tablet: 'm' }, variant: "buttonLink", children: (0, jsx_runtime_1.jsx)(io_1.IoIosRemoveCircleOutline, { color: theme_1.palette.purplePrimary, name: "ios-remove-circle-outline", size: "2em" }) }) })] }) }));
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: [error && ((0, jsx_runtime_1.jsx)("div", { className: "pt-4", children: (0, jsx_runtime_1.jsx)("div", { className: "alert alert-error shadow-lg", children: (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", className: "stroke-current flex-shrink-0 h-6 w-6", fill: "none", viewBox: "0 0 24 24", children: (0, jsx_runtime_1.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: "2", d: "M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" }) }), (0, jsx_runtime_1.jsx)("span", { children: error })] }) }) })), (0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col md:flex md:flex-row w-full justify-center items-center", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col justify-center items-center w-1/2 flex-auto", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: summary }) }), (0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { p: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Start Time" }), (0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Select Time", size: "md", type: "time", onChange: (e) => {
                                                    setStartTimeRange((0, date_utils_1.dayjs)(e?.target?.value, "HH:mm").toDate());
                                                    const timeRangeDuration = (0, date_utils_1.dayjs)(endTimeRange).diff((0, date_utils_1.dayjs)(e?.target?.value), 'm');
                                                    const dateDuration = (0, date_utils_1.dayjs)(endDate.slice(0, 19)).diff((0, date_utils_1.dayjs)(startDate.slice(0, 19)), 'm');
                                                    if (timeRangeDuration < dateDuration) {
                                                        setEndTimeRange((0, date_utils_1.dayjs)(e?.target?.value).add(dateDuration, 'm').toDate());
                                                    }
                                                }, value: (0, date_utils_1.dayjs)(startTimeRange).format("HH:mm") })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { p: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "End Time" }), (0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Time", size: "md", type: "time", onChange: (e) => {
                                                    setEndTimeRange((0, date_utils_1.dayjs)(e?.target?.value, "HH:mm").toDate());
                                                }, value: (0, date_utils_1.dayjs)(endTimeRange).format("HH:mm") })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsxs)("select", { value: dayOfWeek, onChange: (e) => changeDayOfWeek(parseInt(e?.target?.value.replace(/[^0-9.]/g, ''), 10)), className: "select select-primary w-full max-w-xs", children: [(0, jsx_runtime_1.jsx)("option", { disabled: true, selected: true, children: "Pick a day of the week" }, "pick a day"), lodash_1.default.map(dayOfWeekInt, option1 => ((0, jsx_runtime_1.jsx)("option", { value: option1, children: (option1 !== -1 ? (0, date_utils_1.dayjs)((0, date_fns_1.setISODay)((0, date_utils_1.dayjs)().toDate(), option1)).format('dddd') : 'Any day of the week') }, option1)))] }) }), (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: addItem, children: "Add" })] })] }), (0, jsx_runtime_1.jsx)("div", { className: "flex flex-col justify-center items-center w-1/2 flex-auto", children: (0, jsx_runtime_1.jsx)("div", { style: { minHeight: '65vh' }, children: (0, jsx_runtime_1.jsx)(react_native_1.FlatList, { data: timeRangePreferences?.length > 0 ? lodash_1.default.reverse(lodash_1.default.cloneDeep(timeRangePreferences)) : null, keyExtractor: item => item.id, renderItem: renderItem }) }) })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { m: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: closeTimePreferences, children: "Close" }) })] }));
}
exports.default = UserEventTimePreferences;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlckV2ZW50VGltZVByZWZlcmVuY2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVXNlckV2ZW50VGltZVByZWZlcmVuY2VzLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQTBDQSxnREFxQ0M7O0FBL0VELGlDQUErRDtBQUcvRCxvREFBb0Q7QUFDcEQsd0VBQXdFO0FBQ3hFLDRDQUF3QztBQUN4QywrQkFBaUM7QUFDakMsdUNBQStDO0FBQy9DLDRDQUEyQztBQUMzQyxpRUFBd0M7QUFDeEMsbUVBQTBDO0FBQzFDLGdFQUF1QztBQUN2QywwRUFBaUQ7QUFFakQsZ0RBQXVDO0FBTXZDLG1GQUk4QztBQUc5Qyx3RUFBa0U7QUFDbEUsK0NBQThEO0FBRTlELHVDQUEwRDtBQUMxRCxHQUFHO0FBQ0gsNENBQTBDO0FBRTFDLG9EQUFzQjtBQUN0QixxRkFBK0U7QUFHL0Usd0VBQThDO0FBQzlDLDhEQUEwRDtBQUMxRCw4RUFBcUQ7QUFFOUMsS0FBSyxVQUFVLGtCQUFrQixDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBaUQ7SUFDbEcsMEZBQTBGO0lBQzFGLHNDQUFzQztJQUN0Qyx5RUFBeUU7SUFDekUsMEJBQWUsQ0FBQyxJQUFJLENBQUMsSUFBQSw2QkFBYSxHQUFFLENBQUMsQ0FBQTtJQUNyQyxJQUFJLE9BQU8sQ0FBQTtJQUNYLElBQUksQ0FBQztRQUNILE9BQU8sR0FBRyxNQUFNLGlCQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUU7WUFDM0MsNkJBQTZCLEVBQUUsS0FBSztnQkFDbEMsT0FBTyxFQUFFLENBQUE7WUFDWCxDQUFDO1NBQ0YsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUFDLE9BQU8sR0FBUSxFQUFFLENBQUM7UUFDbEIsSUFBSSxHQUFHLENBQUMsSUFBSSxLQUFLLGlCQUFPLENBQUMsS0FBSyxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDakQsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLGVBQWUs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QUMsQ0FBQyxJQUFJLEVBQzVGLFlBQVksRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQzdCLFVBQVUsRUFBRSxVQUFVLEdBQ3hCLEdBQ0EsR0FDSixJQUNKLEVBQ04sdUJBQUMsYUFBRyxJQUFDLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxFQUFFLGNBQWMsRUFBQyxRQUFRLEVBQUMsVUFBVSxFQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDLFlBQ3JHLHVCQUFDLGdCQUFNLElBQUMsT0FBTyxFQUFFLG9CQUFvQixzQkFFNUIsR0FDUCxJQUNKLENBQ1QsQ0FBQTtBQUdMLENBQUM7QUFFRCxrQkFBZSx3QkFBd0IsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0J1xuXG5cbi8vIGltcG9ydCBEYXRlUGlja2VyIGZyb20gJ3JlYWN0LW5hdGl2ZS1kYXRlLXBpY2tlcidcbi8vIGltcG9ydCBEYXRlVGltZVBpY2tlciBmcm9tICdyZWFjdC1kYXRldGltZS1waWNrZXIvZGlzdC9lbnRyeS5ub3N0eWxlJ1xuaW1wb3J0IHsgSW5wdXQgfSBmcm9tICdAY2hha3JhLXVpL3JlYWN0J1xuaW1wb3J0IHsgdjQgYXMgdXVpZCB9IGZyb20gJ3V1aWQnXG5pbXBvcnQgeyBnZXRJU09EYXksIHNldElTT0RheSB9IGZyb20gJ2RhdGUtZm5zJ1xuaW1wb3J0IHsgdXNlVG9hc3QgfSBmcm9tICdAY2hha3JhLXVpL3JlYWN0J1xuaW1wb3J0IEJveCBmcm9tICdAY29tcG9uZW50cy9jb21tb24vQm94J1xuaW1wb3J0IFRleHQgZnJvbSAnQGNvbXBvbmVudHMvY29tbW9uL1RleHQnXG5pbXBvcnQgQnV0dG9uIGZyb20gJ0Bjb21wb25lbnRzL0J1dHRvbidcbmltcG9ydCBSZWd1bGFyQ2FyZCBmcm9tICdAY29tcG9uZW50cy9SZWd1bGFyQ2FyZCdcblxuaW1wb3J0IHsgZGF5anMgfSBmcm9tICdAbGliL2RhdGUtdXRpbHMnXG5cbmltcG9ydCB7XG4gIFByZWZlcnJlZFRpbWVSYW5nZVR5cGUsXG59IGZyb20gJ0BsaWIvZGF0YVR5cGVzL1ByZWZlcnJlZFRpbWVSYW5nZVR5cGUnXG5cbmltcG9ydCB7XG4gICAgbGlzdFByZWZlcnJlZFRpbWVSYW5nZXNCeUV2ZW50LFxuICAgIGRlbGV0ZVByZWZlcnJlZFRpbWVSYW5nZVdpdGhJZCxcbiAgICBpbnNlcnRQcmVmZXJyZWRUaW1lUmFuZ2VPbmVGb3JFdmVudCxcbn0gZnJvbSAnQGxpYi9DYWxlbmRhci9Vc2VyVHJhaW5DYWxlbmRhckhlbHBlcidcblxuaW1wb3J0IHsgQXBvbGxvQ2xpZW50LCBOb3JtYWxpemVkQ2FjaGVPYmplY3QgfSBmcm9tICdAYXBvbGxvL2NsaWVudCdcbmltcG9ydCB7IGdldEV2ZW50V2l0aElkIH0gZnJvbSAnQGxpYi9jYWxlbmRhckxpYi9jYWxlbmRhckRiSGVscGVyJ1xuaW1wb3J0IHsgQXBwZWFyYW5jZSwgRmxhdExpc3QsIFByZXNzYWJsZSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSdcblxuaW1wb3J0IHsgSW9Jb3NSZW1vdmVDaXJjbGVPdXRsaW5lIH0gZnJvbSBcInJlYWN0LWljb25zL2lvXCI7XG4vLyBcbmltcG9ydCB7IHBhbGV0dGUgfSBmcm9tICdAbGliL3RoZW1lL3RoZW1lJ1xuaW1wb3J0IHsgVGltZSB9IGZyb20gJ0BsaWIvZGF0YVR5cGVzL0V2ZW50VHlwZSdcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCdcbmltcG9ydCB7IGF0b21pY1Vwc2VydEV2ZW50SW5EYiB9IGZyb20gJ0BsaWIvQ2FsZW5kYXIvVXNlckNyZWF0ZUNhbGVuZGFySGVscGVyJztcbmltcG9ydCB7IHVzZUZvY3VzRWZmZWN0IH0gZnJvbSAnQGNoYWtyYS11aS9yZWFjdCdcbmltcG9ydCB7IE5leHRBcGlSZXF1ZXN0LCBOZXh0QXBpUmVzcG9uc2UgfSBmcm9tICduZXh0JztcbmltcG9ydCBzdXBlcnRva2Vuc05vZGUgZnJvbSAnc3VwZXJ0b2tlbnMtbm9kZSdcbmltcG9ydCB7IGJhY2tlbmRDb25maWcgfSBmcm9tICcuLi8uLi9jb25maWcvYmFja2VuZENvbmZpZydcbmltcG9ydCBTZXNzaW9uIGZyb20gJ3N1cGVydG9rZW5zLW5vZGUvcmVjaXBlL3Nlc3Npb24nXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTZXJ2ZXJTaWRlUHJvcHMoeyByZXEsIHJlcyB9OiB7IHJlcTogTmV4dEFwaVJlcXVlc3QsIHJlczogTmV4dEFwaVJlc3BvbnNlIH0pIHtcbiAgLy8gTm90aWNlIGhvdyB0aGUgc2VydmVyIHVzZXMgYEFQSWAgZnJvbSBgd2l0aFNTUkNvbnRleHRgLCBpbnN0ZWFkIG9mIHRoZSB0b3AtbGV2ZWwgYEFQSWAuXG4gIC8vIGNvbnN0IFNTUiA9IHdpdGhTU1JDb250ZXh0KHsgcmVxIH0pXG4gIC8vIHRoaXMgcnVucyBvbiB0aGUgYmFja2VuZCwgc28gd2UgbXVzdCBjYWxsIGluaXQgb24gc3VwZXJ0b2tlbnMtbm9kZSBTREtcbiAgc3VwZXJ0b2tlbnNOb2RlLmluaXQoYmFja2VuZENvbmZpZygpKVxuICBsZXQgc2Vzc2lvblxuICB0cnkge1xuICAgIHNlc3Npb24gPSBhd2FpdCBTZXNzaW9uLmdldFNlc3Npb24ocmVxLCByZXMsIHtcbiAgICAgIG92ZXJyaWRlR2xvYmFsQ2xhaW1WYWxpZGF0b3JzOiBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBbXVxuICAgICAgfSxcbiAgICB9KVxuICB9IGNhdGNoIChlcnI6IGFueSkge1xuICAgIGlmIChlcnIudHlwZSA9PT0gU2Vzc2lvbi5FcnJvci5UUllfUkVGUkVTSF9UT0tFTikge1xuICAgICAgcmV0dXJuIHsgcHJvcHM6IHsgZnJvbVN1cGVydG9rZW5zOiAnbmVlZHMtcmVmcmVzaCcgfSB9XG4gICAgfSBlbHNlIGlmIChlcnIudHlwZSA9PT0gU2Vzc2lvbi5FcnJvci5VTkFVVEhPUklTRUQpIHtcbiAgICAgIC8vIHRoaXMgd2lsbCBmb3JjZSB0aGUgZnJvbnRlbmQgdG8gdHJ5IGFuZCByZWZyZXNoIHdoaWNoIHdpbGwgZmFpbFxuICAgICAgLy8gY2xlYXJpbmcgYWxsIGNvb2tpZXMgYW5kIHJlZGlyZWN0aW5nIHRoZSB1c2VyIHRvIHRoZSBsb2dpbiBzY3JlZW4uXG4gICAgICByZXR1cm4geyBwcm9wczogeyBmcm9tU3VwZXJ0b2tlbnM6ICduZWVkcy1yZWZyZXNoJyB9IH1cbiAgICB9XG4gICAgdGhyb3cgZXJyXG4gIH1cblxuICBpZiAoIXNlc3Npb24/LmdldFVzZXJJZCgpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlZGlyZWN0OiB7XG4gICAgICAgIGRlc3RpbmF0aW9uOiAnL1VzZXIvTG9naW4vVXNlckxvZ2luJyxcbiAgICAgICAgcGVybWFuZW50OiBmYWxzZSxcbiAgICAgIH0sXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwcm9wczoge1xuICAgICAgc3ViOiBzZXNzaW9uLmdldFVzZXJJZCgpLFxuICAgIH1cbiAgfVxufVxuXG5cbnR5cGUgUmVuZGVyUHJlZmVycmVkVGltZVJhbmdlVHlwZSA9IHtcbiAgICBpdGVtOiBQcmVmZXJyZWRUaW1lUmFuZ2VUeXBlLFxuICAgIGluZGV4OiBudW1iZXIsXG59XG5cbmNvbnN0IGRheU9mV2Vla0ludCA9IFstMSwgMSwgMiwgMywgNCwgNSwgNiwgN11cblxuY29uc3QgZGFyayA9IEFwcGVhcmFuY2UuZ2V0Q29sb3JTY2hlbWUoKSA9PT0gJ2RhcmsnXG5cbnR5cGUgUHJvcHMgPSB7XG4gICAgaWQ6IHN0cmluZyxcbiAgICBjbG9zZVRpbWVQcmVmZXJlbmNlczogKCkgPT4gdm9pZCxcbiAgICBjbGllbnQ6IEFwb2xsb0NsaWVudDxOb3JtYWxpemVkQ2FjaGVPYmplY3Q+LFxuICAgIHN1Yjogc3RyaW5nLFxufVxuXG5mdW5jdGlvbiBVc2VyRXZlbnRUaW1lUHJlZmVyZW5jZXMocHJvcHM6IFByb3BzKSB7XG4gICAgY29uc3QgW3RpbWVSYW5nZVByZWZlcmVuY2VzLCBzZXRUaW1lUmFuZ2VQcmVmZXJlbmNlc10gPSB1c2VTdGF0ZTxQcmVmZXJyZWRUaW1lUmFuZ2VUeXBlW10+KFtdKVxuICAgIGNvbnN0IFtzdW1tYXJ5LCBzZXRTdW1tYXJ5XSA9IHVzZVN0YXRlPHN0cmluZz4oJycpXG4gICAgY29uc3QgW3N0YXJ0RGF0ZSwgc2V0U3RhcnREYXRlXSA9IHVzZVN0YXRlPHN0cmluZz4oJycpXG4gICAgY29uc3QgW2VuZERhdGUsIHNldEVuZERhdGVdID0gdXNlU3RhdGU8c3RyaW5nPignJylcbiAgICBjb25zdCBbZGF5T2ZXZWVrLCBzZXREYXlPZldlZWtdID0gdXNlU3RhdGU8LTEgfCAxIHwgMiB8IDMgfCA0IHwgNSB8IDYgfCA3IHwgbnVsbD4oLTEpXG4gICAgLy8gY29uc3QgW2RheU9mV2Vla09iamVjdCwgc2V0RGF5T2ZXZWVrT2JqZWN0XSA9IHVzZVN0YXRlPHtsYWJlbDogc3RyaW5nLCB2YWx1ZTogbnVtYmVyIH0+KG51bGwpXG4gICAgY29uc3QgW3N0YXJ0VGltZVJhbmdlLCBzZXRTdGFydFRpbWVSYW5nZV0gPSB1c2VTdGF0ZTxEYXRlPihuZXcgRGF0ZSgpKVxuICAgIGNvbnN0IFtlbmRUaW1lUmFuZ2UsIHNldEVuZFRpbWVSYW5nZV0gPSB1c2VTdGF0ZTxEYXRlPihkYXlqcygpLmFkZCgzMCwgJ20nKS50b0RhdGUoKSlcbiAgICBjb25zdCBbaXNTdGFydFRpbWVSYW5nZSwgc2V0SXNTdGFydFRpbWVSYW5nZV0gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSlcbiAgICBjb25zdCBbaXNFbmRUaW1lUmFuZ2UsIHNldElzRW5kVGltZVJhbmdlXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKVxuICAgIGNvbnN0IFtjYWxlbmRhcklkLCBzZXRDYWxlbmRhcklkXSA9IHVzZVN0YXRlPHN0cmluZz4oJycpXG4gICAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZTxzdHJpbmc+KCcnKVxuICAgIFxuXG4gICAgY29uc3Qgc3ViID0gcHJvcHM/LnN1YlxuICAgIGNvbnN0IGNsaWVudCA9IHByb3BzPy5jbGllbnRcbiAgICBjb25zdCB0b2FzdCA9IHVzZVRvYXN0KClcbiAgICBjb25zdCB1c2VySWQgPSBzdWJcblxuICAgIGNvbnN0IGV2ZW50SWQgPSBwcm9wcz8uaWRcblxuICAgIGNvbnN0IGNsb3NlVGltZVByZWZlcmVuY2VzID0gcHJvcHM/LmNsb3NlVGltZVByZWZlcmVuY2VzXG5cbiAgICAvLyBjb25zdCBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGlvbjxVc2VyRXZlbnRUaW1lUHJlZmVyZW5jZXNOYXZpZ2F0aW9uUHJvcD4oKVxuICAgIFxuICAgIGNvbnNvbGUubG9nKGV2ZW50SWQsICcgZXZlbnRJZCBwcmVyZW5kZXIgaW5zaWRlIFVzZXJFdmVudFRpbWVQcmVmZXJlbmNlcycpXG5cbiAgICAvLyBnZXQgZXZlbnRcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgLy8gdmFsaWRhdGVcbiAgICAgICAgICAgIGlmICghZXZlbnRJZCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGV2ZW50SWQsICcgbm8gZXZlbnRJZCcpXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghY2xpZW50KSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJyBubyBjbGllbnQnKVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBldmVudCA9IGF3YWl0IGdldEV2ZW50V2l0aElkKGNsaWVudCwgZXZlbnRJZClcbiAgICAgICAgICAgIHNldFN1bW1hcnkoZXZlbnQ/LnN1bW1hcnkpXG4gICAgICAgICAgICBzZXRTdGFydERhdGUoZXZlbnQ/LnN0YXJ0RGF0ZSlcbiAgICAgICAgICAgIHNldEVuZERhdGUoZXZlbnQ/LmVuZERhdGUpXG4gICAgICAgICAgICBzZXRDYWxlbmRhcklkKGV2ZW50Py5jYWxlbmRhcklkKVxuICAgICAgICB9KSgpXG4gICAgfSwgW2NsaWVudCwgZXZlbnRJZF0pXG5cbiAgICAvLyBsaXN0IHRpbWUgcmFuZ2UgcHJlZmVyZW5jZXMgZm9yIGV2ZW50XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gdmFsaWRhdGVcbiAgICAgICAgICAgICAgICBpZiAoIWV2ZW50SWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFjbGllbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgbGlzdFByZWZlcnJlZFRpbWVSYW5nZXNCeUV2ZW50KGNsaWVudCwgZXZlbnRJZClcbiAgICAgICAgICAgICAgICBpZiAocmVzPy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVSYW5nZVByZWZlcmVuY2VzKHJlcylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSwgJyB1bmFibGUgdG8gbGlzdCB0aW1lIHJhbmdlcycpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKClcbiAgICB9LCBbY2xpZW50LCBldmVudElkXSlcblxuICAgIGNvbnN0IGhpZGVTdGFydFRpbWVSYW5nZVBpY2tlciA9ICgpID0+IHNldElzU3RhcnRUaW1lUmFuZ2UoZmFsc2UpXG4gICAgXG4gICAgY29uc3Qgc2hvd1N0YXJ0VGltZVJhbmdlUGlja2VyID0gKCkgPT4gc2V0SXNTdGFydFRpbWVSYW5nZSh0cnVlKVxuXG4gICAgY29uc3QgaGlkZUVuZFRpbWVSYW5nZVBpY2tlciA9ICgpID0+IHNldElzRW5kVGltZVJhbmdlKGZhbHNlKVxuXG4gICAgY29uc3Qgc2hvd0VuZFRpbWVSYW5nZVBpY2tlciA9ICgpID0+IHNldElzRW5kVGltZVJhbmdlKHRydWUpXG5cbiAgICBjb25zdCBjaGFuZ2VEYXlPZldlZWsgPSAoaXRlbTogbnVtYmVyKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGl0ZW0sICcgaXRlbSBpbnNpZGUgY2hhbmdlIGRheSBvZiB3ZWVrJylcbiAgICAgICAgXG4gICAgICAgIHNldERheU9mV2VlayhpdGVtIGFzIC0xIHwgMSB8IDIgfCAzIHwgNCB8IDUgfCA2IHwgNylcbiAgICAgICAgLy8gc2V0RGF5T2ZXZWVrT2JqZWN0KGl0ZW0pXG4gICAgfVxuXG4gICAgY29uc3QgYWRkSXRlbSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdhZGRJdGVtIGNhbGxlZCcpXG4gICAgICAgICAgICAvLyB2YWxpZGF0ZSBzdGFydFRpbWUsIGVuZFRpbWUsIGV2ZW50SWQsIGFuZCBkYXlPZldlZWtcbiAgICAgICAgICAgIGlmICghc3RhcnRUaW1lUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICBzZXRFcnJvcignUGxlYXNlIHNlbGVjdCBhIHN0YXJ0IHRpbWUnKVxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gc2V0RXJyb3IoJycpLCAzMDAwKVxuICAgICAgICAgICAgICAgIHRvYXN0KHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdTdGFydCB0aW1lIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdQbGVhc2Ugc2VsZWN0IGEgc3RhcnQgdGltZScsXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDkwMDAsXG4gICAgICAgICAgICAgICAgICAgIGlzQ2xvc2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFlbmRUaW1lUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICBzZXRFcnJvcignUGxlYXNlIHNlbGVjdCBhbiBlbmQgdGltZScpXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiBzZXRFcnJvcignJyksIDMwMDApXG4gICAgICAgICAgICAgICAgdG9hc3Qoe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0VuZCB0aW1lIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdQbGVhc2Ugc2VsZWN0IGFuIGVuZCB0aW1lJyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAnZXJyb3InLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogOTAwMCxcbiAgICAgICAgICAgICAgICAgICAgaXNDbG9zYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWV2ZW50SWQpIHtcbiAgICAgICAgICAgICAgICBzZXRFcnJvcignUGxlYXNlIHNlbGVjdCBhbiBldmVudCcpXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiBzZXRFcnJvcignJyksIDMwMDApXG4gICAgICAgICAgICAgICAgdG9hc3Qoe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0V2ZW50IGlzIHJlcXVpcmVkJyxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdQbGVhc2Ugc2VsZWN0IGFuIGV2ZW50JyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAnZXJyb3InLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogOTAwMCxcbiAgICAgICAgICAgICAgICAgICAgaXNDbG9zYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIGlmIChkYXlPZldlZWsgPCAtMSB8fCBkYXlPZldlZWsgPiA3KSB7XG4gICAgICAgICAgICAgICAgc2V0RXJyb3IoJ1BsZWFzZSBzZWxlY3QgYSBkYXkgb2Ygd2VlaycpXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiBzZXRFcnJvcignJyksIDMwMDApXG4gICAgICAgICAgICAgICAgdG9hc3Qoe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0RheSBvZiB3ZWVrIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdQbGVhc2Ugc2VsZWN0IGEgZGF5IG9mIHdlZWsnLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6ICdlcnJvcicsXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiA5MDAwLFxuICAgICAgICAgICAgICAgICAgICBpc0Nsb3NhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHZhbGlkYXRlIHN0YXJ0VGltZVJhbmdlIGFuZCBlbmRUaW1lUmFuZ2VcbiAgICAgICAgICAgIGlmIChzdGFydFRpbWVSYW5nZS5nZXRUaW1lKCkgPj0gZW5kVGltZVJhbmdlLmdldFRpbWUoKSkge1xuICAgICAgICAgICAgICAgIHNldEVycm9yKCdQbGVhc2Ugc2VsZWN0IGEgc3RhcnQgdGltZSBiZWZvcmUgZW5kIHRpbWUnKVxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gc2V0RXJyb3IoJycpLCAzMDAwKVxuICAgICAgICAgICAgICAgIHRvYXN0KHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdTdGFydCB0aW1lIG11c3QgYmUgYmVmb3JlIGVuZCB0aW1lJyxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdQbGVhc2Ugc2VsZWN0IGEgc3RhcnQgdGltZSBiZWZvcmUgZW5kIHRpbWUnLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6ICdlcnJvcicsXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiA5MDAwLFxuICAgICAgICAgICAgICAgICAgICBpc0Nsb3NhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHRpbWVSYW5nZUR1cmF0aW9uID0gZGF5anMoZW5kVGltZVJhbmdlKS5kaWZmKGRheWpzKHN0YXJ0VGltZVJhbmdlKSwgJ20nKVxuICAgICAgICAgICAgY29uc3QgZGF0ZUR1cmF0aW9uID0gZGF5anMoc3RhcnREYXRlLnNsaWNlKDAsIDE5KSkuZGlmZihkYXlqcyhlbmREYXRlLnNsaWNlKDAsIDE5KSksICdtJylcblxuICAgICAgICAgICAgaWYgKHRpbWVSYW5nZUR1cmF0aW9uIDwgZGF0ZUR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgc2V0RXJyb3IoJ1BsZWFzZSBzZWxlY3QgYSBlbmQgdGltZSB0aGF0IGlzIHNhbWUgb3IgbG9uZ2VyIHRoYW4gZXZlbnQgZHVyYXRpb24nKVxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gc2V0RXJyb3IoJycpLCAzMDAwKVxuICAgICAgICAgICAgICAgIHRvYXN0KHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdFbmQgdGltZSBtdXN0IGJlIHNhbWUgb3IgbG9uZ2VyIHRoYW4gZXZlbnQgZHVyYXRpb24nLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1BsZWFzZSBzZWxlY3QgYSBlbmQgdGltZSB0aGF0IGlzIHNhbWUgb3IgbG9uZ2VyIHRoYW4gZXZlbnQgZHVyYXRpb24nLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6ICdlcnJvcicsXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiA5MDAwLFxuICAgICAgICAgICAgICAgICAgICBpc0Nsb3NhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IGRheWpzKHN0YXJ0VGltZVJhbmdlKS5mb3JtYXQoJ0hIOm1tJykgYXMgVGltZVxuICAgICAgICAgICAgY29uc3QgZW5kVGltZSA9IGRheWpzKGVuZFRpbWVSYW5nZSkuZm9ybWF0KCdISDptbScpIGFzIFRpbWVcbiAgICAgICAgICAgIGNvbnN0IGlkID0gdXVpZCgpXG4gICAgICAgICAgICBjb25zdCBjcmVhdGVkRGF0ZSA9IGRheWpzKCkudG9JU09TdHJpbmcoKVxuICAgICAgICAgICAgY29uc3QgdXBkYXRlZEF0ID0gY3JlYXRlZERhdGVcblxuICAgICAgICAgICAgY29uc3QgbmV3UHJlZmVycmVkVGltZVJhbmdlOiBQcmVmZXJyZWRUaW1lUmFuZ2VUeXBlID0ge1xuICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgIGV2ZW50SWQsXG4gICAgICAgICAgICAgICAgZGF5T2ZXZWVrLFxuICAgICAgICAgICAgICAgIHN0YXJ0VGltZSxcbiAgICAgICAgICAgICAgICBlbmRUaW1lLFxuICAgICAgICAgICAgICAgIGNyZWF0ZWREYXRlLFxuICAgICAgICAgICAgICAgIHVwZGF0ZWRBdCxcbiAgICAgICAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IG5ld1RpbWVSYW5nZVByZWZlcmVuY2VzID0gKHRpbWVSYW5nZVByZWZlcmVuY2VzIHx8IFtdKS5jb25jYXQoW25ld1ByZWZlcnJlZFRpbWVSYW5nZV0pXG4gICAgICAgICAgICBzZXRUaW1lUmFuZ2VQcmVmZXJlbmNlcyhuZXdUaW1lUmFuZ2VQcmVmZXJlbmNlcylcblxuICAgICAgICAgICAgLy8gc2F2ZSB0byBkYXRhYmFzZVxuICAgICAgICAgICAgYXdhaXQgaW5zZXJ0UHJlZmVycmVkVGltZVJhbmdlT25lRm9yRXZlbnQoY2xpZW50LCBpZCwgZXZlbnRJZCwgc3RhcnRUaW1lLCBlbmRUaW1lLCBkYXlPZldlZWssIHVzZXJJZCwgY3JlYXRlZERhdGUsIHVwZGF0ZWRBdCwgdG9hc3QpXG4gICAgICAgICAgICAvLyB1cGRhdGUgZXZlbnQgaW4gZGIgd2l0aCBib29sZWFuIHRvIHRydWUgZm9yIG1vZGlmaWVkIHByZWZlcnJlZHRpbWUgcmFuZ2VcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogbXVzdCBpbmNsdWRlOlxuICAgICAgICAgICAgICogdXNlcklkLFxuICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZSxcbiAgICAgICAgICAgICAgICBlbmREYXRlLFxuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGF3YWl0IGF0b21pY1Vwc2VydEV2ZW50SW5EYihcbiAgICAgICAgICAgICAgICBjbGllbnQsXG4gICAgICAgICAgICAgICAgZXZlbnRJZCxcbiAgICAgICAgICAgICAgICBldmVudElkLnNwbGl0KCcjJylbMF0sXG4gICAgICAgICAgICAgICAgdXNlcklkLFxuICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZSxcbiAgICAgICAgICAgICAgICBlbmREYXRlLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBjYWxlbmRhcklkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICApXG5cbiAgICAgICAgICAgIC8vIGNsZWFyIGZvcm1cbiAgICAgICAgICAgIHNldFN0YXJ0VGltZVJhbmdlKG5ldyBEYXRlKCkpXG4gICAgICAgICAgICBzZXRFbmRUaW1lUmFuZ2UobmV3IERhdGUoKSlcbiAgICAgICAgICAgIHNldERheU9mV2VlaygtMSlcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkb25lIHByb2Nlc3NpbmcnKVxuXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHNldEVycm9yKCd1bmFibGUgdG8gYWRkIGl0ZW0gdG8gcHJlZmVycmVkIHRpbWUgcmFuZ2VzJylcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gc2V0RXJyb3IoJycpLCAzMDAwKVxuICAgICAgICAgICAgY29uc29sZS5sb2coZSwgJyBlIHVuYWJsZSB0byBhZGQgaXRlbSB0byBwcmVmZXJyZWQgdGltZSByYW5nZXMnKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcmVtb3ZlSXRlbSA9IGFzeW5jIChpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyB2YWxpZGF0ZSBpdGVtXG4gICAgICAgICAgICBpZiAoIXRpbWVSYW5nZVByZWZlcmVuY2VzW2luZGV4XSkge1xuICAgICAgICAgICAgICAgIHRvYXN0KHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdJdGVtIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdQbGVhc2Ugc2VsZWN0IGFuIGl0ZW0nLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6ICdlcnJvcicsXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiA5MDAwLFxuICAgICAgICAgICAgICAgICAgICBpc0Nsb3NhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGNsb25lVGltZVJhbmdlUHJlZmVyZW5jZXMgPSBfLnJldmVyc2UoXy5jbG9uZURlZXAodGltZVJhbmdlUHJlZmVyZW5jZXMpKVxuICAgICAgICAgICAgY29uc3QgbmV3VGltZVJhbmdlUHJlZmVyZW5jZXMgPSBjbG9uZVRpbWVSYW5nZVByZWZlcmVuY2VzLmZpbHRlcigoaXRlbSwgaSkgPT4gaSAhPT0gaW5kZXgpICAgXG4gICAgICAgICAgICBzZXRUaW1lUmFuZ2VQcmVmZXJlbmNlcyhuZXdUaW1lUmFuZ2VQcmVmZXJlbmNlcylcbiAgICAgICAgICAgIC8vIGRlbGV0ZVByZWZlcnJlZFRpbWVSYW5nZVdpdGhJZFxuICAgICAgICAgICAgYXdhaXQgZGVsZXRlUHJlZmVycmVkVGltZVJhbmdlV2l0aElkKGNsaWVudCwgY2xvbmVUaW1lUmFuZ2VQcmVmZXJlbmNlc1tpbmRleF0uaWQpXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUsICcgZSB1bmFibGUgdG8gcmVtb3ZlIGl0ZW0gZnJvbSBwcmVmZXJyZWQgdGltZSByYW5nZXMnKVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBjb25zdCByZW5kZXJJdGVtID0gKHsgaXRlbSwgaW5kZXggfTogUmVuZGVyUHJlZmVycmVkVGltZVJhbmdlVHlwZSkgPT4gKFxuICAgICAgICA8Qm94IGp1c3RpZnlDb250ZW50PVwiY2VudGVyXCIgYWxpZ25JdGVtcz1cImNlbnRlclwiPlxuICAgICAgICAgICAgPFJlZ3VsYXJDYXJkPlxuICAgICAgICAgICAgICAgIDxUZXh0IHA9e3sgcGhvbmU6ICdzJywgdGFibGV0OiAnbScgfX0gdmFyaWFudD1cIm9wdGlvbkhlYWRlclwiPlxuICAgICAgICAgICAgICAgICAgICB7KCgoaXRlbT8uZGF5T2ZXZWVrID09PSAtMSkgfHwgKGl0ZW0/LmRheU9mV2VlayA9PT0gbnVsbCkpKSA/ICdBbnkgZGF5IG9mIHdlZWsnIDogZGF5anMoc2V0SVNPRGF5KGRheWpzKCkudG9EYXRlKCksIGl0ZW0uZGF5T2ZXZWVrKSkuZm9ybWF0KCdkZGRkJyl9XG4gICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgICAgIDxUZXh0IHA9e3sgcGhvbmU6ICdzJywgdGFibGV0OiAnbScgfX0gdmFyaWFudD1cIm9wdGlvbkhlYWRlclwiPlxuICAgICAgICAgICAgICAgICAgICB7ZGF5anMoaXRlbS5zdGFydFRpbWUsICdISDptbScpLmZvcm1hdCgnaDptbSBBJyl9XG4gICAgICAgICAgICAgICAgICAgIHsnIC0gJ31cbiAgICAgICAgICAgICAgICAgICAge2RheWpzKGl0ZW0uZW5kVGltZSwgJ0hIOm1tJykuZm9ybWF0KCdoOm1tIEEnKX1cbiAgICAgICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICAgICAgPFByZXNzYWJsZSBvblByZXNzPXsoKSA9PiByZW1vdmVJdGVtKGluZGV4KX0+XG4gICAgICAgICAgICAgICAgICAgIDxUZXh0IHA9e3sgcGhvbmU6ICdzJywgdGFibGV0OiAnbScgfX0gdmFyaWFudD1cImJ1dHRvbkxpbmtcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxJb0lvc1JlbW92ZUNpcmNsZU91dGxpbmUgY29sb3I9e3BhbGV0dGUucHVycGxlUHJpbWFyeX0gbmFtZT1cImlvcy1yZW1vdmUtY2lyY2xlLW91dGxpbmVcIiBzaXplPVwiMmVtXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgICAgIDwvUHJlc3NhYmxlPlxuICAgICAgICAgICAgPC9SZWd1bGFyQ2FyZD5cbiAgICAgICAgPC9Cb3g+XG4gICAgKVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPEJveCBmbGV4PXsxfSBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIiBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19PlxuICAgICAgICAgICAge2Vycm9yICYmIChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInB0LTRcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGVydCBhbGVydC1lcnJvciBzaGFkb3ctbGdcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgY2xhc3NOYW1lPVwic3Ryb2tlLWN1cnJlbnQgZmxleC1zaHJpbmstMCBoLTYgdy02XCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggc3Ryb2tlTGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZVdpZHRoPVwiMlwiIGQ9XCJNMTAgMTRsMi0ybTAgMGwyLTJtLTIgMmwtMi0ybTIgMmwyIDJtNy0yYTkgOSAwIDExLTE4IDAgOSA5IDAgMDExOCAwelwiIC8+PC9zdmc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e2Vycm9yfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgbWQ6ZmxleCBtZDpmbGV4LXJvdyB3LWZ1bGwganVzdGlmeS1jZW50ZXIgaXRlbXMtY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIGp1c3RpZnktY2VudGVyIGl0ZW1zLWNlbnRlciB3LTEvMiBmbGV4LWF1dG9cIj5cbiAgICAgICAgICAgICAgICAgICAgPEJveCBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIiAgc3R5bGU9e3sgd2lkdGg6ICcxMDAlJ319PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFRleHQgdmFyaWFudD1cIm9wdGlvbkhlYWRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzdW1tYXJ5fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICAgICAgPEJveCBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIiAgc3R5bGU9e3sgd2lkdGg6ICcxMDAlJ319PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJveCBwPXt7IHBob25lOiAncycsIHRhYmxldDogJ20nIH19IGp1c3RpZnlDb250ZW50PVwiY2VudGVyXCIgYWxpZ25JdGVtcz1cImNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0IHZhcmlhbnQ9XCJvcHRpb25IZWFkZXJcIj5TdGFydCBUaW1lPC9UZXh0PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlNlbGVjdCBUaW1lXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT1cIm1kXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRpbWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFN0YXJ0VGltZVJhbmdlKGRheWpzKGU/LnRhcmdldD8udmFsdWUsIFwiSEg6bW1cIikudG9EYXRlKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aW1lUmFuZ2VEdXJhdGlvbiA9IGRheWpzKGVuZFRpbWVSYW5nZSkuZGlmZihkYXlqcyhlPy50YXJnZXQ/LnZhbHVlKSwgJ20nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0ZUR1cmF0aW9uID0gZGF5anMoZW5kRGF0ZS5zbGljZSgwLCAxOSkpLmRpZmYoZGF5anMoc3RhcnREYXRlLnNsaWNlKDAsIDE5KSksICdtJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aW1lUmFuZ2VEdXJhdGlvbiA8IGRhdGVEdXJhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEVuZFRpbWVSYW5nZShkYXlqcyhlPy50YXJnZXQ/LnZhbHVlKS5hZGQoZGF0ZUR1cmF0aW9uLCAnbScpLnRvRGF0ZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17ZGF5anMoc3RhcnRUaW1lUmFuZ2UpLmZvcm1hdChcIkhIOm1tXCIpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCb3ggcD17eyBwaG9uZTogJ3MnLCB0YWJsZXQ6ICdtJyB9fSBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dCB2YXJpYW50PVwib3B0aW9uSGVhZGVyXCI+RW5kIFRpbWU8L1RleHQ+XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJUaW1lXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT1cIm1kXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRpbWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEVuZFRpbWVSYW5nZShkYXlqcyhlPy50YXJnZXQ/LnZhbHVlLCBcIkhIOm1tXCIpLnRvRGF0ZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtkYXlqcyhlbmRUaW1lUmFuZ2UpLmZvcm1hdChcIkhIOm1tXCIpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJveCBwPXt7IHBob25lOiAncycsIHRhYmxldDogJ20nIH19IGp1c3RpZnlDb250ZW50PVwiY2VudGVyXCIgYWxpZ25JdGVtcz1cImNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgdmFsdWU9e2RheU9mV2Vla30gb25DaGFuZ2U9eyhlKSA9PiBjaGFuZ2VEYXlPZldlZWsocGFyc2VJbnQoZT8udGFyZ2V0Py52YWx1ZS5yZXBsYWNlKC9bXjAtOS5dL2csICcnKSwgMTApKX0gY2xhc3NOYW1lPVwic2VsZWN0IHNlbGVjdC1wcmltYXJ5IHctZnVsbCBtYXgtdy14c1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIGtleT1cInBpY2sgYSBkYXlcIiBkaXNhYmxlZCBzZWxlY3RlZD5QaWNrIGEgZGF5IG9mIHRoZSB3ZWVrPC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtfLm1hcChkYXlPZldlZWtJbnQsIG9wdGlvbjEgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtvcHRpb24xfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17b3B0aW9uMX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KG9wdGlvbjEgIT09IC0xID8gZGF5anMoc2V0SVNPRGF5KGRheWpzKCkudG9EYXRlKCksIG9wdGlvbjEpKS5mb3JtYXQoJ2RkZGQnKSA6ICdBbnkgZGF5IG9mIHRoZSB3ZWVrJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17YWRkSXRlbX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQWRkXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIGp1c3RpZnktY2VudGVyIGl0ZW1zLWNlbnRlciB3LTEvMiBmbGV4LWF1dG9cIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17eyBtaW5IZWlnaHQ6ICc2NXZoJ319PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEZsYXRMaXN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YT17dGltZVJhbmdlUHJlZmVyZW5jZXM/Lmxlbmd0aCA+IDAgPyBfLnJldmVyc2UoXy5jbG9uZURlZXAodGltZVJhbmdlUHJlZmVyZW5jZXMpKSA6IG51bGx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5RXh0cmFjdG9yPXtpdGVtID0+IGl0ZW0uaWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVySXRlbT17cmVuZGVySXRlbX1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PiBcbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPEJveCBtPXt7IHBob25lOiAncycsIHRhYmxldDogJ20nIH19IGp1c3RpZnlDb250ZW50PVwiY2VudGVyXCIgYWxpZ25JdGVtcz1cImNlbnRlclwiICBzdHlsZT17eyB3aWR0aDogJzEwMCUnfX0+XG4gICAgICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXtjbG9zZVRpbWVQcmVmZXJlbmNlc30+XG4gICAgICAgICAgICAgICAgICAgIENsb3NlXG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICA8L0JveD5cbiAgICAgICAgPC9Cb3g+XG4gICAgKVxuXG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgVXNlckV2ZW50VGltZVByZWZlcmVuY2VzXG5cblxuXG5cblxuXG5cbiJdfQ==