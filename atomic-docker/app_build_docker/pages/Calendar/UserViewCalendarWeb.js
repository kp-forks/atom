"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const date_utils_1 = require("@lib/date-utils");
const react_1 = require("react");
const dragAndDrop_1 = __importDefault(require("react-big-calendar/lib/addons/dragAndDrop"));
const react_big_calendar_1 = require("react-big-calendar");
const lodash_1 = __importDefault(require("lodash"));
const SpeedDial_1 = __importDefault(require("@mui/material/SpeedDial"));
const SpeedDialIcon_1 = __importDefault(require("@mui/material/SpeedDialIcon"));
const SpeedDialAction_1 = __importDefault(require("@mui/material/SpeedDialAction"));
const colors_1 = require("@mui/material/colors");
const react_2 = require("@chakra-ui/react");
const session_1 = __importDefault(require("supertokens-web-js/recipe/session"));
const axios_1 = __importDefault(require("axios"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const UserEditCategoryEventModal_1 = __importDefault(require("@pages/Calendar/UserEditCategoryEventModal"));
const UserPreAndPostForEventModal_1 = __importDefault(require("@pages/Calendar/UserPreAndPostForEventModal"));
const UserEditEventPriorityModal_1 = __importDefault(require("@pages/Calendar/UserEditEventPriorityModal"));
const QueryStats_1 = __importDefault(require("@mui/icons-material/QueryStats"));
const MeetingRoom_1 = __importDefault(require("@mui/icons-material/MeetingRoom"));
const Schedule_1 = __importDefault(require("@mui/icons-material/Schedule"));
const UserCreateCalendarHelper_1 = require("@lib/Calendar/UserCreateCalendarHelper");
const constants_1 = require("@lib/constants");
const Button_1 = __importDefault(require("@components/Button"));
const UserRateEvent_1 = __importDefault(require("@pages/Calendar/UserRateEvent"));
const constants_2 = require("@lib/calendarLib/constants");
const googleCalendarHelper_1 = require("@lib/calendarLib/googleCalendarHelper");
const theme_1 = require("@lib/theme/theme");
const subscribeEventUpdated_1 = __importDefault(require("@lib/apollo/gql/subscribeEventUpdated"));
const client_1 = require("@apollo/client");
const listCategoriesForEventId_1 = __importDefault(require("@lib/apollo/gql/listCategoriesForEventId"));
const subscribeEventAdded_1 = __importDefault(require("@lib/apollo/gql/subscribeEventAdded"));
const getEventById_1 = __importDefault(require("@lib/apollo/gql/getEventById"));
const updateEventForUnlink_1 = __importDefault(require("@lib/apollo/gql/updateEventForUnlink"));
const updateEventForModifiable_1 = __importDefault(require("@lib/apollo/gql/updateEventForModifiable"));
const getCalendarById_1 = __importDefault(require("@lib/apollo/gql/getCalendarById"));
const deleteEventById_1 = __importDefault(require("@lib/apollo/gql/deleteEventById"));
const calendarDbHelper_1 = require("@lib/calendarLib/calendarDbHelper");
const UserCreateCalendarHelper_2 = require("../../lib/Calendar/UserCreateCalendarHelper");
const AttendeeHelper_1 = require("@lib/Calendar/Attendee/AttendeeHelper");
const ConferenceHelper_1 = require("@lib/Calendar/Conference/ConferenceHelper");
const ReminderHelper_1 = require("@lib/Calendar/Reminder/ReminderHelper");
// import DateTimePicker from 'react-datetime-picker/dist/entry.nostyle'
const react_3 = require("@chakra-ui/react");
const UserMeetingAssistHelper_1 = require("@lib/Assist/UserMeetingAssistHelper");
const constants_3 = require("@lib/Assist/constants");
const react_native_1 = require("react-native");
const router_1 = require("next/router");
const user_context_1 = require("@lib/user-context");
const react_modal_1 = __importDefault(require("react-modal"));
const UserCreateEvent_1 = __importDefault(require("@pages/Calendar/UserCreateEvent"));
const UserEditEvent_1 = __importDefault(require("@pages/Calendar/UserEditEvent"));
const UserTrainEvent_1 = __importDefault(require("@pages/Calendar/UserTrainEvent"));
const UserAddFollowUp_1 = __importDefault(require("@pages/Calendar/UserAddFollowUp"));
const UserEventTimePreferences_1 = __importDefault(require("@pages/Calendar/UserEventTimePreferences"));
const TextField_1 = __importDefault(require("@components/TextField"));
const UserEditCalendarHelper_1 = require("../../lib/Calendar/UserEditCalendarHelper");
const md_1 = require("react-icons/md");
const io_1 = require("react-icons/io");
const gi_1 = require("react-icons/gi");
const bs_1 = require("react-icons/bs");
// MdOutlineAccessTime
// const dark = Appearance.getColorScheme() === 'dark'
// BsCalendarPlus
// HiOutlineClock
const styles = {
    container: {
        ...react_native_1.StyleSheet.absoluteFillObject,
        justifyContent: 'flex-end',
    },
};
const styles2 = {
    centeredView: {
        justifyContent: "center",
        alignItems: "center",
        marginTop: 22
    },
    modalView: {
        margin: 20,
        backgroundColor: "white",
        borderRadius: 20,
        padding: 35,
        alignItems: "center",
        shadowColor: "#000",
        shadowOffset: {
            width: 0,
            height: 2
        },
        shadowOpacity: 0.25,
        shadowRadius: 4,
        elevation: 5
    },
};
const customModalStyles = {
    content: {
        top: '50%',
        left: '50%',
        right: 'auto',
        bottom: 'auto',
        marginRight: '-50%',
        transform: 'translate(-50%, -50%)',
        zIndex: 0,
    },
    overlay: {
        zIndex: 9999,
    }
};
const customModalStyles2 = {
    overlay: {
        zIndex: 9999,
    }
};
const localizer = (0, react_big_calendar_1.dayjsLocalizer)(date_utils_1.dayjs);
const DnDCalendar = (0, dragAndDrop_1.default)(react_big_calendar_1.Calendar);
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../config/backendConfig");
const session_2 = __importDefault(require("supertokens-node/recipe/session"));
const OnBoardHelper_1 = require("@lib/OnBoard/OnBoardHelper");
// GraphQL Mutations for Agent Actions
const ATTEND_LIVE_MEETING_MUTATION = (0, client_1.gql) `
  mutation AttendLiveMeeting($platform: String!, $meetingIdentifier: String!, $notionNoteTitle: String!, $notionSource: String!, $linkedEventId: String) {
    attendLiveMeeting(platform: $platform, meeting_id: $meetingIdentifier, notion_note_title: $notionNoteTitle, notion_source: $notionSource, linked_event_id: $linkedEventId) {
      status
      note_id
      error_message
    }
  }
`;
const PROCESS_MEETING_ARTIFACTS_MUTATION = (0, client_1.gql) `
  mutation ProcessMeetingArtifacts($platform: String!, $meetingIdentifier: String!, $artifactType: String!, $notionNoteTitle: String!, $notionSource: String!, $linkedEventId: String) {
    processMeetingArtifacts(platform: $platform, meeting_id: $meetingIdentifier, artifact_type: $artifactType, notion_note_title: $notionNoteTitle, notion_source: $notionSource, linked_event_id: $linkedEventId) {
      status
      note_id
      error_message
    }
  }
`;
const STOP_AGENT_FOR_MEETING_MUTATION = (0, client_1.gql) `
  mutation StopAgentForMeeting($meetingIdentifier: String!) {
    stopAgentForMeeting(meeting_id: $meetingIdentifier) {
      status
      error_message
    }
  }
`;
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_2.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_2.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_2.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function UserViewCalendarWeb() {
    const [calendarEvents, setCalendarEvents] = (0, react_1.useState)([]);
    const [isDelete, setIsDelete] = (0, react_1.useState)(false);
    const [toDeleteId, setToDeleteId] = (0, react_1.useState)();
    const [isEventTags, setIsEventTags] = (0, react_1.useState)(false);
    const [toTagId, setToTagId] = (0, react_1.useState)();
    const [isRateEvent, setIsRateEvent] = (0, react_1.useState)(false);
    const [toRateId, setToRateId] = (0, react_1.useState)();
    const [isPrepAndReview, setIsPrepAndRev] = (0, react_1.useState)(false);
    const [toPrepAndRevEvent, setToPrepAndReviewEvent] = (0, react_1.useState)();
    const [isPriority, setIsPriority] = (0, react_1.useState)(false);
    const [toPriorityId, setToPriorityId] = (0, react_1.useState)();
    const [oldPriority, setOldPriority] = (0, react_1.useState)(1);
    const [isLoading, setIsLoading] = (0, react_1.useState)(false);
    const [startScheduleDate, setStartScheduleDate] = (0, react_1.useState)(new Date());
    const [endScheduleDate, setEndScheduleDate] = (0, react_1.useState)((0, date_utils_1.dayjs)().add(7, 'd').toDate());
    const [isScheduleAssist, setIsScheduleAssist] = (0, react_1.useState)(false);
    const [isFeaturesApply, setIsFeaturesApply] = (0, react_1.useState)(false);
    const [isStartDatePicker, setIsStartDatePicker] = (0, react_1.useState)(false);
    const [isEndDatePicker, setIsEndDatePicker] = (0, react_1.useState)(false);
    const [isDialOpen, setIsDialOpen] = (0, react_1.useState)(false);
    const [selectedSlot, setSelectedSlot] = (0, react_1.useState)();
    const [isCreateEvent, setIsCreateEvent] = (0, react_1.useState)(false);
    const [selectedEditEventId, setSelectedEditEventId] = (0, react_1.useState)('');
    const [isEditEvent, setIsEditEvent] = (0, react_1.useState)(false);
    const [selectedTrainEventId, setSelectedTrainEventId] = (0, react_1.useState)('');
    const [isTrainEvent, setIsTrainEvent] = (0, react_1.useState)(false);
    const [selectedAddFollowUpId, setSelectedAddFollowUpId] = (0, react_1.useState)('');
    const [isAddFollowUp, setIsAddFollowUp] = (0, react_1.useState)(false);
    const [selectedEventIdForTimePreferences, setSelectedEventIdForTimePreferences] = (0, react_1.useState)('');
    const [isAddTimePreferences, setIsAddTimePreferences] = (0, react_1.useState)(false);
    const [isMenu, setIsMenu] = (0, react_1.useState)(false);
    const [eventOfMenu, setEventOfMenu] = (0, react_1.useState)();
    const [title, setTitle] = (0, react_1.useState)();
    const [notes, setNotes] = (0, react_1.useState)();
    const [allDay, setAllDay] = (0, react_1.useState)(false);
    const [isRecurring, setIsRecurring] = (0, react_1.useState)(false);
    const [recurringEndDate, setRecurringEndDate] = (0, react_1.useState)(new Date());
    const [frequency, setFrequency] = (0, react_1.useState)('daily');
    // State for Agent Meeting Attendance
    const [isAgentAttendingMeeting, setIsAgentAttendingMeeting] = (0, react_1.useState)(false);
    const [agentMeetingStatus, setAgentMeetingStatus] = (0, react_1.useState)('');
    const [selectedMeetingForAgentId, setSelectedMeetingForAgentId] = (0, react_1.useState)(null);
    const [interval, setInterval] = (0, react_1.useState)('1');
    const [startDate, setStartDate] = (0, react_1.useState)(new Date());
    const [endDate, setEndDate] = (0, react_1.useState)(new Date());
    const [isEventEditSuccess, setIsEventEditSuccess] = (0, react_1.useState)(false);
    const router = (0, router_1.useRouter)();
    const { sub, client } = (0, user_context_1.useAppContext)();
    const userId = sub;
    const toast = (0, react_2.useToast)();
    const getMeetingPlatformAndIdentifier = (event) => {
        if (!event)
            return null;
        // Check Google Meet hangoutLink first
        if (event.hangoutLink) {
            return { platform: 'google', identifier: event.hangoutLink };
        }
        // Check location for Zoom or Teams links
        if (event.location) {
            const location = event.location.toLowerCase();
            // Basic Zoom ID parsing (e.g., zoom.us/j/1234567890)
            const zoomMatch = location.match(/zoom.us\/j\/(\d+)/);
            if (zoomMatch && zoomMatch[1]) {
                return { platform: 'zoom', identifier: zoomMatch[1] };
            }
            // Basic Teams URL parsing
            if (location.includes('teams.microsoft.com/l/meetup-join/')) {
                return { platform: 'teams', identifier: event.location }; // Return the full URL as identifier
            }
        }
        // Check description for Zoom or Teams links if not found in location
        if (event.notes) { // Assuming description is in 'notes' field based on UserCreateMeetingAssist
            const description = event.notes.toLowerCase();
            const zoomMatchDesc = description.match(/zoom.us\/j\/(\d+)/);
            if (zoomMatchDesc && zoomMatchDesc[1]) {
                return { platform: 'zoom', identifier: zoomMatchDesc[1] };
            }
            if (description.includes('teams.microsoft.com/l/meetup-join/')) {
                // Extract the full Teams URL from description if possible, might need more robust regex
                const teamsUrlMatch = event.notes.match(/(https?:\/\/teams\.microsoft\.com\/l\/meetup-join\/[^ \n\r\t<]+)/);
                if (teamsUrlMatch && teamsUrlMatch[1]) {
                    return { platform: 'teams', identifier: teamsUrlMatch[1] };
                }
            }
            // Google Meet links in description (less common if hangoutLink is primary)
            const googleMeetMatchDesc = event.notes.match(/(https?:\/\/meet\.google\.com\/[a-z\-]+)/);
            if (googleMeetMatchDesc && googleMeetMatchDesc[1]) {
                return { platform: 'google', identifier: googleMeetMatchDesc[1] };
            }
        }
        return null;
    };
    const { defaultDate } = (0, react_1.useMemo)(() => ({
        defaultDate: new Date()
    }), []);
    const handleAttendWithAgent = async (event) => {
        if (!event)
            return;
        const meetingInfo = getMeetingPlatformAndIdentifier(event);
        if (!meetingInfo) {
            toast({ title: "Not a recognized online meeting", description: "No valid Google Meet, Zoom, or Teams link found in the event details.", status: "error", duration: 5000, isClosable: true });
            return;
        }
        setSelectedMeetingForAgentId(event.id);
        setIsAgentAttendingMeeting(true);
        setAgentMeetingStatus(`Agent joining ${meetingInfo.platform} meeting...`);
        try {
            const { data, errors } = await client.mutate({
                mutation: ATTEND_LIVE_MEETING_MUTATION,
                variables: {
                    platform: meetingInfo.platform,
                    meetingIdentifier: meetingInfo.identifier,
                    notionNoteTitle: event.title || `Meeting Notes for ${event.id}`,
                    notionSource: `Live from ${meetingInfo.platform} meeting - ${event.title || event.id}`,
                    linkedEventId: event.id,
                },
            });
            if (errors && errors.length > 0) {
                throw new Error(errors.map(e => e.message).join(', '));
            }
            if (data?.attendLiveMeeting?.status === 'success' || data?.attendLiveMeeting?.status?.startsWith('Connected')) {
                setAgentMeetingStatus(`Agent connected: ${data.attendLiveMeeting.status}. Note ID: ${data.attendLiveMeeting.note_id || 'N/A'}`);
                toast({ title: "Agent Action", description: `Agent connected: ${data.attendLiveMeeting.status}`, status: "success", duration: 5000, isClosable: true });
            }
            else {
                const errorMessage = data?.attendLiveMeeting?.error_message || "Unknown error from agent.";
                setAgentMeetingStatus(`Agent connection failed: ${errorMessage}`);
                toast({ title: "Agent Action Failed", description: errorMessage, status: "error", duration: 5000, isClosable: true });
                // setIsAgentAttendingMeeting(false); // Optionally reset if connection failed outright
                // setSelectedMeetingForAgentId(null);
            }
        }
        catch (error) {
            console.error("Error calling AttendLiveMeeting mutation:", error);
            setAgentMeetingStatus(`Error: ${error.message}`);
            toast({ title: "Error Attending Meeting", description: error.message, status: "error", duration: 5000, isClosable: true });
            // Reset state on error to allow retry
            // setIsAgentAttendingMeeting(false); // Keep it true to show status and allow stop? Or false to allow retry?
            // setSelectedMeetingForAgentId(null); // For now, keep meeting selected to show error status
        }
    };
    const handleStopAgent = async (event) => {
        if (!event)
            return;
        const meetingInfo = getMeetingPlatformAndIdentifier(event);
        // meetingIdentifier might be needed if the stop action requires it.
        // For now, the mutation only takes meeting_id which is event.id
        // const meetingIdentifier = meetingInfo?.identifier;
        setAgentMeetingStatus('Stopping agent...');
        try {
            // Conceptual: Call STOP_AGENT_FOR_MEETING_MUTATION
            // For this subtask, we simulate the stop action as Hasura action might not exist yet.
            console.log(`Simulating call to STOP_AGENT_FOR_MEETING_MUTATION for event ID: ${event.id}`);
            // const { data } = await client.mutate({
            //     mutation: STOP_AGENT_FOR_MEETING_MUTATION,
            //     variables: { meetingIdentifier: event.id }, // Assuming meetingIdentifier is the event.id for stopping purposes
            // });
            // if (data?.stopAgentForMeeting?.status === 'success') {
            //   toast({ title: "Agent stopped successfully.", status: "info", duration: 3000, isClosable: true });
            // } else {
            //   throw new Error(data?.stopAgentForMeeting?.error_message || "Failed to stop agent via backend.");
            // }
            // Simulate immediate success for frontend state reset
            setIsAgentAttendingMeeting(false);
            setAgentMeetingStatus('Agent stopped.');
            setSelectedMeetingForAgentId(null);
            toast({ title: "Agent stopped (simulated).", status: "info", duration: 3000, isClosable: true });
        }
        catch (error) {
            console.error("Error calling StopAgentForMeeting mutation (simulated):", error);
            setAgentMeetingStatus(`Error stopping agent: ${error.message}`);
            toast({ title: "Error Stopping Agent", description: error.message, status: "error", duration: 5000, isClosable: true });
            // Decide if we should reset all agent states even if stop fails, or leave them for retry.
            // For now, we reset to allow user to try "Attend" again if stop failed.
            setIsAgentAttendingMeeting(false); // Attempt to reset to a clean state
            setSelectedMeetingForAgentId(null);
        }
    };
    // renew push notifictions
    (0, react_1.useEffect)(() => {
        if (userId) {
            (async () => (0, googleCalendarHelper_1.checkIfCalendarWebhookExpired)(client, userId))();
        }
    }, [client, userId]);
    // check onboarding
    (0, react_1.useEffect)(() => {
        (async () => {
            if (!sub) {
                return;
            }
            const user_preferenceDoc = await (0, OnBoardHelper_1.getUserPreference)(client, sub);
            console.log(user_preferenceDoc?.onBoarded, ' user_preferenceDoc?.onBoarded');
            if (!user_preferenceDoc?.onBoarded) {
                console.log(' no user preference created');
                return router.push({ pathname: '/OnBoard/UserOnBoard' });
            }
        })();
    }, [client, router, sub]);
    // get current events
    (0, react_1.useEffect)(() => {
        if (!userId) {
            return;
        }
        (async () => (0, UserCreateCalendarHelper_1.setCurrentEventsForCalendarWeb)(userId, client, setCalendarEvents))();
    }, [client, userId]);
    // update event subscription
    (0, react_1.useEffect)(() => {
        if (!client) {
            return;
        }
        if (!userId) {
            return;
        }
        const subscription = client.subscribe({
            query: subscribeEventUpdated_1.default,
            variables: {
                userId,
                currentDate: (0, date_utils_1.dayjs)().format(),
            }
        })
            .subscribe({
            next: async (event) => {
                console.log(event, ' event inside subscribeEventUpdated');
                console.log(event?.data?.Event?.[0], ' event.data.Event[0]');
                const newEvent = event?.data?.Event?.[0];
                console.log(newEvent, ' newEvent inside updateEventSubscription');
                if (!newEvent?.id) {
                    return;
                }
                const newEvents = lodash_1.default.cloneDeep(calendarEvents);
                try {
                    const tags = (await client.query({
                        query: listCategoriesForEventId_1.default,
                        variables: {
                            eventId: newEvent?.id,
                        },
                    }))?.data?.Category?.map((c) => ({
                        id: c.id,
                        name: c.name,
                        color: c.color,
                    }));
                    console.log(tags, ' tags inside subscribeEventUpdated');
                    console.log(calendarEvents?.[0]?.id, ' first Event inside calendarEvents');
                    const index = calendarEvents.findIndex((e) => (e.id === newEvent?.id));
                    if (index > -1) {
                        newEvents[index] = {
                            ...newEvent,
                            id: newEvent?.id,
                            start: (0, date_utils_1.dayjs)(newEvent?.startDate?.slice(0, 19)).tz(newEvent?.timezone, true).toDate(),
                            end: (0, date_utils_1.dayjs)(newEvent?.endDate?.slice(0, 19)).tz(newEvent?.timezone, true).toDate(),
                            title: newEvent?.title || newEvent?.summary,
                            eventId: newEvent?.eventId,
                            calendarId: newEvent?.calendarId,
                            notes: newEvent?.notes,
                            color: tags?.[0]?.color || newEvent?.backgroundColor,
                            tags,
                            unlink: newEvent?.unlink,
                            priority: newEvent?.priority,
                            modifiable: newEvent?.modifiable,
                        };
                        setCalendarEvents(newEvents);
                    }
                }
                catch (e) {
                    console.log(e, ' unable to get tags inside subscribeEventUpdated');
                }
            }
        });
        return () => subscription.unsubscribe();
    }, [client, calendarEvents, userId]);
    // insert event subscription
    (0, react_1.useEffect)(() => {
        if (!client) {
            return;
        }
        if (!userId) {
            return;
        }
        const subscription = client.subscribe({
            query: subscribeEventAdded_1.default,
            variables: {
                userId,
                currentDate: (0, date_utils_1.dayjs)().format(),
            }
        })
            .subscribe({
            next: async (event) => {
                console.log(event, ' event 3 inside subscribeEventAdded');
                console.log(event?.data?.Event?.[0], ' event.data.Event[0] 3');
                const newEvent = event?.data?.Event?.[0];
                if (!newEvent?.id) {
                    return;
                }
                try {
                    await (0, UserCreateCalendarHelper_1.setCurrentEventsForCalendarWeb)(userId, client, setCalendarEvents);
                }
                catch (e) {
                    console.log(e, ' unable to get event lists inside subscribeEventAdded ');
                }
            }
        });
        return () => subscription.unsubscribe();
    }, [client, userId]);
    // insert category Event subscription
    (0, react_1.useEffect)(() => {
        if (!userId) {
            return;
        }
        const subscription = client.subscribe({
            query: subscribeEventAdded_1.default,
            variables: {
                userId,
                currentDate: (0, date_utils_1.dayjs)().format(),
            }
        })
            .subscribe({
            next: async (event) => {
                try {
                    console.log(event?.data?.Category_Event?.[0], ' event.data.Category_Event[0] 5');
                    const newCategoryEvent = event?.data?.Category_Event?.[0];
                    if (!newCategoryEvent?.id) {
                        return;
                    }
                    const newTags = (await client.query({
                        query: listCategoriesForEventId_1.default,
                        variables: {
                            eventId: newCategoryEvent.eventId,
                        },
                    }))?.data?.Category?.map((c) => ({
                        id: c.id,
                        name: c.name,
                        color: c.color,
                    }));
                    const index = lodash_1.default.findIndex(calendarEvents, e => e.id === newCategoryEvent.eventId);
                    if (index >= 0) {
                        const newEvents = lodash_1.default.cloneDeep(calendarEvents);
                        newEvents[index] = {
                            ...calendarEvents[index],
                            tags: newTags,
                            color: newTags?.[0]?.color || calendarEvents[index].color,
                        };
                        setCalendarEvents(newEvents);
                    }
                }
                catch (e) {
                    console.log(e);
                }
            }
        });
        return () => subscription.unsubscribe();
    }, [client, calendarEvents, userId]);
    const changeLink = async (event) => {
        try {
            const eventId = event?.id;
            const existingEvent = (await client.query({
                query: getEventById_1.default,
                variables: {
                    id: eventId,
                },
            })).data?.Event_by_pk;
            if (existingEvent) {
                await client.mutate({
                    mutation: updateEventForUnlink_1.default,
                    variables: {
                        id: existingEvent.id,
                        unlink: !existingEvent.unlink,
                    },
                });
            }
        }
        catch (e) {
            console.log(e, 'error for changeLink');
        }
    };
    const submitForPlan = async (event) => {
        try {
            const existingEvent = (await client.query({
                query: getEventById_1.default,
                variables: {
                    id: event?.id,
                },
            })).data?.Event_by_pk;
            if (existingEvent) {
                const filteredExistingEvent = lodash_1.default.omit(existingEvent, ['__typename']);
                const token = await session_1.default.getAccessToken();
                const url = constants_1.eventToQueueAuthUrl;
                const config = {
                    headers: {
                        Authorization: `Bearer ${token}`,
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                    },
                };
                // add method
                const eventWithMethod = { ...filteredExistingEvent, method: 'update' };
                const results = await axios_1.default.post(url, eventWithMethod, config);
                if (results.data.message) {
                    toast({
                        status: 'success',
                        title: 'Event added to queue',
                        description: 'Event added to queue',
                        duration: 9000,
                        isClosable: true,
                    });
                }
            }
        }
        catch (e) {
            console.log(e, 'error for changeLink');
        }
    };
    const changedModifiable = async (event) => {
        try {
            const existingEvent = (await client.query({
                query: getEventById_1.default,
                variables: {
                    id: event?.id,
                },
            })).data?.Event_by_pk;
            console.log(existingEvent, ' existingEvent inside changedModifiable');
            if (existingEvent) {
                const res = await client.mutate({
                    mutation: updateEventForModifiable_1.default,
                    variables: {
                        id: existingEvent.id,
                        modifiable: !existingEvent.modifiable,
                    },
                    fetchPolicy: 'no-cache',
                    update(cache, { data }) {
                        if (data?.update_Event_by_pk?.id) {
                            console.log('update_Event_by_pk?.id', data);
                        }
                        cache.modify({
                            fields: {
                                Event(existingEvents = []) {
                                    const newEventRef = cache.writeFragment({
                                        data: data?.update_Event_by_pk,
                                        fragment: (0, client_1.gql) `
                            fragment NewEvent on Event {
                            id
                            startDate
                            endDate
                            allDay
                            recurrence
                            recurrenceRule
                            location
                            notes
                            attachments
                            links
                            timezone
                            taskId
                            taskType
                            priority
                            followUpEventId
                            isFollowUp
                            isPreEvent
                            isPostEvent
                            preEventId
                            postEventId
                            modifiable
                            forEventId
                            conferenceId
                            maxAttendees
                            attendeesOmitted
                            sendUpdates
                            anyoneCanAddSelf
                            guestsCanInviteOthers
                            guestsCanSeeOtherGuests
                            originalStartDate
                            originalTimezone
                            originalAllDay
                            status
                            summary
                            title
                            transparency
                            visibility
                            recurringEventId
                            iCalUID
                            htmlLink
                            colorId
                            creator
                            organizer
                            endTimeUnspecified
                            extendedProperties
                            hangoutLink
                            guestsCanModify
                            locked
                            source
                            eventType
                            privateCopy
                            backgroundColor
                            foregroundColor
                            useDefaultAlarms
                            deleted
                            createdDate
                            updatedAt
                            userId
                            calendarId
                            positiveImpactScore
                            negativeImpactScore
                            positiveImpactDayOfWeek
                            positiveImpactTime
                            negativeImpactDayOfWeek
                            negativeImpactTime
                            preferredDayOfWeek
                            preferredTime
                            isExternalMeeting
                            isExternalMeetingModifiable
                            isMeetingModifiable
                            isMeeting
                            dailyTaskList
                            weeklyTaskList
                            isBreak
                            preferredStartTimeRange
                            preferredEndTimeRange
                            copyAvailability
                            copyTimeBlocking
                            copyTimePreference
                            copyReminders
                            copyPriorityLevel
                            copyModifiable
                            copyCategories
                            copyIsBreak
                            userModifiedAvailability
                            userModifiedTimeBlocking
                            userModifiedTimePreference
                            userModifiedReminders
                            userModifiedPriorityLevel
                            userModifiedCategories
                            userModifiedModifiable
                            userModifiedIsBreak
                            hardDeadline
                            softDeadline
                            copyIsMeeting
                            copyIsExternalMeeting
                            userModifiedIsMeeting
                            userModifiedIsExternalMeeting
                            duration
                            copyDuration
                            userModifiedDuration
                            method
                            unlink
                            copyColor
                            userModifiedColor
                            byWeekDay
                            localSynced
                            timeBlocking
                            meetingId
                            eventId
                            }
                        `
                                    });
                                    const filteredEvents = existingEvents?.filter((e) => (e?.id !== data?.update_Event_by_pk?.id)) || [];
                                    console.log(filteredEvents, ' filteredEvents inside updateEventForModifiable');
                                    if (filteredEvents?.length > 0) {
                                        return filteredEvents.concat([newEventRef]);
                                    }
                                    return [newEventRef];
                                }
                            }
                        });
                    }
                });
                console.log(res, ' res inside changedModifiable');
            }
        }
        catch (e) {
            console.log(e, 'error for changeLink');
        }
    };
    const onSelectSlot = (0, react_1.useCallback)((slotInfo) => {
        setSelectedSlot(slotInfo);
        setIsCreateEvent(true);
    }, []);
    const hideIsCreateEvent = () => {
        setSelectedSlot(undefined);
        setIsCreateEvent(false);
    };
    const editEvent = (event) => {
        setSelectedEditEventId(event?.id);
        setIsEditEvent(true);
    };
    const hideIsEditEvent = () => {
        setSelectedEditEventId('');
        setIsEditEvent(false);
    };
    const trainEvent = (event) => {
        setSelectedTrainEventId(event?.id);
        setIsTrainEvent(true);
    };
    const hideIsTrainEvent = () => {
        setSelectedTrainEventId('');
        setIsTrainEvent(false);
    };
    const addFollowUp = (event) => {
        setSelectedAddFollowUpId(event?.id);
        setIsAddFollowUp(true);
    };
    const hideIsAddFollowUp = () => {
        setSelectedAddFollowUpId('');
        setIsAddFollowUp(false);
    };
    const addTimePreferences = (event) => {
        setSelectedEventIdForTimePreferences(event?.id);
        setIsAddTimePreferences(true);
    };
    const hideIsAddTimePreferences = () => {
        setSelectedEventIdForTimePreferences('');
        setIsAddTimePreferences(false);
    };
    const navigateToMeetingAssist = () => {
        router.push({ pathname: '/Assist/UserCreateMeetingAssist' });
    };
    const featuresApplyToEvents = async () => {
        try {
            // validate start date && end date
            if (startScheduleDate && endScheduleDate) {
                if (startScheduleDate > endScheduleDate) {
                    toast({
                        status: 'error',
                        title: 'Invalid start date',
                        description: 'Start date must be before end date',
                        duration: 9000,
                        isClosable: true,
                    });
                    return;
                }
            }
            const duration = (0, date_utils_1.dayjs)(endScheduleDate).diff((0, date_utils_1.dayjs)(startScheduleDate), 'm');
            if ((duration < 120)) {
                toast({
                    status: 'error',
                    title: 'Invalid duration',
                    description: 'Duration must be at least 120 minutes',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            const durationDays = (0, date_utils_1.dayjs)(endScheduleDate).diff((0, date_utils_1.dayjs)(startScheduleDate), 'd');
            if ((durationDays > 7)) {
                toast({
                    status: 'error',
                    title: 'Invalid duration',
                    description: 'Duration must be less than a week',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            const token = await session_1.default.getAccessToken();
            const url = constants_1.featuresApplyToEventsAuthUrl;
            const config = {
                headers: {
                    Authorization: `Bearer ${token}`,
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                },
            };
            const results = await axios_1.default.post(url, { userId, windowStartDate: (0, date_utils_1.dayjs)(startScheduleDate).format(), windowEndDate: (0, date_utils_1.dayjs)(endScheduleDate).format(), timezone: date_utils_1.dayjs.tz.guess() }, config);
            if (results.data.message) {
                toast({
                    status: 'success',
                    title: 'Applying Features to Events',
                    description: 'Applying Features to Events. Check calendar in a bit.',
                    duration: 9000,
                    isClosable: true,
                });
            }
        }
        catch (e) {
            console.log(e, ' unable to features apply to events');
        }
        hideFeaturesApply();
    };
    const scheduleAssist = async () => {
        try {
            // validate start date && end date
            if (startScheduleDate && endScheduleDate) {
                if (startScheduleDate > endScheduleDate) {
                    toast({
                        status: 'error',
                        title: 'Invalid start date',
                        description: 'Start date must be before end date',
                        duration: 9000,
                        isClosable: true,
                    });
                    return;
                }
            }
            const duration = (0, date_utils_1.dayjs)(endScheduleDate).diff((0, date_utils_1.dayjs)(startScheduleDate), 'm');
            if ((duration < 120)) {
                toast({
                    status: 'error',
                    title: 'Invalid duration',
                    description: 'Duration must be at least 120 minutes',
                });
                return;
            }
            const durationDays = (0, date_utils_1.dayjs)(endScheduleDate).diff((0, date_utils_1.dayjs)(startScheduleDate), 'd');
            if ((durationDays > 7)) {
                toast({
                    status: 'error',
                    title: 'Invalid duration',
                    description: 'Duration must be less than a week',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            const token = await session_1.default.getAccessToken();
            const url = constants_1.calendarToQueueAuthUrl;
            const config = {
                headers: {
                    Authorization: `Bearer ${token}`,
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                },
            };
            const results = await axios_1.default.post(url, { userId, windowStartDate: (0, date_utils_1.dayjs)(startScheduleDate).format(), windowEndDate: (0, date_utils_1.dayjs)(endScheduleDate).format(), timezone: date_utils_1.dayjs.tz.guess() }, config);
            if (results.data.message) {
                toast({
                    status: 'success',
                    description: 'Schedule assist started',
                    title: 'Planning week. Check calendar in a bit.',
                    duration: 9000,
                    isClosable: true,
                });
            }
        }
        catch (e) {
            console.log(e, ' unable to schedule assist');
        }
        hideScheduleAssist();
    };
    const deleteEvent = async (id) => {
        try {
            hideDelete();
            const newEvents = lodash_1.default.filter(calendarEvents, e => e.id !== id);
            const newEventsByDate = lodash_1.default.groupBy(newEvents, e => (0, date_utils_1.dayjs)(e?.start).format('YYYY-MM-DD'));
            const oldEvent = calendarEvents.find(e => (e?.id === id));
            setCalendarEvents(newEvents);
            if (oldEvent?.id) {
                const oldEventOriginal = await (0, calendarDbHelper_1.getEventWithId)(client, oldEvent?.id);
                const forEvent = calendarEvents.find(e => (e?.id === oldEventOriginal?.forEventId));
                if (forEvent?.id) {
                    const forEventOriginal = await (0, calendarDbHelper_1.getEventWithId)(client, forEvent?.id);
                    // preEvent
                    if (forEventOriginal?.preEventId === id) {
                        // remove preEventId
                        await (0, UserCreateCalendarHelper_2.atomicUpsertEventInDb)(client, forEventOriginal?.id, forEventOriginal?.eventId, forEventOriginal?.userId, forEventOriginal?.startDate, forEventOriginal?.endDate, forEventOriginal?.createdDate, forEventOriginal?.deleted, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, (0, date_utils_1.dayjs)().format(), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, null, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, { ...forEventOriginal?.timeBlocking, beforeEvent: 0 });
                    }
                    // postEvent
                    if (forEventOriginal?.postEventId === id) {
                        // remove postEventId
                        await (0, UserCreateCalendarHelper_2.atomicUpsertEventInDb)(client, forEventOriginal?.id, forEventOriginal?.eventId, forEventOriginal?.userId, forEventOriginal?.startDate, forEventOriginal?.endDate, forEventOriginal?.createdDate, forEventOriginal?.deleted, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, (0, date_utils_1.dayjs)().format(), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, null, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, { ...forEventOriginal?.timeBlocking, afterEvent: 0 });
                    }
                }
            }
            // delete conference,  attendees and reminders
            await (0, AttendeeHelper_1.deleteAttendeesForEvent)(client, id);
            const originalEvent = await (0, calendarDbHelper_1.getEventWithId)(client, id);
            console.log(originalEvent, ' originalEvent');
            console.log(originalEvent?.meetingId, ' originalEvent?.meetingId');
            if (originalEvent?.conferenceId) {
                await (0, ConferenceHelper_1.deleteConferencesWithIds)(client, [originalEvent?.conferenceId]);
            }
            await (0, ReminderHelper_1.removeRemindersForEvent)(client, id);
            // remove search index after Delete
            // The deletion from the vector index (now LanceDB) is handled by the _event2VectorsWorker_
            // when the event is deleted from the primary database (via Kafka message).
            // So, no direct calls to a search/delete index URL are needed here anymore.
            // delete meeting assist given meeting id
            if (originalEvent?.meetingId) {
                const token = await session_1.default.getAccessToken(); // Keep token and config if needed for other calls below
                const config = {
                    headers: {
                        Authorization: `Bearer ${token}`,
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                    },
                };
                const meetingAssist = await (0, UserMeetingAssistHelper_1.getMeetingAssistGivenId)(client, originalEvent.meetingId);
                await (0, UserMeetingAssistHelper_1.deleteMeetingAssistGivenId)(client, originalEvent.meetingId);
                if (meetingAssist?.conferenceApp === 'zoom') {
                    const tokenCheck = await session_1.default.getAccessToken(); // Ensure token is still valid if time passed
                    if (!tokenCheck)
                        throw new Error("Session expired, please log in again.");
                    const res = await axios_1.default.post(constants_3.deleteZoomConferenceUrl, {
                        meetingId: originalEvent?.meetingId,
                        userId,
                    }, config); // config already defined if originalEvent.meetingId is true
                    console.log(res, ' successfully deleted zoom conference');
                }
            }
            await delEventInAppForTask(id, client, userId);
        }
        catch (e) {
            console.log(e, 'error for deleteEvent');
        }
    };
    const delEventInAppForTask = async (id, client, userId) => {
        try {
            const eventDoc = (await client.query({
                query: getEventById_1.default,
                variables: {
                    id: id,
                },
            })).data?.Event_by_pk;
            if (eventDoc?.id) {
                const calendarId = eventDoc?.calendarId;
                const calendarDoc = (await client.query({
                    query: getCalendarById_1.default,
                    variables: {
                        id: calendarId,
                    },
                })).data?.Calendar_by_pk;
                if (calendarDoc?.id) {
                    const resource = calendarDoc?.resource;
                    if (resource === constants_2.googleResourceName) {
                        await (0, googleCalendarHelper_1.deleteGoogleEvent)(client, userId, calendarId, id.split('#')[0]);
                        await client.mutate({
                            mutation: deleteEventById_1.default,
                            variables: {
                                id: id,
                            },
                            update(cache, { data }) {
                                const deletedEvent = data?.delete_Event_by_pk;
                                const normalizedId = cache.identify({ id: deletedEvent.id, __typename: deletedEvent.__typename });
                                cache.evict({ id: normalizedId });
                                cache.gc();
                            },
                            // refetchQueries: [
                            //   listAllEvents, // DocumentNode object parsed with gql
                            //   'listAllEvents' // Query name
                            // ],
                        });
                    }
                }
            }
        }
        catch (e) {
            console.log(e, ' unable to delete event in app');
        }
    };
    const hideDelete = () => {
        setToDeleteId('');
        setIsDelete(false);
    };
    const showDelete = () => {
        setIsDelete(true);
    };
    const enableDelete = (event) => {
        setToDeleteId(event?.id);
        // closeMenu(date, index)
        showDelete();
    };
    const hideTags = () => {
        setToTagId('');
        setIsEventTags(false);
    };
    const showTags = () => {
        setIsEventTags(true);
    };
    const enableTag = (event) => {
        setToTagId(event?.id);
        // closeMenu(date, index)
        showTags();
    };
    const hideRating = () => {
        setToRateId('');
        setIsRateEvent(false);
    };
    const showRating = () => {
        setIsRateEvent(true);
    };
    const enableRate = async (event) => {
        setToRateId(event?.id);
        // closeMenu(date, index)
        showRating();
    };
    const hidePrepAndReview = () => {
        setToPrepAndReviewEvent(null);
        setIsPrepAndRev(false);
    };
    const showPrepAndReview = () => {
        setIsPrepAndRev(true);
    };
    const enablePrepAndReview = async (event) => {
        try {
            // closeMenu(date, index)
            showPrepAndReview();
            const eventDoc = (await client.query({
                query: getEventById_1.default,
                variables: {
                    id: event?.id,
                },
            })).data?.Event_by_pk;
            setToPrepAndReviewEvent(eventDoc);
        }
        catch (e) {
            console.log(e, ' error in enablePrepAndReview');
        }
    };
    const hidePriority = () => {
        console.log('hid Priority called');
        setToPriorityId('');
        setIsPriority(false);
    };
    const showPriority = () => {
        setIsPriority(true);
    };
    const hideFeaturesApply = () => {
        setIsFeaturesApply(false);
    };
    const showFeaturesApply = () => {
        setStartScheduleDate(new Date());
        setIsFeaturesApply(true);
    };
    const hideScheduleAssist = () => {
        setIsScheduleAssist(false);
    };
    const showScheduleAssist = () => {
        setStartScheduleDate(new Date());
        setIsScheduleAssist(true);
    };
    const enablePriority = async (event) => {
        try {
            // closeMenu(date, index)
            setToPriorityId(event?.id);
            setOldPriority(event?.priority);
            showPriority();
        }
        catch (e) {
            console.log(e, ' error in enablePriority');
        }
    };
    // event moved from another location
    const onEventMove = (0, react_1.useCallback)(async (args) => {
        try {
            const { event, start, end, isAllDay: droppedOnAllDaySlot = false } = args;
            const newEvent = lodash_1.default.clone({ ...event, start: (0, date_utils_1.dayjs)(start).toDate(), end: (0, date_utils_1.dayjs)(end).toDate(), allDay: droppedOnAllDaySlot });
            const foundIndex = calendarEvents?.findIndex(e => (e?.id === event?.id));
            if (foundIndex > -1) {
                await (0, UserEditCalendarHelper_1.updateEvent)(newEvent?.id, (0, date_utils_1.dayjs)(start).format(), (0, date_utils_1.dayjs)(end).format(), userId, client, newEvent?.calendarId, undefined, undefined, droppedOnAllDaySlot, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, date_utils_1.dayjs.tz.guess(), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, date_utils_1.dayjs.tz.guess(), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, date_utils_1.dayjs.duration((0, date_utils_1.dayjs)(end).diff((0, date_utils_1.dayjs)(start))).asMinutes(), undefined, undefined, 'update', undefined, undefined);
                const firstPart = calendarEvents?.slice(0, foundIndex);
                const lastPart = calendarEvents?.slice(foundIndex + 1);
                const newCalendarEvents = firstPart?.concat([newEvent]).concat(lastPart);
                setCalendarEvents(newCalendarEvents);
            }
        }
        catch (e) {
            console.log(e, ' unable to event drop');
        }
    }, [calendarEvents, client, userId]);
    // event is resized
    const onEventResize = (0, react_1.useCallback)(async (args) => {
        try {
            const { event, start, end } = args;
            const newEvent = lodash_1.default.clone({ ...event, start: (0, date_utils_1.dayjs)(start).toDate(), end: (0, date_utils_1.dayjs)(end).toDate() });
            const foundIndex = calendarEvents?.findIndex(e => (e?.id === event?.id));
            if (foundIndex > -1) {
                await (0, UserEditCalendarHelper_1.updateEvent)(newEvent?.id, (0, date_utils_1.dayjs)(start).format(), (0, date_utils_1.dayjs)(end).format(), userId, client, newEvent?.calendarId, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, date_utils_1.dayjs.tz.guess(), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, date_utils_1.dayjs.tz.guess(), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, date_utils_1.dayjs.duration((0, date_utils_1.dayjs)(end).diff((0, date_utils_1.dayjs)(start))).asMinutes(), undefined, undefined, 'update', undefined, undefined);
                const firstPart = calendarEvents?.slice(0, foundIndex);
                const lastPart = calendarEvents?.slice(foundIndex + 1);
                const newCalendarEvents = firstPart?.concat([newEvent]).concat(lastPart);
                setCalendarEvents(newCalendarEvents);
            }
        }
        catch (e) {
            console.log(e, ' unable to event resize');
        }
    }, [calendarEvents, client, userId]);
    // clicked on existing event
    const onSelectEvent = (0, react_1.useCallback)(async (event) => {
        try {
            setEventOfMenu(event);
            setTitle(event?.title);
            setAllDay(event?.allDay);
            setIsRecurring(!!event?.recurringEndDate);
            setInterval(event?.interval);
            setFrequency(event?.frequency);
            setNotes(event?.notes);
            setStartDate((0, date_utils_1.dayjs)(event?.start).toDate());
            setEndDate((0, date_utils_1.dayjs)(event?.end).toDate());
            setIsMenu(true);
        }
        catch (e) {
            console.log(e, ' unable to process event inside onDoubleClickEvent');
        }
    }, []);
    const closeMenu = (0, react_1.useCallback)(() => {
        setIsMenu(false);
    }, []);
    const editEventChild = () => {
        closeMenu();
        editEvent(eventOfMenu);
    };
    const trainEventChild = () => {
        closeMenu();
        trainEvent(eventOfMenu);
    };
    const enableTagChild = () => {
        closeMenu();
        enableTag(eventOfMenu);
    };
    const enableRateChild = () => {
        closeMenu();
        enableRate(eventOfMenu);
    };
    const enablePrepAndReviewChild = () => {
        closeMenu();
        enablePrepAndReview(eventOfMenu);
    };
    const addFollowUpChild = () => {
        closeMenu();
        addFollowUp(eventOfMenu);
    };
    const enablePriorityChild = () => {
        closeMenu();
        enablePriority(eventOfMenu);
    };
    const submitForPlanChild = async () => {
        closeMenu();
        return submitForPlan(eventOfMenu);
    };
    const changedModifiableChild = async () => {
        closeMenu();
        await changedModifiable(eventOfMenu);
    };
    const changeLinkChild = async () => {
        closeMenu();
        return changeLink(eventOfMenu);
    };
    const enableDeleteChild = () => {
        closeMenu();
        enableDelete(eventOfMenu);
    };
    // addTimePreferences
    const addTimePreferencesChild = () => {
        closeMenu();
        addTimePreferences(eventOfMenu);
    };
    const updateEventForUser = async () => {
        try {
            // validate before update
            if (!userId || !client) {
                console.log('no userId or client inside updateEventForUser');
                return;
            }
            if (!eventOfMenu?.id) {
                console.log('no eventId inside updateEventForUser');
                return;
            }
            if (!eventOfMenu?.calendarId) {
                console.log('no calendarId inside updateEventForUser');
                return;
            }
            console.log(frequency, interval, ' frequency, interval inside updateEventForUser');
            await (0, UserEditCalendarHelper_1.updateEvent)(eventOfMenu?.id, (0, date_utils_1.dayjs)(startDate).format(), (0, date_utils_1.dayjs)(endDate).format(), userId, client, eventOfMenu?.calendarId, undefined, title, allDay, isRecurring ? (0, date_utils_1.dayjs)(recurringEndDate).format() : null, isRecurring ? frequency : null, isRecurring ? parseInt(interval, 10) : null, undefined, notes, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, date_utils_1.dayjs.tz.guess(), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, title, undefined, undefined, undefined, undefined, undefined, undefined, date_utils_1.dayjs.tz.guess(), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, date_utils_1.dayjs.duration((0, date_utils_1.dayjs)(endDate).diff((0, date_utils_1.dayjs)(startDate))).asMinutes(), undefined, undefined, 'update', undefined, undefined);
            toast({
                status: 'success',
                title: 'Event Edited',
                description: 'Event edited successfully',
                duration: 9000,
                isClosable: true,
            });
            setIsEventEditSuccess(true);
            setTimeout(() => setIsEventEditSuccess(false), 3000);
        }
        catch (e) {
            console.log(e, ' createEventForUser');
            toast({
                status: 'error',
                title: 'Event Editing failed',
                description: 'Unable to edit event. Please try again',
                duration: 9000,
                isClosable: true,
            });
        }
    };
    const eventPropGetter = (0, react_1.useCallback)((event) => {
        return {
            style: {
                border: 'none',
                WebkitBoxSizing: 'border-box',
                boxSizing: 'border-box',
                WebkitBoxShadow: 'none',
                boxShadow: 'none',
                margin: '0',
                padding: '2px 5px',
                backgroundColor: event?.color ?? '#0B9CE5',
                borderRadius: '5px',
                color: '#000',
                cursor: 'pointer',
                width: '100%',
                textAlign: 'left',
            }
        };
    }, []);
    const actions = [
        { icon: (0, jsx_runtime_1.jsx)(QueryStats_1.default, { color: "secondary" }), name: 'Search & Apply Features', method: showFeaturesApply },
        { icon: (0, jsx_runtime_1.jsx)(MeetingRoom_1.default, { color: "secondary" }), name: 'Meeting Assist', method: navigateToMeetingAssist },
        { icon: (0, jsx_runtime_1.jsx)(Schedule_1.default, { color: "secondary" }), name: 'Schedule Assist', method: showScheduleAssist }
    ];
    if (!calendarEvents?.[0]?.id) {
        return ((0, jsx_runtime_1.jsx)("div", { className: "flex w-full h-full justify-center items-center", children: (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, backgroundColor: "primaryCardBackground", justifyContent: "center", alignItems: "center", style: { width: '100%' }, minHeight: "80vh", children: (0, jsx_runtime_1.jsx)(react_native_1.ActivityIndicator, { size: "large", color: theme_1.palette.white }) }) }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(DnDCalendar, { localizer: localizer, events: calendarEvents, style: { height: 500 }, defaultDate: defaultDate, draggableAccessor: (event) => true, onEventDrop: onEventMove, onEventResize: onEventResize, selectable: true, onSelectEvent: onSelectEvent, eventPropGetter: eventPropGetter, onSelectSlot: onSelectSlot }), (0, jsx_runtime_1.jsx)(react_modal_1.default, { isOpen: isCreateEvent, onRequestClose: hideIsCreateEvent, style: customModalStyles2, contentLabel: "Create Event", children: (0, jsx_runtime_1.jsx)(UserCreateEvent_1.default, { start: selectedSlot?.start, end: selectedSlot?.end, closeCreateEvent: hideIsCreateEvent, client: client, sub: sub }) }), (0, jsx_runtime_1.jsx)(react_modal_1.default, { isOpen: isEditEvent, onRequestClose: hideIsEditEvent, style: customModalStyles2, contentLabel: "Edit Event", children: (0, jsx_runtime_1.jsx)(UserEditEvent_1.default, { id: selectedEditEventId, closeEditEvent: hideIsEditEvent, client: client, sub: sub }) }), (0, jsx_runtime_1.jsx)(react_modal_1.default, { isOpen: isTrainEvent, onRequestClose: hideIsTrainEvent, style: customModalStyles2, contentLabel: "Train Event", children: (0, jsx_runtime_1.jsx)(UserTrainEvent_1.default, { id: selectedTrainEventId, closeTrainEvent: hideIsTrainEvent, client: client, sub: sub }) }), (0, jsx_runtime_1.jsx)(react_modal_1.default, { isOpen: isAddFollowUp, onRequestClose: hideIsAddFollowUp, style: customModalStyles, contentLabel: "Add Follow Up Event", children: (0, jsx_runtime_1.jsx)(UserAddFollowUp_1.default, { id: selectedAddFollowUpId, closeAddFollowUp: hideIsAddFollowUp, client: client, sub: sub }) }), (0, jsx_runtime_1.jsx)(react_modal_1.default, { isOpen: isAddTimePreferences, onRequestClose: hideIsAddTimePreferences, style: customModalStyles2, contentLabel: "Add Time Preferences", children: (0, jsx_runtime_1.jsx)(UserEventTimePreferences_1.default, { id: selectedEventIdForTimePreferences, closeTimePreferences: hideIsAddTimePreferences, client: client, sub: sub }) }), (0, jsx_runtime_1.jsx)(react_modal_1.default, { isOpen: isDelete, onRequestClose: hideDelete, style: customModalStyles, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { p: { phone: 'm', tablet: 'l' }, variant: "subheaderNormal", children: "Delete this event?" }), (0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: () => deleteEvent(toDeleteId), children: "Delete" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)("button", { className: "btn btn-link no-underline hover:no-underline", onClick: hideDelete, children: "Cancel" }) })] })] }) }), (0, jsx_runtime_1.jsx)(react_modal_1.default, { isOpen: isEventTags, onRequestClose: hideTags, style: customModalStyles, children: (0, jsx_runtime_1.jsx)(UserEditCategoryEventModal_1.default, { eventId: toTagId, hideTags: hideTags, sub: userId, client: client }) }), (0, jsx_runtime_1.jsx)(react_modal_1.default, { isOpen: isRateEvent, onRequestClose: hideRating, style: customModalStyles, children: (0, jsx_runtime_1.jsx)(UserRateEvent_1.default, { eventId: toRateId, hideRating: hideRating, userId: userId, isRateEvent: isRateEvent, client: client }) }), (0, jsx_runtime_1.jsx)(react_modal_1.default, { isOpen: isPrepAndReview, onRequestClose: hidePrepAndReview, style: customModalStyles, children: (0, jsx_runtime_1.jsx)(UserPreAndPostForEventModal_1.default, { event: toPrepAndRevEvent, hidePrepAndReview: hidePrepAndReview, client: client }) }), (0, jsx_runtime_1.jsx)(react_modal_1.default, { isOpen: isPriority, onRequestClose: hidePriority, style: customModalStyles, children: (0, jsx_runtime_1.jsx)(UserEditEventPriorityModal_1.default, { eventId: toPriorityId, hidePriority: hidePriority, priority: oldPriority, client: client }) }), (0, jsx_runtime_1.jsxs)(react_modal_1.default, { isOpen: (isFeaturesApply), onRequestClose: hideFeaturesApply, style: customModalStyles, children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { p: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "center", width: "90%", height: "100%", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Start Date" }), (0, jsx_runtime_1.jsx)(react_3.Input, { placeholder: "Select Date and Time", size: "md", type: "datetime-local", onChange: (e) => {
                                    setStartScheduleDate((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").toDate());
                                    if ((0, date_utils_1.dayjs)(e?.target?.value).isAfter((0, date_utils_1.dayjs)(endScheduleDate))) {
                                        setEndScheduleDate((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").add(120, 'm').toDate());
                                    }
                                    const duration = (0, date_utils_1.dayjs)(endScheduleDate).diff((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm"), 'm');
                                    if (duration < 120) {
                                        setEndScheduleDate((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").add(120, 'm').toDate());
                                    }
                                    const durationDays = (0, date_utils_1.dayjs)(endScheduleDate).diff((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm"), 'd');
                                    if (durationDays > 7) {
                                        setEndScheduleDate((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").add(6, 'd').toDate());
                                    }
                                }, value: (0, date_utils_1.dayjs)(startScheduleDate).format("YYYY-MM-DDTHH:mm") })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { p: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "center", width: "90%", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "End Date" }), (0, jsx_runtime_1.jsx)(react_3.Input, { placeholder: "Select Date and Time", size: "md", type: "datetime-local", onChange: (e) => {
                                    setEndScheduleDate((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").toDate());
                                }, value: (0, date_utils_1.dayjs)(endScheduleDate).format("YYYY-MM-DDTHH:mm") })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 'm', tablet: 'l' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: featuresApplyToEvents, children: "Apply Features" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 'm', tablet: 'l' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)("button", { className: "btn btn-link no-underline hover:no-underline", onClick: hideFeaturesApply, children: "Close" }) })] }), (0, jsx_runtime_1.jsxs)(react_modal_1.default, { isOpen: isScheduleAssist, onRequestClose: hideScheduleAssist, style: customModalStyles, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, justifyContent: "center", alignItems: "center", width: "90%", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col items-start", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Start Date" }), (0, jsx_runtime_1.jsx)(react_3.Input, { placeholder: "Select Date and Time", size: "md", type: "datetime-local", onChange: (e) => {
                                        setStartScheduleDate((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").toDate());
                                        if ((0, date_utils_1.dayjs)(e?.target?.value).isAfter((0, date_utils_1.dayjs)(endScheduleDate))) {
                                            setEndScheduleDate((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").add(120, 'm').toDate());
                                        }
                                        const duration = (0, date_utils_1.dayjs)(endScheduleDate).diff((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm"), 'm');
                                        if (duration < 120) {
                                            setEndScheduleDate((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").add(120, 'm').toDate());
                                        }
                                        const durationDays = (0, date_utils_1.dayjs)(endScheduleDate).diff((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm"), 'd');
                                        if (durationDays > 7) {
                                            setEndScheduleDate((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").add(6, 'd').toDate());
                                        }
                                    }, value: (0, date_utils_1.dayjs)(startScheduleDate).format("YYYY-MM-DDTHH:mm") })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "center", width: "90%", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col items-start", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "End Date" }), (0, jsx_runtime_1.jsx)(react_3.Input, { placeholder: "Select Date and Time", size: "md", type: "datetime-local", onChange: (e) => {
                                        setEndScheduleDate((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").toDate());
                                    }, value: (0, date_utils_1.dayjs)(endScheduleDate).format("YYYY-MM-DDTHH:mm") })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 'm', tablet: 'l' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: scheduleAssist, children: "Schedule Assist" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 'm', tablet: 'l' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)("button", { className: "btn btn-link no-underline hover:no-underline", onClick: hideScheduleAssist, children: "Close" }) })] }), (0, jsx_runtime_1.jsx)(react_modal_1.default, { isOpen: isMenu, onRequestClose: closeMenu, style: customModalStyles2, contentLabel: "Menu", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col items-center md:m-6 m-3 h-full w-full", children: [isEventEditSuccess && ((0, jsx_runtime_1.jsx)("div", { className: "alert alert-success shadow-lg", children: (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", className: "stroke-current flex-shrink-0 h-6 w-6", fill: "none", viewBox: "0 0 24 24", children: (0, jsx_runtime_1.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: "2", d: "M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" }) }), (0, jsx_runtime_1.jsx)("span", { children: "Successfully edited event!" })] }) })), (0, jsx_runtime_1.jsxs)("div", { className: "md:flex-auto md:basis-1/4 md:w-1/2 w-full", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col flex-start items-start w-full", children: [(0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Title or Summary", onChange: (e) => setTitle(e?.target?.value), value: title || '' }), (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Notes", onChange: (e) => setNotes(e?.target?.value), value: notes || '', multiline: true, numberOfLines: 3 })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center w-full", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col items-start", children: [(0, jsx_runtime_1.jsx)("label", { className: "label", children: (0, jsx_runtime_1.jsx)("span", { className: "label-text", children: "Start" }) }), (0, jsx_runtime_1.jsx)(react_3.Input, { placeholder: "Select Date and Time", size: "md", type: "datetime-local", onChange: (e) => {
                                                        const durationMinutes = date_utils_1.dayjs.duration((0, date_utils_1.dayjs)(endDate).diff((0, date_utils_1.dayjs)(startDate))).asMinutes();
                                                        const newEndDate = (0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").add(durationMinutes, 'minutes').toDate();
                                                        setStartDate((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").toDate());
                                                        setEndDate(newEndDate);
                                                    }, value: (0, date_utils_1.dayjs)(startDate).format("YYYY-MM-DDTHH:mm") })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col items-start", children: [(0, jsx_runtime_1.jsx)("label", { className: "label", children: (0, jsx_runtime_1.jsx)("span", { className: "label-text", children: "End" }) }), (0, jsx_runtime_1.jsx)(react_3.Input, { placeholder: "Select Date and Time", size: "md", type: "datetime-local", onChange: (e) => {
                                                        setEndDate((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").toDate());
                                                    }, value: (0, date_utils_1.dayjs)(endDate).format("YYYY-MM-DDTHH:mm") })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center w-full", children: [(0, jsx_runtime_1.jsx)("div", {}), (0, jsx_runtime_1.jsx)("div", { className: "form-control w-52", children: (0, jsx_runtime_1.jsxs)("label", { className: "cursor-pointer label", children: [(0, jsx_runtime_1.jsx)("span", { className: "label-text", children: "All day" }), (0, jsx_runtime_1.jsx)("input", { type: "checkbox", className: "toggle toggle-primary", onChange: (e) => setAllDay(e?.target?.checked), checked: allDay })] }) })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center w-full", children: [(0, jsx_runtime_1.jsx)("div", {}), (0, jsx_runtime_1.jsx)("div", { className: "form-control w-52", children: (0, jsx_runtime_1.jsxs)("label", { className: "cursor-pointer label", children: [(0, jsx_runtime_1.jsx)("span", { className: "label-text", children: "Recurring" }), (0, jsx_runtime_1.jsx)("input", { type: "checkbox", className: "toggle toggle-primary", onChange: (e) => setIsRecurring(e?.target?.checked), checked: isRecurring })] }) })] }), isRecurring && ((0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center w-full", children: [(0, jsx_runtime_1.jsx)(TextField_1.default, { className: "w-24", onChange: (e) => setInterval(e?.target?.value?.replace(/[^0-9.]/g, '') || '0'), value: interval }), (0, jsx_runtime_1.jsxs)("select", { name: "frequency", className: "select select-primary w-full max-w-xs", onChange: (e) => setFrequency(e?.target?.value), value: frequency, children: [(0, jsx_runtime_1.jsx)("option", { disabled: true, selected: true, children: "Select your frequency" }), (0, jsx_runtime_1.jsx)("option", { children: "daily" }), (0, jsx_runtime_1.jsx)("option", { children: "weekly" }), (0, jsx_runtime_1.jsx)("option", { children: "monthly" }), (0, jsx_runtime_1.jsx)("option", { children: "yearly" })] })] }))] }), (0, jsx_runtime_1.jsx)("div", { className: "md:basis-1/2 md:w-1/2 w-full", children: (0, jsx_runtime_1.jsxs)("div", { className: " flex justify-between w-full", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between w-full ", children: [(0, jsx_runtime_1.jsx)("div", {}), (0, jsx_runtime_1.jsx)(Button_1.default, { className: "m-3", onClick: closeMenu, children: "Close" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between w-full", children: [(0, jsx_runtime_1.jsx)("div", {}), (0, jsx_runtime_1.jsx)(Button_1.default, { className: "m-3", onClick: updateEventForUser, children: "Save" })] })] }) }), (0, jsx_runtime_1.jsxs)("div", { className: "md:flex-auto md:basis-3/4 md:w-1/2 md:flex md:flex-wrap w-full", children: [(0, jsx_runtime_1.jsx)("button", { className: "btn btn-link no-underline hover:no-underline md:my-3", onClick: editEventChild, children: (0, jsx_runtime_1.jsxs)("span", { className: "md:my-3 flex justify-start items-center", children: [(0, jsx_runtime_1.jsx)(md_1.MdOutlineEditCalendar, { size: "3em" }), (0, jsx_runtime_1.jsx)("span", { className: "ml-4", children: "Edit" })] }) }), (0, jsx_runtime_1.jsx)("button", { className: "btn btn-link no-underline hover:no-underline md:my-3", onClick: trainEventChild, children: (0, jsx_runtime_1.jsxs)("span", { className: "md:my-3 flex justify-start items-center", children: [(0, jsx_runtime_1.jsx)(gi_1.GiArtificialIntelligence, { size: "3em" }), (0, jsx_runtime_1.jsx)("span", { className: "ml-4", children: "Train" })] }) }), (0, jsx_runtime_1.jsx)("button", { className: "btn btn-link no-underline hover:no-underline md:my-3", onClick: addTimePreferencesChild, children: (0, jsx_runtime_1.jsxs)("span", { className: "md:my-3 flex justify-start items-center", children: [(0, jsx_runtime_1.jsx)(md_1.MdOutlineAccessTime, { size: "3em" }), (0, jsx_runtime_1.jsx)("span", { className: "ml-4", children: "Time Preferences" })] }) }), (0, jsx_runtime_1.jsx)("button", { className: "btn btn-link no-underline hover:no-underline md:my-3", onClick: enableTagChild, children: (0, jsx_runtime_1.jsxs)("span", { className: "md:my-3 flex justify-start items-center", children: [(0, jsx_runtime_1.jsx)(io_1.IoMdPricetag, { size: "3em" }), (0, jsx_runtime_1.jsx)("span", { className: "ml-4", children: "Tags" })] }) }), (0, jsx_runtime_1.jsx)("button", { className: "btn btn-link no-underline hover:no-underline md:my-3", onClick: enableRateChild, children: (0, jsx_runtime_1.jsxs)("span", { className: "md:my-3 flex justify-start items-center", children: [(0, jsx_runtime_1.jsx)(md_1.MdStarRate, { size: "3em" }), (0, jsx_runtime_1.jsx)("span", { className: "ml-4", children: "Rate" })] }) }), (0, jsx_runtime_1.jsx)("button", { className: "btn btn-link no-underline hover:no-underline md:my-3", onClick: enablePrepAndReviewChild, children: (0, jsx_runtime_1.jsxs)("span", { className: "md:my-3 flex justify-start items-center", children: [(0, jsx_runtime_1.jsx)(md_1.MdCalendarMonth, { size: "3em" }), (0, jsx_runtime_1.jsx)("span", { className: "ml-4", children: "Buffer" })] }) }), (0, jsx_runtime_1.jsx)("button", { className: "btn btn-link no-underline hover:no-underline md:my-3", onClick: addFollowUpChild, children: (0, jsx_runtime_1.jsxs)("span", { className: "md:my-3 flex justify-start items-center", children: [(0, jsx_runtime_1.jsx)(bs_1.BsCalendarPlus, { size: "3em" }), (0, jsx_runtime_1.jsx)("span", { className: "ml-4", children: "Add Follow Up" })] }) }), (0, jsx_runtime_1.jsx)("button", { className: "btn btn-link no-underline hover:no-underline md:my-3", onClick: enablePriorityChild, children: (0, jsx_runtime_1.jsxs)("span", { className: "md:my-3 flex justify-start items-center", children: [(0, jsx_runtime_1.jsx)(md_1.MdOutlineLowPriority, { size: "3em" }), (0, jsx_runtime_1.jsx)("span", { className: "ml-4", children: "Priority" })] }) }), eventOfMenu?.modifiable
                                    ? ((0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsx)("button", { className: "btn btn-link no-underline hover:no-underline md:my-3", onClick: changedModifiableChild, children: (0, jsx_runtime_1.jsxs)("span", { className: "md:my-3 flex justify-start items-center", children: [(0, jsx_runtime_1.jsx)(md_1.MdLockOpen, { size: "3em" }), (0, jsx_runtime_1.jsx)("span", { className: "ml-4", children: "Time Modifiable" })] }) }) })) : ((0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsx)("button", { className: "btn btn-link no-underline hover:no-underline md:my-3", onClick: changedModifiableChild, children: (0, jsx_runtime_1.jsxs)("span", { className: "md:my-3 flex justify-start items-center", children: [(0, jsx_runtime_1.jsx)(md_1.MdLockOutline, { size: "3em" }), (0, jsx_runtime_1.jsx)("span", { className: "ml-4", children: "Time Not Modifiable" })] }) }) })), eventOfMenu?.unlink
                                    ? ((0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsx)("button", { className: "btn btn-link no-underline hover:no-underline md:my-3", onClick: changeLinkChild, children: (0, jsx_runtime_1.jsxs)("span", { className: "md:my-3 flex justify-start items-center", children: [(0, jsx_runtime_1.jsx)(md_1.MdLinkOff, { size: "3em" }), (0, jsx_runtime_1.jsx)("span", { className: "ml-4", children: "Link Off" })] }) }) })) : ((0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsx)("button", { className: "btn btn-link no-underline hover:no-underline md:my-3", onClick: changeLinkChild, children: (0, jsx_runtime_1.jsxs)("span", { className: "md:my-3 flex justify-start items-center", children: [(0, jsx_runtime_1.jsx)(md_1.MdLink, { size: "3em" }), (0, jsx_runtime_1.jsx)("span", { className: "ml-4", children: "Link On" })] }) }) })), (0, jsx_runtime_1.jsx)("button", { className: "btn btn-link no-underline hover:no-underline md:my-3", onClick: enableDeleteChild, children: (0, jsx_runtime_1.jsxs)("span", { className: "md:my-3 flex justify-start items-center", children: [(0, jsx_runtime_1.jsx)(bs_1.BsCalendarMinus, { size: "3em" }), (0, jsx_runtime_1.jsx)("span", { className: "ml-4", children: "Delete" })] }) }), (0, jsx_runtime_1.jsxs)(Box_1.default, { width: "100%", my: { phone: 's', tablet: 'm' }, p: { phone: 's', tablet: 'm' }, borderWidth: "1px", borderRadius: "md", borderColor: "gray.300", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "label", mb: "s", children: "Agent Assistance" }), isAgentAttendingMeeting && selectedMeetingForAgentId === eventOfMenu?.id ? ((0, jsx_runtime_1.jsx)(Button_1.default, { colorScheme: "red", onClick: () => handleStopAgent(eventOfMenu), width: "100%", children: "Stop Agent Notes" })) : ((0, jsx_runtime_1.jsx)(Button_1.default, { colorScheme: "teal", onClick: () => handleAttendWithAgent(eventOfMenu), isDisabled: !getMeetingPlatformAndIdentifier(eventOfMenu), width: "100%", children: "Attend with Agent" })), isAgentAttendingMeeting && selectedMeetingForAgentId === eventOfMenu?.id && agentMeetingStatus && ((0, jsx_runtime_1.jsx)(Text_1.default, { mt: "s", fontSize: "sm", color: "gray.600", children: agentMeetingStatus })), !getMeetingPlatformAndIdentifier(eventOfMenu) && !(isAgentAttendingMeeting && selectedMeetingForAgentId === eventOfMenu?.id) && ((0, jsx_runtime_1.jsx)(Text_1.default, { mt: "s", fontSize: "xs", color: "gray.500", children: "No recognizable meeting link (Google Meet, Zoom, Teams) found in event details for live attendance." }))] })] })] }) }), (0, jsx_runtime_1.jsx)("div", { className: "absolute inset-0 z-20 pointer-events-none", children: (0, jsx_runtime_1.jsx)(SpeedDial_1.default, { ariaLabel: "Calendar SpeedDial", sx: { position: 'absolute', bottom: 24, right: 24, zIndex: 'speedDial' }, icon: (0, jsx_runtime_1.jsx)(SpeedDialIcon_1.default, { sx: { color: colors_1.pink[500] } }), children: actions.map((action) => ((0, jsx_runtime_1.jsx)(SpeedDialAction_1.default, { icon: action.icon, tooltipTitle: action.name, FabProps: {
                            onClick: action.method,
                        } }, action.name))) }) })] }));
}
exports.default = UserViewCalendarWeb;
//# sourceMappingURL=data:application/json;base64,