"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_native_1 = require("react-native");
const Switch_1 = __importDefault(require("@components/Switch"));
const themed_1 = require("@rneui/themed");
const Fab_1 = __importDefault(require("@mui/material/Fab"));
const Add_1 = __importDefault(require("@mui/icons-material/Add"));
const styles_1 = require("@mui/material/styles");
const Zoom_1 = __importDefault(require("@mui/material/Zoom"));
const TextField_1 = __importDefault(require("@components/TextField"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const Button_1 = __importDefault(require("@components/Button"));
const RegularCard_1 = __importDefault(require("@components/RegularCard"));
const react_2 = require("@chakra-ui/react");
const io_1 = require("react-icons/io");
const theme_1 = require("@lib/theme/theme");
const ContactHelper_1 = require("@lib/Contact/ContactHelper");
const lodash_1 = __importDefault(require("lodash"));
const date_utils_1 = require("@lib/date-utils");
const user_context_1 = require("@lib/user-context");
const colors_1 = require("@mui/material/colors");
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("../../config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
const fabStyle = {
    position: 'absolute',
    bottom: 16,
    right: 16,
};
const typeOptions = [
    { label: 'Email', value: 'email' },
    { label: 'Phone', value: 'phone' }
];
function InfoItem(props) {
    const [id, setId] = (0, react_1.useState)(props?.item?.id);
    const [name, setName] = (0, react_1.useState)(props?.item?.name);
    const [type, setType] = (0, react_1.useState)(props?.item?.type);
    const [primary, setPrimary] = (0, react_1.useState)(props?.item?.primary);
    (0, react_1.useEffect)(() => {
        if (id !== props?.item?.id) {
            if (props?.item?.id) {
                setId(props?.item?.id);
            }
        }
    }, [id, props?.item?.id]);
    (0, react_1.useEffect)(() => {
        if (name !== props?.item?.name) {
            if (props?.item?.name) {
                setName(props?.item?.name);
            }
        }
    }, [name, props?.item?.name]);
    const changeId = (value) => {
        setId(value);
    };
    const onEndChangeId = () => (0, ContactHelper_1.updateInfoItemIdValue)(props?.item, props?.index, id, props?.infoItems, props?.setInfoItems);
    const changeName = (value) => {
        setName(value);
    };
    const onEndChangeName = () => (0, ContactHelper_1.updateInfoItemNameValue)(props?.item, props?.index, name, props?.infoItems, props?.setInfoItems);
    const changeType = (value) => {
        setType(value);
        (0, ContactHelper_1.updateInfoItemTypeValue)(props?.item, props?.index, value, props?.infoItems, props?.setInfoItems);
    };
    const changePrimary = (value) => {
        setPrimary(value);
        (0, ContactHelper_1.updateInfoItemPrimaryValue)(props?.item, props?.index, value, props?.infoItems, props?.setInfoItems);
    };
    const removeItem = async () => {
        const newInfoItems = (0, ContactHelper_1.removeInfoItemToItems)(props?.index, props?.infoItems, props?.setInfoItems);
        await props?.submitItemsWithNewItem(newInfoItems);
    };
    return ((0, jsx_runtime_1.jsxs)(RegularCard_1.default, { children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, pt: { phone: 'm', tablet: 's' }, flexDirection: "row", justifyContent: "flex-start", alignItems: "center", style: { width: '60%' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Email or Phone", placeholder: "r@r.r", onChange: (e) => changeId(e?.target?.value), value: id, style: { width: '100%' }, type: "email", onBlur: onEndChangeId }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, pt: { phone: 'm', tablet: 's' }, flexDirection: "row", justifyContent: "flex-start", alignItems: "center", style: { width: '60%' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Name", placeholder: "John Doe", onChange: (e) => changeName(e?.target?.value), value: name, style: { width: '100%' }, onBlur: onEndChangeName }) }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, pt: { phone: 'm', tablet: 's' }, justifyContent: "center", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { pt: { phone: 'm', tablet: 's' }, variant: "optionHeader", children: "Is this a phone or email?" }), (0, jsx_runtime_1.jsxs)("select", { value: type, onChange: (e) => changeType(e?.target?.value), className: "select select-primary w-full max-w-xs", children: [(0, jsx_runtime_1.jsx)("option", { disabled: true, selected: true, children: "Send updates to..." }), lodash_1.default.map(typeOptions, option => ((0, jsx_runtime_1.jsx)("option", { value: option.value, children: option.label }, option.value)))] })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, style: { width: '90%' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", pt: { phone: 'm', tablet: 's' }, style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Is this your primary? (Also used for Zoom)" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-end", style: { width: '90%' }, children: (0, jsx_runtime_1.jsx)(Switch_1.default, { checked: primary, onValueChange: changePrimary, style: { marginBottom: 20 } }) })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { alignItems: "flex-end", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Box_1.default, { mr: { phone: 'm', tablet: 'l' }, children: (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { hitSlop: 15, onPress: removeItem, children: (0, jsx_runtime_1.jsx)(io_1.IoIosTrash, { size: "3em", color: theme_1.palette.red }) }) }) })] }));
}
function ListUserContactInfo() {
    const [infoItems, setInfoItems] = (0, react_1.useState)();
    const [oldInfoItems, setOldInfoItems] = (0, react_1.useState)();
    const [newId, setNewId] = (0, react_1.useState)('');
    const [newName, setNewName] = (0, react_1.useState)('');
    const [newType, setNewType] = (0, react_1.useState)('email');
    const [isNewItem, setIsNewItem] = (0, react_1.useState)(false);
    const [pageOffset, setPageOffset] = (0, react_1.useState)(0);
    const { height: fullHeight } = react_native_1.Dimensions.get('window');
    const { sub, client } = (0, user_context_1.useAppContext)();
    const theme = (0, styles_1.useTheme)();
    const toast = (0, react_2.useToast)();
    const transitionDuration = {
        enter: theme.transitions.duration.enteringScreen,
        exit: theme.transitions.duration.leavingScreen,
    };
    const userId = sub;
    // list old info items
    (0, react_1.useEffect)(() => {
        (async () => {
            try {
                const oldDbInfoItems = await (0, ContactHelper_1.listUserContactInfosGivenUserId)(client, userId);
                if (oldDbInfoItems?.length > 0) {
                    setInfoItems(oldDbInfoItems);
                    setOldInfoItems(oldDbInfoItems);
                }
            }
            catch (e) {
                console.log(e, ' unable to list user contact info items');
            }
        })();
    }, [client, userId]);
    const addNewEntry = () => {
        showNewItem();
    };
    const onSubmitNewEntry = async () => {
        const newInfoItem = {
            id: newId,
            name: newName,
            type: newType,
            userId,
            primary: false,
            updatedAt: (0, date_utils_1.dayjs)().format(),
            createdDate: (0, date_utils_1.dayjs)().format(),
        };
        const newInfoItems = infoItems.concat(newInfoItem);
        console.log(newInfoItems?.map(c => (lodash_1.default.omit(c, ['__typename']))), ' newInfoItems');
        (0, ContactHelper_1.addInfoItemToItems)(newInfoItem, infoItems, setInfoItems);
        hideNewItem();
        await submitItemsWithNewItem(newInfoItems);
    };
    const showNewItem = () => setIsNewItem(true);
    const hideNewItem = () => setIsNewItem(false);
    const onCancelEntry = () => {
        setNewId('');
        setNewName('');
        setNewType('email');
        hideNewItem();
    };
    const submitItemsWithNewItem = async (newInfoItems) => {
        try {
            if (!lodash_1.default.isEqual(oldInfoItems, newInfoItems)) {
                const itemIdsToDelete = oldInfoItems
                    ?.filter(o => !lodash_1.default.isEqual(o, newInfoItems?.find(i => (i?.id == o?.id))))
                    ?.map(o => (o?.id));
                if (itemIdsToDelete?.length > 0) {
                    await (0, ContactHelper_1.deleteContactInfoItems)(client, itemIdsToDelete);
                }
                if (newInfoItems?.length > 0) {
                    await (0, ContactHelper_1.upsertContactInfoItems)(client, newInfoItems);
                    setOldInfoItems(newInfoItems);
                    toast({
                        status: 'success',
                        title: 'Success!',
                        description: 'Successfully updated your contact info items',
                        duration: 9000,
                        isClosable: true,
                    });
                }
            }
        }
        catch (e) {
            console.log(e, ' unable to submit items inside list user contact info');
            toast({
                status: 'error',
                title: 'Oops...',
                description: 'Something went wrong with updating your contact infos. Let us know.',
                duration: 9000,
                isClosable: true,
            });
        }
    };
    const submitItems = async () => {
        try {
            if (!lodash_1.default.isEqual(oldInfoItems, infoItems)) {
                const itemIdsToDelete = oldInfoItems?.map(o => (o?.id));
                if (itemIdsToDelete?.length > 0) {
                    await (0, ContactHelper_1.deleteContactInfoItems)(client, itemIdsToDelete);
                }
                if (infoItems?.length > 0) {
                    await (0, ContactHelper_1.upsertContactInfoItems)(client, infoItems);
                    setOldInfoItems(infoItems);
                    toast({
                        status: 'success',
                        title: 'Success!',
                        description: 'Successfully updated your contact info items',
                        duration: 9000,
                        isClosable: true,
                    });
                }
            }
        }
        catch (e) {
            console.log(e, ' unable to submit items inside list user contact info');
            toast({
                status: 'error',
                title: 'Oops...',
                description: 'Something went wrong with updating your contact infos. Let us know.',
                duration: 9000,
                isClosable: true,
            });
        }
    };
    return ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, style: { width: '100%' }, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subheaderNormal", textAlign: "center", pt: { phone: 'm', tablet: 's' }, children: "Your Contact Info to verify future meeting invites" }), infoItems?.length > 0
                    ? ((0, jsx_runtime_1.jsx)(react_native_1.FlatList, { data: infoItems, renderItem: ({ item, index }) => ((0, jsx_runtime_1.jsx)(InfoItem, { item: item, index: index, infoItems: infoItems, setInfoItems: setInfoItems, removeInfoItemToItems: ContactHelper_1.removeInfoItemToItems, submitItemsWithNewItem: submitItemsWithNewItem })) })) : ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", p: { phone: 'l', tablet: 'm' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subheaderNormal", children: "Add atleast 1 Contact entry to verify against for future meeting invites with Atomic" }) })), (0, jsx_runtime_1.jsx)(Zoom_1.default, { in: true, timeout: transitionDuration, style: {
                        transitionDelay: `${transitionDuration.exit}ms`,
                    }, unmountOnExit: true, children: (0, jsx_runtime_1.jsx)(Fab_1.default, { sx: fabStyle, "aria-label": 'Add', color: "primary", onClick: addNewEntry, children: (0, jsx_runtime_1.jsx)(Add_1.default, { sx: { color: colors_1.pink[500] } }) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsx)(themed_1.Overlay, { overlayStyle: { backgroundColor: theme_1.palette.white, justifyContent: 'center', alignItems: 'center' }, isVisible: isNewItem, onBackdropPress: onCancelEntry, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", alignItems: "center", style: { width: '90%', backgroundColor: theme_1.palette.white }, children: [(0, jsx_runtime_1.jsxs)(RegularCard_1.default, { children: [(0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "New Contact Info" }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, flexDirection: "row", justifyContent: "flex-start", alignItems: "center", style: { width: '90%' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Email or Phone", placeholder: "r@r.r", onChange: (e) => setNewId(e?.target?.value), value: newId, style: { width: '100%' } }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, flexDirection: "row", justifyContent: "flex-start", alignItems: "center", style: { width: '90%' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Name", placeholder: "John Doe", onChange: (e) => setNewName(e?.target?.value), value: newName, style: { width: '100%' } }) }), (0, jsx_runtime_1.jsxs)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, justifyContent: "center", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { pt: { phone: 'm', tablet: 's' }, variant: "optionHeader", children: "Is this a phone or email?" }), (0, jsx_runtime_1.jsxs)("select", { value: newType, onChange: (e) => setNewType(e?.target?.value), className: "select select-primary w-full max-w-xs", children: [(0, jsx_runtime_1.jsx)("option", { disabled: true, selected: true, children: "Send updates to..." }), lodash_1.default.map(typeOptions, option => ((0, jsx_runtime_1.jsx)("option", { value: option.value, children: option.label }, option.value)))] })] })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { hitSlop: 15, onPress: onSubmitNewEntry, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "buttonLink", children: '+ Add Info' }) }) }), (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { hitSlop: 15, onPress: onCancelEntry, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "greyLink", children: "Cancel" }) })] })] }) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: submitItems, children: "Submit Info" }) })] }) }));
}
exports.default = ListUserContactInfo;
//# sourceMappingURL=data:application/json;base64,