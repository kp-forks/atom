"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const TextField_1 = __importDefault(require("@components/TextField"));
const uuid_1 = require("uuid");
const constants_1 = require("@lib/Progress/Todo/constants");
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const Button_1 = __importDefault(require("@components/Button"));
const UserTaskHelper2_1 = require("@lib/Progress/Todo/UserTaskHelper2");
const react_2 = require("@chakra-ui/react");
const date_utils_1 = require("@lib/date-utils");
const lodash_1 = __importDefault(require("lodash"));
const user_context_1 = require("@lib/user-context");
const router_1 = require("next/router");
const react_3 = require("@chakra-ui/react");
const constants_2 = require("../../../lib/Progress/Todo/constants");
const UserTaskHelper3_1 = require("@lib/Progress/Todo/UserTaskHelper3");
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("@config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
const styles = {
    task: {
        fontSize: '21px',
        lineHeight: '28px',
        color: '#221D23',
        width: '100%',
    },
    taskOverlay: {
        fontSize: '21px',
        lineHeight: '28px',
        color: '#221D23',
        padding: 10,
        width: 280,
    },
    taskOverlay2: {
        fontSize: '21px',
        lineHeight: '28px',
        color: '#221D23',
        width: '100%',
    },
    container: {
        flex: 1,
    },
};
const deadlineOptions = [
    {
        label: 'Soft Deadline',
        value: 'soft',
    },
    {
        label: 'Hard Deadline',
        value: 'hard',
    }
];
function UserAddTask(props) {
    const [newDailyTaskText, setNewDailyTaskText] = (0, react_1.useState)('');
    const [newDailyPriority, setNewDailyPriority] = (0, react_1.useState)(1);
    const [newDailyDeadline, setNewDailyDeadline] = (0, react_1.useState)(new Date());
    const [newDailyDeadlineType, setNewDailyDeadlineType] = (0, react_1.useState)('soft');
    const [newDailyDuration, setNewDailyDuration] = (0, react_1.useState)(30);
    const [newWeeklyTaskText, setNewWeeklyTaskText] = (0, react_1.useState)('');
    const [newWeeklyPriority, setNewWeeklyPriority] = (0, react_1.useState)(1);
    const [newWeeklyDeadline, setNewWeeklyDeadline] = (0, react_1.useState)(new Date());
    const [newWeeklyDeadlineType, setNewWeeklyDeadlineType] = (0, react_1.useState)('soft');
    const [newWeeklyDuration, setNewWeeklyDuration] = (0, react_1.useState)(30);
    const router = (0, router_1.useRouter)();
    const { client, sub } = (0, user_context_1.useAppContext)();
    console.log(sub, ' prerender sub inside useraddtask');
    const taskType = router?.query?.taskType;
    const toast = (0, react_2.useToast)();
    const onChangeDailyPriority = (value = '1') => {
        const intValue = parseInt(value.replace(/[^0-9.]/g, ''), 10);
        if (intValue < 1) {
            setNewDailyPriority(1);
            return;
        }
        if (isNaN(intValue)) {
            setNewDailyPriority(1);
            return;
        }
        setNewDailyPriority(parseInt(value.replace(/[^0-9.]/g, ''), 10) || 1);
    };
    const updateTaskInDb = async (toUpdateTask) => {
        try {
            if (!toUpdateTask) {
                console.log('no toUpdateTask provided inside updateTaskinDb');
                return;
            }
            await (0, UserTaskHelper3_1.updateTaskByIdInDb)(client, toUpdateTask);
        }
        catch (e) {
            console.log(e, ' updateDailyTaskToStoreById');
        }
    };
    const createDailyTaskToStore = async (text, important, softDeadline, hardDeadline, status, eventId, duration, priority) => {
        try {
            console.log(text, ' this is text inside createDailyTaskToStore');
            const newTask = {
                id: (0, uuid_1.v4)(),
                userId: sub,
                eventId,
                type: constants_1.DailyTask,
                notes: text,
                important,
                status,
                priority: priority || 1,
                softDeadline,
                hardDeadline,
                duration,
                updatedAt: (0, date_utils_1.dayjs)().format(),
                createdDate: (0, date_utils_1.dayjs)().format()
            };
            await (0, UserTaskHelper3_1.insertTaskInDb)(client, newTask);
            return newTask;
        }
        catch (e) {
            console.log(e, ' unable to create to store todo');
        }
    };
    const createDailyTaskNote = async () => {
        try {
            const notes = newDailyTaskText;
            if (!notes) {
                toast({
                    status: 'info',
                    title: 'Empty',
                    description: 'Your task is empty',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            const task = await createDailyTaskToStore(notes, false, newDailyDeadlineType === 'soft' ? (0, date_utils_1.dayjs)(newDailyDeadline).format() : undefined, newDailyDeadlineType === 'hard' ? (0, date_utils_1.dayjs)(newDailyDeadline).format() : undefined, constants_2.TaskStatus.TODO, undefined, newDailyDuration, newDailyPriority);
            console.log(task, ' this is task inside createDailyTaskNote');
            console.log(newDailyDeadlineType, ' newDailyDeadlineType ');
            const event = await (0, UserTaskHelper2_1.createDailyDeadline)(client, sub, task?.id, notes, newDailyPriority, (0, date_utils_1.dayjs)(newDailyDeadline).format(), newDailyDeadlineType, newDailyDuration, toast);
            console.log(event, ' this is event inside createDailyTaskNote');
            if (event) {
                await (0, UserTaskHelper2_1.submitEventForQueue)(event, client, sub, true, toast);
                task.eventId = event?.id;
                await updateTaskInDb(task);
            }
            setNewDailyTaskText('');
            setNewDailyPriority(1);
            setNewDailyDeadline(new Date());
            setNewDailyDeadlineType('soft');
            setNewDailyDuration(1);
            router.push({ pathname: '/Progress/Todo/UserTask', query: { isUpdate: (0, uuid_1.v4)(), taskType: constants_1.DailyTask } });
        }
        catch (e) {
            console.log(e, ' create daily task note');
        }
    };
    const onChangeWeeklyPriority = (value = '1') => {
        const intValue = parseInt(value.replace(/[^0-9.]/g, ''), 10);
        if (intValue < 1) {
            setNewWeeklyPriority(1);
            return;
        }
        if (isNaN(intValue)) {
            setNewWeeklyPriority(1);
            return;
        }
        setNewWeeklyPriority(parseInt(value.replace(/[^0-9.]/g, ''), 10) || 1);
    };
    const createWeeklyTaskToStore = async (text, important, softDeadline, hardDeadline, status, eventId, duration, priority) => {
        try {
            console.log(text, ' this is text inside createDailyTaskToStore');
            const newTask = {
                id: (0, uuid_1.v4)(),
                userId: sub,
                eventId,
                type: constants_1.WeeklyTask,
                notes: text,
                important,
                status,
                priority: priority || 1,
                softDeadline,
                hardDeadline,
                duration,
                updatedAt: (0, date_utils_1.dayjs)().format(),
                createdDate: (0, date_utils_1.dayjs)().format()
            };
            await (0, UserTaskHelper3_1.insertTaskInDb)(client, newTask);
            return newTask;
        }
        catch (e) {
            console.log(e, ' unable to create to store todo');
        }
    };
    const createWeeklyTaskNote = async () => {
        try {
            const notes = newWeeklyTaskText;
            console.log(notes, ' notes inside createWeeklyTaskNote');
            if (!notes) {
                toast({
                    status: 'info',
                    title: 'Empty',
                    description: 'Your task is empty',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            const task = await createWeeklyTaskToStore(notes, false, newWeeklyDeadlineType === 'soft' ? (0, date_utils_1.dayjs)(newWeeklyDeadline).format() : '', newWeeklyDeadlineType === 'hard' ? (0, date_utils_1.dayjs)(newWeeklyDeadline).format() : '', constants_2.TaskStatus.TODO, undefined, newWeeklyDuration, newWeeklyPriority);
            console.log(task, ' task inside createWeeklyTaskNote');
            const event = await (0, UserTaskHelper2_1.createWeeklyDeadline)(client, sub, task?.id, notes, newWeeklyPriority, (0, date_utils_1.dayjs)(newWeeklyDeadline).format(), newWeeklyDeadlineType, newWeeklyDuration, toast);
            console.log(event, ' event inside createWeeklyTaskNote');
            await (0, UserTaskHelper2_1.submitEventForQueue)(event, client, sub, undefined, toast);
            task.eventId = event?.id;
            await updateTaskInDb(task);
            setNewWeeklyTaskText('');
            setNewWeeklyPriority(1);
            setNewWeeklyDeadline(new Date());
            setNewWeeklyDeadlineType('soft');
            setNewWeeklyDuration(1);
            router.push({ pathname: '/Progress/Todo/UserTask', query: { isUpdate: (0, uuid_1.v4)(), taskType: constants_1.WeeklyTask } });
        }
        catch (e) {
            console.log(e, ' unable to create weekly task note');
        }
    };
    if (taskType === 'Daily') {
        return ((0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "space-around", alignItems: "center", children: (0, jsx_runtime_1.jsxs)(Box_1.default, { children: [(0, jsx_runtime_1.jsx)(Box_1.default, { mt: { phone: 'm', tablet: 'l' }, justifyContent: "space-around", alignItems: "flex-start", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Notes", placeholder: "This is an example task", multiline: true, numberOfLines: 3, value: newDailyTaskText, onChange: (e) => setNewDailyTaskText(e?.target?.value) }) }) }), (0, jsx_runtime_1.jsxs)(Box_1.default, { mt: { phone: 'm', tablet: 'l' }, justifyContent: "space-around", alignItems: "flex-start", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "body", children: "Deadline" }), (0, jsx_runtime_1.jsx)(react_3.Input, { placeholder: "Select Date and Time", size: "md", type: "datetime-local", onChange: (e) => {
                                    setNewDailyDeadline((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").toDate());
                                }, value: (0, date_utils_1.dayjs)(newDailyDeadline).format("YYYY-MM-DDTHH:mm") })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { mt: { phone: 'm', tablet: 'l' }, justifyContent: "space-around", alignItems: "flex-start", children: (0, jsx_runtime_1.jsxs)("select", { value: newDailyDeadlineType, onChange: (e) => setNewDailyDeadlineType(e?.target?.value), className: "select select-primary w-full max-w-xs", children: [(0, jsx_runtime_1.jsx)("option", { disabled: true, defaultValue: "Pick a deadline", children: "Pick a deadline" }), lodash_1.default.map(deadlineOptions, option => ((0, jsx_runtime_1.jsx)("option", { value: option.value, children: option.label }, option.value)))] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { mt: { phone: 'm', tablet: 'l' }, justifyContent: "space-around", alignItems: "flex-start", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Duration (minutes)", type: "number", onChange: (e) => setNewDailyDuration(parseInt(e?.target?.value.replace(/[^0-9.]/g, ''), 10)), value: `${newDailyDuration}`, placeholder: "1", style: { ...(styles?.taskOverlay2), } }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { mt: { phone: 'm', tablet: 'l' }, justifyContent: "space-around", alignItems: "flex-start", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Priority ( > 0)", type: "number", onChange: (e) => onChangeDailyPriority(e?.target?.value), value: `${newDailyPriority}`, placeholder: "1", style: { ...(styles?.taskOverlay2), } }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { mt: { phone: 'm', tablet: 'l' }, justifyContent: "space-around", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: createDailyTaskNote, children: "Add" }) })] }) }));
    }
    else if (taskType === 'Weekly') {
        return ((0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "space-around", alignItems: "center", children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { children: [(0, jsx_runtime_1.jsx)(Box_1.default, { mt: { phone: 'm', tablet: 'l' }, justifyContent: "space-around", alignItems: "flex-start", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Notes", placeholder: "This is an example task", multiline: true, numberOfLines: 4, style: styles?.taskOverlay, value: newWeeklyTaskText, onChange: (e) => setNewWeeklyTaskText(e?.target?.value) }) }) }), (0, jsx_runtime_1.jsxs)(Box_1.default, { mt: { phone: 'm', tablet: 'l' }, justifyContent: "space-around", alignItems: "flex-start", style: { width: '100%' }, children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "body", children: "Deadline" }), (0, jsx_runtime_1.jsx)(react_3.Input, { placeholder: "Select Date and Time", size: "md", type: "datetime-local", onChange: (e) => {
                                        setNewWeeklyDeadline((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").toDate());
                                    }, value: (0, date_utils_1.dayjs)(newWeeklyDeadline).format("YYYY-MM-DDTHH:mm") })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { mt: { phone: 'm', tablet: 'l' }, justifyContent: "space-around", alignItems: "flex-start", children: (0, jsx_runtime_1.jsxs)("select", { value: newWeeklyDeadlineType, onChange: (e) => setNewWeeklyDeadlineType(e?.target?.value), className: "select select-primary w-full max-w-xs", children: [(0, jsx_runtime_1.jsx)("option", { disabled: true, defaultValue: "Pick a deadline", children: "Pick a deadline" }), lodash_1.default.map(deadlineOptions, option => ((0, jsx_runtime_1.jsx)("option", { value: option.value, children: option.label }, option.value)))] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { mt: { phone: 'm', tablet: 'l' }, justifyContent: "space-around", alignItems: "flex-start", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Duration (minutes)", type: "number", onChange: (e) => setNewWeeklyDuration(parseInt(e?.target?.value.replace(/[^0-9.]/g, ''), 10)), value: `${newWeeklyDuration}`, placeholder: "1", style: { ...(styles?.taskOverlay2), } }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { mt: { phone: 'm', tablet: 'l' }, justifyContent: "space-around", alignItems: "flex-start", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Priority ( > 0)", type: "number", onChange: (e) => onChangeWeeklyPriority(e?.target?.value), value: `${newWeeklyPriority}`, placeholder: "1", style: { ...(styles?.taskOverlay2), } }) })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { mt: { phone: 'm', tablet: 'l' }, justifyContent: "space-around", alignItems: "center", style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: createWeeklyTaskNote, children: "Add" }) })] }));
    }
}
exports.default = UserAddTask;
//# sourceMappingURL=data:application/json;base64,