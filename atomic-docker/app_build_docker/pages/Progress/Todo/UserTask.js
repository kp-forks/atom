"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_native_1 = require("react-native");
const image_1 = __importDefault(require("next/image"));
const react_modal_1 = __importDefault(require("react-modal"));
const Fab_1 = __importDefault(require("@mui/material/Fab"));
const Add_1 = __importDefault(require("@mui/icons-material/Add"));
const styles_1 = require("@mui/material/styles");
const Zoom_1 = __importDefault(require("@mui/material/Zoom"));
const TextField_1 = __importDefault(require("@components/TextField"));
const uuid_1 = require("uuid");
const fa_1 = require("react-icons/fa");
const md_1 = require("react-icons/md");
const gi_1 = require("react-icons/gi");
const completed_png_1 = __importDefault(require("@assets/icons/completed.png"));
const date_utils_1 = require("@lib/date-utils");
const react_2 = require("@chakra-ui/react");
const react_3 = require("@chakra-ui/react");
const lodash_1 = __importDefault(require("lodash"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const Button_1 = __importDefault(require("@components/Button"));
const theme_1 = require("@lib/theme/theme");
const UserTaskHelper_1 = require("@lib/Progress/Todo/UserTaskHelper");
const UserTaskHelper2_1 = require("@lib/Progress/Todo/UserTaskHelper2");
const UserTaskHelper3_1 = require("@lib/Progress/Todo/UserTaskHelper3");
const constants_1 = require("@lib/Progress/Todo/constants");
const constants_2 = require("@lib/Progress/Todo/constants");
const OnBoardHelper2_1 = require("@lib/OnBoard/OnBoardHelper2");
const router_1 = require("next/router");
const user_context_1 = require("@lib/user-context");
const colors_1 = require("@mui/material/colors");
const UserTaskHelper3_2 = require("@lib/Progress/Todo/UserTaskHelper3");
const react_beautiful_dnd_1 = require("react-beautiful-dnd");
const icons_1 = require("@chakra-ui/icons");
const react_4 = require("@chakra-ui/react");
const bs_1 = require("react-icons/bs");
function ThreeDotsVertical() {
    return (0, jsx_runtime_1.jsx)(react_4.Icon, { as: bs_1.BsThreeDotsVertical, w: 8, h: 8, color: 'gray.500' });
}
function ThreeDots() {
    return (0, jsx_runtime_1.jsx)(react_4.Icon, { as: bs_1.BsThreeDots, w: 16, h: 16, color: 'gray.900' });
}
const customModalStyles = {
    content: {
        top: '50%',
        left: '50%',
        right: 'auto',
        bottom: 'auto',
        marginRight: '-50%',
        transform: 'translate(-50%, -50%)',
    },
};
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("@config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
const styles = {
    safeArea: {
        alignItems: 'flex-end',
    },
    container: {
        ...react_native_1.StyleSheet.absoluteFillObject,
        justifyContent: 'flex-end',
    },
    fab: {
        margin: 16,
        marginTop: 0,
    },
    removeButton: {
        borderRadius: 50,
        backgroundColor: theme_1.palette.lightGray,
        padding: 10,
    },
    infoButton: {
        backgroundColor: theme_1.palette.lightGreen,
        borderRadius: 50,
        padding: 10,
        margin: 2,
    },
    task: {
        fontSize: '21px',
        lineHeight: '28px',
        color: '#221D23',
        width: '100%',
    },
    taskOverlay: {
        fontSize: '21px',
        lineHeight: '28px',
        color: '#221D23',
        padding: 10,
        width: 280,
    },
    taskOverlay2: {
        fontSize: '21px',
        lineHeight: '28px',
        color: '#221D23',
        width: '100%',
    },
    taskMenu: {
        color: '#a6a6a6',
    },
};
const fabStyle = {
    position: 'absolute',
    bottom: 16,
    right: 16,
};
const renderBulletType = (value) => {
    switch (value) {
        case 'completed':
            return ((0, jsx_runtime_1.jsx)(image_1.default, { src: completed_png_1.default, style: {
                    width: 20,
                    height: 20,
                }, alt: 'completed icon' }));
        case 'future':
            return ((0, jsx_runtime_1.jsx)(Text_1.default, { variant: "header", children: '\u003C' }));
        case 'nextDay':
            return ((0, jsx_runtime_1.jsx)(Text_1.default, { variant: "header", children: '\u003E' }));
        case 'bullet':
            return ((0, jsx_runtime_1.jsx)(Text_1.default, { variant: "header", children: '\u2022' }));
        case 'important':
            return ((0, jsx_runtime_1.jsx)(Text_1.default, { variant: "header", children: '\u274B' }));
        case 'event':
            return ((0, jsx_runtime_1.jsx)(Text_1.default, { variant: "header", children: '\u25EF' }));
        case 'schedule':
            return ((0, jsx_runtime_1.jsx)(Text_1.default, { variant: "header", children: '\u25A1' }));
        case 'deadline':
            return ((0, jsx_runtime_1.jsx)(Text_1.default, { variant: "header", children: '\u2299' }));
        default:
            return null;
    }
};
function UserTask() {
    const [tasks, setTasks] = (0, react_1.useState)([]);
    const [localTaskType, setLocalTaskType] = (0, react_1.useState)('Daily');
    const [updateIndex, setUpdateIndex] = (0, react_1.useState)(-1);
    const [isMenu, setIsMenu] = (0, react_1.useState)(false);
    const [isTaskMenus, setIsTaskMenus] = (0, react_1.useState)([]);
    const [displayUIArray, setDisplayUIArray] = (0, react_1.useState)([]);
    const [dataIndexToDisplayArray, setDataIndexToDisplayArray] = (0, react_1.useState)([]);
    const [updateTaskText, setUpdateTaskText] = (0, react_1.useState)('');
    const [isNewTask, setIsNewTask] = (0, react_1.useState)(false);
    const [newTaskText, setNewTaskText] = (0, react_1.useState)('');
    const [isUpdateTask, setIsUpdateTask] = (0, react_1.useState)(false);
    const [disableTaskType, setDisableTaskType] = (0, react_1.useState)(false);
    const itemsRef = (0, react_1.useRef)([]);
    const toast = (0, react_2.useToast)();
    const theme = (0, styles_1.useTheme)();
    const transitionDuration = {
        enter: theme.transitions.duration.enteringScreen,
        exit: theme.transitions.duration.leavingScreen,
    };
    const router = (0, router_1.useRouter)();
    const { sub, client } = (0, user_context_1.useAppContext)();
    const userId = sub;
    const taskType = router.query?.taskType;
    const isUpdate = router.query?.isUpdate;
    console.log(isUpdate, ' isUpdate inside UserTask');
    (0, react_1.useEffect)(() => {
        itemsRef.current = itemsRef.current.slice(0, tasks?.length);
    }, [tasks, tasks?.length]);
    (0, react_1.useEffect)(() => {
        (async () => {
            if (!sub) {
                return;
            }
            const user_preferenceDoc = await (0, OnBoardHelper2_1.getUserPreference)(client, sub);
            console.log(user_preferenceDoc?.onBoarded, ' user_preferenceDoc?.onBoarded');
            if (!user_preferenceDoc?.onBoarded) {
                console.log(' no user preference created');
                return router.push({ pathname: '/OnBoard/UserOnBoard', query: { taskType } });
            }
        })();
    }, [client, router, sub, taskType]);
    (0, react_1.useEffect)(() => {
        if (!sub) {
            return;
        }
        let microTaskType = '';
        console.log(taskType, disableTaskType, localTaskType, ' taskType, disableTaskType, localTaskType');
        microTaskType = (((taskType === constants_1.DailyTask) && !disableTaskType) && constants_1.DailyTask) || (((!taskType || disableTaskType) && (localTaskType === constants_1.DailyTask)) && constants_1.DailyTask);
        if (!microTaskType) {
            microTaskType = ((taskType && !disableTaskType) && taskType)
                || (localTaskType === taskType) && taskType;
        }
        if ((taskType && !disableTaskType) && (taskType !== localTaskType)) {
            setLocalTaskType(microTaskType);
        }
        if (!microTaskType) {
            console.log(' error no microTaskType');
            return;
        }
        (async () => {
            try {
                const newTasks = await (0, UserTaskHelper3_1.listTasksGivenUserId)(client, sub, microTaskType);
                if (newTasks?.[0]?.id) {
                    let isOrder = true;
                    for (let i = 0; i < newTasks.length; i++) {
                        if (typeof (newTasks?.[i]?.order) !== 'number') {
                            isOrder = false;
                        }
                    }
                    console.log(newTasks, ' this is newTasks');
                    const oldOrderArray = newTasks.map((i) => (i?.order));
                    const statusArray = newTasks?.map((i) => (i?.status));
                    const eventIds = newTasks?.map(i => ((i && i?.eventId) || null))?.filter(e => !!e);
                    const events = [];
                    if (eventIds?.length > 0) {
                        const eventsGivenIds = await (0, UserTaskHelper3_1.listEventsGivenIds)(client, eventIds);
                        events.push(...eventsGivenIds);
                    }
                    const newTaskPluses = [];
                    for (const newTask of newTasks) {
                        const event = events?.find(e => (e?.taskId === newTask?.id));
                        const newTaskPlus = { ...newTask, startDate: '', endDate: '', nextDay: false };
                        newTaskPlus.startDate = event?.startDate || '';
                        newTaskPlus.endDate = event?.endDate || '';
                        newTaskPlus.nextDay = (event?.startDate && (0, date_utils_1.dayjs)(event?.startDate).isTomorrow()) || false;
                        newTaskPluses.push(lodash_1.default.omit(newTaskPlus, ['__typename']));
                    }
                    if (isOrder) {
                        const sortedByOrderNewTaskPluses = (0, UserTaskHelper_1.sortByOrder)(newTaskPluses, oldOrderArray);
                        const sortedByOrderStatusArray = (0, UserTaskHelper_1.sortByOrder)(statusArray, oldOrderArray);
                        const sortedByStatusSortedByOrderNewTaskPluses = (0, UserTaskHelper_1.sortByStatus)(sortedByOrderNewTaskPluses, sortedByOrderStatusArray);
                        const newIsTaskMenus = sortedByStatusSortedByOrderNewTaskPluses.map(() => false);
                        const sortedByStatusSortedByOrderStatusArray = (0, UserTaskHelper_1.sortByStatus)(sortedByOrderStatusArray, sortedByOrderStatusArray);
                        setIsTaskMenus(newIsTaskMenus);
                        setTasks(sortedByStatusSortedByOrderNewTaskPluses);
                        const { displayUIArray: sortedDisplayUIArray, dataIndexToDisplayArray: sortedDataIndexToDisplayArray, } = (0, UserTaskHelper_1.getDisplayUIForWeb)(sortedByStatusSortedByOrderNewTaskPluses, sortedByStatusSortedByOrderStatusArray, microTaskType, sub);
                        setDisplayUIArray(sortedDisplayUIArray);
                        setDataIndexToDisplayArray(sortedDataIndexToDisplayArray);
                    }
                    else {
                        const newParentIdArray = newTaskPluses?.map(i => (i?.parentId || ''));
                        const { sortedTaskPluses, } = (0, UserTaskHelper_1.sortTasksByParent)(newParentIdArray, newTaskPluses);
                        const sortedOrderArray = sortedTaskPluses.map((_, inx) => (inx));
                        const sortedByOrderNewTaskPluses = (0, UserTaskHelper_1.sortByOrder)(newTaskPluses, sortedOrderArray);
                        const sortedByOrderStatusArray = (0, UserTaskHelper_1.sortByOrder)(statusArray, sortedOrderArray);
                        const sortedByStatusSortedByOrderNewTaskPluses = (0, UserTaskHelper_1.sortByStatus)(sortedByOrderNewTaskPluses, sortedByOrderStatusArray);
                        const newIsTaskMenus = sortedByStatusSortedByOrderNewTaskPluses.map(() => false);
                        const sortedByStatusSortedByOrderStatusArray = (0, UserTaskHelper_1.sortByStatus)(sortedByOrderStatusArray, sortedByOrderStatusArray);
                        setIsTaskMenus(newIsTaskMenus);
                        setTasks(sortedByStatusSortedByOrderNewTaskPluses?.map((i, inx) => ({ ...i, order: inx, status: sortedByStatusSortedByOrderStatusArray[inx] })));
                        const { displayUIArray: sortedDisplayUIArray, dataIndexToDisplayArray: sortedDataIndexToDisplayArray, } = (0, UserTaskHelper_1.getDisplayUIForWeb)(sortedByStatusSortedByOrderNewTaskPluses, sortedByStatusSortedByOrderStatusArray, microTaskType, sub);
                        setDisplayUIArray(sortedDisplayUIArray);
                        setDataIndexToDisplayArray(sortedDataIndexToDisplayArray);
                        const upsertTasks = sortedByStatusSortedByOrderNewTaskPluses?.map((i, inx) => ({ ...i, order: inx, status: sortedByStatusSortedByOrderStatusArray[inx] }));
                        upsertTasks?.map(u => (console.log(JSON.stringify(lodash_1.default.omit(u, ['startDate', 'endDate', 'nextDay'])), ' upsertTask 1')));
                        await (0, UserTaskHelper3_2.upsertManyTasksInDb)(client, upsertTasks?.map(i => lodash_1.default.omit(i, ['startDate', 'endDate', 'nextDay'])));
                    }
                }
            }
            catch (e) {
                console.log(e, ' unable to set tasks');
            }
        })();
    }, [taskType, localTaskType, disableTaskType, isUpdate, client, sub]);
    const createTaskInDbAndUpdateUI = async (type, notes, important, status, priority, softDeadline, hardDeadline, duration, eventId) => {
        try {
            const newTask = {
                id: (0, uuid_1.v4)(),
                userId,
                eventId,
                type,
                notes,
                important,
                status,
                priority: priority || 1,
                softDeadline,
                hardDeadline,
                duration,
                updatedAt: (0, date_utils_1.dayjs)().format(),
                createdDate: (0, date_utils_1.dayjs)().format()
            };
            await (0, UserTaskHelper3_1.insertTaskInDb)(client, newTask);
            const oldStatusArray = tasks?.map(t => (t?.status));
            const index = oldStatusArray?.lastIndexOf(constants_2.TaskStatus.TODO);
            const newTasks = (0, UserTaskHelper_1.addToDataArrayAfterIndex)(newTask, tasks, tasks?.[0]?.id ? false : true, index);
            const sortedOrderArray = newTasks.map((_, inx) => (inx));
            const sortedByOrderStatusArray = (0, UserTaskHelper_1.sortByOrder)(oldStatusArray, sortedOrderArray);
            const sortedByStatusSortedByOrderNewTaskPluses = (0, UserTaskHelper_1.sortByStatus)(newTasks, sortedByOrderStatusArray);
            const newIsTaskMenus = sortedByStatusSortedByOrderNewTaskPluses.map(() => false);
            setIsTaskMenus(newIsTaskMenus);
            setTasks(sortedByStatusSortedByOrderNewTaskPluses?.map((i, inx) => ({ ...i, order: inx, status: sortedByOrderStatusArray[inx] })));
            const { displayUIArray: sortedDisplayUIArray, dataIndexToDisplayArray: sortedDataIndexToDisplayArray, } = (0, UserTaskHelper_1.getDisplayUIForWeb)(sortedByStatusSortedByOrderNewTaskPluses, sortedByOrderStatusArray, localTaskType, sub);
            setDisplayUIArray(sortedDisplayUIArray);
            setDataIndexToDisplayArray(sortedDataIndexToDisplayArray);
            const upsertTasks = sortedByStatusSortedByOrderNewTaskPluses?.map((i, inx) => ({ ...i, order: inx, status: sortedByOrderStatusArray[inx] }));
            await (0, UserTaskHelper3_2.upsertManyTasksInDb)(client, upsertTasks?.map(i => lodash_1.default.omit(i, ['startDate', 'endDate', 'nextDay'])));
            return newTask?.id;
        }
        catch (e) {
            console.log(e, ' unable to create daily task to db');
        }
    };
    const createTaskNote = async () => {
        try {
            const notes = newTaskText;
            if (!notes) {
                toast({
                    status: 'info',
                    title: 'Empty',
                    description: 'Your task is empty',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            await createTaskInDbAndUpdateUI(localTaskType, notes, false, constants_2.TaskStatus.TODO, 1, undefined, undefined, undefined, undefined);
            setNewTaskText('');
            setIsNewTask(!isNewTask);
        }
        catch (e) {
            console.log(e, ' unable to createTask');
        }
    };
    const updateTaskNote = async () => {
        try {
            if (!updateTaskText) {
                console.log(updateTaskText, ' no updateTaskText present updateTaskNotes');
                setIsUpdateTask(false);
                return;
            }
            setIsUpdateTask(false);
            const notes = updateTaskText;
            const index = updateIndex;
            console.log(notes, index, ' notes, index');
            const toUpdateTask = lodash_1.default.cloneDeep(tasks[updateIndex]);
            console.log(toUpdateTask, ' toUpdateTask');
            toUpdateTask.notes = notes;
            const UIIndex = dataIndexToDisplayArray.indexOf(index);
            (0, UserTaskHelper_1.updateDataArray)(toUpdateTask, displayUIArray, setDisplayUIArray, UIIndex);
            (0, UserTaskHelper_1.updateDataArray)(toUpdateTask, tasks, setTasks, updateIndex);
            await (0, UserTaskHelper3_1.updateTaskByIdInDb)(client, toUpdateTask);
        }
        catch (e) {
            console.log(e, ' unable to update task');
            setIsUpdateTask(false);
        }
        setIsUpdateTask(false);
    };
    const deleteTask = async (index) => {
        try {
            const task = tasks[index];
            if (!task) {
                console.log(index, ' no taskid present to deleteTask');
                return;
            }
            if (task?.eventId) {
                await (0, UserTaskHelper2_1.removeEventForTask)(client, task, sub);
            }
            const deleted = await (0, UserTaskHelper3_1.deleteTaskGivenId)(client, task?.id);
            console.log(deleted, ' successfully deleted task');
            const UIIndex = dataIndexToDisplayArray.indexOf(index);
            const newTasks = tasks?.slice(0, index)
                .concat(tasks?.slice(index + 1));
            const newDisplayUIArray = displayUIArray?.slice(0, UIIndex)
                .concat(displayUIArray?.slice(UIIndex + 1));
            const newDataIndexToDisplayArray = dataIndexToDisplayArray?.slice(0, UIIndex)
                .concat(dataIndexToDisplayArray?.slice(UIIndex + 1));
            const newIsTaskMenus = newTasks.map(() => false);
            setIsTaskMenus(newIsTaskMenus);
            setTasks(newTasks);
            setDisplayUIArray(newDisplayUIArray);
            setDataIndexToDisplayArray(newDataIndexToDisplayArray);
        }
        catch (e) {
            console.log(e, ' unable to delete task');
        }
    };
    const updateImportantTask = async (index) => {
        try {
            const oldTask = tasks[index];
            if (!oldTask?.id) {
                return;
            }
            const toUpdateTask = lodash_1.default.cloneDeep(oldTask);
            toUpdateTask.important = !oldTask.important;
            const UIIndex = dataIndexToDisplayArray.indexOf(index);
            (0, UserTaskHelper_1.updateDataArray)(toUpdateTask, displayUIArray, setDisplayUIArray, UIIndex);
            (0, UserTaskHelper_1.updateDataArray)(toUpdateTask, tasks, setTasks, updateIndex);
            await (0, UserTaskHelper3_1.updateTaskByIdInDb)(client, toUpdateTask);
        }
        catch (e) {
            console.log(e, ' unable to update important task');
        }
    };
    const updateCompletedTask = async (index) => {
        try {
            const oldTask = tasks[index];
            if (!oldTask?.id) {
                return;
            }
            const toUpdateTask = lodash_1.default.cloneDeep(oldTask);
            if (!!oldTask?.completedDate) {
                toUpdateTask.completedDate = null;
            }
            else {
                toUpdateTask.completedDate = (0, date_utils_1.dayjs)().format();
            }
            const UIIndex = dataIndexToDisplayArray.indexOf(index);
            (0, UserTaskHelper_1.updateDataArray)(toUpdateTask, displayUIArray, setDisplayUIArray, UIIndex);
            (0, UserTaskHelper_1.updateDataArray)(toUpdateTask, tasks, setTasks, updateIndex);
            await (0, UserTaskHelper3_1.updateTaskByIdInDb)(client, toUpdateTask);
        }
        catch (e) {
            console.log(e, ' unable to update completed task');
        }
    };
    const hideMenu = () => setIsMenu(false);
    const hideTaskMenu = (index) => {
        setIsTaskMenus(isTaskMenus.slice(0, index).concat([false]).concat(isTaskMenus.slice(index + 1)));
    };
    const changeTaskList = async (type) => {
        setDisableTaskType(true);
        setLocalTaskType(type);
    };
    const changeToDailyTaskList = () => changeTaskList('Daily');
    const changeToWeeklyTaskList = () => changeTaskList('Weekly');
    const changeToMasterTaskList = () => changeTaskList('Master');
    const changeToGroceryTaskList = () => changeTaskList('Grocery');
    const navigateToTaskSchedule = (index, isTaskUpdate) => {
        router.push({ pathname: '/Schedule/UserTaskSchedule', query: {
                taskType: localTaskType,
                isUpdate: isTaskUpdate,
                taskId: tasks[index]?.id,
            } });
    };
    const navigateToTaskDeadline = (index, isTaskUpdate, deadlineType) => {
        router.push({ pathname: '/Schedule/UserTaskDeadline', query: {
                taskType: localTaskType,
                isUpdate: isTaskUpdate,
                taskId: tasks[index]?.id,
                deadlineType,
            } });
    };
    const navigateToTaskEvent = (index, isTaskUpdate) => {
        router.push({ pathname: '/Schedule/UserTaskEvent', query: {
                taskType: localTaskType,
                isUpdate: isTaskUpdate,
                taskId: tasks[index]?.id,
            } });
    };
    const changeIsNewTask = () => setIsNewTask(!isNewTask);
    const closeIsUpdateTask = () => {
        setIsUpdateTask(false);
    };
    const onNewTaskText = (text) => setNewTaskText(text);
    const addNewTask = () => {
        if (localTaskType === constants_1.DailyTask) {
            router.push({ pathname: '/Progress/Todo/UserAddTask', query: { taskType: localTaskType } });
        }
        else if (localTaskType === constants_1.WeeklyTask) {
            router.push({ pathname: '/Progress/Todo/UserAddTask', query: { taskType: localTaskType } });
        }
        else {
            setIsNewTask(true);
        }
    };
    const updateNoteAtIndex = (i) => {
        setUpdateIndex(i);
        setUpdateTaskText(tasks?.[i]?.notes);
        setIsUpdateTask(true);
        itemsRef?.current?.[i]?.blur();
        console.log(itemsRef?.current?.[i], ' itemsRef?.current?.[i]');
    };
    const onDragEnd = async (dragEnd) => {
        return (0, UserTaskHelper_1.onDragEndUpdateForWeb)(dragEnd, tasks, displayUIArray, setDisplayUIArray, dataIndexToDisplayArray, setDataIndexToDisplayArray, localTaskType, sub, client);
    };
    const addParentToTask = async (index) => {
        try {
            return (0, UserTaskHelper_1.addParent)(client, index, index - 1, tasks);
        }
        catch (e) {
            console.log(e, ' unable to add parent');
        }
    };
    const removeParentFromTask = async (index) => {
        try {
            return (0, UserTaskHelper_1.removeParent)(client, index, tasks);
        }
        catch (e) {
            console.log(e, ' unable to remove parent from task');
        }
    };
    const grid = 8;
    const getItemStyle = (isDragging, draggableStyle) => ({
        userSelect: "none",
        padding: grid * 2,
        margin: `0 0 ${grid}px 0`,
        borderColor: isDragging ? theme_1.palette.purplePrimary : "transparent",
        borderWidth: '5px',
        ...draggableStyle
    });
    const renderItem = (displayUI, index, provided, snapshot) => {
        const i = dataIndexToDisplayArray?.[index];
        const indexBefore = dataIndexToDisplayArray?.[index - 1];
        if (i === -1) {
            return ((0, jsx_runtime_1.jsx)("div", { ref: provided.innerRef, ...provided.draggableProps, ...provided.dragHandleProps, style: getItemStyle(snapshot.isDragging, provided.draggableProps.style), children: (0, jsx_runtime_1.jsx)(Box_1.default, { style: { width: '100%' }, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", textAlign: "left", children: displayUI?.notes }) }) }));
        }
        if (indexBefore === -1) {
            return ((0, jsx_runtime_1.jsx)("div", { ref: provided.innerRef, ...provided.draggableProps, ...provided.dragHandleProps, style: getItemStyle(snapshot.isDragging, provided.draggableProps.style), children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", style: { width: '100%' }, pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", children: [displayUI?.important
                                            && renderBulletType('important'), (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { hitSlop: 20, onPress: () => updateCompletedTask(i), children: displayUI?.completedDate
                                                ? (renderBulletType('completed'))
                                                : (renderBulletType('bullet')) })] }), displayUI?.startDate
                                    ? ((0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, date_utils_1.dayjs)(displayUI?.startDate).isTomorrow()
                                            && (renderBulletType('nextDay')) })) : null] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 7, children: [(0, jsx_runtime_1.jsx)(TextField_1.default, { numberOfLines: 3, innerRef: (el) => itemsRef.current[i] = el, multiline: true, style: { ...(styles.task) }, value: displayUI?.notes, onFocus: () => updateNoteAtIndex(i), disabled: snapshot.isDragging }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", flexWrap: "wrap", children: [displayUI?.important
                                            ? ((0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: () => updateImportantTask(i), children: (0, jsx_runtime_1.jsx)(md_1.MdLabelImportant, { size: "3em", color: theme_1.palette.purplePrimary }) })) : null, (displayUI?.startDate
                                            && (0, date_utils_1.dayjs)(displayUI?.startDate).isToday())
                                            ? ((0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { style: styles.infoButton, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "toDoButton", children: "Today" }) })) : null, (displayUI?.startDate
                                            && (0, date_utils_1.dayjs)(displayUI?.startDate).isTomorrow())
                                            ? ((0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { style: styles.infoButton, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "toDoButton", children: "Tomorrow" }) })) : null, displayUI?.startDate
                                            ? ((0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { style: styles.infoButton, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "toDoButton", children: (0, date_utils_1.dayjs)(displayUI.startDate).format('l') }) })) : null, displayUI?.eventId
                                            ? ((0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: () => navigateToTaskEvent(i, true), onLongPress: async () => (0, UserTaskHelper2_1.removeEventForTask)(client, displayUI, userId), children: (0, jsx_runtime_1.jsx)(md_1.MdOutlineEventNote, { size: "3em", color: theme_1.palette.purplePrimary }) })) : null, displayUI?.eventId
                                            ? ((0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: () => navigateToTaskSchedule(i, true), onLongPress: async () => (0, UserTaskHelper2_1.removeEventForTask)(client, displayUI, userId), children: (0, jsx_runtime_1.jsx)(md_1.MdSchedule, { size: "3em", color: theme_1.palette.purplePrimary }) })) : null, displayUI?.softDeadline
                                            ? ((0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { style: styles.infoButton, children: (0, jsx_runtime_1.jsxs)(Text_1.default, { variant: "toDoButton", children: ["Soft Deadline - ", (0, date_utils_1.dayjs)(displayUI?.softDeadline).format('lll')] }) })) : null, displayUI?.hardDeadline
                                            ? ((0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { style: styles.infoButton, children: (0, jsx_runtime_1.jsxs)(Text_1.default, { variant: "toDoButton", children: ["Hard Deadline - ", (0, date_utils_1.dayjs)(displayUI?.hardDeadline).format('lll')] }) })) : null, (displayUI?.softDeadline || displayUI?.hardDeadline)
                                            ? ((0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: () => navigateToTaskDeadline(i, true, displayUI?.softDeadline ? 'soft' : 'hard'), onLongPress: () => (0, UserTaskHelper2_1.removeEventForTask)(client, displayUI, userId), children: (0, jsx_runtime_1.jsx)(gi_1.GiSandsOfTime, { size: "3em", color: theme_1.palette.purplePrimary }) })) : null, displayUI?.duration > 0
                                            ? ((0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { style: styles.infoButton, children: (0, jsx_runtime_1.jsxs)(Text_1.default, { variant: "toDoButton", children: ["Duration - ", displayUI.duration, " minutes"] }) })) : null] })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, flexDirection: "column", justifyContent: "flex-start", children: (0, jsx_runtime_1.jsxs)(react_3.Menu, { children: [(0, jsx_runtime_1.jsx)(react_3.MenuButton, { as: react_3.IconButton, "aria-label": 'Options', icon: (0, jsx_runtime_1.jsx)(ThreeDotsVertical, {}), variant: 'outline', isOpen: isTaskMenus[i], onClose: () => hideTaskMenu(i) }), (0, jsx_runtime_1.jsxs)(react_3.MenuList, { children: [displayUI?.important
                                                ? ((0, jsx_runtime_1.jsx)(react_3.MenuItem, { icon: (0, jsx_runtime_1.jsx)(icons_1.StarIcon, {}), onClick: async () => { hideTaskMenu(i); await updateImportantTask(i); }, children: "Remove Important" })) : ((0, jsx_runtime_1.jsx)(react_3.MenuItem, { icon: (0, jsx_runtime_1.jsx)(icons_1.StarIcon, {}), onClick: async () => { hideTaskMenu(i); await updateImportantTask(i); }, children: "Add Important" })), displayUI?.parentId
                                                ? ((0, jsx_runtime_1.jsx)(react_3.MenuItem, { onClick: async () => { hideTaskMenu(i); return removeParentFromTask(i); }, children: "Remove Parent" })) : ((0, jsx_runtime_1.jsx)(react_3.MenuItem, { onClick: async () => { hideTaskMenu(i); return addParentToTask(i); }, children: "Add Parent" })), (0, jsx_runtime_1.jsx)(react_3.MenuItem, { onClick: async () => { hideTaskMenu(i); await deleteTask(i); }, children: "Remove Task" })] })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, alignItems: "flex-end", children: (0, jsx_runtime_1.jsx)(fa_1.FaGripVertical, { size: "3em", color: theme_1.palette.lightGray }) })] }) }));
        }
        if (displayUI?.parentId) {
            return ((0, jsx_runtime_1.jsx)("div", { ref: provided.innerRef, ...provided.draggableProps, ...provided.dragHandleProps, style: getItemStyle(snapshot.isDragging, provided.draggableProps.style), children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", style: { width: '100%' }, pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1 }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 9, justifyContent: "space-between", flexDirection: "row", children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", children: [displayUI?.important
                                                    && renderBulletType('important'), (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { hitSlop: 20, onPress: () => updateCompletedTask(i), children: displayUI?.completedDate
                                                        ? (renderBulletType('completed'))
                                                        : (renderBulletType('bullet')) })] }), displayUI?.startDate
                                            ? ((0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, date_utils_1.dayjs)(displayUI.startDate).isTomorrow()
                                                    && (renderBulletType('nextDay')) })) : null] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 7, children: [(0, jsx_runtime_1.jsx)(TextField_1.default, { numberOfLines: 3, innerRef: (el) => itemsRef.current[i] = el, multiline: true, style: { ...(styles.task) }, value: displayUI?.notes, onFocus: () => updateNoteAtIndex(i), disabled: snapshot.isDragging }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", flexWrap: "wrap", children: [displayUI?.important
                                                    ? ((0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: () => updateImportantTask(i), children: (0, jsx_runtime_1.jsx)(md_1.MdLabelImportant, { size: "3em", color: theme_1.palette.purplePrimary }) })) : null, (displayUI?.startDate
                                                    && (0, date_utils_1.dayjs)(displayUI?.startDate).isToday())
                                                    ? ((0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { style: styles.infoButton, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "toDoButton", children: "Today" }) })) : null, (displayUI?.startDate
                                                    && (0, date_utils_1.dayjs)(displayUI?.startDate).isTomorrow())
                                                    ? ((0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { style: styles.infoButton, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "toDoButton", children: "Tomorrow" }) })) : null, displayUI?.startDate
                                                    ? ((0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { style: styles.infoButton, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "toDoButton", children: (0, date_utils_1.dayjs)(displayUI?.startDate).format('l') }) })) : null, displayUI?.eventId
                                                    ? ((0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: () => navigateToTaskEvent(i, true), onLongPress: async () => (0, UserTaskHelper2_1.removeEventForTask)(client, displayUI, userId), children: (0, jsx_runtime_1.jsx)(md_1.MdOutlineEventNote, { size: "3em", color: theme_1.palette.purplePrimary }) })) : null, displayUI?.eventId
                                                    ? ((0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: () => navigateToTaskSchedule(i, true), onLongPress: async () => (0, UserTaskHelper2_1.removeEventForTask)(client, displayUI, userId), children: (0, jsx_runtime_1.jsx)(md_1.MdSchedule, { size: "3em", color: theme_1.palette.purplePrimary }) })) : null, displayUI?.softDeadline
                                                    ? ((0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { style: styles.infoButton, children: (0, jsx_runtime_1.jsxs)(Text_1.default, { variant: "toDoButton", children: ["Soft Deadline - ", (0, date_utils_1.dayjs)(displayUI?.softDeadline).format('lll')] }) })) : null, displayUI?.hardDeadline
                                                    ? ((0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { style: styles.infoButton, children: (0, jsx_runtime_1.jsxs)(Text_1.default, { variant: "toDoButton", children: ["Hard Deadline - ", (0, date_utils_1.dayjs)(displayUI?.hardDeadline).format('lll')] }) })) : null, (displayUI?.softDeadline || displayUI?.hardDeadline)
                                                    ? ((0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: () => navigateToTaskDeadline(i, true, displayUI?.softDeadline ? 'soft' : 'hard'), onLongPress: () => (0, UserTaskHelper2_1.removeEventForTask)(client, displayUI, userId), children: (0, jsx_runtime_1.jsx)(gi_1.GiSandsOfTime, { size: "3em", color: theme_1.palette.purplePrimary }) })) : null, displayUI?.duration > 0
                                                    ? ((0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { style: styles.infoButton, children: (0, jsx_runtime_1.jsxs)(Text_1.default, { variant: "toDoButton", children: ["Duration - ", displayUI?.duration, " minutes"] }) })) : null] })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, flexDirection: "column", justifyContent: "flex-start", children: (0, jsx_runtime_1.jsxs)(react_3.Menu, { children: [(0, jsx_runtime_1.jsx)(react_3.MenuButton, { as: react_3.IconButton, "aria-label": 'Options', icon: (0, jsx_runtime_1.jsx)(ThreeDotsVertical, {}), variant: 'outline', isOpen: isTaskMenus[i], onClose: () => hideTaskMenu(i) }), (0, jsx_runtime_1.jsxs)(react_3.MenuList, { children: [displayUI?.important
                                                        ? ((0, jsx_runtime_1.jsx)(react_3.MenuItem, { icon: (0, jsx_runtime_1.jsx)(icons_1.StarIcon, {}), onClick: async () => { hideTaskMenu(i); await updateImportantTask(i); }, children: "Remove Important" })) : ((0, jsx_runtime_1.jsx)(react_3.MenuItem, { icon: (0, jsx_runtime_1.jsx)(icons_1.StarIcon, {}), onClick: async () => { hideTaskMenu(i); await updateImportantTask(i); }, children: "Add Important" })), displayUI?.parentId
                                                        ? ((0, jsx_runtime_1.jsx)(react_3.MenuItem, { onClick: async () => { hideTaskMenu(i); return removeParentFromTask(i); }, children: "Remove Parent" })) : ((0, jsx_runtime_1.jsx)(react_3.MenuItem, { onClick: async () => { hideTaskMenu(i); return addParentToTask(i); }, children: "Add Parent" })), (0, jsx_runtime_1.jsx)(react_3.MenuItem, { onClick: async () => { hideTaskMenu(i); await deleteTask(i); }, children: "Remove Task" })] })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, alignItems: "flex-end", children: (0, jsx_runtime_1.jsx)(fa_1.FaGripVertical, { size: "3em", color: theme_1.palette.lightGray }) })] })] }) }));
        }
        return ((0, jsx_runtime_1.jsx)("div", { ref: provided.innerRef, ...provided.draggableProps, ...provided.dragHandleProps, style: getItemStyle(snapshot.isDragging, provided.draggableProps.style), children: (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", style: { width: '100%' }, pt: { phone: 'm', tablet: 's' }, children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", children: [displayUI?.important
                                        && renderBulletType('important'), (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { hitSlop: 20, onPress: () => updateCompletedTask(i), children: displayUI?.completedDate
                                            ? (renderBulletType('completed'))
                                            : (renderBulletType('bullet')) })] }), displayUI?.startDate
                                ? ((0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, date_utils_1.dayjs)(displayUI?.startDate).isTomorrow()
                                        && (renderBulletType('nextDay')) })) : null] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 7, children: [(0, jsx_runtime_1.jsx)(TextField_1.default, { numberOfLines: 3, innerRef: (el) => itemsRef.current[i] = el, multiline: true, style: { ...(styles.task) }, value: displayUI?.notes, onFocus: () => updateNoteAtIndex(i), disabled: snapshot.isDragging }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", flexWrap: "wrap", children: [displayUI?.important
                                        ? ((0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: () => updateImportantTask(i), children: (0, jsx_runtime_1.jsx)(md_1.MdLabelImportant, { size: "3em", color: theme_1.palette.purplePrimary }) })) : null, (displayUI?.startDate
                                        && (0, date_utils_1.dayjs)(displayUI?.startDate).isToday())
                                        ? ((0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { style: styles.infoButton, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "toDoButton", children: "Today" }) })) : null, (displayUI?.startDate
                                        && (0, date_utils_1.dayjs)(displayUI?.startDate).isTomorrow())
                                        ? ((0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { style: styles.infoButton, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "toDoButton", children: "Tomorrow" }) })) : null, displayUI?.startDate
                                        ? ((0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { style: styles.infoButton, children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "toDoButton", children: (0, date_utils_1.dayjs)(displayUI?.startDate).format('l') }) })) : null, displayUI?.eventId
                                        ? ((0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: () => navigateToTaskEvent(i, true), onLongPress: async () => (0, UserTaskHelper2_1.removeEventForTask)(client, displayUI, userId), children: (0, jsx_runtime_1.jsx)(md_1.MdOutlineEventNote, { size: "3em", color: theme_1.palette.purplePrimary }) })) : null, displayUI?.eventId
                                        ? ((0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: () => navigateToTaskSchedule(i, true), onLongPress: async () => (0, UserTaskHelper2_1.removeEventForTask)(client, displayUI, userId), children: (0, jsx_runtime_1.jsx)(md_1.MdSchedule, { size: "3em", color: theme_1.palette.purplePrimary }) })) : null, displayUI?.softDeadline
                                        ? ((0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { style: styles.infoButton, children: (0, jsx_runtime_1.jsxs)(Text_1.default, { variant: "toDoButton", children: ["Soft Deadline - ", (0, date_utils_1.dayjs)(displayUI?.softDeadline).format('lll')] }) })) : null, displayUI?.hardDeadline
                                        ? ((0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { style: styles.infoButton, children: (0, jsx_runtime_1.jsxs)(Text_1.default, { variant: "toDoButton", children: ["Hard Deadline - ", (0, date_utils_1.dayjs)(displayUI?.hardDeadline).format('lll')] }) })) : null, (displayUI?.softDeadline || displayUI?.hardDeadline)
                                        ? ((0, jsx_runtime_1.jsx)(react_native_1.Pressable, { onPress: () => navigateToTaskDeadline(i, true, displayUI?.softDeadline ? 'soft' : 'hard'), onLongPress: () => (0, UserTaskHelper2_1.removeEventForTask)(client, displayUI, userId), children: (0, jsx_runtime_1.jsx)(gi_1.GiSandsOfTime, { size: "3em", color: theme_1.palette.purplePrimary }) })) : null, displayUI?.duration > 0
                                        ? ((0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { style: styles.infoButton, children: (0, jsx_runtime_1.jsxs)(Text_1.default, { variant: "toDoButton", children: ["Duration - ", displayUI?.duration, " minutes"] }) })) : null] })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, flexDirection: "column", justifyContent: "flex-start", children: (0, jsx_runtime_1.jsxs)(react_3.Menu, { children: [(0, jsx_runtime_1.jsx)(react_3.MenuButton, { as: react_3.IconButton, "aria-label": 'Options', icon: (0, jsx_runtime_1.jsx)(ThreeDotsVertical, {}), variant: 'outline', isOpen: isTaskMenus[i], onClose: () => hideTaskMenu(i) }), (0, jsx_runtime_1.jsxs)(react_3.MenuList, { children: [displayUI?.important
                                            ? ((0, jsx_runtime_1.jsx)(react_3.MenuItem, { icon: (0, jsx_runtime_1.jsx)(icons_1.StarIcon, {}), onClick: async () => { hideTaskMenu(i); await updateImportantTask(i); }, children: "Remove Important" })) : ((0, jsx_runtime_1.jsx)(react_3.MenuItem, { icon: (0, jsx_runtime_1.jsx)(icons_1.StarIcon, {}), onClick: async () => { hideTaskMenu(i); await updateImportantTask(i); }, children: "Add Important" })), displayUI?.parentId
                                            ? ((0, jsx_runtime_1.jsx)(react_3.MenuItem, { onClick: async () => { hideTaskMenu(i); return removeParentFromTask(i); }, children: "Remove Parent" })) : ((0, jsx_runtime_1.jsx)(react_3.MenuItem, { onClick: async () => { hideTaskMenu(i); return addParentToTask(i); }, children: "Add Parent" })), (0, jsx_runtime_1.jsx)(react_3.MenuItem, { onClick: async () => { hideTaskMenu(i); await deleteTask(i); }, children: "Remove Task" })] })] }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, alignItems: "flex-end", children: (0, jsx_runtime_1.jsx)(fa_1.FaGripVertical, { size: "3em", color: theme_1.palette.lightGray }) })] }) }));
    };
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, children: [(0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, flexDirection: "row", justifyContent: "flex-end", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Box_1.default, { children: (0, jsx_runtime_1.jsxs)(react_3.Menu, { children: [(0, jsx_runtime_1.jsx)(react_3.MenuButton, { as: react_3.IconButton, "aria-label": 'Options', icon: (0, jsx_runtime_1.jsx)(ThreeDots, {}), variant: 'outline', isOpen: isMenu, onClose: hideMenu }), (0, jsx_runtime_1.jsxs)(react_3.MenuList, { children: [(0, jsx_runtime_1.jsx)(react_3.MenuItem, { onClick: () => { hideMenu(); changeToDailyTaskList(); }, children: "Daily" }), (0, jsx_runtime_1.jsx)(react_3.MenuItem, { onClick: () => { hideMenu(); changeToWeeklyTaskList(); }, children: "Weekly" }), (0, jsx_runtime_1.jsx)(react_3.MenuItem, { onClick: () => { hideMenu(); changeToMasterTaskList(); }, children: "Master" }), (0, jsx_runtime_1.jsx)(react_3.MenuItem, { onClick: () => { hideMenu(); changeToGroceryTaskList(); }, children: "Grocery" })] })] }) }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, flexDirection: "row", justifyContent: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "header", children: localTaskType }) }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 8, flexDirection: "column", justifyContent: "center", alignItems: "center", children: displayUIArray?.[0]
                    ? ((0, jsx_runtime_1.jsx)(react_beautiful_dnd_1.DragDropContext, { onDragEnd: onDragEnd, children: (0, jsx_runtime_1.jsx)(react_beautiful_dnd_1.Droppable, { droppableId: "droppable", children: (provided) => ((0, jsx_runtime_1.jsxs)("div", { ...provided.droppableProps, ref: provided.innerRef, children: [displayUIArray?.map((displayUI, index) => ((0, jsx_runtime_1.jsx)(react_beautiful_dnd_1.Draggable, { draggableId: displayUI.id, index: index, children: (provided, snapshot) => renderItem(displayUI, index, provided, snapshot) }, displayUI.id))), provided.placeholder] })) }) }))
                    : ((0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", minHeight: "60vh", children: (0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "backgroundText", children: "Add a Task" }) }) })) }), (0, jsx_runtime_1.jsx)(Zoom_1.default, { in: true, timeout: transitionDuration, style: {
                    transitionDelay: `${transitionDuration.exit}ms`,
                }, unmountOnExit: true, children: (0, jsx_runtime_1.jsx)(Fab_1.default, { sx: fabStyle, "aria-label": 'Add', color: "primary", onClick: addNewTask, children: (0, jsx_runtime_1.jsx)(Add_1.default, { sx: { color: colors_1.pink[500] } }) }) }), (0, jsx_runtime_1.jsxs)(Box_1.default, { children: [(0, jsx_runtime_1.jsx)(react_modal_1.default, { isOpen: isNewTask, onRequestClose: changeIsNewTask, style: customModalStyles, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "space-around", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(TextField_1.default, { numberOfLines: 3, multiline: true, style: styles?.taskOverlay, value: newTaskText, onChange: (e) => onNewTaskText(e?.target?.value) }), (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: createTaskNote, children: "Add" })] }) }), (0, jsx_runtime_1.jsx)(react_modal_1.default, { isOpen: isUpdateTask, onRequestClose: closeIsUpdateTask, style: customModalStyles, children: (0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "space-around", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(TextField_1.default, { numberOfLines: 3, multiline: true, style: styles?.taskOverlay, value: updateTaskText, onChange: (e) => setUpdateTaskText(e?.target?.value) }), (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: updateTaskNote, children: "Update" }), (0, jsx_runtime_1.jsx)("button", { className: "btn btn-link no-underline hover:no-underline", onClick: closeIsUpdateTask, children: "Close" })] }) })] })] }));
}
exports.default = UserTask;
//# sourceMappingURL=data:application/json;base64,