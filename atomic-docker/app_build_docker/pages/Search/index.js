"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Baseof_1 = __importDefault(require("@layouts/Baseof"));
const button_1 = require("@components/chat/ui/button");
const icons_1 = require("@components/chat/ui/icons");
const lanceDbStorageSkills_1 = require("../../../../src/skills/lanceDbStorageSkills"); // Adjust path
const DocTypeFilter_1 = __importDefault(require("@components/Search/DocTypeFilter"));
const DateRangeFilter_1 = __importDefault(require("@components/Search/DateRangeFilter"));
const MetadataFilter_1 = __importDefault(require("@components/Search/MetadataFilter"));
const SearchResultsDisplay_1 = __importDefault(require("@components/chat/custom/SearchResultsDisplay"));
const SearchPage = () => {
    const [userId] = (0, react_1.useState)("test-user-123"); // Placeholder
    const [searchTerm, setSearchTerm] = (0, react_1.useState)('');
    const [filters, setFilters] = (0, react_1.useState)({});
    const [results, setResults] = (0, react_1.useState)([]);
    const [isLoading, setIsLoading] = (0, react_1.useState)(false);
    const [error, setError] = (0, react_1.useState)(null);
    const handleSearch = (0, react_1.useCallback)(async () => {
        if (!searchTerm.trim()) {
            setError("Please enter a search term.");
            return;
        }
        setIsLoading(true);
        setError(null);
        setResults([]);
        try {
            const response = await (0, lanceDbStorageSkills_1.hybridSearch)(userId, searchTerm, {
                semanticLimit: 10,
                keywordLimit: 20,
                filters: filters,
            });
            if (response.ok && response.data) {
                setResults(response.data);
            }
            else {
                setError(response.error?.message || "An unknown error occurred during search.");
            }
        }
        catch (e) {
            setError(e.message || "An unexpected exception occurred.");
        }
        finally {
            setIsLoading(false);
        }
    }, [userId, searchTerm, filters]);
    const handleFilterChange = (update) => {
        setFilters(prev => ({ ...prev, ...update }));
    };
    return ((0, jsx_runtime_1.jsx)(Baseof_1.default, { title: "Advanced Search", children: (0, jsx_runtime_1.jsx)("div", { className: "container mx-auto p-4 md:p-6 lg:p-8", children: (0, jsx_runtime_1.jsxs)("div", { className: "max-w-4xl mx-auto", children: [(0, jsx_runtime_1.jsx)("h1", { className: "text-3xl font-bold mb-2 text-gray-800 dark:text-gray-100", children: "Advanced Search" }), (0, jsx_runtime_1.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-6", children: "Search and filter your entire knowledge base using keywords and specific criteria." }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2 mb-4", children: [(0, jsx_runtime_1.jsx)("input", { type: "text", value: searchTerm, onChange: (e) => setSearchTerm(e.target.value), onKeyDown: (e) => e.key === 'Enter' && handleSearch(), placeholder: "Search for keywords...", className: "flex-grow text-base p-2 rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 shadow-sm focus:border-sky-500 focus:ring-sky-500" }), (0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: handleSearch, disabled: isLoading, children: [(0, jsx_runtime_1.jsx)(icons_1.IconSearch, { className: "mr-2 h-4 w-4" }), isLoading ? 'Searching...' : 'Search'] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-4 mb-8", children: [(0, jsx_runtime_1.jsx)(DocTypeFilter_1.default, { selectedTypes: filters.doc_types || [], onChange: (doc_types) => handleFilterChange({ doc_types }) }), (0, jsx_runtime_1.jsx)(DateRangeFilter_1.default, { filters: filters, onChange: handleFilterChange }), (0, jsx_runtime_1.jsx)(MetadataFilter_1.default, { properties: filters.metadata_properties || {}, onChange: (metadata_properties) => handleFilterChange({ metadata_properties }) })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h2", { className: "text-2xl font-bold border-b pb-2 mb-4 dark:border-gray-600", children: "Results" }), error && (0, jsx_runtime_1.jsxs)("p", { className: "text-red-500", children: ["Error: ", error] }), isLoading && (0, jsx_runtime_1.jsx)("p", { children: "Loading results..." }), !isLoading && !error && ((0, jsx_runtime_1.jsx)(SearchResultsDisplay_1.default, { results: results }))] })] }) }) }));
};
exports.default = SearchPage;
//# sourceMappingURL=data:application/json;base64,