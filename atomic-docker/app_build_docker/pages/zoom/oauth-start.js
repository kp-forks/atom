"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const constants_1 = require("@lib/constants");
const react_1 = require("@chakra-ui/react");
const react_2 = require("react");
const router_1 = require("next/router");
const image_1 = __importDefault(require("next/image"));
const appStoreAndroid_png_1 = __importDefault(require("public/images/appStoreAndroid.png"));
const appStoreIos_png_1 = __importDefault(require("public/images/appStoreIos.png"));
const user_context_1 = require("@lib/user-context");
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("@config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
const ZoomIcon = (props) => ((0, jsx_runtime_1.jsxs)(react_1.Icon, { viewBox: "0 0 1329.08 1329.08", ...props, children: [(0, jsx_runtime_1.jsx)("path", { d: "M664.54 0c367.02 0 664.54 297.52 664.54 664.54s-297.52 664.54-664.54 664.54S0 1031.56 0 664.54 297.52 0 664.54 0z", fill: "#e5e5e4", fillRule: "nonzero" }), (0, jsx_runtime_1.jsx)("path", { className: "fil1", d: "M664.54 12.94c359.87 0 651.6 291.73 651.6 651.6s-291.73 651.6-651.6 651.6-651.6-291.73-651.6-651.6 291.74-651.6 651.6-651.6z" }), (0, jsx_runtime_1.jsx)("path", { d: "M664.54 65.21c331 0 599.33 268.33 599.33 599.33 0 331-268.33 599.33-599.33 599.33-331 0-599.33-268.33-599.33-599.33 0-331 268.33-599.33 599.33-599.33z", fill: "#4a8cff", fillRule: "nonzero" }), (0, jsx_runtime_1.jsx)("path", { className: "fil1", d: "M273.53 476.77v281.65c.25 63.69 52.27 114.95 115.71 114.69h410.55c11.67 0 21.06-9.39 21.06-20.81V570.65c-.25-63.69-52.27-114.95-115.7-114.69H294.6c-11.67 0-21.06 9.39-21.06 20.81zm573.45 109.87l169.5-123.82c14.72-12.18 26.13-9.14 26.13 12.94v377.56c0 25.12-13.96 22.08-26.13 12.94l-169.5-123.57V586.64z" })] }));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session?.getUserId(),
        }
    };
}
const ZoomWebStart = () => {
    const [url, setUrl] = (0, react_2.useState)('');
    const router = (0, router_1.useRouter)();
    const { sub } = (0, user_context_1.useAppContext)();
    const userId = sub;
    (0, react_2.useEffect)(() => {
        const makeLink = () => {
            const newUrl = new URL(constants_1.zoomAuthUrl);
            newUrl.searchParams.set('response_type', 'code');
            // dev only
            newUrl.searchParams.set('redirect_uri', process.env.NEXT_PUBLIC_ZOOM_REDIRECT_URL);
            // prod - ZOOM_REDIRECT_URI
            newUrl.searchParams.set('client_id', process.env.NEXT_PUBLIC_ZOOM_CLIENT_ID);
            newUrl.searchParams.set('state', userId);
            setUrl(newUrl.href);
        };
        makeLink();
    }, [userId]);
    const routeToZoomAuth = (e) => {
        e?.preventDefault();
        // https://zoom.us/oauth/authorize?response_type=code&client_id=OrxpodmORP2eDHug8x0jbQ&redirect_uri=https://oauth.atomiclife.app/api/integrations/zoomvideo/callback
        const newUrl = new URL(constants_1.zoomAuthUrl);
        newUrl.searchParams.set('response_type', 'code');
        // dev only
        newUrl.searchParams.set('redirect_uri', process.env.NEXT_PUBLIC_ZOOM_REDIRECT_URL);
        newUrl.searchParams.set('client_id', process.env.NEXT_PUBLIC_ZOOM_CLIENT_ID);
        newUrl.searchParams.set('state', userId);
        window.location.href = newUrl.href;
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col justify-center items-center h-screen w-full dark:bg-black", style: { minHeight: '70vh' }, children: [(0, jsx_runtime_1.jsx)("a", { href: url, onClick: routeToZoomAuth, children: (0, jsx_runtime_1.jsx)(react_1.Button, { leftIcon: (0, jsx_runtime_1.jsx)(ZoomIcon, {}), colorScheme: 'messenger', bg: "purple.700", variant: 'solid', children: (0, jsx_runtime_1.jsx)("span", { className: "text-black", children: "Start Zoom OAuth" }) }) }), (0, jsx_runtime_1.jsx)("p", { className: "mt-1.5 text-sm text-gray-500", children: "Zoom authentication via Web is not tested yet. You can use mobile if this doesn't work. ðŸ˜Š " }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between mt-3", children: [(0, jsx_runtime_1.jsx)("a", { href: "https://apps.apple.com/us/app/atomic-life/id1594368125", className: "pr-2", children: (0, jsx_runtime_1.jsx)(image_1.default, { width: 177, src: appStoreIos_png_1.default, alt: "App Store" }) }), (0, jsx_runtime_1.jsx)("a", { href: "https://play.google.com/store/apps/details?id=com.atomiclifenoexpo", className: "pl-2", children: (0, jsx_runtime_1.jsx)(image_1.default, { width: 177, src: appStoreAndroid_png_1.default, alt: "App Store" }) })] })] }));
};
exports.default = ZoomWebStart;
//# sourceMappingURL=data:application/json;base64,