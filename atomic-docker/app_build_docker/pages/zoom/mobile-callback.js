"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("@chakra-ui/react");
const react_2 = require("react");
const constants_1 = require("@lib/constants");
const api_backend_helper_1 = require("@lib/api-backend-helper");
async function getServerSideProps({ req, res }) {
    const thisUrl = new URL(req.url, `https://${req.headers.host}`);
    if (thisUrl.searchParams.get('code')) {
        const urlParam = thisUrl.searchParams.get('code');
        console.log(urlParam, ' code');
        const state = thisUrl.searchParams.get('state');
        console.log(state, ' state');
        const userId = state;
        // console.log(process.env.ZOOM_CLIENT_ID, ' clientId')
        // console.log(process.env.ZOOM_CLIENT_SECRET, ' clientSecret')
        const data = process.env.ZOOM_CLIENT_ID + ':' + process.env.ZOOM_CLIENT_SECRET;
        const newData = Buffer.from(data, 'utf8');
        const b64string = newData.toString('base64');
        // console.log(b64string, ' b64string')
        const zoomUrl = new URL('https://zoom.us/oauth/token');
        zoomUrl.searchParams.set('grant_type', 'authorization_code');
        zoomUrl.searchParams.set('code', urlParam);
        // dev only
        zoomUrl.searchParams.set('redirect_uri', process.env.NEXT_PUBLIC_ZOOM_REDIRECT_URL);
        // zoomUrl.searchParams.set('state', state)
        try {
            const options = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Basic ' + b64string
                }
            };
            const response = await fetch(zoomUrl.href, options);
            const zoomAuthTokens = await response.json();
            // console.log(zoomAuthTokens, ' zoomAuthTokens')
            const newOptions = {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + zoomAuthTokens.access_token
                }
            };
            const preUser = await fetch('https://api.zoom.us/v2/users/me', newOptions);
            const zoomUser = await preUser.json();
            console.log(zoomUser, ' zoomUser');
            if (zoomAuthTokens.access_token && userId) {
                const zoomIntegration = await (0, api_backend_helper_1.getMinimalCalendarIntegrationByResource)(userId, constants_1.zoomResourceName);
                if (!zoomIntegration?.id) {
                    throw new Error('zoom integration not found');
                }
                await (0, api_backend_helper_1.updateZoomIntegration)(zoomIntegration?.id, zoomUser?.account_id, zoomUser?.email, zoomUser?.id, zoomAuthTokens?.access_token, zoomAuthTokens?.expires_in, zoomAuthTokens?.refresh_token, zoomUser?.first_name, zoomUser?.last_name, zoomUser?.phone_country, zoomUser?.phone_number, true);
                return {
                    props: { zoomUser, userId }
                };
            }
        }
        catch (e) {
            console.log(e, ' unable to get response');
        }
    }
    return {
        props: {},
    };
}
const ZoomWebCallback = ({ zoomUser, userId }) => {
    // const [url, setUrl] = useState('')
    const [isValid, setIsValid] = (0, react_2.useState)(true);
    // const router = useRouter()
    const toast = (0, react_1.useToast)();
    (0, react_2.useEffect)(() => {
        if (!zoomUser?.id || !userId) {
            toast({
                title: 'Missing info',
                description: "Somehting went wrong with the Auth process. Let us know or try again.",
                status: 'error',
                duration: 9000,
                isClosable: true,
            });
            setIsValid(false);
            return;
        }
    }, [toast, userId, zoomUser?.id]);
    return ((0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col justify-center items-center h-screen w-full", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col justify-center items-center text-center sm:text-left lg:my-12 sm:my-8 w-full", children: [(0, jsx_runtime_1.jsx)("h1", { className: "text-xl font-bold text-gray-900 dark:text-gray-100  sm:text-2xl", children: "Success!" }), (0, jsx_runtime_1.jsx)("p", { className: "mt-1.5 text-sm text-gray-500 dark:text-gray-100", children: "Zoom Successfully Authenticated ðŸŽ‰!" }), (0, jsx_runtime_1.jsx)("p", { className: "mt-1.5 text-sm text-gray-500 dark:text-gray-100", children: "You can close this tab and refresh https://app.atomiclife.app to get updated view" }), !isValid
                        ? ((0, jsx_runtime_1.jsx)("p", { className: "mt-1.5 text-sm text-red-500", children: "Something went wrong with the sync " })) : null] }), (0, jsx_runtime_1.jsx)(react_1.Spinner, { color: 'pink.500' })] }));
};
exports.default = ZoomWebCallback;
//# sourceMappingURL=data:application/json;base64,