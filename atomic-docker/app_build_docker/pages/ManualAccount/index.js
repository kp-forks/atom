"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const SideBarWithHeader_1 = __importDefault(require("../../layouts/SideBarWithHeader"));
const user_context_1 = require("../../lib/user-context");
const userRoleContext_1 = require("../../contexts/userRole/userRoleContext");
const material_1 = require("@mui/material");
const ManualAccount = () => {
    const { user } = (0, user_context_1.useUser)();
    const { hasRole } = (0, userRoleContext_1.useUserRole)();
    const [manualAccounts, setManualAccounts] = (0, react_1.useState)([]);
    const [accountName, setAccountName] = (0, react_1.useState)('');
    const [accountBalance, setAccountBalance] = (0, react_1.useState)('');
    const [transactionDescription, setTransactionDescription] = (0, react_1.useState)('');
    const [transactionAmount, setTransactionAmount] = (0, react_1.useState)('');
    const [selectedAccountId, setSelectedAccountId] = (0, react_1.useState)('');
    (0, react_1.useEffect)(() => {
        const getManualAccounts = async () => {
            const response = await fetch(`/api/financial/manual_accounts?user_id=${user.id}`);
            const { data } = await response.json();
            setManualAccounts(data);
        };
        if (user && hasRole('finance')) {
            getManualAccounts();
        }
    }, [user, hasRole]);
    const handleCreateManualAccount = async () => {
        await fetch('/api/financial/manual_accounts', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                user_id: user.id,
                name: accountName,
                balance: accountBalance,
            }),
        });
        // Refresh the list of manual accounts
        const response = await fetch(`/api/financial/manual_accounts?user_id=${user.id}`);
        const { data } = await response.json();
        setManualAccounts(data);
    };
    const handleCreateManualTransaction = async () => {
        await fetch('/api/financial/manual_transactions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                user_id: user.id,
                account_id: selectedAccountId,
                description: transactionDescription,
                amount: transactionAmount,
            }),
        });
        // You might want to refresh the transactions for the selected account here
    };
    if (!hasRole('finance')) {
        return (0, jsx_runtime_1.jsx)("div", { children: "You do not have permission to view this page." });
    }
    return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h1", { children: "Manual Accounts" }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(material_1.TextField, { label: "Account Name", value: accountName, onChange: (e) => setAccountName(e.target.value) }), (0, jsx_runtime_1.jsx)(material_1.TextField, { label: "Account Balance", value: accountBalance, onChange: (e) => setAccountBalance(e.target.value) }), (0, jsx_runtime_1.jsx)(material_1.Button, { variant: "contained", onClick: handleCreateManualAccount, children: "Create Manual Account" })] }), (0, jsx_runtime_1.jsx)("ul", { children: manualAccounts.map((account) => ((0, jsx_runtime_1.jsxs)("li", { children: [account.name, ": $", account.balance, (0, jsx_runtime_1.jsx)(material_1.Button, { onClick: () => setSelectedAccountId(account.id), children: "Add Transaction" })] }, account.id))) }), selectedAccountId && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h2", { children: "Add Transaction" }), (0, jsx_runtime_1.jsx)(material_1.TextField, { label: "Description", value: transactionDescription, onChange: (e) => setTransactionDescription(e.target.value) }), (0, jsx_runtime_1.jsx)(material_1.TextField, { label: "Amount", value: transactionAmount, onChange: (e) => setTransactionAmount(e.target.value) }), (0, jsx_runtime_1.jsx)(material_1.Button, { variant: "contained", onClick: handleCreateManualTransaction, children: "Add Transaction" })] }))] }));
};
exports.default = (0, SideBarWithHeader_1.default)(ManualAccount);
//# sourceMappingURL=data:application/json;base64,