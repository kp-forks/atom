"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_native_1 = require("react-native");
// import DateTimePicker from 'react-datetime-picker/dist/entry.nostyle'
const react_2 = require("@chakra-ui/react");
const Wizard_1 = __importDefault(require("@components/Wizard"));
const TextField_1 = __importDefault(require("@components/TextField"));
const uuid_1 = require("uuid");
const date_utils_1 = require("@lib/date-utils");
const react_3 = require("@chakra-ui/react");
const io_1 = require("react-icons/io");
const ReminderHelper_1 = require("@lib/Calendar/Reminder/ReminderHelper");
const picker_1 = require("@react-native-picker/picker");
const lodash_1 = __importDefault(require("lodash"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const Button_1 = __importDefault(require("@components/Button"));
const theme_1 = require("@lib/theme/theme");
const CategoryHelper_1 = require("@lib/Category/CategoryHelper");
const UserCreateCalendarHelper_1 = require("@lib/Calendar/UserCreateCalendarHelper");
const UserTaskHelper2_1 = require("@lib/Progress/Todo/UserTaskHelper2");
const ScheduleHelper_1 = require("@lib/Schedule/ScheduleHelper");
const calendarDbHelper_1 = require("@lib/calendarLib/calendarDbHelper");
const user_context_1 = require("@lib/user-context");
const router_1 = require("next/router");
const UserTaskHelper3_1 = require("@lib/Progress/Todo/UserTaskHelper3");
const styles = {
    inputField: {
        fontSize: '21px',
        lineHeight: '28px',
        color: '#221D23',
        borderColor: theme_1.palette.textBlack,
        borderWidth: 1,
        width: '100%',
        height: 40,
    },
};
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("@config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function UserTaskEvent() {
    const router = (0, router_1.useRouter)();
    const { sub, client } = (0, user_context_1.useAppContext)();
    const taskType = router.query?.taskType;
    const taskId = router.query?.taskId;
    const isUpdate = router.query?.isUpdate;
    const [activeIndex, setActiveIndex] = (0, react_1.useState)(0);
    const [completedStep, setCompletedStep] = (0, react_1.useState)();
    const [startDate, setStartDate] = (0, react_1.useState)((0, date_utils_1.dayjs)().toDate());
    const [duration, setDuration] = (0, react_1.useState)(30);
    const [tags, setTags] = (0, react_1.useState)([]);
    const [alarms, setAlarms] = (0, react_1.useState)([]);
    const [calendar, setCalendar] = (0, react_1.useState)();
    const [alarm, setAlarm] = (0, react_1.useState)(0);
    const [selectedTag, setSelectedTag] = (0, react_1.useState)('');
    const [selectedTagObject, setSelectedTagObject] = (0, react_1.useState)(null);
    const [selectedTags, setSelectedTags] = (0, react_1.useState)([]);
    const [task, setTask] = (0, react_1.useState)();
    // const dark = useColorScheme() === 'dark'
    const userId = sub;
    const toast = (0, react_3.useToast)();
    // get task
    (0, react_1.useEffect)(() => {
        (async () => {
            try {
                if (!taskId || !client) {
                    return;
                }
                const oldTask = await (0, UserTaskHelper3_1.getTaskGivenId)(client, taskId);
                setTask(oldTask);
            }
            catch (e) {
                console.log(e, ' unable to get task by id');
            }
        })();
    }, [client, taskId]);
    (0, react_1.useEffect)(() => {
        (async () => {
            try {
                if (!userId || !client) {
                    return;
                }
                const results = await (0, CategoryHelper_1.listUserCategories)(client, userId);
                if (!results?.[0]?.id) {
                    console.log(' no categories available');
                    return;
                }
                setTags(results);
            }
            catch (e) {
                console.log(e, ' unable to get categories');
            }
        })();
    }, [client, userId]);
    (0, react_1.useEffect)(() => {
        (async () => {
            if (!task || !client) {
                return;
            }
            if (task?.id) {
                const results = await (0, ReminderHelper_1.listRemindersForEvent)(client, task?.eventId);
                if (!results?.[0]?.id) {
                    console.log(' no alarms available');
                    return;
                }
                setAlarms(results?.map(r => r.minutes));
            }
        })();
    }, [client, task, task?.eventId, task?.id]);
    (0, react_1.useEffect)(() => {
        (async () => {
            if (!userId || !client) {
                return;
            }
            const result = await (0, ScheduleHelper_1.getGlobalPrimaryCalendarFunction)(client, userId);
            if (!result?.id) {
                console.log(' no primary calendar available');
                return;
            }
            setCalendar(result);
        })();
    }, [client, userId]);
    (0, react_1.useEffect)(() => {
        (async () => {
            if (!task || !client) {
                return;
            }
            if (task?.id) {
                const event = await (0, calendarDbHelper_1.getEventWithId)(client, task?.eventId);
                if (!event?.id) {
                    console.log(' no event available');
                    return;
                }
                setStartDate((0, date_utils_1.dayjs)(event.startDate).toDate());
                setDuration(event.duration || (0, date_utils_1.dayjs)(event.endDate).diff((0, date_utils_1.dayjs)(event.startDate), 'minutes'));
                const newSelectedTags = await (0, CategoryHelper_1.listCategoriesForEvent)(client, event.id);
                if (newSelectedTags?.[0]?.id) {
                    setSelectedTags(newSelectedTags);
                }
                const newAlarms = await (0, ReminderHelper_1.listRemindersForEvent)(client, event.id);
                if (newAlarms?.[0]?.id) {
                    setAlarms(newAlarms?.map(r => r.minutes));
                }
            }
        })();
    }, [client, task, task?.eventId, task?.id]);
    const updateTaskInDb = async (eventId) => {
        try {
            if (!taskId) {
                return;
            }
            const toUpdateTask = lodash_1.default.cloneDeep(task);
            // validate
            if (!toUpdateTask) {
                console.log('no toUpdateTask provided inside updateTaskinDb');
                return;
            }
            if (eventId !== undefined) {
                toUpdateTask.eventId = eventId;
            }
            await (0, UserTaskHelper3_1.updateTaskByIdInDb)(client, toUpdateTask);
            setTask(toUpdateTask);
        }
        catch (e) {
            console.log(e, ' unable to update task in db');
        }
    };
    const onReceiveCreateEvent = async () => {
        try {
            if (!task?.id) {
                console.log('no taskId present inside onReceiveCreateTaskScheduleInfo');
                return;
            }
            const eventId = await (0, UserCreateCalendarHelper_1.createNewEvent)((0, date_utils_1.dayjs)(startDate).format(), (0, date_utils_1.dayjs)(startDate).add(duration, 'minute').format(), userId, client, calendar?.id, selectedTags.map(t => t.id), task.notes, false, undefined, undefined, undefined, alarms, task.notes, undefined, false, false, false, true, false, false, false, false, date_utils_1.dayjs.tz.guess(), task.id, taskType, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, task.notes, 'opaque', 'private', undefined, undefined, undefined, calendar?.colorId, undefined, selectedTags?.[0]?.color || calendar.backgroundColor, calendar.foregroundColor, alarms.length === 0, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, taskType === 'Daily', taskType === 'Weekly', false, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, true, undefined, true, true, true, undefined, undefined, undefined, undefined, undefined, undefined, duration, undefined, true, 'update', undefined, undefined, undefined);
            if (eventId) {
                await updateTaskInDb(eventId);
            }
            toast({
                status: 'success',
                title: 'Task Event Created',
                description: 'Task event created successfully',
                duration: 9000,
                isClosable: true,
            });
            router.push({ pathname: '/Progress/Todo/UserTask', query: {
                    taskType,
                    isUpdate: (0, uuid_1.v4)(),
                } });
        }
        catch (e) {
            console.log(e, ' unable to create task event');
            toast({
                status: 'error',
                title: 'No event created',
                description: 'We are not able to create the event for task due to an internal error.',
                duration: 9000,
                isClosable: true,
            });
            router.push({ pathname: '/Progress/Todo/UserTask', query: {
                    taskType,
                    isUpdate: undefined,
                } });
        }
    };
    const onReceiveUpdateEvent = async () => {
        try {
            console.log(task, ' task inside onReceiveUpdateEvent');
            if (!task?.id) {
                console.log('no taskId present inside onReceiveUpdateEvent');
                return;
            }
            const oldEvent = await (0, calendarDbHelper_1.getEventWithId)(client, task.eventId);
            if (!oldEvent) {
                console.log('no oldEvent present inside onReceiveUpdateTaskScheduleInfo');
                return;
            }
            console.log(selectedTags, ' selectedTags inside onReceiveUpdateEvent');
            await (0, UserTaskHelper2_1.editEventForTask)(task?.eventId, (0, date_utils_1.dayjs)(startDate).format(), (0, date_utils_1.dayjs)(startDate).add(duration, 'minute').format(), userId, client, calendar?.id, selectedTags.map(t => t.id), task.notes, false, undefined, undefined, undefined, alarms, task.notes, undefined, false, false, false, true, false, false, false, false, date_utils_1.dayjs.tz.guess(), task.id, taskType, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, task.notes, 'opaque', 'private', undefined, undefined, undefined, calendar?.colorId, undefined, selectedTags?.[0]?.color || oldEvent?.backgroundColor || calendar?.backgroundColor, calendar.foregroundColor, alarms.length === 0, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, taskType === 'Daily', taskType === 'Weekly', false, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, true, undefined, true, true, true, undefined, undefined, undefined, undefined, undefined, undefined, duration, undefined, true, 'update', undefined, undefined, undefined);
            if (oldEvent?.id) {
                await updateTaskInDb(oldEvent?.id);
            }
            router.push({ pathname: '/Progress/Todo/UserTask', query: {
                    taskType,
                    isUpdate: (0, uuid_1.v4)(),
                } });
        }
        catch (e) {
            console.log(e, ' unable to update deadline');
            toast({
                status: 'error',
                title: 'Unable to update',
                description: 'Unable to update deadline due to an internal error',
                duration: 9000,
                isClosable: true,
            });
            router.push({ pathname: '/Progress/Todo/UserTask', query: {
                    taskType,
                    isUpdate: undefined,
                } });
        }
    };
    const onActiveIndexChanged = (index) => setActiveIndex(index);
    const goToPrevStep = () => {
        const prevActiveIndex = activeIndex;
        const newActiveIndex = prevActiveIndex === 0 ? 0 : prevActiveIndex - 1;
        setActiveIndex(newActiveIndex);
    };
    const renderPrevButton = () => {
        if (activeIndex === 0) {
            return (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' } });
        }
        return ((0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: goToPrevStep, children: "Back" }) }));
    };
    const goToNextStep = () => {
        const prevActiveIndex = activeIndex;
        const prevCompletedStep = completedStep;
        if (prevActiveIndex === 3) {
            return;
        }
        const newActiveIndex = prevActiveIndex + 1;
        if (!prevCompletedStep || (prevCompletedStep < prevActiveIndex)) {
            const newCompletedStep = prevActiveIndex;
            setCompletedStep(newCompletedStep);
        }
        if (newActiveIndex !== prevActiveIndex) {
            setActiveIndex(newActiveIndex);
        }
    };
    const renderNextButton = () => {
        return ((0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: goToNextStep, children: "Next" }) }));
    };
    const addAlarm = () => {
        const newAlarms = lodash_1.default.uniqWith(alarms.concat([alarm]), lodash_1.default.isEqual);
        setAlarms(newAlarms);
        setAlarm(0);
    };
    const removeAlarm = (index) => {
        const newAlarms = alarms.slice(0, index)
            .concat(alarms.slice(index + 1));
        setAlarms(newAlarms);
    };
    const changeSelectedTag = (value) => {
        setSelectedTag(value);
        setSelectedTagObject(tags.find(tag => tag.name === value));
    };
    const addTagToTags = () => {
        const newCategories = lodash_1.default.uniqWith(selectedTags.concat([selectedTagObject]), lodash_1.default.isEqual);
        setSelectedTags(newCategories);
        setSelectedTag('');
        setSelectedTagObject(undefined);
    };
    const removeTagFromTags = (index) => {
        const newCategories = selectedTags.slice(0, index)
            .concat(selectedTags.slice(index + 1));
        setSelectedTags(newCategories);
    };
    const onSubmitPress = () => {
        try {
            return isUpdate
                ? onReceiveUpdateEvent()
                : onReceiveCreateEvent();
        }
        catch (e) {
            console.log(e, ' unable to submit press inside UserTaskEvent');
        }
    };
    const renderCurrentStep = () => {
        switch (activeIndex) {
            case 0:
                return ((0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col justiy-center items-center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { textAlign: "center", variant: "subheader", pt: { phone: 'm', tablet: 's' }, children: "Add a task period" }), (0, jsx_runtime_1.jsx)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", minHeight: "60vh", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col justify-center items-start", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Select a start date for task" }), (0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Select Date and Time", size: "md", type: "datetime-local", onChange: (e) => setStartDate((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").toDate()), value: (0, date_utils_1.dayjs)(startDate).format("YYYY-MM-DDTHH:mm") })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Duration (minutes)", type: "number", onChange: (e) => setDuration(parseInt(e?.target?.value.replace(/[^0-9.]/g, ''), 10)), value: `${duration}`, placeholder: "1", style: { ...(styles?.inputField) } }) })] }) }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", width: "100%", children: [(0, jsx_runtime_1.jsx)(Box_1.default, {}), renderNextButton()] })] }));
            case 1:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subheader", children: "Reminders" }) }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", minHeight: "60vh", children: [(0, jsx_runtime_1.jsx)(react_native_1.FlatList, { data: alarms, renderItem: ({ item, index }) => ((0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-around", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: `${item} minutes before` }), (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { hitSlop: 15, onPress: () => removeAlarm(index), children: (0, jsx_runtime_1.jsx)(io_1.IoIosClose, { size: "3em", color: theme_1.palette.red }) })] })), keyExtractor: (item, index) => `${item}-${index}` }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "center", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(TextField_1.default, { type: "number", onChange: (e) => setAlarm(parseInt(e?.target?.value.replace(/[^0-9.]/g, ''), 10)), value: `${alarm}`, placeholder: "0" }), (0, jsx_runtime_1.jsx)("span", { className: "ml-3", children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: addAlarm, children: "Add" }) })] })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", children: [renderPrevButton(), renderNextButton()] })] }));
            case 2:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { m: { phone: 's', tablet: 'm' }, justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subheader", children: "Add tags to this event" }) }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "center", alignItems: "center", minHeight: "60vh", children: [(0, jsx_runtime_1.jsx)(react_native_1.FlatList, { data: selectedTags, renderItem: ({ item, index }) => ((0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: item.name }), (0, jsx_runtime_1.jsx)(react_native_1.Pressable, { hitSlop: 15, onPress: () => removeTagFromTags(index), children: (0, jsx_runtime_1.jsx)(io_1.IoIosClose, { size: "3em", color: theme_1.palette.red }) })] })), keyExtractor: (item) => item.id }), (0, jsx_runtime_1.jsxs)("div", { className: "flex", children: [(0, jsx_runtime_1.jsx)(Box_1.default, { justifyContent: "center", alignItems: "flex-start", children: (0, jsx_runtime_1.jsx)(picker_1.Picker, { selectedValue: selectedTag, onValueChange: changeSelectedTag, style: { color: theme_1.palette.textBlack }, children: tags.map((category) => ((0, jsx_runtime_1.jsx)(picker_1.Picker.Item, { color: theme_1.palette.textBlack, value: category.name, label: category.name }, category.id))) }) }), (0, jsx_runtime_1.jsx)("div", { className: "m-3", children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: addTagToTags, children: "Add" }) })] })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", justifyContent: "space-between", width: "100%", children: [renderPrevButton(), renderNextButton()] })] }));
            case 3:
                return ((0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col justify-between items-center", children: [(0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, justifyContent: "space-around", alignItems: "center", minHeight: "60vh", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subheader", pt: { phone: 'm', tablet: 's' }, children: isUpdate ? "Update the event?" : "Create the event?" }), (0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 's', tablet: 'm' }, children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: onSubmitPress, children: isUpdate ? "Update Event" : "Create Event" }) })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "flex-start", width: "100%", children: renderPrevButton() })] }));
        }
    };
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, children: [(0, jsx_runtime_1.jsx)(Wizard_1.default, { items: [
                    {
                        index: 0,
                        label: 'Add a Period',
                    },
                    {
                        index: 1,
                        label: 'Add Event Alarms',
                    },
                    {
                        index: 2,
                        label: 'Add Tags',
                    },
                    {
                        index: 3,
                        label: isUpdate ? "Update the event?" : "Create the event?",
                    },
                ], completed: completedStep, activeIndex: activeIndex }), renderCurrentStep()] }));
}
exports.default = UserTaskEvent;
//# sourceMappingURL=data:application/json;base64,