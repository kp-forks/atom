"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerSideProps = getServerSideProps;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_native_1 = require("react-native");
const react_2 = require("@chakra-ui/react");
const Wizard_1 = __importDefault(require("@components/Wizard"));
const uuid_1 = require("uuid");
const date_utils_1 = require("@lib/date-utils");
const react_3 = require("@chakra-ui/react");
const TextField_1 = __importDefault(require("@components/TextField"));
const picker_1 = require("@react-native-picker/picker");
const lodash_1 = __importDefault(require("lodash"));
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const RegularCard_1 = __importDefault(require("@components/RegularCard"));
const Button_1 = __importDefault(require("@components/Button"));
const theme_1 = require("@lib/theme/theme");
const UserCreateCalendarHelper_1 = require("@lib/Calendar/UserCreateCalendarHelper");
const UserTaskHelper2_1 = require("@lib/Progress/Todo/UserTaskHelper2");
const calendarDbHelper_1 = require("@lib/calendarLib/calendarDbHelper");
const getGlobalPrimaryCalendar_1 = __importDefault(require("@lib/apollo/gql/getGlobalPrimaryCalendar"));
const user_context_1 = require("@lib/user-context");
const router_1 = require("next/router");
const constants_1 = require("@lib/Schedule/constants");
const UserTaskHelper3_1 = require("@lib/Progress/Todo/UserTaskHelper3");
const styles = {
    day: {
        borderRadius: 50,
        justifyContent: 'center',
        alignItems: 'center',
        height: 50,
        width: 50,
    },
    frequency: {
        borderRadius: 50,
        justifyContent: 'center',
        alignItems: 'center',
        height: 50,
        width: 50,
    },
    inputField: {
        fontSize: '21px',
        lineHeight: '28px',
        borderWidth: 1,
        width: '100%',
        height: 40,
    },
};
const DayObject = {
    'MO': constants_1.Day.MO,
    'TU': constants_1.Day.TU,
    'WE': constants_1.Day.WE,
    'TH': constants_1.Day.TH,
    'FR': constants_1.Day.FR,
    'SA': constants_1.Day.SA,
    'SU': constants_1.Day.SU,
};
const getDay = (value) => {
    switch (value) {
        case constants_1.Day.MO:
            return 'MO';
        case constants_1.Day.TU:
            return 'TU';
        case constants_1.Day.WE:
            return 'WE';
        case constants_1.Day.TH:
            return 'TH';
        case constants_1.Day.FR:
            return 'FR';
        case constants_1.Day.SA:
            return 'SA';
        case constants_1.Day.SU:
            return 'SU';
        default:
            return undefined;
    }
};
const supertokens_node_1 = __importDefault(require("supertokens-node"));
const backendConfig_1 = require("@config/backendConfig");
const session_1 = __importDefault(require("supertokens-node/recipe/session"));
async function getServerSideProps({ req, res }) {
    // Notice how the server uses `API` from `withSSRContext`, instead of the top-level `API`.
    // const SSR = withSSRContext({ req })
    // this runs on the backend, so we must call init on supertokens-node SDK
    supertokens_node_1.default.init((0, backendConfig_1.backendConfig)());
    let session;
    try {
        session = await session_1.default.getSession(req, res, {
            overrideGlobalClaimValidators: async function () {
                return [];
            },
        });
    }
    catch (err) {
        if (err.type === session_1.default.Error.TRY_REFRESH_TOKEN) {
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        else if (err.type === session_1.default.Error.UNAUTHORISED) {
            // this will force the frontend to try and refresh which will fail
            // clearing all cookies and redirecting the user to the login screen.
            return { props: { fromSupertokens: 'needs-refresh' } };
        }
        throw err;
    }
    if (!session?.getUserId()) {
        return {
            redirect: {
                destination: '/User/Login/UserLogin',
                permanent: false,
            },
        };
    }
    return {
        props: {
            sub: session.getUserId(),
        }
    };
}
function UserTaskSchedule() {
    const router = (0, router_1.useRouter)();
    const { sub, client } = (0, user_context_1.useAppContext)();
    const taskType = router.query?.taskType;
    const taskId = router.query?.taskId;
    const isUpdate = router.query?.isUpdate;
    const userId = sub;
    const [days, setDays] = (0, react_1.useState)([]);
    const [byWeekDay, setByWeekDay] = (0, react_1.useState)([]);
    const [MO, setMO] = (0, react_1.useState)(false);
    const [TU, setTU] = (0, react_1.useState)(false);
    const [WE, setWE] = (0, react_1.useState)(false);
    const [TH, setTH] = (0, react_1.useState)(false);
    const [FR, setFR] = (0, react_1.useState)(false);
    const [SA, setSA] = (0, react_1.useState)(false);
    const [SU, setSU] = (0, react_1.useState)(false);
    const [startDate, setStartDate] = (0, react_1.useState)(new Date());
    const [duration, setDuration] = (0, react_1.useState)(30);
    const [calendar, setCalendar] = (0, react_1.useState)();
    const [activeIndex, setActiveIndex] = (0, react_1.useState)(0);
    const [completedStep, setCompletedStep] = (0, react_1.useState)();
    const [recurringEndDate, setRecurringEndDate] = (0, react_1.useState)((0, date_utils_1.dayjs)().add(1, 'd').toDate());
    const [eventInterval, setEventInterval] = (0, react_1.useState)(1);
    const [eventFrequency, setEventFrequency] = (0, react_1.useState)('weekly');
    const [task, setTask] = (0, react_1.useState)();
    const toast = (0, react_3.useToast)();
    (0, react_1.useEffect)(() => {
        (async () => {
            try {
                if (!taskId || !client) {
                    return;
                }
                const oldTask = await (0, UserTaskHelper3_1.getTaskGivenId)(client, taskId);
                setTask(oldTask);
            }
            catch (e) {
                console.log(e, ' unable to get task by id');
            }
        })();
    }, [client, taskId]);
    (0, react_1.useEffect)(() => {
        (async () => {
            if (!userId || !client) {
                return;
            }
            const result = (await client.query({
                query: getGlobalPrimaryCalendar_1.default,
                variables: {
                    userId,
                },
            })).data?.Calendar?.[0];
            if (!result?.id) {
                console.log(' no primary calendar available');
                return;
            }
            setCalendar(result);
        })();
    }, [client, userId]);
    (0, react_1.useEffect)(() => {
        (async () => {
            if (!task || !client) {
                return;
            }
            if (task?.id) {
                const event = await (0, calendarDbHelper_1.getEventWithId)(client, task?.eventId);
                if (!event?.id) {
                    console.log(' no event available');
                    return;
                }
                setStartDate((0, date_utils_1.dayjs)(event.startDate).toDate() || new Date());
                setDuration(event?.duration || (0, date_utils_1.dayjs)(event.endDate).diff((0, date_utils_1.dayjs)(event.startDate), 'm') || 0);
                setByWeekDay(event?.byWeekDay || []);
                setDays((event?.byWeekDay?.map((i) => DayObject[i])) || []);
                setMO(event?.byWeekDay?.includes('MO') || false);
                setTU(event?.byWeekDay?.includes('TU') || false);
                setWE(event?.byWeekDay?.includes('WE') || false);
                setTH(event?.byWeekDay?.includes('TH') || false);
                setFR(event?.byWeekDay?.includes('FR') || false);
                setSA(event?.byWeekDay?.includes('SA') || false);
                setSU(event?.byWeekDay?.includes('SU') || false);
                setRecurringEndDate((0, date_utils_1.dayjs)(event?.recurrenceRule?.endDate).toDate() || new Date());
                setEventFrequency(event?.recurrenceRule?.frequency || 'weekly');
                setEventInterval(event?.recurrenceRule?.interval || 1);
            }
        })();
    }, [client, task, task?.id]);
    const updateTaskInDb = async (eventId) => {
        try {
            if (!taskId) {
                return;
            }
            const toUpdateTask = lodash_1.default.cloneDeep(task);
            if (!toUpdateTask) {
                console.log('no toUpdateTask provided inside updateTaskinDb');
                return;
            }
            if (eventId !== undefined) {
                toUpdateTask.eventId = `${eventId}#${calendar?.id}`;
            }
            await (0, UserTaskHelper3_1.updateTaskByIdInDb)(client, toUpdateTask);
            setTask(toUpdateTask);
        }
        catch (e) {
            console.log(e, ' updateDailyTaskToStore error');
        }
    };
    const onReceiveUpdateTaskScheduleInfo = async () => {
        try {
            if (!task?.id) {
                console.log(' task not available');
                return;
            }
            const oldEvent = await (0, calendarDbHelper_1.getEventWithId)(client, task.eventId);
            if (!oldEvent) {
                console.log(' oldEvent not found');
                return;
            }
            await (0, UserTaskHelper2_1.editEventForTask)(task?.eventId, (0, date_utils_1.dayjs)(startDate).format(), (0, date_utils_1.dayjs)(startDate).add(duration, 'minute').format(), userId, client, calendar?.id, undefined, oldEvent.title, false, (0, date_utils_1.dayjs)(recurringEndDate).format(), eventFrequency, eventInterval, undefined, undefined, undefined, undefined, undefined, undefined, true, false, false, false, false, oldEvent?.timezone || date_utils_1.dayjs.tz.guess(), taskId, taskType, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, 'opaque', 'private', oldEvent?.id, undefined, undefined, undefined, oldEvent?.timezone || date_utils_1.dayjs.tz.guess(), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, taskType === 'Daily', taskType === 'Weekly', false, undefined, undefined, undefined, undefined, undefined, true, undefined, true, true, true, undefined, true, undefined, undefined, true, undefined, true, true, true, undefined, undefined, undefined, undefined, undefined, undefined, duration, true, true, 'update', undefined, byWeekDay?.map(i => (DayObject[i])), undefined);
            await updateTaskInDb(oldEvent.id);
            router.push({ pathname: '/Progress/Todo/UserTask', query: {
                    taskType,
                    isUpdate: (0, uuid_1.v4)(),
                } });
        }
        catch (e) {
            toast({
                status: 'error',
                title: 'Unable to update',
                description: 'Unable to update schedule due to an internal error',
                duration: 9000,
                isClosable: true,
            });
            router.push({ pathname: '/Progress/Todo/UserTask', query: {
                    taskType,
                    isUpdate: undefined,
                } });
        }
    };
    const onReceiveCreateTaskScheduleInfo = async () => {
        try {
            if (!task?.id) {
                console.log(' task not available');
                return;
            }
            const eventId = await (0, UserCreateCalendarHelper_1.createNewEvent)((0, date_utils_1.dayjs)(startDate).format(), (0, date_utils_1.dayjs)(startDate).add(duration, 'minute').format(), userId, client, calendar?.id, undefined, task?.notes, false, (0, date_utils_1.dayjs)(recurringEndDate).format(), eventFrequency, eventInterval, undefined, task?.notes, undefined, undefined, undefined, undefined, true, false, false, false, false, date_utils_1.dayjs.tz.guess(), taskId, taskType, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, task?.notes, 'opaque', 'private', undefined, undefined, undefined, calendar?.colorId, date_utils_1.dayjs.tz.guess(), calendar?.backgroundColor, calendar?.foregroundColor, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, taskType === 'Daily', taskType === 'Weekly', false, undefined, undefined, true, undefined, undefined, true, undefined, true, true, true, undefined, true, undefined, undefined, true, false, undefined, true, true, undefined, undefined, undefined, undefined, undefined, undefined, duration, undefined, true, 'update', undefined, byWeekDay?.map(i => (DayObject[i])), undefined);
            if (!eventId) {
                console.log('no eventId inside onReceiveCreateTaskScheduleInfo');
                return;
            }
            await updateTaskInDb(`${eventId}#${calendar?.id}`);
            router.push({ pathname: '/Progress/Todo/UserTask', query: {
                    taskType,
                    isUpdate: (0, uuid_1.v4)(),
                } });
        }
        catch (e) {
            toast({
                status: 'error',
                title: 'No schedule created',
                description: 'We are not able to create a schedule due to an internal error.',
                duration: 9000,
                isClosable: true,
            });
            router.push({ pathname: '/Progress/Todo/UserTask', query: {
                    taskType,
                    isUpdate: undefined,
                } });
        }
    };
    const onActiveIndexChanged = (index) => setActiveIndex(index);
    const goToPrevStep = () => {
        const prevActiveIndex = activeIndex;
        const newActiveIndex = prevActiveIndex === 0 ? 0 : prevActiveIndex - 1;
        setActiveIndex(newActiveIndex);
    };
    const renderPrevButton = () => {
        if (activeIndex === 0) {
            return (0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' } });
        }
        return ((0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: goToPrevStep, children: "Back" }) }));
    };
    const goToNextStep = () => {
        const prevActiveIndex = activeIndex;
        const prevCompletedStep = completedStep;
        if (prevActiveIndex === 3) {
            return;
        }
        const newActiveIndex = prevActiveIndex + 1;
        if (!prevCompletedStep || (prevCompletedStep < prevActiveIndex)) {
            const newCompletedStep = prevActiveIndex;
            setCompletedStep(newCompletedStep);
        }
        if (newActiveIndex !== prevActiveIndex) {
            setActiveIndex(newActiveIndex);
        }
    };
    function renderNextButton() {
        return ((0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: goToNextStep, children: "Next" }) }));
    }
    const renderNextPeriodStartButton = () => {
        if (startDate) {
            return ((0, jsx_runtime_1.jsx)(Box_1.default, { pt: { phone: 'm', tablet: 's' }, children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: goToNextStep, children: "Next" }) }));
        }
    };
    const onToggleDayChange = (text) => {
        const index = days.findIndex(i => getDay(i) === text);
        if (index > -1) {
            const newDays = [
                ...days?.slice(0, index),
                ...days?.slice(index + 1),
            ];
            setDays(newDays);
            return setByWeekDay(newDays);
        }
        const newDays = [
            ...days,
            DayObject[text],
        ];
        setDays(newDays);
        return setByWeekDay(newDays);
    };
    const onMonday = () => {
        setMO(!MO);
        onToggleDayChange('MO');
    };
    const onTuesday = () => {
        setTU(!TU);
        onToggleDayChange('TU');
    };
    const onWednesday = () => {
        setWE(!WE);
        onToggleDayChange('WE');
    };
    const onThursday = () => {
        setTH(!TH);
        onToggleDayChange('TH');
    };
    const onFriday = () => {
        setFR(!FR);
        onToggleDayChange('FR');
    };
    const onSaturday = () => {
        setSA(!SA);
        onToggleDayChange('SA');
    };
    const onSunday = () => {
        setSU(!SU);
        onToggleDayChange('SU');
    };
    const createSchedule = async () => {
        try {
            if ((0, date_utils_1.dayjs)(recurringEndDate).isBefore(startDate)) {
                toast({
                    status: 'error',
                    title: 'Invalid Options',
                    description: 'You seem to have selected invalid start date and end date options',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            return isUpdate
                ? onReceiveUpdateTaskScheduleInfo()
                : onReceiveCreateTaskScheduleInfo();
        }
        catch (e) {
            console.log(e, ' unable to create schedule');
        }
    };
    const renderCurrentStep = () => {
        switch (activeIndex) {
            case 0:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subheader", pt: { phone: 'm', tablet: 's' }, children: "Task Schedule" }), (0, jsx_runtime_1.jsxs)("div", { className: "flex-1 flex flex-col justify-center items-start", style: { minHeight: '50vh' }, children: [(0, jsx_runtime_1.jsx)(Text_1.default, { textAlign: "left", variant: "optionHeader", children: "Select a start date for task" }), (0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Select Date and Time", size: "md", type: "datetime-local", onChange: (e) => setStartDate((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").toDate()), value: (0, date_utils_1.dayjs)(startDate).format("YYYY-MM-DDTHH:mm") }), (0, jsx_runtime_1.jsx)(Box_1.default, { flexDirection: "row", justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Duration (minutes)", type: "number", onChange: (e) => setDuration(parseInt(e?.target?.value.replace(/[^0-9.]/g, ''), 10)), value: `${duration}`, placeholder: "1", style: { ...(styles?.inputField) } }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { p: { phone: 's', tablet: 'm' }, flexDirection: "row", justifyContent: "space-between", width: "100%", children: [(0, jsx_runtime_1.jsx)(Box_1.default, {}), renderNextPeriodStartButton()] })] }));
            case 1:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { textAlign: "center", variant: "subheader", pt: { phone: 'm', tablet: 's' }, children: "Set the schedule" }), (0, jsx_runtime_1.jsx)("div", { className: "flex-1 flex flex-col justify-center items-start", style: { minHeight: '50vh' }, children: (0, jsx_runtime_1.jsxs)(RegularCard_1.default, { children: [(0, jsx_runtime_1.jsx)(Text_1.default, { textAlign: "center", variant: "optionHeader", p: { phone: 's', tablet: 'm' }, children: "Pick days for the schedule" }), (0, jsx_runtime_1.jsxs)(Box_1.default, { width: "100%", flexDirection: "row", justifyContent: "space-evenly", p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { onPress: onMonday, style: [styles.day, { backgroundColor: MO ? theme_1.palette.purplePrimary : theme_1.palette.lightGray }], children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { color: MO ? theme_1.palette.white : theme_1.palette.textBlack }, children: "MO" }) }), (0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { onPress: onTuesday, style: [styles.day, { backgroundColor: TU ? theme_1.palette.purplePrimary : theme_1.palette.lightGray }], children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { color: TU ? theme_1.palette.white : theme_1.palette.textBlack }, children: "TU" }) }), (0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { onPress: onWednesday, style: [styles.day, { backgroundColor: WE ? theme_1.palette.purplePrimary : theme_1.palette.lightGray }], children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { color: WE ? theme_1.palette.white : theme_1.palette.textBlack }, children: "WE" }) })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { width: "100%", flexDirection: "row", justifyContent: "space-evenly", p: { phone: 's', tablet: 'm' }, children: [(0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { onPress: onThursday, style: [styles.day, { backgroundColor: TH ? theme_1.palette.purplePrimary : theme_1.palette.lightGray }], children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { color: TH ? theme_1.palette.white : theme_1.palette.textBlack }, children: "TH" }) }), (0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { onPress: onFriday, style: [styles.day, { backgroundColor: FR ? theme_1.palette.purplePrimary : theme_1.palette.lightGray }], children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { color: FR ? theme_1.palette.white : theme_1.palette.textBlack }, children: "FR" }) }), (0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { onPress: onSaturday, style: [styles.day, { backgroundColor: SA ? theme_1.palette.purplePrimary : theme_1.palette.lightGray }], children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { color: SA ? theme_1.palette.white : theme_1.palette.textBlack }, children: "SA" }) }), (0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { onPress: onSunday, style: [styles.day, { backgroundColor: SU ? theme_1.palette.purplePrimary : theme_1.palette.lightGray }], children: (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", style: { color: SU ? theme_1.palette.white : theme_1.palette.textBlack }, children: "SU" }) })] })] }) }), (0, jsx_runtime_1.jsxs)(Box_1.default, { p: { phone: 's', tablet: 'm' }, flexDirection: "row", justifyContent: "space-between", width: "100%", children: [renderPrevButton(), renderNextButton()] })] }));
            case 2:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { textAlign: "center", variant: "subheader", pt: { phone: 'm', tablet: 's' }, children: "Set the schedule" }), (0, jsx_runtime_1.jsxs)("div", { className: "flex-1 flex flex-col justify-center items-start", style: { minHeight: '50vh' }, children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Select how often the task should recur" }), (0, jsx_runtime_1.jsxs)(picker_1.Picker, { selectedValue: eventFrequency, onValueChange: setEventFrequency, style: { color: theme_1.palette.textBlack }, children: [(0, jsx_runtime_1.jsx)(picker_1.Picker.Item, { color: theme_1.palette.textBlack, value: "daily", label: "Daily" }, "daily"), (0, jsx_runtime_1.jsx)(picker_1.Picker.Item, { color: theme_1.palette.textBlack, value: "weekly", label: "Weekly" }, "weekly"), (0, jsx_runtime_1.jsx)(picker_1.Picker.Item, { color: theme_1.palette.textBlack, value: "monthly", label: "Monthly" }, "monthly"), (0, jsx_runtime_1.jsx)(picker_1.Picker.Item, { color: theme_1.palette.textBlack, value: "yearly", label: "Yearly" }, "yearly")] }), (0, jsx_runtime_1.jsx)(TextField_1.default, { label: "Select the interval between each recurrence (ex: every 2 weeks)", type: "number", onChange: (e) => setEventInterval(parseInt(e?.target?.value.replace(/[^0-9.]/g, ''), 10)), value: `${eventInterval}`, placeholder: "1" }), (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "optionHeader", children: "Select an end date for Recurrence" }), (0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Select Date and Time", size: "md", type: "datetime-local", onChange: (e) => setRecurringEndDate((0, date_utils_1.dayjs)(e?.target?.value, "YYYY-MM-DDTHH:mm").toDate()), value: (0, date_utils_1.dayjs)(recurringEndDate).format("YYYY-MM-DDTHH:mm") })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { p: { phone: 's', tablet: 'm' }, flexDirection: "row", justifyContent: "space-between", width: "100%", children: [renderPrevButton(), renderNextButton()] })] }));
            case 3:
                return ((0, jsx_runtime_1.jsxs)(Box_1.default, { justifyContent: "center", alignItems: "center", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex-1 flex flex-col justify-center items-center", style: { minHeight: '55vh' }, children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subheader", pt: { phone: 'm', tablet: 's' }, children: isUpdate ? "Update the schedule?" : "Create the schedule?" }), (0, jsx_runtime_1.jsx)("div", { className: "m-3", children: (0, jsx_runtime_1.jsx)(Button_1.default, { onClick: createSchedule, children: isUpdate ? "Update Schedule" : "Create Schedule" }) })] }), (0, jsx_runtime_1.jsx)(Box_1.default, { p: { phone: 's', tablet: 'm' }, flexDirection: "row", justifyContent: "flex-start", width: "100%", children: renderPrevButton() })] }));
        }
    };
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { flex: 1, children: [(0, jsx_runtime_1.jsx)(Wizard_1.default, { items: [
                    {
                        index: 0,
                        label: 'Set a Schedule',
                    },
                    {
                        index: 1,
                        label: 'Set a Schedule',
                    },
                    {
                        index: 2,
                        label: 'Set a Schedule',
                    },
                    {
                        index: 3,
                        label: isUpdate ? "Update the schedule?" : "Create the schedule?",
                    },
                ], completed: completedStep, activeIndex: activeIndex }), renderCurrentStep()] }));
}
exports.default = UserTaskSchedule;
//# sourceMappingURL=data:application/json;base64,