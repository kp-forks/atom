"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectProvider = exports.useProject = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const useDataFetching_1 = require("../../lib/hooks/useDataFetching");
// Create the context with a default value
const ProjectContext = (0, react_1.createContext)(undefined);
// Custom hook to use the ProjectContext
const useProject = () => {
    const context = (0, react_1.useContext)(ProjectContext);
    if (!context) {
        throw new Error("useProject must be used within a ProjectProvider");
    }
    return context;
};
exports.useProject = useProject;
// Create the provider component
const ProjectProvider = ({ children }) => {
    const { data: projectData, loading, error, fetchData, } = (0, useDataFetching_1.useDataFetching)();
    // Function to fetch data from the project management API, memoized with useCallback.
    const fetchProjectData = (0, react_1.useCallback)(async () => {
        await fetchData("/api/projects/data");
    }, [fetchData]);
    const value = {
        projectData,
        loading,
        error,
        fetchProjectData,
    };
    return ((0, jsx_runtime_1.jsx)(ProjectContext.Provider, { value: value, children: children }));
};
exports.ProjectProvider = ProjectProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvamVjdENvbnRleHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwcm9qZWN0Q29udGV4dC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlDQUtlO0FBQ2YscUVBQWtFO0FBNENsRSwwQ0FBMEM7QUFDMUMsTUFBTSxjQUFjLEdBQUcsSUFBQSxxQkFBYSxFQUFpQyxTQUFTLENBQUMsQ0FBQztBQUVoRix3Q0FBd0M7QUFDakMsTUFBTSxVQUFVLEdBQUcsR0FBRyxFQUFFO0lBQzdCLE1BQU0sT0FBTyxHQUFHLElBQUEsa0JBQVUsRUFBQyxjQUFjLENBQUMsQ0FBQztJQUMzQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDYixNQUFNLElBQUksS0FBSyxDQUFDLGtEQUFrRCxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUNELE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUMsQ0FBQztBQU5XLFFBQUEsVUFBVSxjQU1yQjtBQUVGLGdDQUFnQztBQUN6QixNQUFNLGVBQWUsR0FBRyxDQUFDLEVBQUUsUUFBUSxFQUEyQixFQUFFLEVBQUU7SUFDdkUsTUFBTSxFQUNKLElBQUksRUFBRSxXQUFXLEVBQ2pCLE9BQU8sRUFDUCxLQUFLLEVBQ0wsU0FBUyxHQUNWLEdBQUcsSUFBQSxpQ0FBZSxHQUFlLENBQUM7SUFFbkMscUZBQXFGO0lBQ3JGLE1BQU0sZ0JBQWdCLEdBQUcsSUFBQSxtQkFBVyxFQUFDLEtBQUssSUFBSSxFQUFFO1FBQzlDLE1BQU0sU0FBUyxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDeEMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUVoQixNQUFNLEtBQUssR0FBRztRQUNaLFdBQVc7UUFDWCxPQUFPO1FBQ1AsS0FBSztRQUNMLGdCQUFnQjtLQUNqQixDQUFDO0lBRUYsT0FBTyxDQUNMLHVCQUFDLGNBQWMsQ0FBQyxRQUFRLElBQUMsS0FBSyxFQUFFLEtBQUssWUFBRyxRQUFRLEdBQTJCLENBQzVFLENBQUM7QUFDSixDQUFDLENBQUM7QUF2QlcsUUFBQSxlQUFlLG1CQXVCMUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHtcbiAgY3JlYXRlQ29udGV4dCxcbiAgdXNlQ29udGV4dCxcbiAgUmVhY3ROb2RlLFxuICB1c2VDYWxsYmFjayxcbn0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VEYXRhRmV0Y2hpbmcgfSBmcm9tIFwiLi4vLi4vbGliL2hvb2tzL3VzZURhdGFGZXRjaGluZ1wiO1xuXG4vLyBEZWZpbmUgVHlwZVNjcmlwdCBpbnRlcmZhY2VzIGZvciBvdXIgZGF0YSBzdHJ1Y3R1cmVzIGZvciB0eXBlIHNhZmV0eS5cbmludGVyZmFjZSBQcm9qZWN0IHtcbiAgaWQ6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBzdGF0dXM6IFwiT24gVHJhY2tcIiB8IFwiQXQgUmlza1wiIHwgXCJPZmYgVHJhY2tcIjtcbn1cblxuaW50ZXJmYWNlIFRhc2sge1xuICBpZDogc3RyaW5nO1xuICB0aXRsZTogc3RyaW5nO1xuICBzdGF0dXM6IFwiVG8gRG9cIiB8IFwiSW4gUHJvZ3Jlc3NcIiB8IFwiRG9uZVwiO1xuICBhc3NpZ25lZTogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgVGVhbU1lbWJlciB7XG4gIGlkOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgcm9sZTogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgQWN0aXZpdHkge1xuICBpZDogc3RyaW5nO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICB0aW1lc3RhbXA6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFByb2plY3REYXRhIHtcbiAgcHJvamVjdDogUHJvamVjdDtcbiAgdGFza3M6IFRhc2tbXTtcbiAgdGVhbTogVGVhbU1lbWJlcltdO1xuICBhY3Rpdml0eVN0cmVhbTogQWN0aXZpdHlbXTtcbn1cblxuLy8gRGVmaW5lIHRoZSBzaGFwZSBvZiB0aGUgY29udGV4dCBkYXRhXG5pbnRlcmZhY2UgUHJvamVjdENvbnRleHRUeXBlIHtcbiAgcHJvamVjdERhdGE6IFByb2plY3REYXRhIHwgbnVsbDtcbiAgbG9hZGluZzogYm9vbGVhbjtcbiAgZXJyb3I6IEVycm9yIHwgbnVsbDtcbiAgZmV0Y2hQcm9qZWN0RGF0YTogKCkgPT4gUHJvbWlzZTx2b2lkPjtcbn1cblxuLy8gQ3JlYXRlIHRoZSBjb250ZXh0IHdpdGggYSBkZWZhdWx0IHZhbHVlXG5jb25zdCBQcm9qZWN0Q29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8UHJvamVjdENvbnRleHRUeXBlIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xuXG4vLyBDdXN0b20gaG9vayB0byB1c2UgdGhlIFByb2plY3RDb250ZXh0XG5leHBvcnQgY29uc3QgdXNlUHJvamVjdCA9ICgpID0+IHtcbiAgY29uc3QgY29udGV4dCA9IHVzZUNvbnRleHQoUHJvamVjdENvbnRleHQpO1xuICBpZiAoIWNvbnRleHQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1c2VQcm9qZWN0IG11c3QgYmUgdXNlZCB3aXRoaW4gYSBQcm9qZWN0UHJvdmlkZXJcIik7XG4gIH1cbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG4vLyBDcmVhdGUgdGhlIHByb3ZpZGVyIGNvbXBvbmVudFxuZXhwb3J0IGNvbnN0IFByb2plY3RQcm92aWRlciA9ICh7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IFJlYWN0Tm9kZSB9KSA9PiB7XG4gIGNvbnN0IHtcbiAgICBkYXRhOiBwcm9qZWN0RGF0YSxcbiAgICBsb2FkaW5nLFxuICAgIGVycm9yLFxuICAgIGZldGNoRGF0YSxcbiAgfSA9IHVzZURhdGFGZXRjaGluZzxQcm9qZWN0RGF0YT4oKTtcblxuICAvLyBGdW5jdGlvbiB0byBmZXRjaCBkYXRhIGZyb20gdGhlIHByb2plY3QgbWFuYWdlbWVudCBBUEksIG1lbW9pemVkIHdpdGggdXNlQ2FsbGJhY2suXG4gIGNvbnN0IGZldGNoUHJvamVjdERhdGEgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgZmV0Y2hEYXRhKFwiL2FwaS9wcm9qZWN0cy9kYXRhXCIpO1xuICB9LCBbZmV0Y2hEYXRhXSk7XG5cbiAgY29uc3QgdmFsdWUgPSB7XG4gICAgcHJvamVjdERhdGEsXG4gICAgbG9hZGluZyxcbiAgICBlcnJvcixcbiAgICBmZXRjaFByb2plY3REYXRhLFxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPFByb2plY3RDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt2YWx1ZX0+e2NoaWxkcmVufTwvUHJvamVjdENvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59O1xuIl19