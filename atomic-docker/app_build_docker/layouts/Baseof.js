"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const config_json_1 = __importDefault(require("@config/config.json"));
const textConverter_1 = require("@lib/utils/textConverter");
const Header_1 = __importDefault(require("@layouts/Header"));
const head_1 = __importDefault(require("next/head"));
const router_1 = require("next/router");
const Base = ({ title, meta_title, description, image, noindex, canonical, children, }) => {
    const { meta_image, meta_author, meta_description } = config_json_1.default.metadata;
    const { base_url } = config_json_1.default.site;
    const router = (0, router_1.useRouter)();
    return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)(head_1.default, { children: [(0, jsx_runtime_1.jsx)("title", { children: (0, textConverter_1.plainify)(meta_title ? meta_title : title ? title : config_json_1.default.site.title) }), canonical && (0, jsx_runtime_1.jsx)("link", { rel: "canonical", href: canonical, itemProp: "url" }), noindex && (0, jsx_runtime_1.jsx)("meta", { name: "robots", content: "noindex,nofollow" }), (0, jsx_runtime_1.jsx)("meta", { name: "description", content: (0, textConverter_1.plainify)(description ? description : meta_description) }), (0, jsx_runtime_1.jsx)("meta", { name: "author", content: meta_author }), (0, jsx_runtime_1.jsx)("meta", { property: "og:title", content: (0, textConverter_1.plainify)(meta_title ? meta_title : title ? title : config_json_1.default.site.title) }), (0, jsx_runtime_1.jsx)("meta", { property: "og:description", content: (0, textConverter_1.plainify)(description ? description : meta_description) }), (0, jsx_runtime_1.jsx)("meta", { property: "og:type", content: "website" }), (0, jsx_runtime_1.jsx)("meta", { property: "og:url", content: `${base_url}/${router.asPath.replace("/", "")}` }), (0, jsx_runtime_1.jsx)("meta", { name: "twitter:title", content: (0, textConverter_1.plainify)(meta_title ? meta_title : title ? title : config_json_1.default.site.title) }), (0, jsx_runtime_1.jsx)("meta", { name: "twitter:description", content: (0, textConverter_1.plainify)(description ? description : meta_description) }), (0, jsx_runtime_1.jsx)("meta", { property: "og:image", content: `${base_url}${image ? image : meta_image}` }), (0, jsx_runtime_1.jsx)("meta", { name: "twitter:image", content: `${base_url}${image ? image : meta_image}` }), (0, jsx_runtime_1.jsx)("meta", { name: "twitter:card", content: "summary_large_image" })] }), (0, jsx_runtime_1.jsx)(Header_1.default, {}), (0, jsx_runtime_1.jsx)("main", { id: "root", children: children })] }));
};
exports.default = Base;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFzZW9mLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQmFzZW9mLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxzRUFBeUM7QUFDekMsNERBQW9EO0FBRXBELDZEQUFxQztBQUNyQyxxREFBNkI7QUFDN0Isd0NBQXdDO0FBRXhDLE1BQU0sSUFBSSxHQUFHLENBQUMsRUFDWixLQUFLLEVBQ0wsVUFBVSxFQUNWLFdBQVcsRUFDWCxLQUFLLEVBQ0wsT0FBTyxFQUNQLFNBQVMsRUFDVCxRQUFRLEdBU1QsRUFBRSxFQUFFO0lBQ0gsTUFBTSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsR0FBRyxxQkFBTSxDQUFDLFFBQVEsQ0FBQztJQUN0RSxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcscUJBQU0sQ0FBQyxJQUFJLENBQUM7SUFDakMsTUFBTSxNQUFNLEdBQUcsSUFBQSxrQkFBUyxHQUFFLENBQUM7SUFFM0IsT0FBTyxDQUNMLDZEQUNFLHdCQUFDLGNBQUksZUFFSCw0Q0FDRyxJQUFBLHdCQUFRLEVBQ1AsVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxxQkFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQzVELEdBQ0ssRUFHUCxTQUFTLElBQUksaUNBQU0sR0FBRyxFQUFDLFdBQVcsRUFBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBQyxLQUFLLEdBQUcsRUFHckUsT0FBTyxJQUFJLGlDQUFNLElBQUksRUFBQyxRQUFRLEVBQUMsT0FBTyxFQUFDLGtCQUFrQixHQUFHLEVBRzdELGlDQUNFLElBQUksRUFBQyxhQUFhLEVBQ2xCLE9BQU8sRUFBRSxJQUFBLHdCQUFRLEVBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLEdBQy9ELEVBR0YsaUNBQU0sSUFBSSxFQUFDLFFBQVEsRUFBQyxPQUFPLEVBQUUsV0FBVyxHQUFJLEVBRzVDLGlDQUNFLFFBQVEsRUFBQyxVQUFVLEVBQ25CLE9BQU8sRUFBRSxJQUFBLHdCQUFRLEVBQ2YsVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxxQkFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQzVELEdBQ0QsRUFHRixpQ0FDRSxRQUFRLEVBQUMsZ0JBQWdCLEVBQ3pCLE9BQU8sRUFBRSxJQUFBLHdCQUFRLEVBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLEdBQy9ELEVBQ0YsaUNBQU0sUUFBUSxFQUFDLFNBQVMsRUFBQyxPQUFPLEVBQUMsU0FBUyxHQUFHLEVBQzdDLGlDQUNFLFFBQVEsRUFBQyxRQUFRLEVBQ2pCLE9BQU8sRUFBRSxHQUFHLFFBQVEsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FDeEQsRUFHRixpQ0FDRSxJQUFJLEVBQUMsZUFBZSxFQUNwQixPQUFPLEVBQUUsSUFBQSx3QkFBUSxFQUNmLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMscUJBQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUM1RCxHQUNELEVBR0YsaUNBQ0UsSUFBSSxFQUFDLHFCQUFxQixFQUMxQixPQUFPLEVBQUUsSUFBQSx3QkFBUSxFQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUMvRCxFQUdGLGlDQUNFLFFBQVEsRUFBQyxVQUFVLEVBQ25CLE9BQU8sRUFBRSxHQUFHLFFBQVEsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLEdBQ25ELEVBR0YsaUNBQ0UsSUFBSSxFQUFDLGVBQWUsRUFDcEIsT0FBTyxFQUFFLEdBQUcsUUFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsR0FDbkQsRUFDRixpQ0FBTSxJQUFJLEVBQUMsY0FBYyxFQUFDLE9BQU8sRUFBQyxxQkFBcUIsR0FBRyxJQUNyRCxFQUNQLHVCQUFDLGdCQUFNLEtBQUcsRUFFVixpQ0FBTSxFQUFFLEVBQUMsTUFBTSxZQUFFLFFBQVEsR0FBUSxJQUNoQyxDQUNKLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixrQkFBZSxJQUFJLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29uZmlnIGZyb20gXCJAY29uZmlnL2NvbmZpZy5qc29uXCI7XG5pbXBvcnQgeyBwbGFpbmlmeSB9IGZyb20gXCJAbGliL3V0aWxzL3RleHRDb252ZXJ0ZXJcIjtcbmltcG9ydCBGb290ZXIgZnJvbSBcIkBsYXlvdXRzL0Zvb3RlclwiXG5pbXBvcnQgSGVhZGVyIGZyb20gXCJAbGF5b3V0cy9IZWFkZXJcIjtcbmltcG9ydCBIZWFkIGZyb20gXCJuZXh0L2hlYWRcIjtcbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gXCJuZXh0L3JvdXRlclwiO1xuXG5jb25zdCBCYXNlID0gKHtcbiAgdGl0bGUsXG4gIG1ldGFfdGl0bGUsXG4gIGRlc2NyaXB0aW9uLFxuICBpbWFnZSxcbiAgbm9pbmRleCxcbiAgY2Fub25pY2FsLFxuICBjaGlsZHJlbixcbn06IHtcbiAgdGl0bGU6IGFueSxcbiAgbWV0YV90aXRsZTogYW55LFxuICBkZXNjcmlwdGlvbjogYW55LFxuICBpbWFnZTogYW55LFxuICBub2luZGV4OiBhbnksXG4gIGNhbm9uaWNhbDogYW55LFxuICBjaGlsZHJlbjogYW55LFxufSkgPT4ge1xuICBjb25zdCB7IG1ldGFfaW1hZ2UsIG1ldGFfYXV0aG9yLCBtZXRhX2Rlc2NyaXB0aW9uIH0gPSBjb25maWcubWV0YWRhdGE7XG4gIGNvbnN0IHsgYmFzZV91cmwgfSA9IGNvbmZpZy5zaXRlO1xuICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8SGVhZD5cbiAgICAgICAgey8qIHRpdGxlICovfVxuICAgICAgICA8dGl0bGU+XG4gICAgICAgICAge3BsYWluaWZ5KFxuICAgICAgICAgICAgbWV0YV90aXRsZSA/IG1ldGFfdGl0bGUgOiB0aXRsZSA/IHRpdGxlIDogY29uZmlnLnNpdGUudGl0bGVcbiAgICAgICAgICApfVxuICAgICAgICA8L3RpdGxlPlxuXG4gICAgICAgIHsvKiBjYW5vbmljYWwgdXJsICovfVxuICAgICAgICB7Y2Fub25pY2FsICYmIDxsaW5rIHJlbD1cImNhbm9uaWNhbFwiIGhyZWY9e2Nhbm9uaWNhbH0gaXRlbVByb3A9XCJ1cmxcIiAvPn1cblxuICAgICAgICB7Lyogbm9pbmRleCByb2JvdHMgKi99XG4gICAgICAgIHtub2luZGV4ICYmIDxtZXRhIG5hbWU9XCJyb2JvdHNcIiBjb250ZW50PVwibm9pbmRleCxub2ZvbGxvd1wiIC8+fVxuXG4gICAgICAgIHsvKiBtZXRhLWRlc2NyaXB0aW9uICovfVxuICAgICAgICA8bWV0YVxuICAgICAgICAgIG5hbWU9XCJkZXNjcmlwdGlvblwiXG4gICAgICAgICAgY29udGVudD17cGxhaW5pZnkoZGVzY3JpcHRpb24gPyBkZXNjcmlwdGlvbiA6IG1ldGFfZGVzY3JpcHRpb24pfVxuICAgICAgICAvPlxuXG4gICAgICAgIHsvKiBhdXRob3IgZnJvbSBjb25maWcuanNvbiAqL31cbiAgICAgICAgPG1ldGEgbmFtZT1cImF1dGhvclwiIGNvbnRlbnQ9e21ldGFfYXV0aG9yfSAvPlxuXG4gICAgICAgIHsvKiBvZy10aXRsZSAqL31cbiAgICAgICAgPG1ldGFcbiAgICAgICAgICBwcm9wZXJ0eT1cIm9nOnRpdGxlXCJcbiAgICAgICAgICBjb250ZW50PXtwbGFpbmlmeShcbiAgICAgICAgICAgIG1ldGFfdGl0bGUgPyBtZXRhX3RpdGxlIDogdGl0bGUgPyB0aXRsZSA6IGNvbmZpZy5zaXRlLnRpdGxlXG4gICAgICAgICAgKX1cbiAgICAgICAgLz5cblxuICAgICAgICB7Lyogb2ctZGVzY3JpcHRpb24gKi99XG4gICAgICAgIDxtZXRhXG4gICAgICAgICAgcHJvcGVydHk9XCJvZzpkZXNjcmlwdGlvblwiXG4gICAgICAgICAgY29udGVudD17cGxhaW5pZnkoZGVzY3JpcHRpb24gPyBkZXNjcmlwdGlvbiA6IG1ldGFfZGVzY3JpcHRpb24pfVxuICAgICAgICAvPlxuICAgICAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOnR5cGVcIiBjb250ZW50PVwid2Vic2l0ZVwiIC8+XG4gICAgICAgIDxtZXRhXG4gICAgICAgICAgcHJvcGVydHk9XCJvZzp1cmxcIlxuICAgICAgICAgIGNvbnRlbnQ9e2Ake2Jhc2VfdXJsfS8ke3JvdXRlci5hc1BhdGgucmVwbGFjZShcIi9cIiwgXCJcIil9YH1cbiAgICAgICAgLz5cblxuICAgICAgICB7LyogdHdpdHRlci10aXRsZSAqL31cbiAgICAgICAgPG1ldGFcbiAgICAgICAgICBuYW1lPVwidHdpdHRlcjp0aXRsZVwiXG4gICAgICAgICAgY29udGVudD17cGxhaW5pZnkoXG4gICAgICAgICAgICBtZXRhX3RpdGxlID8gbWV0YV90aXRsZSA6IHRpdGxlID8gdGl0bGUgOiBjb25maWcuc2l0ZS50aXRsZVxuICAgICAgICAgICl9XG4gICAgICAgIC8+XG5cbiAgICAgICAgey8qIHR3aXR0ZXItZGVzY3JpcHRpb24gKi99XG4gICAgICAgIDxtZXRhXG4gICAgICAgICAgbmFtZT1cInR3aXR0ZXI6ZGVzY3JpcHRpb25cIlxuICAgICAgICAgIGNvbnRlbnQ9e3BsYWluaWZ5KGRlc2NyaXB0aW9uID8gZGVzY3JpcHRpb24gOiBtZXRhX2Rlc2NyaXB0aW9uKX1cbiAgICAgICAgLz5cblxuICAgICAgICB7Lyogb2ctaW1hZ2UgKi99XG4gICAgICAgIDxtZXRhXG4gICAgICAgICAgcHJvcGVydHk9XCJvZzppbWFnZVwiXG4gICAgICAgICAgY29udGVudD17YCR7YmFzZV91cmx9JHtpbWFnZSA/IGltYWdlIDogbWV0YV9pbWFnZX1gfVxuICAgICAgICAvPlxuXG4gICAgICAgIHsvKiB0d2l0dGVyLWltYWdlICovfVxuICAgICAgICA8bWV0YVxuICAgICAgICAgIG5hbWU9XCJ0d2l0dGVyOmltYWdlXCJcbiAgICAgICAgICBjb250ZW50PXtgJHtiYXNlX3VybH0ke2ltYWdlID8gaW1hZ2UgOiBtZXRhX2ltYWdlfWB9XG4gICAgICAgIC8+XG4gICAgICAgIDxtZXRhIG5hbWU9XCJ0d2l0dGVyOmNhcmRcIiBjb250ZW50PVwic3VtbWFyeV9sYXJnZV9pbWFnZVwiIC8+XG4gICAgICA8L0hlYWQ+XG4gICAgICA8SGVhZGVyIC8+XG4gICAgICB7LyogbWFpbiBzaXRlICovfVxuICAgICAgPG1haW4gaWQ9XCJyb290XCI+e2NoaWxkcmVufTwvbWFpbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEJhc2U7XG4iXX0=