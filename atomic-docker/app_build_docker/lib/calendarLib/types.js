"use strict";
// import { calendar_integration } from '@dataTypes/types'
Object.defineProperty(exports, "__esModule", { value: true });
// export type Collections = {
//     // [key: string]: RxCollection
//     calendar_integration: CalendarIngetrationCollection
// }
// export type Internals = any
// export type InstanceCreationOptions = any
//# sourceMappingURL=data:application/json;base64,