"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRegularPage = exports.getSinglePage = exports.getListPage = void 0;
const fs_1 = __importDefault(require("fs"));
const gray_matter_1 = __importDefault(require("gray-matter"));
const path_1 = __importDefault(require("path"));
const mdxParser_1 = require("./utils/mdxParser");
// get index page data, ex: _index.md
const getListPage = async (filePath) => {
    const pageData = fs_1.default.readFileSync(path_1.default.join(filePath), 'utf-8');
    const pageDataParsed = (0, gray_matter_1.default)(pageData);
    const notFoundPage = fs_1.default.readFileSync(path_1.default.join('content/404.md'), 'utf-8');
    const notFoundDataParsed = (0, gray_matter_1.default)(notFoundPage);
    let frontmatter, content;
    if (pageDataParsed) {
        content = pageDataParsed.content;
        frontmatter = pageDataParsed.data;
    }
    else {
        content = notFoundDataParsed.content;
        frontmatter = notFoundDataParsed.data;
    }
    const mdxContent = await (0, mdxParser_1.parseMDX)(content);
    return {
        frontmatter,
        content,
        mdxContent,
    };
};
exports.getListPage = getListPage;
// get all single pages, ex: blog/post.md
const getSinglePage = (folder) => {
    const filesPath = fs_1.default.readdirSync(path_1.default.join(folder));
    const sanitizeFiles = filesPath.filter((file) => file.includes('.md'));
    const filterSingleFiles = sanitizeFiles.filter((file) => file.match(/^(?!_)/));
    const singlePages = filterSingleFiles.map((filename) => {
        const slug = filename.replace('.md', '');
        const pageData = fs_1.default.readFileSync(path_1.default.join(folder, filename), 'utf-8');
        const pageDataParsed = (0, gray_matter_1.default)(pageData);
        const frontmatterString = JSON.stringify(pageDataParsed.data);
        const frontmatter = JSON.parse(frontmatterString);
        const content = pageDataParsed.content;
        const url = frontmatter.url ? frontmatter.url.replace('/', '') : slug;
        return { frontmatter: frontmatter, slug: url, content: content };
    });
    const publishedPages = singlePages.filter((page) => !page.frontmatter.draft && page.frontmatter.layout !== '404' && page);
    const filterByDate = publishedPages.filter((page) => new Date(page.frontmatter.date || new Date()) <= new Date());
    return filterByDate;
};
exports.getSinglePage = getSinglePage;
// get regular page data, ex: about.md
const getRegularPage = async (slug) => {
    const publishedPages = (0, exports.getSinglePage)('content');
    const pageData = publishedPages.filter((data) => data.slug === slug);
    const notFoundPage = fs_1.default.readFileSync(path_1.default.join('content/404.md'), 'utf-8');
    const notFoundDataParsed = (0, gray_matter_1.default)(notFoundPage);
    let frontmatter, content;
    if (pageData[0]) {
        content = pageData[0].content;
        frontmatter = pageData[0].frontmatter;
    }
    else {
        content = notFoundDataParsed.content;
        frontmatter = notFoundDataParsed.data;
    }
    const mdxContent = await (0, mdxParser_1.parseMDX)(content);
    return {
        frontmatter,
        content,
        mdxContent,
    };
};
exports.getRegularPage = getRegularPage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudFBhcnNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvbnRlbnRQYXJzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsNENBQW9CO0FBQ3BCLDhEQUFpQztBQUNqQyxnREFBd0I7QUFDeEIsaURBQTZDO0FBRTdDLHFDQUFxQztBQUM5QixNQUFNLFdBQVcsR0FBRyxLQUFLLEVBQUUsUUFBZ0IsRUFBRSxFQUFFO0lBQ3BELE1BQU0sUUFBUSxHQUFHLFlBQUUsQ0FBQyxZQUFZLENBQUMsY0FBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMvRCxNQUFNLGNBQWMsR0FBRyxJQUFBLHFCQUFNLEVBQUMsUUFBUSxDQUFDLENBQUM7SUFDeEMsTUFBTSxZQUFZLEdBQUcsWUFBRSxDQUFDLFlBQVksQ0FBQyxjQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDM0UsTUFBTSxrQkFBa0IsR0FBRyxJQUFBLHFCQUFNLEVBQUMsWUFBWSxDQUFDLENBQUM7SUFDaEQsSUFBSSxXQUFXLEVBQUUsT0FBTyxDQUFDO0lBRXpCLElBQUksY0FBYyxFQUFFLENBQUM7UUFDbkIsT0FBTyxHQUFHLGNBQWMsQ0FBQyxPQUFPLENBQUM7UUFDakMsV0FBVyxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUM7SUFDcEMsQ0FBQztTQUFNLENBQUM7UUFDTixPQUFPLEdBQUcsa0JBQWtCLENBQUMsT0FBTyxDQUFDO1FBQ3JDLFdBQVcsR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUM7SUFDeEMsQ0FBQztJQUNELE1BQU0sVUFBVSxHQUFHLE1BQU0sSUFBQSxvQkFBUSxFQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRTNDLE9BQU87UUFDTCxXQUFXO1FBQ1gsT0FBTztRQUNQLFVBQVU7S0FDWCxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBckJXLFFBQUEsV0FBVyxlQXFCdEI7QUFF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SSxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNoQixPQUFPLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUM5QixXQUFXLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztJQUN4QyxDQUFDO1NBQU0sQ0FBQztRQUNOLE9BQU8sR0FBRyxrQkFBa0IsQ0FBQyxPQUFPLENBQUM7UUFDckMsV0FBVyxHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FBQztJQUN4QyxDQUFDO0lBQ0QsTUFBTSxVQUFVLEdBQUcsTUFBTSxJQUFBLG9CQUFRLEVBQUMsT0FBTyxDQUFDLENBQUM7SUFFM0MsT0FBTztRQUNMLFdBQVc7UUFDWCxPQUFPO1FBQ1AsVUFBVTtLQUNYLENBQUM7QUFDSixDQUFDLENBQUM7QUFyQlcsUUFBQSxjQUFjLGtCQXFCekIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IG1hdHRlciBmcm9tICdncmF5LW1hdHRlcic7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IHBhcnNlTURYIH0gZnJvbSAnLi91dGlscy9tZHhQYXJzZXInO1xuXG4vLyBnZXQgaW5kZXggcGFnZSBkYXRhLCBleDogX2luZGV4Lm1kXG5leHBvcnQgY29uc3QgZ2V0TGlzdFBhZ2UgPSBhc3luYyAoZmlsZVBhdGg6IHN0cmluZykgPT4ge1xuICBjb25zdCBwYWdlRGF0YSA9IGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4oZmlsZVBhdGgpLCAndXRmLTgnKTtcbiAgY29uc3QgcGFnZURhdGFQYXJzZWQgPSBtYXR0ZXIocGFnZURhdGEpO1xuICBjb25zdCBub3RGb3VuZFBhZ2UgPSBmcy5yZWFkRmlsZVN5bmMocGF0aC5qb2luKCdjb250ZW50LzQwNC5tZCcpLCAndXRmLTgnKTtcbiAgY29uc3Qgbm90Rm91bmREYXRhUGFyc2VkID0gbWF0dGVyKG5vdEZvdW5kUGFnZSk7XG4gIGxldCBmcm9udG1hdHRlciwgY29udGVudDtcblxuICBpZiAocGFnZURhdGFQYXJzZWQpIHtcbiAgICBjb250ZW50ID0gcGFnZURhdGFQYXJzZWQuY29udGVudDtcbiAgICBmcm9udG1hdHRlciA9IHBhZ2VEYXRhUGFyc2VkLmRhdGE7XG4gIH0gZWxzZSB7XG4gICAgY29udGVudCA9IG5vdEZvdW5kRGF0YVBhcnNlZC5jb250ZW50O1xuICAgIGZyb250bWF0dGVyID0gbm90Rm91bmREYXRhUGFyc2VkLmRhdGE7XG4gIH1cbiAgY29uc3QgbWR4Q29udGVudCA9IGF3YWl0IHBhcnNlTURYKGNvbnRlbnQpO1xuXG4gIHJldHVybiB7XG4gICAgZnJvbnRtYXR0ZXIsXG4gICAgY29udGVudCxcbiAgICBtZHhDb250ZW50LFxuICB9O1xufTtcblxuLy8gZ2V0IGFsbCBzaW5nbGUgcGFnZXMsIGV4OiBibG9nL3Bvc3QubWRcbmV4cG9ydCBjb25zdCBnZXRTaW5nbGVQYWdlID0gKGZvbGRlcjogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IGZpbGVzUGF0aCA9IGZzLnJlYWRkaXJTeW5jKHBhdGguam9pbihmb2xkZXIpKTtcbiAgY29uc3Qgc2FuaXRpemVGaWxlcyA9IGZpbGVzUGF0aC5maWx0ZXIoKGZpbGUpID0+IGZpbGUuaW5jbHVkZXMoJy5tZCcpKTtcbiAgY29uc3QgZmlsdGVyU2luZ2xlRmlsZXMgPSBzYW5pdGl6ZUZpbGVzLmZpbHRlcigoZmlsZSkgPT5cbiAgICBmaWxlLm1hdGNoKC9eKD8hXykvKVxuICApO1xuICBjb25zdCBzaW5nbGVQYWdlcyA9IGZpbHRlclNpbmdsZUZpbGVzLm1hcCgoZmlsZW5hbWUpID0+IHtcbiAgICBjb25zdCBzbHVnID0gZmlsZW5hbWUucmVwbGFjZSgnLm1kJywgJycpO1xuICAgIGNvbnN0IHBhZ2VEYXRhID0gZnMucmVhZEZpbGVTeW5jKHBhdGguam9pbihmb2xkZXIsIGZpbGVuYW1lKSwgJ3V0Zi04Jyk7XG4gICAgY29uc3QgcGFnZURhdGFQYXJzZWQgPSBtYXR0ZXIocGFnZURhdGEpO1xuICAgIGNvbnN0IGZyb250bWF0dGVyU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkocGFnZURhdGFQYXJzZWQuZGF0YSk7XG4gICAgY29uc3QgZnJvbnRtYXR0ZXIgPSBKU09OLnBhcnNlKGZyb250bWF0dGVyU3RyaW5nKTtcbiAgICBjb25zdCBjb250ZW50ID0gcGFnZURhdGFQYXJzZWQuY29udGVudDtcbiAgICBjb25zdCB1cmwgPSBmcm9udG1hdHRlci51cmwgPyBmcm9udG1hdHRlci51cmwucmVwbGFjZSgnLycsICcnKSA6IHNsdWc7XG4gICAgcmV0dXJuIHsgZnJvbnRtYXR0ZXI6IGZyb250bWF0dGVyLCBzbHVnOiB1cmwsIGNvbnRlbnQ6IGNvbnRlbnQgfTtcbiAgfSk7XG5cbiAgY29uc3QgcHVibGlzaGVkUGFnZXMgPSBzaW5nbGVQYWdlcy5maWx0ZXIoXG4gICAgKHBhZ2UpID0+XG4gICAgICAhcGFnZS5mcm9udG1hdHRlci5kcmFmdCAmJiBwYWdlLmZyb250bWF0dGVyLmxheW91dCAhPT0gJzQwNCcgJiYgcGFnZVxuICApO1xuICBjb25zdCBmaWx0ZXJCeURhdGUgPSBwdWJsaXNoZWRQYWdlcy5maWx0ZXIoXG4gICAgKHBhZ2UpID0+IG5ldyBEYXRlKHBhZ2UuZnJvbnRtYXR0ZXIuZGF0ZSB8fCBuZXcgRGF0ZSgpKSA8PSBuZXcgRGF0ZSgpXG4gICk7XG5cbiAgcmV0dXJuIGZpbHRlckJ5RGF0ZTtcbn07XG5cbi8vIGdldCByZWd1bGFyIHBhZ2UgZGF0YSwgZXg6IGFib3V0Lm1kXG5leHBvcnQgY29uc3QgZ2V0UmVndWxhclBhZ2UgPSBhc3luYyAoc2x1ZzogYW55KSA9PiB7XG4gIGNvbnN0IHB1Ymxpc2hlZFBhZ2VzID0gZ2V0U2luZ2xlUGFnZSgnY29udGVudCcpO1xuICBjb25zdCBwYWdlRGF0YSA9IHB1Ymxpc2hlZFBhZ2VzLmZpbHRlcigoZGF0YSkgPT4gZGF0YS5zbHVnID09PSBzbHVnKTtcbiAgY29uc3Qgbm90Rm91bmRQYWdlID0gZnMucmVhZEZpbGVTeW5jKHBhdGguam9pbignY29udGVudC80MDQubWQnKSwgJ3V0Zi04Jyk7XG4gIGNvbnN0IG5vdEZvdW5kRGF0YVBhcnNlZCA9IG1hdHRlcihub3RGb3VuZFBhZ2UpO1xuXG4gIGxldCBmcm9udG1hdHRlciwgY29udGVudDtcbiAgaWYgKHBhZ2VEYXRhWzBdKSB7XG4gICAgY29udGVudCA9IHBhZ2VEYXRhWzBdLmNvbnRlbnQ7XG4gICAgZnJvbnRtYXR0ZXIgPSBwYWdlRGF0YVswXS5mcm9udG1hdHRlcjtcbiAgfSBlbHNlIHtcbiAgICBjb250ZW50ID0gbm90Rm91bmREYXRhUGFyc2VkLmNvbnRlbnQ7XG4gICAgZnJvbnRtYXR0ZXIgPSBub3RGb3VuZERhdGFQYXJzZWQuZGF0YTtcbiAgfVxuICBjb25zdCBtZHhDb250ZW50ID0gYXdhaXQgcGFyc2VNRFgoY29udGVudCk7XG5cbiAgcmV0dXJuIHtcbiAgICBmcm9udG1hdHRlcixcbiAgICBjb250ZW50LFxuICAgIG1keENvbnRlbnQsXG4gIH07XG59O1xuIl19