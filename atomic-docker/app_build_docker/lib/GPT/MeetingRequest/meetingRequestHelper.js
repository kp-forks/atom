"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeGoalFromReceiverGoals = exports.addGoalToReceiverGoals = exports.updateGoalInReceiverGoals = exports.removeGoalFromSenderGoals = exports.addGoalToSenderGoals = exports.updateGoalInSenderGoals = exports.removeCharacteristicFromReceiverCharacteristics = exports.addCharacteristicToReceiverCharacteristics = exports.updateCharacteristicInReceiverCharacteristics = exports.removeCharacteristicFromSenderCharacteristics = exports.addCharacteristicToSenderCharacteristics = exports.updateCharacteristicInSenderCharacteristics = void 0;
const updateCharacteristicInSenderCharacteristics = (index, senderCharacteristic, senderCharacteristics, setSenderCharacteristics, setParentSenderCharacteristics) => {
    const newSenderCharacteristics = senderCharacteristics
        .slice(0, index)
        .concat([senderCharacteristic])
        .concat(senderCharacteristics.slice(index + 1));
    setSenderCharacteristics(newSenderCharacteristics);
    setParentSenderCharacteristics(newSenderCharacteristics);
};
exports.updateCharacteristicInSenderCharacteristics = updateCharacteristicInSenderCharacteristics;
const addCharacteristicToSenderCharacteristics = (senderCharacteristic, senderCharacteristics, setSenderCharacteristics, setParentSenderCharacteristics) => {
    const newSenderCharacteristics = senderCharacteristics.concat([
        senderCharacteristic,
    ]);
    setSenderCharacteristics(newSenderCharacteristics);
    setParentSenderCharacteristics(newSenderCharacteristics);
};
exports.addCharacteristicToSenderCharacteristics = addCharacteristicToSenderCharacteristics;
const removeCharacteristicFromSenderCharacteristics = (index, senderCharacteristics, setSenderCharacteristics, setParentSenderCharacteristics) => {
    const newSenderCharacteristics = senderCharacteristics
        .slice(0, index)
        .concat(senderCharacteristics.slice(index + 1));
    setSenderCharacteristics(newSenderCharacteristics);
    setParentSenderCharacteristics(newSenderCharacteristics);
};
exports.removeCharacteristicFromSenderCharacteristics = removeCharacteristicFromSenderCharacteristics;
const updateCharacteristicInReceiverCharacteristics = (index, receiverCharacteristic, receiverCharacteristics, setReceiverCharacteristics, setParentReceiverCharacteristics) => {
    const newReceiverCharacteristics = receiverCharacteristics
        .slice(0, index)
        .concat([receiverCharacteristic])
        .concat(receiverCharacteristics.slice(index + 1));
    setReceiverCharacteristics(newReceiverCharacteristics);
    setParentReceiverCharacteristics(newReceiverCharacteristics);
};
exports.updateCharacteristicInReceiverCharacteristics = updateCharacteristicInReceiverCharacteristics;
const addCharacteristicToReceiverCharacteristics = (receiverCharacteristic, receiverCharacteristics, setReceiverCharacteristics, setParentReceiverCharacteristics) => {
    const newReceiverCharacteristics = receiverCharacteristics.concat([
        receiverCharacteristic,
    ]);
    setReceiverCharacteristics(newReceiverCharacteristics);
    setParentReceiverCharacteristics(newReceiverCharacteristics);
};
exports.addCharacteristicToReceiverCharacteristics = addCharacteristicToReceiverCharacteristics;
const removeCharacteristicFromReceiverCharacteristics = (index, receiverCharacteristics, setReceiverCharacteristics, setParentReceiverCharacteristics) => {
    const newReceiverCharacteristics = receiverCharacteristics
        .slice(0, index)
        .concat(receiverCharacteristics.slice(index + 1));
    setReceiverCharacteristics(newReceiverCharacteristics);
    setParentReceiverCharacteristics(newReceiverCharacteristics);
};
exports.removeCharacteristicFromReceiverCharacteristics = removeCharacteristicFromReceiverCharacteristics;
const updateGoalInSenderGoals = (index, senderGoal, senderGoals, setSenderGoals, setParentSenderGoals) => {
    const newSenderGoals = senderGoals
        .slice(0, index)
        .concat([senderGoal])
        .concat(senderGoals.slice(index + 1));
    setSenderGoals(newSenderGoals);
    setParentSenderGoals(newSenderGoals);
};
exports.updateGoalInSenderGoals = updateGoalInSenderGoals;
const addGoalToSenderGoals = (senderGoal, senderGoals, setSenderGoals, setParentSenderGoals) => {
    const newSenderGoals = senderGoals.concat([senderGoal]);
    setSenderGoals(newSenderGoals);
    setParentSenderGoals(newSenderGoals);
};
exports.addGoalToSenderGoals = addGoalToSenderGoals;
const removeGoalFromSenderGoals = (index, senderGoals, setSenderGoals, setParentSenderGoals) => {
    const newSenderGoals = senderGoals
        .slice(0, index)
        .concat(senderGoals.slice(index + 1));
    setSenderGoals(newSenderGoals);
    setParentSenderGoals(newSenderGoals);
};
exports.removeGoalFromSenderGoals = removeGoalFromSenderGoals;
const updateGoalInReceiverGoals = (index, receiverGoal, receiverGoals, setReceiverGoals, setParentReceiverGoals) => {
    const newReceiverGoals = receiverGoals
        .slice(0, index)
        .concat([receiverGoal])
        .concat(receiverGoals.slice(index + 1));
    setReceiverGoals(newReceiverGoals);
    setParentReceiverGoals(newReceiverGoals);
};
exports.updateGoalInReceiverGoals = updateGoalInReceiverGoals;
const addGoalToReceiverGoals = (receiverGoal, receiverGoals, setReceiverGoals, setParentReceiverGoals) => {
    const newReceiverGoals = receiverGoals.concat([receiverGoal]);
    setReceiverGoals(newReceiverGoals);
    setParentReceiverGoals(newReceiverGoals);
};
exports.addGoalToReceiverGoals = addGoalToReceiverGoals;
const removeGoalFromReceiverGoals = (index, receiverGoals, setReceiverGoals, setParentReceiverGoals) => {
    const newReceiverGoals = receiverGoals
        .slice(0, index)
        .concat(receiverGoals.slice(index + 1));
    setReceiverGoals(newReceiverGoals);
    setParentReceiverGoals(newReceiverGoals);
};
exports.removeGoalFromReceiverGoals = removeGoalFromReceiverGoals;
//# sourceMappingURL=data:application/json;base64,