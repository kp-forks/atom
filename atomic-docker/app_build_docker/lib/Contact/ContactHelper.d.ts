import { ContactEmailType, ContactPhoneType, ContactType, ImAddressType, linkAddress } from '@lib/dataTypes/ContactType';
import { ApolloClient, NormalizedCacheObject } from '@apollo/client';
import { UserContactInfoType } from '@lib/dataTypes/UserContactInfoType';
import { Dispatch, SetStateAction } from 'react';
export declare const deleteContactInfoItems: (client: ApolloClient<NormalizedCacheObject>, itemIds: string[]) => Promise<void>;
export declare const upsertContactInfoItems: (client: ApolloClient<NormalizedCacheObject>, contactInfos: UserContactInfoType[]) => Promise<void>;
export declare const updateInfoItemTypeValue: (infoItem: UserContactInfoType, newItemIndex: number, newType: "email" | "phone", oldInfoItems: UserContactInfoType[], setInfoItems: Dispatch<SetStateAction<UserContactInfoType[]>>) => void;
export declare const updateInfoItemIdValue: (infoItem: UserContactInfoType, newItemIndex: number, newId: string, oldInfoItems: UserContactInfoType[], setInfoItems: Dispatch<SetStateAction<UserContactInfoType[]>>) => void;
export declare const updateInfoItemNameValue: (infoItem: UserContactInfoType, newItemIndex: number, newName: string, oldInfoItems: UserContactInfoType[], setInfoItems: Dispatch<SetStateAction<UserContactInfoType[]>>) => void;
export declare const updateInfoItemPrimaryValue: (infoItem: UserContactInfoType, newItemIndex: number, newPrimary: boolean, oldInfoItems: UserContactInfoType[], setInfoItems: Dispatch<SetStateAction<UserContactInfoType[]>>) => void;
export declare const removeInfoItemToItems: (index: number, infoItems: UserContactInfoType[], setInfoItems: Dispatch<SetStateAction<UserContactInfoType[]>>) => UserContactInfoType[];
export declare const addInfoItemToItems: (infoItem: UserContactInfoType, infoItems: UserContactInfoType[], setInfoItems: Dispatch<SetStateAction<UserContactInfoType[]>>) => void;
export declare const listUserContactInfosGivenUserId: (client: ApolloClient<NormalizedCacheObject>, userId: string) => Promise<any>;
export declare const addUserContactInfo: (client: ApolloClient<NormalizedCacheObject>, contactInfo: UserContactInfoType) => Promise<any>;
export declare const createContact: (client: ApolloClient<NormalizedCacheObject>, userId: string, imageAvailable: boolean, name?: string, firstName?: string, middleName?: string, lastName?: string, maidenName?: string, namePrefix?: string, nameSuffix?: string, nickname?: string, phoneticFirstName?: string, phoneticMiddleName?: string, phoneticLastName?: string, company?: string, jobTitle?: string, department?: string, notes?: string, contactType?: string, emails?: ContactEmailType[], phoneNumbers?: ContactPhoneType[], imAddresses?: ImAddressType[], linkAddresses?: linkAddress[], app?: string) => Promise<any>;
export declare const upsertContact: (client: ApolloClient<NormalizedCacheObject>, userId: string, id: string, imageAvailable?: boolean | null, name?: string | null, firstName?: string | null, middleName?: string | null, lastName?: string | null, maidenName?: string | null, namePrefix?: string | null, nameSuffix?: string | null, nickname?: string | null, phoneticFirstName?: string | null, phoneticMiddleName?: string | null, phoneticLastName?: string | null, company?: string | null, jobTitle?: string | null, department?: string | null, notes?: string | null, contactType?: string | null, emails?: ContactEmailType[] | null, phoneNumbers?: ContactPhoneType[] | null, imAddresses?: ImAddressType[] | null, linkAddresses?: linkAddress[] | null, app?: string | null) => Promise<any>;
export declare const searchContactsByName: (client: ApolloClient<NormalizedCacheObject>, userId: string, name: string) => Promise<ContactType[] | []>;
export declare const listUserContactsHelper: (client: ApolloClient<NormalizedCacheObject>, userId: string) => Promise<any>;
export declare const updateContact: (client: ApolloClient<NormalizedCacheObject>, contactId: string, imageAvailable?: boolean, name?: string, firstName?: string, middleName?: string, lastName?: string, maidenName?: string, namePrefix?: string, nameSuffix?: string, nickname?: string, phoneticFirstName?: string, phoneticMiddleName?: string, phoneticLastName?: string, company?: string, jobTitle?: string, department?: string, notes?: string, contactType?: string, emails?: ContactEmailType[], phoneNumbers?: ContactPhoneType[], imAddresses?: ImAddressType[], linkAddresses?: linkAddress[], app?: string) => Promise<any>;
export declare const deleteContact: (client: ApolloClient<NormalizedCacheObject>, contactId: string) => Promise<void>;
/** end */
