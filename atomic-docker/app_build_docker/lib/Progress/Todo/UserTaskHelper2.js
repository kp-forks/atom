"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createWeeklyDeadline = exports.createDailyDeadline = exports.submitEventForQueue = exports.submitCalendarForQueue = exports.createDeadlineEventForTaskList = exports.createDeadlineForTask = exports.editEventForTask = exports.deleteEventInCalendarForTask = exports.deleteEvent = exports.createEventForTask = exports.createEventFromUTCForTask = exports.removeEventForTask = exports.getEventForTask = void 0;
const session_1 = __importDefault(require("supertokens-web-js/recipe/session"));
const date_utils_1 = require("@lib/date-utils");
const lodash_1 = __importDefault(require("lodash"));
const UserCreateCalendarHelper_1 = require("@lib/Calendar/UserCreateCalendarHelper");
const googleCalendarHelper_1 = require("@lib/calendarLib/googleCalendarHelper");
const constants_1 = require("@lib/calendarLib/constants");
const constants_2 = require("@lib/constants");
const axios_1 = __importDefault(require("axios"));
const UserEditCalendarHelper_1 = require("@lib/Calendar/UserEditCalendarHelper");
const calendarDbHelper_1 = require("@lib/calendarLib/calendarDbHelper");
const getEventById_1 = __importDefault(require("@lib/apollo/gql/getEventById"));
const deleteEventById_1 = __importDefault(require("@lib/apollo/gql/deleteEventById"));
const getCalendarById_1 = __importDefault(require("@lib/apollo/gql/getCalendarById"));
const AttendeeHelper_1 = require("@lib/Calendar/Attendee/AttendeeHelper");
const ConferenceHelper_1 = require("@lib/Calendar/Conference/ConferenceHelper");
const ReminderHelper_1 = require("@lib/Calendar/Reminder/ReminderHelper");
const zoomMeetingHelper_1 = require("@lib/zoom/zoomMeetingHelper");
const UserCreateCalendarHelper_2 = require("@lib/Calendar/UserCreateCalendarHelper");
const UserTaskHelper3_1 = require("./UserTaskHelper3");
const constants_3 = require("./constants");
const getEventForTask = async (eventId, client) => {
    try {
        const event = (await client.query({
            query: getEventById_1.default,
            variables: {
                id: eventId,
            },
        })).data?.Event_by_pk;
        return event;
    }
    catch (e) {
        console.log(e, ' unable to get event for task');
    }
};
exports.getEventForTask = getEventForTask;
const removeEventForTask = async (client, task, userId) => {
    try {
        await (0, exports.deleteEventInCalendarForTask)(task?.eventId, client, userId);
        task.startDate = null;
        task.endDate = null;
        task.nextDay = null;
        task.eventId = null;
        task.softDeadline = null;
        task.hardDeadline = null;
        await (0, UserTaskHelper3_1.updateTaskByIdInDb)(client, task);
    }
    catch (e) {
        console.log(e, ' unable to delete event for task');
    }
};
exports.removeEventForTask = removeEventForTask;
const createEventFromUTCForTask = async (startDate, endDate, userId, client, taskId, taskType, recurringEndDate, frequency, interval, title, deadlineAlarms, notes, byWeekDay, hardDeadline, softDeadline, selectedCalendarId) => {
    try {
        return (0, UserCreateCalendarHelper_1.createNewEvent)(date_utils_1.dayjs.utc(startDate).toISOString(), date_utils_1.dayjs.utc(endDate).toISOString(), userId, client, selectedCalendarId, undefined, title, false, recurringEndDate, frequency, interval, deadlineAlarms, notes, undefined, false, false, false, true, false, false, false, false, date_utils_1.dayjs.tz.guess(), taskId, undefined, undefined, undefined, undefined, undefined, false, false, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, title, 'opaque', 'private', undefined, undefined, undefined, undefined, date_utils_1.dayjs.tz.guess(), undefined, undefined, deadlineAlarms?.length > 0, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, taskType === 'Daily', taskType === 'Weekly', false, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, true, true, hardDeadline, softDeadline, undefined, undefined, undefined, undefined, (0, date_utils_1.dayjs)(endDate).diff((0, date_utils_1.dayjs)(startDate), 'minute'), undefined, true, undefined, undefined, byWeekDay);
    }
    catch (e) {
        console.log(e, ' unable to create event from utc');
    }
};
exports.createEventFromUTCForTask = createEventFromUTCForTask;
const createEventForTask = async (startDate, endDate, userId, client, taskId, taskType, priority, recurringEndDate, frequency, interval, title, deadlineAlarms, notes, byWeekDay, hardDeadline, softDeadline, selectedCalendarId) => {
    try {
        return (0, UserCreateCalendarHelper_1.createNewEvent)(startDate, endDate, userId, client, selectedCalendarId, undefined, title, false, recurringEndDate, frequency, interval, deadlineAlarms, notes, undefined, false, false, false, true, false, false, false, false, date_utils_1.dayjs.tz.guess(), taskId, undefined, undefined, undefined, undefined, undefined, false, false, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, title, 'opaque', 'private', undefined, undefined, undefined, undefined, date_utils_1.dayjs.tz.guess(), undefined, undefined, deadlineAlarms?.length > 0, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, taskType === 'Daily', taskType === 'Weekly', false, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, true, true, hardDeadline, softDeadline, undefined, undefined, undefined, undefined, (0, date_utils_1.dayjs)(endDate).diff((0, date_utils_1.dayjs)(startDate), 'minute'), undefined, true, undefined, undefined, byWeekDay, priority);
    }
    catch (e) {
        console.log(e, ' unable to create event from utc');
    }
};
exports.createEventForTask = createEventForTask;
const deleteEvent = async (client, userId, eventId) => {
    try {
        console.log(eventId, userId, ' eventId, userId inside deleteEvent');
        await (0, AttendeeHelper_1.deleteAttendeesForEvent)(client, eventId);
        const originalEvent = await (0, calendarDbHelper_1.getEventWithId)(client, eventId);
        console.log(originalEvent, ' originalEvent inside deleteEvent');
        if (originalEvent?.conferenceId) {
            const isZoomAvailable = await (0, zoomMeetingHelper_1.zoomAvailable)(client, userId);
            const conference = await (0, UserCreateCalendarHelper_2.getConferenceInDb)(client, originalEvent?.conferenceId);
            if (isZoomAvailable && conference?.app === 'zoom') {
                await (0, zoomMeetingHelper_1.deleteZoomMeeting)(userId, parseInt(originalEvent?.conferenceId, 10));
            }
            await (0, ConferenceHelper_1.deleteConferencesWithIds)(client, [originalEvent?.conferenceId]);
        }
        await (0, ReminderHelper_1.removeRemindersForEvent)(client, eventId);
        const url = constants_2.methodToSearchIndexAuthUrl;
        const token = await session_1.default.getAccessToken();
        const config = {
            headers: {
                Authorization: `Bearer ${token}`,
                'Content-Type': 'application/json',
                Accept: 'application/json',
            },
        };
        const searchData = {
            search: `${originalEvent?.summary}${originalEvent?.notes ? `: ${originalEvent?.notes}` : ''}`,
            method: 'search',
        };
        const results = await axios_1.default.post(url, searchData, config);
        console.log(results, ' results inside deleteEvent');
        console.log(results?.data, ' results?.data inside deleteEvent');
        console.log(results?.data?.event?.hits?.hits?.[0]?._id, ' results?.data?.event?.hits?.hits?.[0]?._id inside deleteEvent');
        if (results?.data?.event?.hits?.hits?.[0]?._id === eventId) {
            console.log('event exists, delete it');
            const deleteData = {
                eventId: results?.data?.event?.hits?.hits?.[0]?._id,
                method: 'delete',
            };
            const deleteResults = await axios_1.default.post(url, deleteData, config);
            console.log(deleteResults, ' deleteResults in search');
        }
        await (0, exports.deleteEventInCalendarForTask)(eventId, client, userId);
    }
    catch (e) {
        console.log(e, 'error for deleteEvent');
    }
};
exports.deleteEvent = deleteEvent;
const deleteEventInCalendarForTask = async (eventId, client, userId) => {
    try {
        console.log(eventId, userId, ' eventId, userId delEventInAppForTask');
        const eventDoc = (await client.query({
            query: getEventById_1.default,
            variables: {
                id: eventId,
            },
        }))?.data?.Event_by_pk;
        console.log(eventDoc, ' eventDoc inside delEventInAppForTask');
        if (eventDoc?.id) {
            const calendarId = eventDoc?.calendarId;
            const calendarDoc = (await client.query({
                query: getCalendarById_1.default,
                variables: {
                    id: calendarId,
                },
            })).data?.Calendar_by_pk;
            console.log(calendarDoc, ' calendarDoc inside delEventInAppForTask');
            if (calendarDoc?.id) {
                const resource = calendarDoc?.resource;
                console.log(calendarDoc?.resource, ' calendarDoc?.resource inside delEventInAppForTask');
                if (resource === constants_1.googleResourceName) {
                    console.log(userId, calendarId, eventId, ' userId, calendarId, eventId inside delEventinAppForTask');
                    await (0, googleCalendarHelper_1.deleteGoogleEvent)(client, userId, calendarId, eventId.split('#')[0]);
                    await client.mutate({
                        mutation: deleteEventById_1.default,
                        variables: {
                            id: eventId,
                        },
                        update(cache, { data }) {
                            const deletedEvent = data?.delete_Event_by_pk;
                            const normalizedId = cache.identify({
                                id: deletedEvent.id,
                                __typename: deletedEvent.__typename,
                            });
                            cache.evict({ id: normalizedId });
                            cache.gc();
                        },
                    });
                }
            }
        }
    }
    catch (e) {
        console.log(e, ' unable to delete event in app');
    }
};
exports.deleteEventInCalendarForTask = deleteEventInCalendarForTask;
const editEventForTask = async (id, startDate, endDate, userId, client, selectedCalendarId, categoryIds, title, allDay, recurringEndDate, frequency, interval, alarms, notes, location, isFollowUp, isPreEvent, isPostEvent, modifiable, anyoneCanAddSelf, guestsCanInviteOthers, guestsCanSeeOtherGuests, originalAllDay, timezone, taskId, taskType, followUpEventId, preEventId, postEventId, forEventId, zoomMeet, googleMeet, meetingTypeString, zoomPassword, zoomPrivateMeeting, attendees, conferenceId, maxAttendees, sendUpdates, status, summary, transparency, visibility, recurringEventId, iCalUID, htmlLink, colorId, originalTimezone, backgroundColor, foregroundColor, useDefaultAlarms, positiveImpactScore, negativeImpactScore, positiveImpactDayOfWeek, positiveImpactTime, negativeImpactDayOfWeek, negativeImpactTime, preferredDayOfWeek, preferredTime, isExternalMeeting, isExternalMeetingModifiable, isMeetingModifiable, isMeeting, dailyTaskList, weeklyTaskList, isBreak, preferredStartTimeRange, preferredEndTimeRange, copyAvailability, copyTimeBlocking, copyTimePreference, copyReminders, copyPriorityLevel, copyModifiable, copyCategories, copyIsBreak, timeBlocking, userModifiedAvailability, userModifiedTimeBlocking, userModifiedTimePreference, userModifiedReminders, userModifiedPriorityLevel, userModifiedCategories, userModifiedModifiable, userModifiedIsBreak, hardDeadline, softDeadline, copyIsMeeting, copyIsExternalMeeting, userModifiedIsMeeting, userModifiedIsExternalMeeting, duration, copyDuration, userModifiedDuration, method, unlink, byWeekDay, priority) => {
    try {
        console.log(hardDeadline, softDeadline, ' hardDeadline, softDeadline inside editEventForTask');
        console.log(categoryIds, ' categoryIds inside editEventForTask');
        return (0, UserEditCalendarHelper_1.updateEvent)(id, startDate, endDate, userId, client, selectedCalendarId, categoryIds, title, allDay, recurringEndDate, frequency, interval, alarms, notes, location, isFollowUp, isPreEvent, isPostEvent, modifiable, anyoneCanAddSelf, guestsCanInviteOthers, guestsCanSeeOtherGuests, originalAllDay, timezone, taskId, taskType, followUpEventId, preEventId, postEventId, forEventId, zoomMeet, googleMeet, meetingTypeString, zoomPassword, zoomPrivateMeeting, attendees, conferenceId, maxAttendees, sendUpdates, status, summary, transparency, visibility, recurringEventId, iCalUID, htmlLink, colorId, originalTimezone, backgroundColor, foregroundColor, useDefaultAlarms, positiveImpactScore, negativeImpactScore, positiveImpactDayOfWeek, positiveImpactTime, negativeImpactDayOfWeek, negativeImpactTime, preferredDayOfWeek, preferredTime, isExternalMeeting, isExternalMeetingModifiable, isMeetingModifiable, isMeeting, dailyTaskList, weeklyTaskList, isBreak, preferredStartTimeRange, preferredEndTimeRange, copyAvailability, copyTimeBlocking, copyTimePreference, copyReminders, copyPriorityLevel, copyModifiable, copyCategories, copyIsBreak, timeBlocking, userModifiedAvailability, userModifiedTimeBlocking, userModifiedTimePreference, userModifiedReminders, userModifiedPriorityLevel, userModifiedCategories, userModifiedModifiable, userModifiedIsBreak, hardDeadline, softDeadline, copyIsMeeting, copyIsExternalMeeting, userModifiedIsMeeting, userModifiedIsExternalMeeting, duration, copyDuration, userModifiedDuration, method, unlink, byWeekDay, priority);
    }
    catch (e) {
        console.log(e, ' unable to edit event in app');
    }
};
exports.editEventForTask = editEventForTask;
const createDeadlineForTask = async (client, userId, title, duration, taskId, taskType, priority, softDeadline, hardDeadline, reminders, categoryIds, colorId, backgroundColor, notes) => {
    try {
        const calendarDoc = await (0, UserCreateCalendarHelper_1.getCalendarInDb)(client, userId, undefined, true);
        const calendarId = calendarDoc?.id;
        if (calendarId) {
            const eventId = await (0, UserCreateCalendarHelper_1.createNewEvent)((0, date_utils_1.dayjs)().add(1, 'h').format(), (0, date_utils_1.dayjs)().add(1, 'h').add(duration, 'minute').format(), userId, client, calendarId, categoryIds, title, false, undefined, undefined, undefined, reminders, notes || title, undefined, false, false, false, true, false, false, false, false, date_utils_1.dayjs.tz.guess(), taskId, taskType, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, title, 'opaque', 'private', undefined, undefined, undefined, colorId, undefined, backgroundColor, undefined, reminders?.length === 0, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, taskType === 'Daily', taskType === 'Weekly', false, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, true, true, categoryIds?.length > 0, true, true, true, true, hardDeadline, softDeadline, undefined, undefined, undefined, undefined, duration, undefined, true, undefined, undefined, undefined, priority);
            return eventId;
        }
    }
    catch (e) {
        console.log(e, ' unable to create deadline in app');
    }
};
exports.createDeadlineForTask = createDeadlineForTask;
const createDeadlineEventForTaskList = async (client, userId, title, duration, taskId, taskType, priority, softDeadline, hardDeadline) => {
    try {
        let calendarDoc = null;
        calendarDoc = await (0, UserCreateCalendarHelper_1.getCalendarInDb)(client, userId, undefined, true);
        console.log(calendarDoc, ' calendarDoc inside createDeadlineEventForTaskList');
        console.log(calendarDoc?.resource, ' global calendarDoc resource inside createDeadlineEventForTaskList');
        console.log(hardDeadline, softDeadline, ' hardDeadline, softDeadline inside createDeadlineEventForTaskList');
        if (!calendarDoc || calendarDoc?.resource !== constants_1.googleResourceName) {
            calendarDoc = await (0, UserCreateCalendarHelper_1.getCalendarInDb)(client, userId, undefined, undefined, constants_1.googleResourceName);
        }
        console.log(calendarDoc, ' calendarDoc inside createDeadlineEventForTaskList');
        const calendarId = calendarDoc?.id;
        console.log(calendarId, ' calendarId inside createDeadlineEventForTaskList');
        console.log(calendarDoc?.resource, ' resource inside createDeadlineEventForTaskList');
        if (calendarId && calendarDoc?.resource === constants_1.googleResourceName) {
            const colorId = calendarDoc?.colorId;
            const backgroundColor = calendarDoc?.backgroundColor;
            const startDate = (0, date_utils_1.dayjs)().add(1, 'h').format();
            const endDate = (0, date_utils_1.dayjs)().add(1, 'h').add(duration, 'minute').format();
            const dailyTaskList = taskType === 'Daily';
            const weeklyTaskList = taskType === 'Weekly';
            const eventId = await (0, UserCreateCalendarHelper_1.createNewEvent)(startDate, endDate, userId, client, calendarId, undefined, title, false, undefined, undefined, undefined, undefined, title, undefined, false, false, false, true, false, false, false, false, date_utils_1.dayjs.tz.guess(), taskId, taskType, undefined, undefined, undefined, undefined, false, false, undefined, undefined, false, undefined, undefined, undefined, undefined, undefined, title, 'opaque', 'private', undefined, undefined, undefined, undefined, undefined, backgroundColor, undefined, true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, false, true, true, false, dailyTaskList, weeklyTaskList, false, undefined, undefined, false, false, false, false, false, false, false, false, undefined, false, false, false, false, true, false, true, true, hardDeadline, softDeadline, false, false, true, true, duration, false, true, 'update', false, undefined, priority);
            console.log(eventId, ' eventId inside createDeadlineEventForTaskList');
            return {
                id: `${eventId}#${calendarId}`,
                eventId,
                userId,
                dailyTaskList,
                weeklyTaskList,
                calendarId,
                title,
                duration,
                taskId,
                taskType,
                priority,
                colorId,
                backgroundColor,
                startDate,
                endDate,
                createdDate: (0, date_utils_1.dayjs)().toISOString(),
                updatedAt: (0, date_utils_1.dayjs)().toISOString(),
                deleted: false,
                timezone: date_utils_1.dayjs.tz.guess(),
                isFollowUp: false,
                isPreEvent: false,
                isPostEvent: false,
                modifiable: true,
                anyoneCanAddSelf: false,
                guestsCanInviteOthers: false,
                guestsCanSeeOtherGuests: false,
                originalStartDate: (0, date_utils_1.dayjs)().format(),
                originalAllDay: false,
                summary: title,
                transparency: 'opaque',
                visibility: 'private',
                isBreak: false,
                userModifiedAvailability: false,
                userModifiedPriorityLevel: true,
                userModifiedModifiable: true,
                userModifiedIsBreak: true,
                softDeadline,
                hardDeadline,
                userModifiedDuration: true,
                method: 'update',
                notes: title,
            };
        }
    }
    catch (e) {
        console.log(e, ' unable to create event in app');
    }
};
exports.createDeadlineEventForTaskList = createDeadlineEventForTaskList;
const submitCalendarForQueue = async (client, userId, startDate, endDate, toast) => {
    try {
        const calendar = await (0, UserCreateCalendarHelper_1.getCalendarInDb)(client, userId, undefined, undefined, constants_1.googleResourceName);
        if (!calendar) {
            console.log('no google calendar inside submitCalendarForQueue');
            return;
        }
        const token = await session_1.default.getAccessToken();
        const config = {
            headers: {
                Authorization: `Bearer ${token}`,
                'Content-Type': 'application/json',
                Accept: 'application/json',
            },
        };
        const body = {
            userId,
            startDate,
            endDate: endDate,
            timezone: date_utils_1.dayjs.tz.guess(),
        };
        const url = constants_2.calendarToQueueAuthUrl;
        const results = await axios_1.default.post(url, body, config);
        if (results.data.message) {
            if (toast) {
                toast({
                    status: 'success',
                    title: 'Running Schedule Assist',
                    description: 'Check back in a few minutes',
                    duration: 9000,
                    isClosable: true,
                });
            }
        }
    }
    catch (e) {
        console.log(e, ' unable to create event in app');
    }
};
exports.submitCalendarForQueue = submitCalendarForQueue;
const submitEventForQueue = async (event, client, userId, isDaily, toast) => {
    try {
        const calendar = await (0, UserCreateCalendarHelper_1.getCalendarInDb)(client, userId, undefined, undefined, constants_1.googleResourceName);
        if (!calendar) {
            console.log('no google calendar inside submitEventForQueue');
            return;
        }
        const token = await session_1.default.getAccessToken();
        const url = isDaily === true ? constants_2.eventToQueueShortAuthUrl : constants_2.eventToQueueAuthUrl;
        const config = {
            headers: {
                Authorization: `Bearer ${token}`,
                'Content-Type': 'application/json',
                Accept: 'application/json',
            },
        };
        const filteredEvent = lodash_1.default.omit(event, ['__typename']);
        const results = await axios_1.default.post(url, filteredEvent, config);
        if (results.data.message) {
            if (toast) {
                toast({
                    status: 'success',
                    title: 'Event added to queue',
                    description: 'Event added to queue for schedule assist',
                    duration: 9000,
                    isClosable: true,
                });
            }
        }
    }
    catch (e) {
        console.log(e, 'error for changeLink');
    }
};
exports.submitEventForQueue = submitEventForQueue;
const createDailyDeadline = async (client, userId, taskId, newDailyTaskText, newDailyPriority, newDailyDeadline, newDailyDeadlineType, newDailyDuration, toast) => {
    try {
        const notes = newDailyTaskText;
        if (!notes) {
            if (toast) {
                toast({
                    status: 'error',
                    title: 'Empty',
                    description: 'Your task is empty.',
                    duration: 9000,
                    isClosable: true,
                });
            }
            return;
        }
        console.log(newDailyDeadline, newDailyDeadlineType, ' newDailyDeadline, newDailyDeadlineType inside createDailyDeadline');
        const event = await (0, exports.createDeadlineEventForTaskList)(client, userId, notes, newDailyDuration, taskId, 'Daily', newDailyPriority, newDailyDeadlineType === 'soft' ? newDailyDeadline : null, newDailyDeadlineType === 'hard' ? newDailyDeadline : null);
        console.log(event, 'event inside createDailyDeadline');
        if (event) {
            return event;
        }
        return null;
    }
    catch (e) {
        console.log(e, ' unable to create event in app');
    }
};
exports.createDailyDeadline = createDailyDeadline;
const createWeeklyDeadline = async (client, userId, taskId, newWeeklyTaskText, newWeeklyPriority, newWeeklyDeadline, newWeeklyDeadlineType, newWeeklyDuration, toast) => {
    try {
        const notes = newWeeklyTaskText;
        if (!notes) {
            if (toast) {
                toast({
                    status: 'error',
                    title: 'Empty',
                    description: 'Your task is empty',
                    duration: 9000,
                    isClosable: true,
                });
            }
            return;
        }
        console.log(newWeeklyDeadline, newWeeklyDeadlineType, ' newWeeklyDeadline, newWeeklyDeadlineType inside createWeeklyDeadline');
        const event = await (0, exports.createDeadlineEventForTaskList)(client, userId, notes, newWeeklyDuration, taskId, constants_3.WeeklyTask, newWeeklyPriority, newWeeklyDeadlineType === 'soft' ? newWeeklyDeadline : null, newWeeklyDeadlineType === 'hard' ? newWeeklyDeadlineType : null);
        if (event) {
            return event;
        }
    }
    catch (e) {
        console.log(e, ' unable to create event in app');
    }
};
exports.createWeeklyDeadline = createWeeklyDeadline;
//# sourceMappingURL=data:application/json;base64,