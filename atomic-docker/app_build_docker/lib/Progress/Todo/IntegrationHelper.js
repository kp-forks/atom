"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryNotionDB = exports.createTaskNote = exports.updateTaskNote = exports.processTaskFromNotion = exports.updateTaskInStore = exports.createTaskInStore = exports.deleteNotionBlock = exports.TableName = void 0;
const date_utils_1 = require("@lib/date-utils");
const axios_1 = __importDefault(require("axios"));
const constants_1 = require("./constants");
// import { getRealmApp } from '@realm1/realm'
//
// const realm = getRealmApp()
// dayjs.extend(utc)
// dayjs.extend(isTomorrow)
var TableName;
(function (TableName) {
    TableName["DAILY"] = "Daily";
    TableName["WEEKLY"] = "Weekly";
    TableName["MASTER"] = "Master";
    TableName["GROCERY"] = "Grocery";
})(TableName || (exports.TableName = TableName = {}));
var AppName;
(function (AppName) {
    AppName["NOTION"] = "Notion";
})(AppName || (AppName = {}));
// blockData?.data?.results'
// data.results[2].properties
// type taskType = 'Daily'|'Weekly'|'Master'|'Grocery'
const CALENDARNAME = 'Atomic Calendar';
const statusKey = {
    'To Do': constants_1.TaskStatus.TODO,
    Doing: constants_1.TaskStatus.DOING,
    Done: constants_1.TaskStatus.DONE,
};
const deleteNotionBlock = async (tableName, syncId) => {
    try {
        // const integration = await getIntegrationInfo(AppName.NOTION, tableName)
        // const url = `https://api.notion.com/v1/blocks/${syncId}`
        // const config = {
        //   headers: {
        //     Authorization: `Bearer ${integration?.token}`,
        //     'Content-Type': 'application/json',
        //     'Notion-Version': '2021-08-16',
        //   },
        // }
        // await axios.delete(url, config)
    }
    catch (e) {
        console.log(e, ' unable to delete notion db');
        console.log(e.response.data, ' error.response.data unable to delete notion db');
        console.log(e.response.status, ' error.response.status unable to delete notion db');
        console.log(e.response.headers, ' error.response.headers unable to delete notion db');
    }
};
exports.deleteNotionBlock = deleteNotionBlock;
const createTaskInStore = async (userId, type, notes, date, nextDay, event, syncId, syncName, startDate, endDate, status, parentId, order) => {
    try {
    }
    catch (e) {
        console.log(e, ' unable to create task in store');
    }
};
exports.createTaskInStore = createTaskInStore;
const updateTaskInStore = async (type, id, notes, date, event, completed, startDate, endDate, completedDate, scheduleId, softDeadline, hardDeadline, important, status, parentId, order, eventId, duration) => {
    console.log(type, id, parentId, ' type, id, parentId inside updatetaskinstore');
    try {
    }
    catch (e) {
        console.log(e, ' unable to update task in store');
    }
};
exports.updateTaskInStore = updateTaskInStore;
const processTaskFromNotion = async (results, type, sub, client) => {
    console.log(results, ' results');
    // temp
    try {
        if (!results?.[0]?.id) {
            return;
        }
        const promises = results.map(async (responseData) => { });
        await Promise.all(promises);
    }
    catch (e) {
        console.log(e, ' unable to process task ');
    }
};
exports.processTaskFromNotion = processTaskFromNotion;
const updateTaskNote = async (type, id, notes, oldDate, noteDate, status, oldEvent, oldCompleted, oldStartDate, oldEndDate, oldCompletedDate, eventId, duration) => {
    // don't update if oldDate is after noteDate
    if ((0, date_utils_1.dayjs)(oldDate).isAfter((0, date_utils_1.dayjs)(noteDate))) {
        return;
    }
    try {
        if (!notes) {
            console.log(notes, ' no notes present updateTaskNotes');
            return;
        }
        // console.log('previous startDate and extractedRruleString does not exist inside updateTaskNotes')
        const newDate = (0, date_utils_1.dayjs)().format();
        return (0, exports.updateTaskInStore)(type, id, notes, newDate, oldEvent, oldCompleted, oldStartDate, oldEndDate, oldCompletedDate, undefined, undefined, undefined, undefined, statusKey[status], undefined, undefined, eventId, duration);
    }
    catch (e) {
        console.log(e, ' unable to update task note inside integration helper');
    }
};
exports.updateTaskNote = updateTaskNote;
const createTaskNote = async (type, notes, syncId, syncName, userId, status, parentId) => {
    try {
        if (!notes) {
            return;
        }
        const newDate = (0, date_utils_1.dayjs)().format();
        const taskId = await (0, exports.createTaskInStore)(userId, type, notes, newDate, false, false, syncId, syncName, '', '', statusKey[status], parentId);
        return taskId;
    }
    catch (e) {
        console.log(e, ' unable to create task note in integration helper');
    }
};
exports.createTaskNote = createTaskNote;
const queryNotionDB = async (integration) => {
    try {
        console.log(integration, ' integration inside queryNotionDB');
        if (!integration?.id) {
            return;
        }
        const url = `https://api.notion.com/v1/databases/${integration?.resourceId}/query`;
        const config = {
            headers: {
                Authorization: `Bearer ${integration?.token}`,
                'Content-Type': 'application/json',
                'Notion-Version': '2021-08-16',
            },
        };
        const data = {
            sorts: [
                {
                    property: 'Last Edited',
                    direction: 'descending',
                },
            ],
        };
        const resultData = await axios_1.default.post(url, data, config);
        const responseData = [];
        if (resultData?.data?.results[0]?.id) {
            const { data } = resultData;
            console.log(data, ' data from query NotionDB');
            console.log(data.results, ' results from query NotionDB');
            console.log(data.results?.[2]?.properties, ' results?.[2]?.properties from query NotionDB');
            console.log(data.results?.[2]?.properties?.Name?.title[0]?.text, ' results?.[2].properties?.Name?.title[0]?.text from query NotionDB');
            const { results } = data;
            for (let i = 0; i < results.length; i++) {
                const { properties, id: resultId } = results[i];
                const status = properties?.Status?.select?.name;
                const title = properties?.Name?.title?.[0]?.plain_text;
                const created_time = properties?.['Date Created']?.created_time;
                const last_edited_time = properties?.['Date Edited']?.last_edited_time;
                const blockUrl = `https://api.notion.com/v1/blocks/${resultId}/children?page_size=100`;
                const blockData = await axios_1.default.get(blockUrl, config);
                console.log(blockData, ' blockData');
                if (blockData?.data?.results?.[0]?.id) {
                    console.log(blockData?.data?.results, ' blockData?.data?.results');
                    const blockResults = blockData.data.results;
                    const filteredToDos = blockResults.filter((i) => i.type === 'to_do');
                    console.log(filteredToDos, ' filteredToDos');
                    console.log(filteredToDos[0]?.to_do?.text, ' filteredToDos[0][to_do].text');
                    console.log(filteredToDos[0]?.to_do?.text[0]?.plain_text, ' filteredToDos[0][to_do].text[0].plain_text');
                    if (filteredToDos.length > 0) {
                        const list = filteredToDos.map((i) => {
                            const { to_do, id } = i;
                            const { checked, text } = to_do;
                            return {
                                checked,
                                text: text?.[0]?.plain_text,
                                id,
                            };
                        });
                        responseData.push({
                            id: resultId,
                            status,
                            title,
                            list,
                            created_time,
                            last_edited_time,
                        });
                    }
                    else {
                        responseData.push({
                            id: resultId,
                            status,
                            title,
                            created_time,
                            last_edited_time,
                        });
                    }
                }
            }
            console.log(responseData, ' responseData created');
            return responseData;
        }
        return;
    }
    catch (e) {
        console.log(e, ' unable to query notion db');
        console.log(e.response.data, ' error.response.data unable to query notion db');
        console.log(e.response.status, ' error.response.status unable to query notion db');
        console.log(e.response.headers, ' error.response.headers unable to query notion db');
    }
};
exports.queryNotionDB = queryNotionDB;
//# sourceMappingURL=data:application/json;base64,