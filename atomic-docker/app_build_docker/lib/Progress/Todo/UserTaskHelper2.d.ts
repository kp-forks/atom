import { Day } from '@lib/Schedule/constants';
import { meetingTypeStringType } from '@lib/Calendar/UserCreateCalendarHelper';
import { EventType, Time } from '@lib/dataTypes/EventType';
import { LocationType, BufferTimeType } from '@lib/dataTypes/EventType';
import { SendUpdatesType, TransparencyType, VisibilityType } from '@lib/calendarLib/types';
import { Person } from '@lib/Calendar/types';
import { DeadlineType, TaskPlusType } from '@pages/Progress/Todo/UserTask';
import { ApolloClient, NormalizedCacheObject } from '@apollo/client';
type RecurrenceFrequency = 'daily' | 'weekly' | 'monthly' | 'yearly';
type TaskType = 'Daily' | 'Weekly' | 'Master' | 'Grocery' | string;
export declare const getEventForTask: (eventId: string, client: ApolloClient<NormalizedCacheObject>) => Promise<any>;
export declare const removeEventForTask: (client: ApolloClient<NormalizedCacheObject>, task: TaskPlusType, userId: string) => Promise<void>;
export declare const createEventFromUTCForTask: (startDate: string, endDate: string, userId: string, client: ApolloClient<NormalizedCacheObject>, taskId: string, taskType: TaskType, recurringEndDate?: string, frequency?: RecurrenceFrequency, interval?: number, title?: string, deadlineAlarms?: string[], notes?: string, byWeekDay?: Day[], hardDeadline?: string, softDeadline?: string, selectedCalendarId?: string) => Promise<any>;
export declare const createEventForTask: (startDate: string, endDate: string, userId: string, client: ApolloClient<NormalizedCacheObject>, taskId: string, taskType: TaskType, priority: number, recurringEndDate?: string, frequency?: RecurrenceFrequency, interval?: number, title?: string, deadlineAlarms?: string[], notes?: string, byWeekDay?: Day[], hardDeadline?: string, softDeadline?: string, selectedCalendarId?: string) => Promise<any>;
export declare const deleteEvent: (client: ApolloClient<NormalizedCacheObject>, userId: string, eventId: string) => Promise<void>;
export declare const deleteEventInCalendarForTask: (eventId: string, client: ApolloClient<NormalizedCacheObject>, userId: string) => Promise<void>;
export declare const editEventForTask: (id: string, startDate: string, endDate: string, userId: string, client: ApolloClient<NormalizedCacheObject>, selectedCalendarId: string, categoryIds?: string[], title?: string, allDay?: boolean, recurringEndDate?: string, frequency?: RecurrenceFrequency, interval?: number, alarms?: string[] | number[], notes?: string, location?: LocationType, isFollowUp?: boolean, isPreEvent?: boolean, isPostEvent?: boolean, modifiable?: boolean, anyoneCanAddSelf?: boolean, guestsCanInviteOthers?: boolean, guestsCanSeeOtherGuests?: boolean, originalAllDay?: boolean, timezone?: string, taskId?: string, taskType?: string, followUpEventId?: string, preEventId?: string, postEventId?: string, forEventId?: string, zoomMeet?: boolean, googleMeet?: boolean, meetingTypeString?: meetingTypeStringType, zoomPassword?: string, zoomPrivateMeeting?: boolean, attendees?: Person[], conferenceId?: string, maxAttendees?: number, sendUpdates?: SendUpdatesType, status?: string, summary?: string, transparency?: TransparencyType, visibility?: VisibilityType, recurringEventId?: string, iCalUID?: string, htmlLink?: string, colorId?: string, originalTimezone?: string, backgroundColor?: string, foregroundColor?: string, useDefaultAlarms?: boolean, positiveImpactScore?: number, negativeImpactScore?: number, positiveImpactDayOfWeek?: number, positiveImpactTime?: Time, negativeImpactDayOfWeek?: number, negativeImpactTime?: Time, preferredDayOfWeek?: number, preferredTime?: Time, isExternalMeeting?: boolean, isExternalMeetingModifiable?: boolean, isMeetingModifiable?: boolean, isMeeting?: boolean, dailyTaskList?: boolean, weeklyTaskList?: boolean, isBreak?: boolean, preferredStartTimeRange?: Time, preferredEndTimeRange?: Time, copyAvailability?: boolean, copyTimeBlocking?: boolean, copyTimePreference?: boolean, copyReminders?: boolean, copyPriorityLevel?: boolean, copyModifiable?: boolean, copyCategories?: boolean, copyIsBreak?: boolean, timeBlocking?: BufferTimeType, userModifiedAvailability?: boolean, userModifiedTimeBlocking?: boolean, userModifiedTimePreference?: boolean, userModifiedReminders?: boolean, userModifiedPriorityLevel?: boolean, userModifiedCategories?: boolean, userModifiedModifiable?: boolean, userModifiedIsBreak?: boolean, hardDeadline?: string, softDeadline?: string, copyIsMeeting?: boolean, copyIsExternalMeeting?: boolean, userModifiedIsMeeting?: boolean, userModifiedIsExternalMeeting?: boolean, duration?: number, copyDuration?: boolean, userModifiedDuration?: boolean, method?: "create" | "update", unlink?: boolean, byWeekDay?: Day[], priority?: number) => Promise<any>;
export declare const createDeadlineForTask: (client: ApolloClient<NormalizedCacheObject>, userId: string, title: string, duration: number, taskId: string, taskType: TaskType, priority: number, softDeadline?: string, hardDeadline?: string, reminders?: number[], categoryIds?: string[], colorId?: string, backgroundColor?: string, notes?: string) => Promise<any>;
export declare const createDeadlineEventForTaskList: (client: ApolloClient<NormalizedCacheObject>, userId: string, title: string, duration: number, taskId: string, taskType: TaskType, priority: number, softDeadline?: string, hardDeadline?: string) => Promise<EventType>;
export declare const submitCalendarForQueue: (client: ApolloClient<NormalizedCacheObject>, userId: string, startDate: string, endDate: string, toast?: any) => Promise<void>;
export declare const submitEventForQueue: (event: EventType, client: ApolloClient<NormalizedCacheObject>, userId: string, isDaily?: boolean, toast?: any) => Promise<void>;
export declare const createDailyDeadline: (client: ApolloClient<NormalizedCacheObject>, userId: string, taskId: string, newDailyTaskText: string, newDailyPriority: number, newDailyDeadline: string, newDailyDeadlineType: DeadlineType, newDailyDuration: number, toast?: any) => Promise<any>;
export declare const createWeeklyDeadline: (client: ApolloClient<NormalizedCacheObject>, userId: string, taskId: string, newWeeklyTaskText: string, newWeeklyPriority: number, newWeeklyDeadline: string, newWeeklyDeadlineType: DeadlineType, newWeeklyDuration: number, toast?: any) => Promise<any>;
export {};
