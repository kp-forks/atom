"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeItemFromAlarms = exports.addItemToAlarms = exports.removeItemFromCategories = exports.addItemToCategories = exports.updateEntryInManualEntries = exports.addOneToManualEntries = exports.addSelectedContactsToAttendees = exports.updateContactSelection = exports.removeContactFromAttendee = exports.removeEntryFromManualEntries = exports.addEntryToManualEntries = exports.addContactToAttendees = exports.addAttendeeToAttendees = exports.removeAttendeeFromAttendees = void 0;
const lodash_1 = __importDefault(require("lodash"));
const uuid_1 = require("uuid");
const removeAttendeeFromAttendees = (a, setA, index, setParentA) => {
    const newA = a.slice(0, index).concat(a.slice(index + 1));
    setA(newA);
    setParentA(newA);
};
exports.removeAttendeeFromAttendees = removeAttendeeFromAttendees;
const addAttendeeToAttendees = (a, p, setA, setParentA) => {
    const newA = a.concat([p]);
    setA(newA);
    setParentA(newA);
};
exports.addAttendeeToAttendees = addAttendeeToAttendees;
const addContactToAttendees = (c, attendees, setA, setParentA) => {
    const formattedC = {
        id: c?.id,
        name: c?.name,
        emails: c?.emails.map((e) => ({
            primary: e?.primary,
            value: e?.value,
            type: e?.type,
            displayName: e?.displayName,
        })),
        phoneNumbers: c?.phoneNumbers,
        imAddresses: c?.imAddresses,
    };
    const newAttendees = attendees.concat([formattedC]);
    setA(newAttendees);
    setParentA(newAttendees);
};
exports.addContactToAttendees = addContactToAttendees;
const addEntryToManualEntries = (a, p, setA, setParentA) => {
    const newA = a.concat([p]);
    setA(newA);
    setParentA(newA);
};
exports.addEntryToManualEntries = addEntryToManualEntries;
const removeEntryFromManualEntries = (manualEntries, setManualEntries, attendees, setAttendees, setParentA, index, parentIndex) => {
    const newEntries = manualEntries
        .slice(0, index)
        .concat(manualEntries.slice(index + 1));
    setManualEntries(newEntries);
    const newAttendees = attendees
        .slice(0, parentIndex)
        .concat(attendees.slice(parentIndex + 1));
    setAttendees(newAttendees);
    setParentA(newAttendees);
};
exports.removeEntryFromManualEntries = removeEntryFromManualEntries;
const removeContactFromAttendee = (c, attendees, setAttendees, setParentA) => {
    const foundIndex = attendees.findIndex((a) => a?.id === c?.id);
    if (foundIndex > -1) {
        const newAttendees = attendees
            .slice(0, foundIndex)
            .concat(attendees.slice(foundIndex + 1));
        setAttendees(newAttendees);
        setParentA(newAttendees);
    }
};
exports.removeContactFromAttendee = removeContactFromAttendee;
const updateContactSelection = (value, selectedCo, a, setA, index) => {
    const newA = lodash_1.default.cloneDeep(a
        .slice(0, index)
        .concat([{ ...selectedCo, selected: value }])
        .concat(a.slice(index + 1)));
    setA(newA);
};
exports.updateContactSelection = updateContactSelection;
const addSelectedContactsToAttendees = (cc, setCC, at, setAt, setParentA) => {
    const selectedContacts = cc.filter((c) => c?.selected === true);
    const unselectedContacts = cc.filter((c) => c?.selected === false);
    const removedUnselectedAt = lodash_1.default.differenceBy(at, unselectedContacts, (a) => a?.id);
    const formattedContacts = selectedContacts.map((c) => ({
        id: c?.id,
        name: c?.name,
        emails: c?.emails.map((e) => ({
            primary: e?.primary,
            value: e?.value,
            type: e?.type,
            displayName: e?.displayName,
        })),
        phoneNumbers: c?.phoneNumbers,
        imAddresses: c?.imAddresses,
    }));
    const newAt = removedUnselectedAt.concat(formattedContacts);
    setAt(newAt);
    setParentA(newAt);
    setCC(cc.map((e) => ({ ...e, selected: false })));
};
exports.addSelectedContactsToAttendees = addSelectedContactsToAttendees;
const addOneToManualEntries = (me, setMe, attendees, setAttendees, setParentA) => {
    const newValue = {
        id: (0, uuid_1.v4)(),
        emails: [{ primary: false, value: '', type: '', displayName: '' }],
        additionalGuests: 0,
    };
    const newMe = lodash_1.default.uniqWith(me.concat([newValue]), lodash_1.default.isEqual);
    setMe(newMe);
    const newAttendees = lodash_1.default.uniqWith(attendees.concat([newValue]), lodash_1.default.isEqual);
    setAttendees(newAttendees);
    setParentA(newAttendees);
};
exports.addOneToManualEntries = addOneToManualEntries;
const updateEntryInManualEntries = (me, setMe, index, attendees, setAttendees, setParentA, parentIndex, emails, displayName, additionalGuests) => {
    const oldDoc = me[index];
    const newDoc = {
        id: oldDoc?.id,
        name: displayName ||
            oldDoc?.name ||
            emails?.[0]?.displayName ||
            oldDoc?.emails?.[0]?.displayName,
        emails: emails || oldDoc?.emails,
        additionalGuests: additionalGuests || oldDoc?.additionalGuests,
    };
    const newMe = me
        .slice(0, index)
        .concat([newDoc])
        .concat(me.slice(index + 1));
    setMe(newMe);
    const newAttendees = attendees
        .slice(0, parentIndex)
        .concat([newDoc])
        .concat(attendees.slice(parentIndex + 1));
    setAttendees(newAttendees);
    setParentA(newAttendees);
};
exports.updateEntryInManualEntries = updateEntryInManualEntries;
const addItemToCategories = (setTag, item = null, setItem, categories = [], setCategories, setParentCategories) => {
    const newCategories = lodash_1.default.uniqWith(categories.concat([item]), lodash_1.default.isEqual).filter((e) => e !== null);
    setCategories(newCategories);
    setParentCategories(newCategories);
    setTag(undefined);
    setItem(null);
};
exports.addItemToCategories = addItemToCategories;
const removeItemFromCategories = (categories, setCategories, setParentCategories, index) => {
    const newCategories = categories
        .slice(0, index)
        .concat(categories.slice(index + 1));
    setCategories(newCategories);
    setParentCategories(newCategories);
};
exports.removeItemFromCategories = removeItemFromCategories;
const addItemToAlarms = (item, alarms, setAlarms, setParentAlarms, setAlarm) => {
    const newAlarms = lodash_1.default.uniqWith(alarms.concat([item]), lodash_1.default.isEqual);
    setAlarms(newAlarms);
    setParentAlarms(newAlarms);
    setAlarm(0);
};
exports.addItemToAlarms = addItemToAlarms;
const removeItemFromAlarms = (index, alarms, setAlarms, setParentAlarms) => {
    const newAlarms = alarms.slice(0, index).concat(alarms.slice(index + 1));
    setAlarms(newAlarms);
    setParentAlarms(newAlarms);
};
exports.removeItemFromAlarms = removeItemFromAlarms;
/** end */
//# sourceMappingURL=data:application/json;base64,