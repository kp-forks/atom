"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateEvent = exports.updateConference = exports.updateEventInGoogle = void 0;
const uuid_1 = require("uuid");
const rrule_1 = require("rrule");
const date_utils_1 = require("@lib/date-utils");
// dayjs.extend(utc)
// dayjs.extend(duration)
// dayjs.extend(timezone)
const googleCalendarHelper_1 = require("@lib/calendarLib/googleCalendarHelper");
const constants_1 = require("@lib/calendarLib/constants");
const constants_2 = require("@lib/zoom/constants");
const zoomMeetingHelper_1 = require("@lib/zoom/zoomMeetingHelper");
const CategoryHelper_1 = require("@lib/Category/CategoryHelper");
const ReminderHelper_1 = require("@lib/Calendar/Reminder/ReminderHelper");
const AttendeeHelper_1 = require("@lib/Calendar/Attendee/AttendeeHelper");
const UserCreateCalendarHelper_1 = require("@lib/Calendar/UserCreateCalendarHelper");
const getEventById_1 = __importDefault(require("@lib/apollo/gql/getEventById"));
const getCalendarIntegrationByResourceAndName_1 = __importDefault(require("@lib/apollo/gql/getCalendarIntegrationByResourceAndName"));
const updateEventInGoogle = async (id, startDate, endDate, userId, client, calendar, conferenceData, attendees, title, allDay, recurringEndDate, frequency, interval, notes, location, isFollowUp, isPreEvent, isPostEvent, modifiable, anyoneCanAddSelf, guestsCanInviteOthers, guestsCanSeeOtherGuests, originalAllDay, alarms, timezone, taskId, taskType, followUpEventId, preEventId, postEventId, forEventId, maxAttendees, sendUpdates, status, transparency, visibility, iCalUID, backgroundColor, foregroundColor, colorId, originalTimezone, useDefaultAlarms, positiveImpactScore, negativeImpactScore, positiveImpactDayOfWeek, positiveImpactTime, negativeImpactDayOfWeek, negativeImpactTime, preferredDayOfWeek, preferredTime, isExternalMeeting, isExternalMeetingModifiable, isMeetingModifiable, isMeeting, dailyTaskList, weeklyTaskList, isBreak, preferredStartTimeRange, preferredEndTimeRange, copyAvailability, copyTimeBlocking, copyTimePreference, copyReminders, copyPriorityLevel, copyModifiable, copyCategories, copyIsBreak, timeBlocking, userModifiedAvailability, userModifiedTimeBlocking, userModifiedTimePreference, userModifiedReminders, userModifiedPriorityLevel, userModifiedCategories, userModifiedModifiable, userModifiedIsBreak, hardDeadline, softDeadline, copyIsMeeting, copyIsExternalMeeting, userModifiedIsMeeting, userModifiedIsExternalMeeting, duration, copyDuration, userModifiedDuration, method, unlink, byWeekDay, priority) => {
    try {
        console.log(alarms, ' alarms inside updateEventInGoogle');
        console.log(hardDeadline, softDeadline, ' hardDeadline, softDeadline inside updateEventInGoogle');
        // validate eventId
        const oldEvent = (await client.query({
            query: getEventById_1.default,
            variables: {
                id: id,
            },
        })).data?.Event_by_pk;
        if (!oldEvent) {
            throw new Error('Event not found');
        }
        let rule = {};
        if (recurringEndDate && frequency) {
            rule = new rrule_1.RRule({
                freq: (0, UserCreateCalendarHelper_1.getRruleFreq)(frequency),
                interval,
                until: (0, date_utils_1.dayjs)(recurringEndDate).toDate(),
                byweekday: byWeekDay?.map((i) => (0, UserCreateCalendarHelper_1.getRRuleDay)(i)),
            });
        }
        let modifiedAlarms = {};
        if (typeof alarms?.[0] === 'string') {
            modifiedAlarms = {
                useDefault: false,
                overrides: alarms.map((i) => ({
                    method: 'email',
                    minutes: date_utils_1.dayjs.duration((0, date_utils_1.dayjs)(startDate).diff((0, date_utils_1.dayjs)(i))).asMinutes(),
                })),
            };
        }
        else if (typeof alarms?.[0] === 'number') {
            modifiedAlarms = {
                useDefault: false,
                overrides: alarms.map((i) => ({ method: 'email', minutes: i })),
            };
        }
        else if (useDefaultAlarms) {
            modifiedAlarms = { useDefault: useDefaultAlarms };
        }
        else {
            // default
            modifiedAlarms = { useDefault: useDefaultAlarms };
        }
        const recurrenceStringArray = frequency &&
            recurringEndDate &&
            interval && [rule.toString()];
        console.log(recurrenceStringArray, ' recurrenceStringArray');
        console.log([rule.toString()], ' [rule.toString()]');
        await (0, googleCalendarHelper_1.patchGoogleEvent)(client, userId, calendar?.id, id.split('#')[0], endDate, startDate, undefined, maxAttendees, sendUpdates, anyoneCanAddSelf, attendees, conferenceData, title, notes, timezone, allDay && (0, date_utils_1.dayjs)(startDate).format('YYYY-MM-DD'), allDay && (endDate || startDate), undefined, guestsCanInviteOthers, false, guestsCanSeeOtherGuests, undefined, undefined, frequency && recurringEndDate && interval ? [rule.toString()] : undefined, modifiedAlarms?.overrides?.[0]
            ? modifiedAlarms
            : null, undefined, status, transparency, visibility, iCalUID, false, undefined, undefined, undefined, undefined, undefined, location?.title);
        console.log(recurringEndDate && frequency && id, ' (recurringEndDate && frequency && eventId)');
        await (0, UserCreateCalendarHelper_1.atomicUpsertEventInDb)(client, id, id.split('#')[0], userId, (0, date_utils_1.dayjs)(startDate).format(), (0, date_utils_1.dayjs)(endDate).format(), (0, date_utils_1.dayjs)().toISOString(), false, priority || 1, isFollowUp ?? false, isPreEvent ?? false, isPostEvent ?? false, modifiable ?? true, anyoneCanAddSelf ?? false, guestsCanInviteOthers ?? false, guestsCanSeeOtherGuests ?? true, (0, date_utils_1.dayjs)(startDate).format(), originalAllDay ?? false, (0, date_utils_1.dayjs)().toISOString(), calendar?.id, title, allDay ?? false, (frequency &&
            recurringEndDate &&
            interval && { frequency, endDate: recurringEndDate, interval }) ??
            null, location, notes, undefined, undefined, 
        // modifiedAlarms,
        timezone ?? date_utils_1.dayjs.tz.guess(), taskId, taskType, followUpEventId, preEventId, postEventId, forEventId, conferenceData?.conferenceId, maxAttendees, sendUpdates, status, title, transparency, visibility, recurringEndDate && frequency && id, iCalUID, undefined, colorId, undefined, // creator - read only G-event
        undefined, // organizer - G-event import only
        false, // endTimeUnspecified - only for G-events
        (frequency && recurringEndDate && interval && [rule.toString()]) ?? null, originalTimezone, //timezone of recurrence instance
        undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, backgroundColor, foregroundColor, useDefaultAlarms, positiveImpactScore, negativeImpactScore, positiveImpactDayOfWeek, positiveImpactTime, negativeImpactDayOfWeek, negativeImpactTime, preferredDayOfWeek, preferredTime, isExternalMeeting, isExternalMeetingModifiable, isMeetingModifiable, isMeeting, dailyTaskList, weeklyTaskList, isBreak, preferredStartTimeRange, preferredEndTimeRange, copyAvailability, copyTimeBlocking, copyTimePreference, copyReminders, copyPriorityLevel, copyModifiable, copyCategories, copyIsBreak, timeBlocking, userModifiedAvailability, userModifiedTimeBlocking, userModifiedTimePreference, userModifiedReminders, userModifiedPriorityLevel, userModifiedCategories, userModifiedModifiable, userModifiedIsBreak, hardDeadline, softDeadline, copyIsMeeting, copyIsExternalMeeting, userModifiedIsMeeting, userModifiedIsExternalMeeting, duration, copyDuration, userModifiedDuration, method, unlink, byWeekDay);
        if (alarms?.length > 0) {
            console.log(alarms, ' alarms inside if clause inside updateEventInGoogle');
            await (0, ReminderHelper_1.updateRemindersForEvent)(client, id, userId, alarms, timezone, useDefaultAlarms);
        }
        else {
            await (0, ReminderHelper_1.removeRemindersForEvent)(client, id);
        }
    }
    catch (e) {
        console.log(e, ' this is e for updateEventInGoogle');
    }
};
exports.updateEventInGoogle = updateEventInGoogle;
const updateConference = async (conferenceId, startDate, endDate, client, calendarId, zoomMeet = false, googleMeet = false, userId, meetingTypeString, attendees, requestId, summary, taskType, notes, zoomPassword, zoomPrivateMeeting) => {
    try {
        // validate
        if (!startDate || !endDate) {
            throw new Error('startDate and endDate are required');
        }
        if (!conferenceId) {
            throw new Error('conferenceId is required');
        }
        if (!calendarId) {
            throw new Error('calendarId is required');
        }
        if (!userId) {
            throw new Error('userId is required');
        }
        let newJoinUrl = '';
        let newStartUrl = '';
        let newConferenceStatus = '';
        let newConferenceId = conferenceId;
        let conferenceName = constants_2.zoomName;
        let conferenceType = 'addOn';
        let conferenceData = {
            type: 'addOn',
            name: conferenceName,
            requestId: (0, uuid_1.v4)(),
            conferenceId,
            createRequest: false,
            entryPoints: [
                {
                    label: constants_2.zoomName,
                    entryPointType: 'video',
                    uri: newJoinUrl,
                    password: zoomPassword,
                },
            ],
        };
        let newRequestId = requestId || (0, uuid_1.v4)();
        if (zoomMeet) {
            const isZoomAvailable = await (0, zoomMeetingHelper_1.zoomAvailable)(client, userId);
            if (isZoomAvailable) {
                const zoomInteg = (await client.query({
                    query: getCalendarIntegrationByResourceAndName_1.default,
                    variables: {
                        userId,
                        name: constants_2.zoomName,
                        resource: constants_2.zoomResourceName,
                    },
                })).data?.Calendar_Integration?.[0];
                const { id: zoomConferenceId, join_url: zoomJoinUrl, start_url: zoomStartUrl, status: zoomStatus, } = await (0, zoomMeetingHelper_1.updateZoomMeeting)(userId, parseInt(newConferenceId, 10), (0, date_utils_1.dayjs)(startDate).format(), date_utils_1.dayjs.tz.guess(), summary ?? taskType ?? notes, date_utils_1.dayjs
                    .duration({
                    hours: (0, date_utils_1.dayjs)(endDate).hour(),
                    minutes: (0, date_utils_1.dayjs)(endDate).minute(),
                })
                    .asMinutes(), zoomInteg?.contactName, zoomInteg?.contactEmail, attendees?.map((i) => i?.email), zoomPrivateMeeting);
                newConferenceId = zoomConferenceId;
                newJoinUrl = zoomJoinUrl;
                newStartUrl = zoomStartUrl;
                newConferenceStatus = zoomStatus;
                conferenceName = constants_2.zoomName;
                conferenceType = 'addOn';
                conferenceData = {
                    type: conferenceType,
                    name: conferenceName,
                    requestId: newRequestId,
                    conferenceId: `${newConferenceId}`,
                    createRequest: false,
                    entryPoints: [
                        {
                            label: constants_2.zoomName,
                            entryPointType: 'video',
                            uri: newJoinUrl,
                            password: zoomPassword,
                        },
                    ],
                };
            }
        }
        else if (googleMeet) {
            conferenceName = constants_1.googleMeetName;
            conferenceType = 'hangoutsMeet';
            conferenceData = {
                type: conferenceType,
                name: conferenceName,
                requestId: newRequestId,
                createRequest: true,
            };
        }
        await (0, UserCreateCalendarHelper_1.upsertConferenceInDb)(client, typeof newConferenceId === 'number'
            ? `${newConferenceId}`
            : newConferenceId, userId, calendarId, zoomMeet ? constants_2.zoomResourceName : constants_1.googleResourceName, newRequestId, meetingTypeString, undefined, undefined, zoomMeet ? constants_2.zoomName : constants_1.googleMeetName, notes, conferenceData?.entryPoints, undefined, undefined, undefined, newJoinUrl, newStartUrl, zoomPrivateMeeting);
        return {
            newConferenceId,
            newJoinUrl,
            newStartUrl,
            newConferenceStatus,
            conferenceName,
            conferenceType,
            conferenceData,
        };
    }
    catch (e) {
        console.log(e, ' this is e for updateConference');
    }
};
exports.updateConference = updateConference;
const updateEvent = async (id, startDate, endDate, userId, client, selectedCalendarId, categoryIds, title, allDay, recurringEndDate, frequency, interval, alarms, notes, location, isFollowUp, isPreEvent, isPostEvent, modifiable, anyoneCanAddSelf, guestsCanInviteOthers, guestsCanSeeOtherGuests, originalAllDay, timezone, taskId, taskType, followUpEventId, preEventId, postEventId, forEventId, zoomMeet, googleMeet, meetingTypeString, zoomPassword, zoomPrivateMeeting, attendees, conferenceId, maxAttendees, sendUpdates, status, summary, transparency, visibility, recurringEventId, iCalUID, htmlLink, colorId, originalTimezone, backgroundColor, foregroundColor, useDefaultAlarms, positiveImpactScore, negativeImpactScore, positiveImpactDayOfWeek, positiveImpactTime, negativeImpactDayOfWeek, negativeImpactTime, preferredDayOfWeek, preferredTime, isExternalMeeting, isExternalMeetingModifiable, isMeetingModifiable, isMeeting, dailyTaskList, weeklyTaskList, isBreak, preferredStartTimeRange, preferredEndTimeRange, copyAvailability, copyTimeBlocking, copyTimePreference, copyReminders, copyPriorityLevel, copyModifiable, copyCategories, copyIsBreak, timeBlocking, userModifiedAvailability, userModifiedTimeBlocking, userModifiedTimePreference, userModifiedReminders, userModifiedPriorityLevel, userModifiedCategories, userModifiedModifiable, userModifiedIsBreak, hardDeadline, softDeadline, copyIsMeeting, copyIsExternalMeeting, userModifiedIsMeeting, userModifiedIsExternalMeeting, duration, copyDuration, userModifiedDuration, method, unlink, byWeekDay, priority) => {
    try {
        console.log(alarms, ' alarms inside updateEvent');
        console.log(categoryIds, ' categoryIds inside updateEvent');
        console.log(hardDeadline, softDeadline, ' hardDeadline, softDeadline inside updateEvent');
        let calendar = {};
        if (selectedCalendarId?.length > 0) {
            calendar = await (0, UserCreateCalendarHelper_1.getCalendarInDb)(client, userId, selectedCalendarId);
        }
        // validate eventId and selectedCalendarId
        if (id.length === 0) {
            throw new Error('id is required');
        }
        if (selectedCalendarId.length === 0) {
            throw new Error('selectedCalendarId is required');
        }
        if (calendar?.resource === constants_1.googleResourceName) {
            const modifiedAttendees = attendees?.map((a) => ({
                additionalGuests: a?.additionalGuests,
                displayName: a?.name,
                email: a?.emails?.[0]?.value,
                id: a?.id,
            }));
            if (conferenceId) {
                // create conferece
                const { 
                // newConferenceId,
                // newJoinUrl,
                // newStartUrl,
                // newConferenceStatus,
                // conferenceName,
                // conferenceType,
                conferenceData, } = await (0, exports.updateConference)(conferenceId, startDate, endDate, client, calendar?.id, zoomMeet, googleMeet, userId, meetingTypeString, modifiedAttendees, undefined, summary, taskType, notes, zoomPassword, zoomPrivateMeeting);
                await (0, exports.updateEventInGoogle)(id, startDate, endDate, userId, client, calendar, conferenceData, // isConference
                modifiedAttendees, title, allDay, recurringEndDate, frequency, interval, notes, location, isFollowUp, isPreEvent, isPostEvent, modifiable, anyoneCanAddSelf, guestsCanInviteOthers, guestsCanSeeOtherGuests, originalAllDay, alarms, timezone, taskId, taskType, followUpEventId, preEventId, postEventId, forEventId, maxAttendees, sendUpdates, status, transparency, visibility, iCalUID, backgroundColor, foregroundColor, colorId, originalTimezone, useDefaultAlarms, positiveImpactScore, negativeImpactScore, positiveImpactDayOfWeek, positiveImpactTime, negativeImpactDayOfWeek, negativeImpactTime, preferredDayOfWeek, preferredTime, isExternalMeeting, isExternalMeetingModifiable, isMeetingModifiable, isMeeting, dailyTaskList, weeklyTaskList, isBreak, preferredStartTimeRange, preferredEndTimeRange, copyAvailability, copyTimeBlocking, copyTimePreference, copyReminders, copyPriorityLevel, copyModifiable, copyCategories, copyIsBreak, timeBlocking, userModifiedAvailability, userModifiedTimeBlocking, userModifiedTimePreference, userModifiedReminders, userModifiedPriorityLevel, userModifiedCategories, userModifiedModifiable, userModifiedIsBreak, hardDeadline, softDeadline, copyIsMeeting, copyIsExternalMeeting, userModifiedIsMeeting, userModifiedIsExternalMeeting, duration, copyDuration, userModifiedDuration, method, unlink, byWeekDay, priority);
            }
            else {
                if (googleMeet || zoomMeet) {
                    const { 
                    // newConferenceId,
                    // newJoinUrl,
                    // newStartUrl,
                    // newConferenceStatus,
                    // conferenceName,
                    // conferenceType,
                    conferenceData, } = await (0, UserCreateCalendarHelper_1.createConference)(startDate, endDate, client, calendar?.id, zoomMeet, googleMeet, userId, meetingTypeString, modifiedAttendees, undefined, summary, taskType, notes, zoomPassword, zoomPrivateMeeting);
                    await (0, exports.updateEventInGoogle)(id, startDate, endDate, userId, client, calendar, conferenceData, // isConference
                    modifiedAttendees, title, allDay, recurringEndDate, frequency, interval, notes, location, isFollowUp, isPreEvent, isPostEvent, modifiable, anyoneCanAddSelf, guestsCanInviteOthers, guestsCanSeeOtherGuests, originalAllDay, alarms, timezone, taskId, taskType, followUpEventId, preEventId, postEventId, forEventId, maxAttendees, sendUpdates, status, transparency, visibility, iCalUID, backgroundColor, foregroundColor, colorId, originalTimezone, useDefaultAlarms, positiveImpactScore, negativeImpactScore, positiveImpactDayOfWeek, positiveImpactTime, negativeImpactDayOfWeek, negativeImpactTime, preferredDayOfWeek, preferredTime, isExternalMeeting, isExternalMeetingModifiable, isMeetingModifiable, isMeeting, dailyTaskList, weeklyTaskList, isBreak, preferredStartTimeRange, preferredEndTimeRange, copyAvailability, copyTimeBlocking, copyTimePreference, copyReminders, copyPriorityLevel, copyModifiable, copyCategories, copyIsBreak, timeBlocking, userModifiedAvailability, userModifiedTimeBlocking, userModifiedTimePreference, userModifiedReminders, userModifiedPriorityLevel, userModifiedCategories, userModifiedModifiable, userModifiedIsBreak, hardDeadline, softDeadline, copyIsMeeting, copyIsExternalMeeting, userModifiedIsMeeting, userModifiedIsExternalMeeting, duration, copyDuration, userModifiedDuration, method, unlink, byWeekDay, priority);
                }
                else {
                    await (0, exports.updateEventInGoogle)(id, startDate, endDate, userId, client, calendar, undefined, // isConference
                    modifiedAttendees, title, allDay, recurringEndDate, frequency, interval, notes, location, isFollowUp, isPreEvent, isPostEvent, modifiable, anyoneCanAddSelf, guestsCanInviteOthers, guestsCanSeeOtherGuests, originalAllDay, alarms, timezone, taskId, taskType, followUpEventId, preEventId, postEventId, forEventId, maxAttendees, sendUpdates, status, transparency, visibility, iCalUID, backgroundColor, foregroundColor, colorId, originalTimezone, useDefaultAlarms, positiveImpactScore, negativeImpactScore, positiveImpactDayOfWeek, positiveImpactTime, negativeImpactDayOfWeek, negativeImpactTime, preferredDayOfWeek, preferredTime, isExternalMeeting, isExternalMeetingModifiable, isMeetingModifiable, isMeeting, dailyTaskList, weeklyTaskList, isBreak, preferredStartTimeRange, preferredEndTimeRange, copyAvailability, copyTimeBlocking, copyTimePreference, copyReminders, copyPriorityLevel, copyModifiable, copyCategories, copyIsBreak, timeBlocking, userModifiedAvailability, userModifiedTimeBlocking, userModifiedTimePreference, userModifiedReminders, userModifiedPriorityLevel, userModifiedCategories, userModifiedModifiable, userModifiedIsBreak, hardDeadline, softDeadline, copyIsMeeting, copyIsExternalMeeting, userModifiedIsMeeting, userModifiedIsExternalMeeting, duration, copyDuration, userModifiedDuration, method, unlink, byWeekDay, priority);
                }
            }
            if (attendees?.length > 0) {
                await (0, AttendeeHelper_1.deleteAttendeesForEvent)(client, id);
                // create new attendees
                const attendeePromises = attendees.map((a) => {
                    return (0, AttendeeHelper_1.upsertAttendeesInDb)(client, (0, uuid_1.v4)(), userId, id, a?.emails, a?.name, a?.id, a?.phoneNumbers, a?.imAddresses, a?.additionalGuests, a?.optional, a?.resource);
                });
                await Promise.all(attendeePromises);
            }
        }
        if (categoryIds?.length > 0) {
            console.log(categoryIds, ' categoryIds after if if inside updateEvent');
            // remove old category connections
            await (0, CategoryHelper_1.removeAllCategoriesForEvent)(client, id);
            // create category_event connections
            const categoryPromises = categoryIds?.map((i) => (0, CategoryHelper_1.upsertCategoryEventConnection)(client, userId, i, id));
            await Promise.all(categoryPromises);
        }
        else {
            // remove old category connections
            await (0, CategoryHelper_1.removeAllCategoriesForEvent)(client, id);
        }
    }
    catch (e) {
        console.log(e, ' this is e for updateEvent');
    }
};
exports.updateEvent = updateEvent;
//# sourceMappingURL=data:application/json;base64,