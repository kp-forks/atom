import { Day } from '@lib/Schedule/constants';
import { CalendarType } from '@lib/dataTypes/CalendarType';
import { Time, BufferTimeType } from '@lib/dataTypes/EventType';
import { LocationType } from '@lib/dataTypes/EventType';
import { googleMeetName } from '@lib/calendarLib/constants';
import { GoogleAttendeeType, ConferenceDataType, SendUpdatesType, TransparencyType, VisibilityType } from '@lib/calendarLib/types';
import { zoomName } from '@lib/zoom/constants';
import { Person, RecurrenceFrequencyType } from '@lib/Calendar/types';
import { meetingTypeStringType } from '@lib/Calendar/UserCreateCalendarHelper';
import { ApolloClient, NormalizedCacheObject } from '@apollo/client';
export declare const updateEventInGoogle: (id: string, startDate: string, endDate: string, userId: string, client: ApolloClient<NormalizedCacheObject>, calendar: CalendarType, conferenceData?: ConferenceDataType, attendees?: GoogleAttendeeType[], title?: string, allDay?: boolean, recurringEndDate?: string, frequency?: RecurrenceFrequencyType, interval?: number, notes?: string, location?: LocationType, isFollowUp?: boolean, isPreEvent?: boolean, isPostEvent?: boolean, modifiable?: boolean, anyoneCanAddSelf?: boolean, guestsCanInviteOthers?: boolean, guestsCanSeeOtherGuests?: boolean, originalAllDay?: boolean, alarms?: string[] | number[], timezone?: string, taskId?: string, taskType?: string, followUpEventId?: string, preEventId?: string, postEventId?: string, forEventId?: string, maxAttendees?: number, sendUpdates?: SendUpdatesType, status?: string, transparency?: TransparencyType, visibility?: VisibilityType, iCalUID?: string, backgroundColor?: string, foregroundColor?: string, colorId?: string, originalTimezone?: string, useDefaultAlarms?: boolean, positiveImpactScore?: number, negativeImpactScore?: number, positiveImpactDayOfWeek?: number, positiveImpactTime?: Time, negativeImpactDayOfWeek?: number, negativeImpactTime?: Time, preferredDayOfWeek?: number, preferredTime?: Time, isExternalMeeting?: boolean, isExternalMeetingModifiable?: boolean, isMeetingModifiable?: boolean, isMeeting?: boolean, dailyTaskList?: boolean, weeklyTaskList?: boolean, isBreak?: boolean, preferredStartTimeRange?: Time, preferredEndTimeRange?: Time, copyAvailability?: boolean, copyTimeBlocking?: boolean, copyTimePreference?: boolean, copyReminders?: boolean, copyPriorityLevel?: boolean, copyModifiable?: boolean, copyCategories?: boolean, copyIsBreak?: boolean, timeBlocking?: BufferTimeType, userModifiedAvailability?: boolean, userModifiedTimeBlocking?: boolean, userModifiedTimePreference?: boolean, userModifiedReminders?: boolean, userModifiedPriorityLevel?: boolean, userModifiedCategories?: boolean, userModifiedModifiable?: boolean, userModifiedIsBreak?: boolean, hardDeadline?: string, softDeadline?: string, copyIsMeeting?: boolean, copyIsExternalMeeting?: boolean, userModifiedIsMeeting?: boolean, userModifiedIsExternalMeeting?: boolean, duration?: number, copyDuration?: boolean, userModifiedDuration?: boolean, method?: "create" | "update", unlink?: boolean, byWeekDay?: Day[], priority?: number) => Promise<void>;
export type conferenceName = typeof zoomName | typeof googleMeetName;
export type conferenceType = 'hangoutsMeet' | 'addOn';
export declare const updateConference: (conferenceId: string, startDate: string, endDate: string, client: ApolloClient<NormalizedCacheObject>, calendarId: string, zoomMeet: boolean | undefined, googleMeet: boolean | undefined, userId: string, meetingTypeString: meetingTypeStringType, attendees: GoogleAttendeeType[], requestId?: string, summary?: string, taskType?: string, notes?: string, zoomPassword?: string, zoomPrivateMeeting?: boolean) => Promise<{
    newConferenceId: string | number;
    newJoinUrl: string;
    newStartUrl: string;
    newConferenceStatus: string;
    conferenceName: any;
    conferenceType: conferenceType;
    conferenceData: ConferenceDataType;
} | undefined>;
export declare const updateEvent: (id: string, startDate: string, endDate: string, userId: string, client: ApolloClient<NormalizedCacheObject>, selectedCalendarId: string, categoryIds?: string[], title?: string, allDay?: boolean, recurringEndDate?: string, frequency?: RecurrenceFrequencyType, interval?: number, alarms?: string[] | number[], notes?: string, location?: LocationType, isFollowUp?: boolean, isPreEvent?: boolean, isPostEvent?: boolean, modifiable?: boolean, anyoneCanAddSelf?: boolean, guestsCanInviteOthers?: boolean, guestsCanSeeOtherGuests?: boolean, originalAllDay?: boolean, timezone?: string, taskId?: string, taskType?: string, followUpEventId?: string, preEventId?: string, postEventId?: string, forEventId?: string, zoomMeet?: boolean, googleMeet?: boolean, meetingTypeString?: meetingTypeStringType, zoomPassword?: string, zoomPrivateMeeting?: boolean, attendees?: Person[], conferenceId?: string, maxAttendees?: number, sendUpdates?: SendUpdatesType, status?: string, summary?: string, transparency?: TransparencyType, visibility?: VisibilityType, recurringEventId?: string, iCalUID?: string, htmlLink?: string, colorId?: string, originalTimezone?: string, backgroundColor?: string, foregroundColor?: string, useDefaultAlarms?: boolean, positiveImpactScore?: number, negativeImpactScore?: number, positiveImpactDayOfWeek?: number, positiveImpactTime?: Time, negativeImpactDayOfWeek?: number, negativeImpactTime?: Time, preferredDayOfWeek?: number, preferredTime?: Time, isExternalMeeting?: boolean, isExternalMeetingModifiable?: boolean, isMeetingModifiable?: boolean, isMeeting?: boolean, dailyTaskList?: boolean, weeklyTaskList?: boolean, isBreak?: boolean, preferredStartTimeRange?: Time, preferredEndTimeRange?: Time, copyAvailability?: boolean, copyTimeBlocking?: boolean, copyTimePreference?: boolean, copyReminders?: boolean, copyPriorityLevel?: boolean, copyModifiable?: boolean, copyCategories?: boolean, copyIsBreak?: boolean, timeBlocking?: BufferTimeType, userModifiedAvailability?: boolean, userModifiedTimeBlocking?: boolean, userModifiedTimePreference?: boolean, userModifiedReminders?: boolean, userModifiedPriorityLevel?: boolean, userModifiedCategories?: boolean, userModifiedModifiable?: boolean, userModifiedIsBreak?: boolean, hardDeadline?: string, softDeadline?: string, copyIsMeeting?: boolean, copyIsExternalMeeting?: boolean, userModifiedIsMeeting?: boolean, userModifiedIsExternalMeeting?: boolean, duration?: number, copyDuration?: boolean, userModifiedDuration?: boolean, method?: "create" | "update", unlink?: boolean, byWeekDay?: Day[], priority?: number) => Promise<void>;
