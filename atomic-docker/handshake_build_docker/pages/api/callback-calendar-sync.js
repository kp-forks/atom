"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = handler;
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
const api_helper_1 = require("@lib/api-helper");
async function handler(req, res) {
    try {
        const body = req.body;
        if (body?.method === 'getMeetingAssist') {
            const id = body?.variables?.id;
            const meetingAssist = await (0, api_helper_1.getMeetingAssist)(id);
            if (meetingAssist?.id) {
                return res.status(200).json(meetingAssist);
            }
        }
        if (body?.method === 'getMeetingAssistAttendee') {
            const id = body?.variables?.id;
            const meetingAssistAttendee = await (0, api_helper_1.getMeetingAssistAttendee)(id);
            return res.status(200).json(meetingAssistAttendee);
        }
        if (body?.method === 'googleCalendarSync') {
            const { token, windowStartDate, windowEndDate, attendeeId, hostTimezone, } = body.variables;
            await (0, api_helper_1.googleCalendarSync)(token, windowStartDate, windowEndDate, attendeeId, hostTimezone);
            return res.status(204).end();
        }
        return res.status(404).end();
    }
    catch (e) {
        console.log(e, ' unable to get meeting assist');
        return res.status(404).end();
    }
    // res.status(200).json({ name: 'John Doe' })
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsbGJhY2stY2FsZW5kYXItc3luYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNhbGxiYWNrLWNhbGVuZGFyLXN5bmMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUF5QkEsMEJBa0RDO0FBM0VELDZFQUE2RTtBQUM3RSxnREFJeUI7QUFvQlYsS0FBSyxVQUFVLE9BQU8sQ0FDbkMsR0FBbUIsRUFDbkIsR0FFQztJQUVELElBQUksQ0FBQztRQUNILE1BQU0sSUFBSSxHQUErQixHQUFHLENBQUMsSUFBSSxDQUFDO1FBRWxELElBQUksSUFBSSxFQUFFLE1BQU0sS0FBSyxrQkFBa0IsRUFBRSxDQUFDO1lBQ3hDLE1BQU0sRUFBRSxHQUFJLElBQW9CLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQztZQUNoRCxNQUFNLGFBQWEsR0FBRyxNQUFNLElBQUEsNkJBQWdCLEVBQUMsRUFBRSxDQUFDLENBQUM7WUFDakQsSUFBSSxhQUFhLEVBQUUsRUFBRSxFQUFFLENBQUM7Z0JBQ3RCLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDN0MsQ0FBQztRQUNILENBQUM7UUFFRCxJQUFJLElBQUksRUFBRSxNQUFNLEtBQUssMEJBQTBCLEVBQUUsQ0FBQztZQUNoRCxNQUFNLEVBQUUsR0FBSSxJQUFvQixFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUM7WUFDaEQsTUFBTSxxQkFBcUIsR0FBRyxNQUFNLElBQUEscUNBQXdCLEVBQUMsRUFBRSxDQUFDLENBQUM7WUFFakUsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ3JELENBQUM7UUFFRCxJQUFJLElBQUksRUFBRSxNQUFNLEtBQUssb0JBQW9CLEVBQUUsQ0FBQztZQUMxQyxNQUFNLEVBQ0osS0FBSyxFQUNMLGVBQWUsRUFDZixhQUFhLEVBQ2IsVUFBVSxFQUNWLFlBQVksR0FDYixHQUFJLElBQXFCLENBQUMsU0FBUyxDQUFDO1lBRXJDLE1BQU0sSUFBQSwrQkFBa0IsRUFDdEIsS0FBSyxFQUNMLGVBQWUsRUFDZixhQUFhLEVBQ2IsVUFBVSxFQUNWLFlBQVksQ0FDYixDQUFDO1lBRUYsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQy9CLENBQUM7UUFFRCxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSwrQkFBK0IsQ0FBQyxDQUFDO1FBQ2hELE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBQ0QsNkNBQTZDO0FBQy9DLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBOZXh0LmpzIEFQSSByb3V0ZSBzdXBwb3J0OiBodHRwczovL25leHRqcy5vcmcvZG9jcy9hcGktcm91dGVzL2ludHJvZHVjdGlvblxuaW1wb3J0IHtcbiAgZ2V0TWVldGluZ0Fzc2lzdCxcbiAgZ2V0TWVldGluZ0Fzc2lzdEF0dGVuZGVlLFxuICBnb29nbGVDYWxlbmRhclN5bmMsXG59IGZyb20gJ0BsaWIvYXBpLWhlbHBlcic7XG5pbXBvcnQgeyBNZWV0aW5nQXNzaXN0QXR0ZW5kZWVUeXBlLCBNZWV0aW5nQXNzaXN0VHlwZSB9IGZyb20gJ0BsaWIvdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBOZXh0QXBpUmVxdWVzdCwgTmV4dEFwaVJlc3BvbnNlIH0gZnJvbSAnbmV4dCc7XG5cbnR5cGUgUmVxdWVzdERhdGEgPSB7XG4gIG1ldGhvZDogJ2dldE1lZXRpbmdBc3Npc3QnIHwgJ2dldE1lZXRpbmdBc3Npc3RBdHRlbmRlZSc7XG4gIHZhcmlhYmxlczogeyBpZDogc3RyaW5nIH07XG59O1xuXG50eXBlIFJlcXVlc3REYXRhMiA9IHtcbiAgbWV0aG9kOiAnZ29vZ2xlQ2FsZW5kYXJTeW5jJztcbiAgdmFyaWFibGVzOiB7XG4gICAgdG9rZW46IHN0cmluZztcbiAgICB3aW5kb3dTdGFydERhdGU6IHN0cmluZztcbiAgICB3aW5kb3dFbmREYXRlOiBzdHJpbmc7XG4gICAgYXR0ZW5kZWVJZDogc3RyaW5nO1xuICAgIGhvc3RUaW1lem9uZTogc3RyaW5nO1xuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihcbiAgcmVxOiBOZXh0QXBpUmVxdWVzdCxcbiAgcmVzOiBOZXh0QXBpUmVzcG9uc2U8XG4gICAgTWVldGluZ0Fzc2lzdFR5cGUgfCBNZWV0aW5nQXNzaXN0QXR0ZW5kZWVUeXBlIHwgdW5kZWZpbmVkXG4gID5cbikge1xuICB0cnkge1xuICAgIGNvbnN0IGJvZHk6IFJlcXVlc3REYXRhIHwgUmVxdWVzdERhdGEyID0gcmVxLmJvZHk7XG5cbiAgICBpZiAoYm9keT8ubWV0aG9kID09PSAnZ2V0TWVldGluZ0Fzc2lzdCcpIHtcbiAgICAgIGNvbnN0IGlkID0gKGJvZHkgYXMgUmVxdWVzdERhdGEpPy52YXJpYWJsZXM/LmlkO1xuICAgICAgY29uc3QgbWVldGluZ0Fzc2lzdCA9IGF3YWl0IGdldE1lZXRpbmdBc3Npc3QoaWQpO1xuICAgICAgaWYgKG1lZXRpbmdBc3Npc3Q/LmlkKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbihtZWV0aW5nQXNzaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYm9keT8ubWV0aG9kID09PSAnZ2V0TWVldGluZ0Fzc2lzdEF0dGVuZGVlJykge1xuICAgICAgY29uc3QgaWQgPSAoYm9keSBhcyBSZXF1ZXN0RGF0YSk/LnZhcmlhYmxlcz8uaWQ7XG4gICAgICBjb25zdCBtZWV0aW5nQXNzaXN0QXR0ZW5kZWUgPSBhd2FpdCBnZXRNZWV0aW5nQXNzaXN0QXR0ZW5kZWUoaWQpO1xuXG4gICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24obWVldGluZ0Fzc2lzdEF0dGVuZGVlKTtcbiAgICB9XG5cbiAgICBpZiAoYm9keT8ubWV0aG9kID09PSAnZ29vZ2xlQ2FsZW5kYXJTeW5jJykge1xuICAgICAgY29uc3Qge1xuICAgICAgICB0b2tlbixcbiAgICAgICAgd2luZG93U3RhcnREYXRlLFxuICAgICAgICB3aW5kb3dFbmREYXRlLFxuICAgICAgICBhdHRlbmRlZUlkLFxuICAgICAgICBob3N0VGltZXpvbmUsXG4gICAgICB9ID0gKGJvZHkgYXMgUmVxdWVzdERhdGEyKS52YXJpYWJsZXM7XG5cbiAgICAgIGF3YWl0IGdvb2dsZUNhbGVuZGFyU3luYyhcbiAgICAgICAgdG9rZW4sXG4gICAgICAgIHdpbmRvd1N0YXJ0RGF0ZSxcbiAgICAgICAgd2luZG93RW5kRGF0ZSxcbiAgICAgICAgYXR0ZW5kZWVJZCxcbiAgICAgICAgaG9zdFRpbWV6b25lXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDQpLmVuZCgpO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuZW5kKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlLCAnIHVuYWJsZSB0byBnZXQgbWVldGluZyBhc3Npc3QnKTtcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmVuZCgpO1xuICB9XG4gIC8vIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgbmFtZTogJ0pvaG4gRG9lJyB9KVxufVxuIl19