"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = handler;
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
const api_helper_1 = require("@lib/api-helper");
async function handler(req, res) {
    try {
        const body = req.body;
        if (body?.method === 'findEventsForUserGivenMeetingId') {
            const { userId, hostStartDate, hostEndDate, userTimezone, hostTimezone, meetingId, } = body?.variables;
            const events = await (0, api_helper_1.findEventsForUserGivenMeetingId)(userId, hostStartDate, hostEndDate, userTimezone, hostTimezone, meetingId);
            return res.status(200).json(events);
        }
        if (body?.method === 'generateAvailableSlotsforTimeWindow') {
            const { windowStartDate, windowEndDate, slotDuration, hostPreferences, hostTimezone, userTimezone, notAvailableSlotsInUserTimezone, } = body
                ?.variables;
            const { availableSlotsByDate } = await (0, api_helper_1.generateAvailableSlotsforTimeWindow)(windowStartDate, windowEndDate, slotDuration, hostPreferences, hostTimezone, userTimezone, notAvailableSlotsInUserTimezone);
            return res.status(200).json(availableSlotsByDate);
        }
        if (body?.method === 'getMeetingAssist') {
            const { id } = body?.variables;
            const meetingAssist = await (0, api_helper_1.getMeetingAssist)(id);
            if (meetingAssist) {
                return res.status(200).json(meetingAssist);
            }
        }
        if (body?.method === 'getUserPreferences') {
            const { userId } = body
                ?.variables;
            const userPreferences = await (0, api_helper_1.getUserPreferences)(userId);
            if (userPreferences) {
                return res.status(200).json(userPreferences);
            }
        }
        if (body?.method === 'listEventsForUserGivenDates') {
            const { userId, hostStartDate, hostEndDate, userTimezone, hostTimezone } = body?.variables;
            const events = await (0, api_helper_1.listEventsForUserGivenDates)(userId, hostStartDate, hostEndDate, userTimezone, hostTimezone);
            return res.status(200).json(events);
        }
        if (body?.method === 'listMeetingAssistAttendeesGivenMeetingId') {
            const { meetingId } = body?.variables;
            const attendees = await (0, api_helper_1.listMeetingAssistAttendeesGivenMeetingId)(meetingId);
            if (attendees) {
                return res.status(200).json(attendees);
            }
        }
        if (body?.method === 'listMeetingAssistEventsForAttendeeGivenDates') {
            const { attendeeId, hostStartDate, hostEndDate, userTimezone, hostTimezone, } = body
                ?.variables;
            const meetingAssistEvents = await (0, api_helper_1.listMeetingAssistEventsForAttendeeGivenDates)(attendeeId, hostStartDate, hostEndDate, userTimezone, hostTimezone);
            return res.status(200).json(meetingAssistEvents);
        }
        if (body?.method === 'listMeetingAssistPreferredTimeRangesGivenMeetingId') {
            const { meetingId } = body?.variables;
            const meetingAssistPreferredTimeRanges = await (0, api_helper_1.listMeetingAssistPreferredTimeRangesGivenMeetingId)(meetingId);
            return res.status(200).json(meetingAssistPreferredTimeRanges);
        }
        if (body?.method === 'startMeetingAssist') {
            const { body: subBody } = body
                ?.variables;
            await (0, api_helper_1.startMeetingAssist)(subBody);
            return res.status(204).end();
        }
        if (body?.method === 'upsertMeetingAssistPreferredTimes') {
            const { preferredTimes } = body?.variables;
            const meetingAssistPreferredTimesAffectedRows = await (0, api_helper_1.upsertMeetingAssistPreferredTimes)(preferredTimes);
            if (typeof meetingAssistPreferredTimesAffectedRows === 'number' &&
                meetingAssistPreferredTimesAffectedRows > -1) {
                return res.status(200).json(meetingAssistPreferredTimesAffectedRows);
            }
        }
        if (body?.method === 'deleteMeetingAssistPreferredTimesByIds') {
            const { ids } = body?.variables;
            await (0, api_helper_1.deleteMeetingAssistPreferredTimesByIds)(ids);
            return res.status(204).end();
        }
        if (body?.method === 'createRecurringMeetingAssists') {
            const { originalMeetingAssist, originalPreferredTimes } = body?.variables;
            console.log('inside api createRecurringMeetingAssists');
            await (0, api_helper_1.createRecurringMeetingAssists)(originalMeetingAssist, originalPreferredTimes);
            return res.status(204).end();
        }
        return res.status(404).end();
    }
    catch (e) {
        console.log(e, ' unable to get meeting assist');
        return res.status(404).end();
    }
    // res.status(200).json({ name: 'John Doe' })
}
//# sourceMappingURL=data:application/json;base64,