"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = handler;
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
const api_helper_1 = require("@lib/api-helper");
async function handler(req, res) {
    try {
        const body = req.body;
        if (body?.method === 'cancelMeetingAssist') {
            const id = body?.variables?.id;
            const meetingAssistCancelled = await (0, api_helper_1.cancelMeetingAssist)(id);
            if (meetingAssistCancelled?.id) {
                return res.status(200).json(meetingAssistCancelled);
            }
        }
        if (body?.method === 'getUserContactInfo') {
            const id = body?.variables?.id;
            const userContactInfo = await (0, api_helper_1.getUserContactInfo)(id);
            return res.status(200).json(userContactInfo);
        }
        if (body?.method === 'deleteMeetingAssistAttendee') {
            const id = body
                ?.variables?.id;
            const deletedMeetingAssistAttendee = await (0, api_helper_1.deleteMeetingAssistAttendee)(id);
            if (deletedMeetingAssistAttendee?.id) {
                return res.status(200).json(deletedMeetingAssistAttendee);
            }
        }
        if (body?.method === 'getMeetingAssist') {
            const id = body?.variables?.id;
            const meetingAssist = await (0, api_helper_1.getMeetingAssist)(id);
            if (meetingAssist?.id) {
                return res.status(200).json(meetingAssist);
            }
        }
        if (body?.method === 'getMeetingAssistAttendee') {
            const id = body?.variables
                ?.id;
            const meetingAssistAttendee = await (0, api_helper_1.getMeetingAssistAttendee)(id);
            return res.status(200).json(meetingAssistAttendee);
        }
        if (body?.method === 'upsertOneMeetingAssistAttendee') {
            const attendee = body
                ?.variables?.attendee;
            const meetingAssistAttendee = await (0, api_helper_1.upsertOneMeetingAssistAttendee)(attendee);
            if (meetingAssistAttendee?.id) {
                return res.status(200).json(meetingAssistAttendee);
            }
        }
        if (body?.method === 'updateMeetingAssistAttendanceCount') {
            const { id, attendeeCount, attendeeRespondedCount } = body?.variables;
            const meetingAssistUpdatedCount = await (0, api_helper_1.updateMeetingAssistAttendanceCount)(id, attendeeCount, attendeeRespondedCount);
            if (meetingAssistUpdatedCount?.id) {
                return res.status(200).json(meetingAssistUpdatedCount);
            }
        }
        if (body?.method === 'updateMeetingAssistInviteResponse') {
            const { id, response } = body?.variables;
            await (0, api_helper_1.updateMeetingAssistInviteResponse)(id, response);
            return res.status(204).end();
        }
        return res.status(404).end();
    }
    catch (e) {
        console.log(e, ' unable to get meeting assist');
        return res.status(404).end();
    }
    // res.status(200).json({ name: 'John Doe' })
}
//# sourceMappingURL=data:application/json;base64,