"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const image_1 = __importDefault(require("next/image"));
const head_1 = __importDefault(require("next/head"));
const router_1 = require("next/router");
const react_2 = require("@chakra-ui/react");
const external_attendee_1 = __importDefault(require("./meeting/external-attendee"));
const internal_attendee_1 = __importDefault(require("./meeting/internal-attendee"));
const constants_1 = require("@lib/constants");
const calendar_sync_1 = __importDefault(require("./meeting/calendar-sync"));
const time_preferences_1 = __importDefault(require("./meeting/time-preferences"));
const Home_module_css_1 = __importDefault(require("../styles/Home.module.css"));
const axios_1 = __importDefault(require("axios"));
const Handshake = () => {
    // const [attendanceStepCompleted, setAttendanceStepCompleted] = useState<boolean>(false)
    // const [calendarSyncStepCompleted, setCalendarSyncStepCompleted] = useState<boolean>(false)
    const [meetingAssist, setMeetingAssist] = (0, react_1.useState)();
    const [meetingAssistAttendee, setMeetingAssistAttendee] = (0, react_1.useState)();
    const [isExternalUser, setIsExternalUser] = (0, react_1.useState)(false);
    const [activeIndex, setActiveIndex] = (0, react_1.useState)(0);
    const [completedStep, setCompletedStep] = (0, react_1.useState)(-1);
    const router = (0, router_1.useRouter)();
    const toast = (0, react_2.useToast)();
    // using query strings
    const meetingId = router?.query?.meetingId;
    const attendeeId = router?.query?.attendeeId;
    const calendarSyncCompleted = router?.query?.calendarSyncCompleted === 'true';
    const primaryEmail = router?.query?.primaryEmail;
    console.log(meetingId, ' meetingId');
    console.log(attendeeId, ' attendeeId');
    // get existing meetingAssist
    (0, react_1.useEffect)(() => {
        (async () => {
            try {
                if (typeof meetingId !== 'string') {
                    console.log(meetingId, 'meetingId not a string');
                    return;
                }
                const oldMeetingAssist = (await axios_1.default.post('/api/external-attendee', { method: 'getMeetingAssist', variables: { id: meetingId } }))?.data;
                setMeetingAssist(oldMeetingAssist);
                if (oldMeetingAssist?.cancelIfAnyRefuse) {
                    toast({
                        title: 'Meeting cancelled',
                        description: 'The meeting has been called',
                        status: 'warning',
                        duration: 9000,
                        isClosable: true
                    });
                }
            }
            catch (e) {
                console.log(e, ' unable to get meeting');
            }
        })();
    }, [meetingId, toast]);
    // get meetingAssistAttendee
    (0, react_1.useEffect)(() => {
        (async () => {
            try {
                // validate
                if (!attendeeId) {
                    return;
                }
                const oldMeetingAttendee = (await axios_1.default.post('/api/external-attendee', { method: 'getMeetingAssistAttendee', variables: { id: attendeeId } }))?.data;
                if (oldMeetingAttendee?.id) {
                    setMeetingAssistAttendee(oldMeetingAttendee);
                }
            }
            catch (e) {
                console.log(e, ' unable to get meeting assist attendee');
            }
        })();
    }, [attendeeId]);
    // if calendarsynccompleted go to last page = 3
    (0, react_1.useEffect)(() => {
        (() => {
            if (calendarSyncCompleted) {
                setActiveIndex(3);
                setCompletedStep(2);
            }
            else {
                setActiveIndex(0);
                setCompletedStep(-1);
            }
        })();
    }, [calendarSyncCompleted]);
    const goToPrevStep = () => {
        const prevActiveIndex = activeIndex;
        let newActiveIndex = prevActiveIndex === 0 ? 0 : prevActiveIndex - 1;
        // if internal attendee skip 2
        if ((prevActiveIndex === 3) && !isExternalUser) {
            newActiveIndex = prevActiveIndex - 2;
        }
        setActiveIndex(newActiveIndex);
    };
    const renderPrevButton = () => {
        if (activeIndex === 0) {
            return (0, jsx_runtime_1.jsx)("div", { className: "lg:m-2 sm:m-3" });
        }
        return ((0, jsx_runtime_1.jsx)("div", { className: "lg:m-2 sm:m-3", children: (0, jsx_runtime_1.jsxs)("button", { className: 'btn', onClick: goToPrevStep, children: [(0, jsx_runtime_1.jsx)("svg", { className: "w-6 h-6", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg", children: (0, jsx_runtime_1.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M15 19l-7-7 7-7" }) }), "Back"] }) }));
    };
    const goToNextStep = () => {
        const prevActiveIndex = activeIndex;
        const prevCompletedStep = completedStep;
        if (prevActiveIndex === 3) {
            return;
        }
        // if internal attendee skip 2 
        if ((prevActiveIndex === 1) && !isExternalUser) {
            let newActiveIndex = prevActiveIndex + 2;
            if (!prevCompletedStep || (prevCompletedStep < prevActiveIndex)) {
                const newCompletedStep = prevActiveIndex + 1;
                setCompletedStep(newCompletedStep);
            }
            if (newActiveIndex !== prevActiveIndex) {
                setActiveIndex(newActiveIndex);
            }
            return;
        }
        let newActiveIndex = prevActiveIndex + 1;
        if (!prevCompletedStep || (prevCompletedStep < prevActiveIndex)) {
            const newCompletedStep = prevActiveIndex;
            setCompletedStep(newCompletedStep);
        }
        if (newActiveIndex !== prevActiveIndex) {
            setActiveIndex(newActiveIndex);
        }
    };
    const renderNextButton = () => {
        if (activeIndex === 3) {
            return (0, jsx_runtime_1.jsx)("div", { className: "lg:m-2 sm:m-3" });
        }
        if (activeIndex === 0) {
            return (0, jsx_runtime_1.jsx)("div", { className: "lg:m-2 sm:m-3" });
        }
        return ((0, jsx_runtime_1.jsx)("div", { className: "lg:m-2 sm:m-3", children: (0, jsx_runtime_1.jsxs)("button", { className: 'btn', onClick: goToNextStep, children: ["Next", (0, jsx_runtime_1.jsx)("svg", { className: "w-6 h-6", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg", children: (0, jsx_runtime_1.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M9 5l7 7-7 7" }) })] }) }));
    };
    const goToExternalUser = () => {
        setIsExternalUser(true);
        goToNextStep();
    };
    const goToInternalUser = () => {
        setIsExternalUser(false);
        goToNextStep();
    };
    // check if events already synced then go straight to time preferences
    const renderStep = () => {
        switch (activeIndex) {
            case 0:
                return ((0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col justify-center items-center h-full lg:w-full", children: [(0, jsx_runtime_1.jsxs)("div", { className: "m-8 sm:text-left lg:my-12 sm:my-8 lg:h-1/4 lg:w-1/2", children: [(0, jsx_runtime_1.jsx)("h1", { className: "  text-xl font-bold text-gray-900 dark:text-gray-300 sm:text-2xl", children: "Welcome, do you use Atomic?" }), (0, jsx_runtime_1.jsx)("p", { className: " mt-1.5 text-sm text-gray-500 dark:text-gray-300", children: "If you use Atomic, we can use your account to help find a flexible schedule for everyone involved! ðŸŽ‰" })] }), (0, jsx_runtime_1.jsx)("div", { className: "flex flex-col justify-center items-center lg:h-3/4 lg:w-3/4", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col flex-start items-center lg:space-y-4 sm:space-y-5", children: [(0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsx)("button", { className: 'btn btn-primary m-2', onClick: goToExternalUser, children: "I don't use Atomic" }) }), (0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsx)("button", { className: 'btn btn-primary m-2', onClick: goToInternalUser, children: "I'm an Atomic User" }) })] }) })] }));
            case 1:
                return ((0, jsx_runtime_1.jsx)("div", { className: "flex flex-col justify-center items-center h-full w-full", children: isExternalUser && meetingAssist?.userId
                        ? ((0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col justify-center items-center h-full w-full", children: [(0, jsx_runtime_1.jsx)("div", { className: " flex flex-col justify-center items-center h-full w-full", children: (0, jsx_runtime_1.jsx)(external_attendee_1.default, { meetingAssistAttendee: meetingAssistAttendee, hostId: meetingAssist?.userId, primaryEmail: primaryEmail, meetingId: meetingId, attendeeId: attendeeId }) }), (0, jsx_runtime_1.jsxs)("div", { className: "my-2 flex justify-between items-center w-3/4", children: [renderPrevButton(), renderNextButton()] })] })) :
                        meetingAssist?.userId ? ((0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col justify-center items-center w-full", children: [(0, jsx_runtime_1.jsx)("div", { className: " flex flex-col justify-center items-center w-full", children: (0, jsx_runtime_1.jsx)(internal_attendee_1.default, { meetingAssistAttendee: meetingAssistAttendee, hostId: meetingAssist?.userId, primaryEmail: primaryEmail, meetingId: meetingId, attendeeId: attendeeId }) }), (0, jsx_runtime_1.jsxs)("div", { className: "my-2 flex justify-between items-center w-3/4", children: [renderPrevButton(), renderNextButton()] })] })) : ((0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col h-full w-full justify-center items-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "mt-16 grid h-full place-content-center w-full", children: (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsx)(image_1.default, { src: constants_1.messyDoodleSVG, alt: "messy doodle svg", width: 512, height: 384 }), (0, jsx_runtime_1.jsx)("h1", { className: "mt-6 text-2xl font-bold tracking-tight text-gray-900 dark:text-gray-200 sm:text-4xl", children: "Loading... Please wait" }), (0, jsx_runtime_1.jsx)("p", { className: "mt-4 text-gray-500", children: "We are loading the page. Pleaes wait." })] }) }), (0, jsx_runtime_1.jsxs)("div", { className: "my-2 flex justify-between items-center w-3/4", children: [renderPrevButton(), (0, jsx_runtime_1.jsx)("div", {})] })] })) }));
            case 2:
                return ((0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col justify-center items-center h-full w-full", children: [(0, jsx_runtime_1.jsx)(calendar_sync_1.default, { meetingId: meetingId, attendeeId: attendeeId }), (0, jsx_runtime_1.jsxs)("div", { className: "my-2 flex justify-between items-center w-3/4", children: [renderPrevButton(), renderNextButton()] })] }));
            case 3:
                return ((0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col justify-center items-center h-full w-full", children: [(0, jsx_runtime_1.jsx)(time_preferences_1.default, { meetingId: meetingId, attendeeId: attendeeId }), (0, jsx_runtime_1.jsxs)("div", { className: "my-2 flex justify-between items-center w-3/4", children: [renderPrevButton(), renderNextButton()] })] }));
        }
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: "h-full flex flex-col justify-center items-center w-full", children: [(0, jsx_runtime_1.jsxs)(head_1.default, { children: [(0, jsx_runtime_1.jsx)("title", { children: "Atomic | Save time planning your Google calendar" }), (0, jsx_runtime_1.jsx)("meta", { name: "Description", content: "Save time " }), (0, jsx_runtime_1.jsx)("meta", { name: "theme-color", content: "#9d0191" }), (0, jsx_runtime_1.jsx)("meta", { name: "keywords", content: "meeting assist, meeting, schedule a meeting, scheduling, Atomic, planner for google calendar, google calendar, schedule assist, artificial intelligence, AI scheduler, smart tags, integrate with google calendar" })] }), (0, jsx_runtime_1.jsx)("div", { className: "h-screen flex flex-col justify-center items-center w-full", children: renderStep() }), (0, jsx_runtime_1.jsx)("footer", { className: Home_module_css_1.default.footer, children: (0, jsx_runtime_1.jsxs)("a", { href: "https://atomiclife.app", target: "_blank", rel: "noopener noreferrer", children: ["Powered by", ' ', (0, jsx_runtime_1.jsx)("span", { className: Home_module_css_1.default.logo, children: (0, jsx_runtime_1.jsx)(image_1.default, { src: "/1024.png", alt: "Atomic Logo", width: 16, height: 16 }) })] }) })] }));
};
exports.default = Handshake;
//# sourceMappingURL=data:application/json;base64,