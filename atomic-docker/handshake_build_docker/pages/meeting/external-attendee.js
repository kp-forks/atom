"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const uuid_1 = require("uuid");
const dayjs_1 = __importDefault(require("dayjs"));
const isoWeek_1 = __importDefault(require("dayjs/plugin/isoWeek"));
const duration_1 = __importDefault(require("dayjs/plugin/duration"));
const isBetween_1 = __importDefault(require("dayjs/plugin/isBetween"));
const timezone_1 = __importDefault(require("dayjs/plugin/timezone"));
const utc_1 = __importDefault(require("dayjs/plugin/utc"));
// import { cancelMeetingAssist, deleteMeetingAssistAttendee, getMeetingAssist, getMeetingAssistAttendee, getMeetingAssistAttendeeByEmail, upsertOneMeetingAssistAttendee, updateMeetingAssistAttendanceCount } from "@lib/api-helper"
const axios_1 = __importDefault(require("axios"));
const react_2 = require("@chakra-ui/react");
dayjs_1.default.extend(isoWeek_1.default);
dayjs_1.default.extend(duration_1.default);
dayjs_1.default.extend(isBetween_1.default);
dayjs_1.default.extend(timezone_1.default);
dayjs_1.default.extend(utc_1.default);
const MeetingAssistExternalAttendee = (props) => {
    const [primaryEmail, setPrimaryEmail] = (0, react_1.useState)(props?.primaryEmail || '');
    const [oldPrimaryEmail, setOldPrimaryEmail] = (0, react_1.useState)(props?.meetingAssistAttendee?.primaryEmail || '');
    const [name, setName] = (0, react_1.useState)(props?.meetingAssistAttendee?.name || '');
    const [meetingAttendee, setMeetingAttendee] = (0, react_1.useState)();
    const [meetingAssist, setMeetingAssist] = (0, react_1.useState)();
    // const router = useRouter()
    const toast = (0, react_2.useToast)();
    const { isOpen, onOpen, onClose } = (0, react_2.useDisclosure)();
    const cancelRef = (0, react_1.useRef)();
    const hostId = props?.hostId;
    const meetingId = props?.meetingId;
    const userId = props?.meetingAssistAttendee?.userId;
    const attendeeId = props?.attendeeId;
    console.log(hostId, ' hostId');
    console.log(userId, ' userId');
    // get old meeting assist attendee
    (0, react_1.useEffect)(() => {
        (async () => {
            try {
                if (!attendeeId) {
                    console.log('no attendeeId present to get old meeting attendee info');
                    return;
                }
                const oldMeetingAttendee = (await axios_1.default.post('/api/external-attendee', { method: 'getMeetingAssistAttendee', variables: { id: attendeeId } }))?.data;
                console.log(oldMeetingAttendee, ' oldMeetingAttendee');
                if (oldMeetingAttendee?.id) {
                    setMeetingAttendee(oldMeetingAttendee);
                    if (oldMeetingAttendee?.primaryEmail) {
                        setOldPrimaryEmail(oldMeetingAttendee?.primaryEmail);
                        setPrimaryEmail(oldMeetingAttendee?.primaryEmail);
                    }
                }
            }
            catch (e) {
                console.log(e, ' unable to get old meeting attendee');
            }
        })();
    }, [attendeeId]);
    // get meetingAssist
    (0, react_1.useEffect)(() => {
        (async () => {
            try {
                const oldMeetingAssist = (await axios_1.default.post('/api/external-attendee', { method: 'getMeetingAssist', variables: { id: meetingId } }))?.data;
                setMeetingAssist(oldMeetingAssist);
                if (oldMeetingAssist?.cancelIfAnyRefuse) {
                    toast({
                        title: 'Meeting cancelled',
                        description: 'The meeting has been called',
                        status: 'warning',
                        duration: 9000,
                        isClosable: true
                    });
                }
            }
            catch (e) {
                console.log(e, ' unable to get meeting assist');
            }
        })();
    }, [meetingId, toast]);
    const updateAttendeeInfo = async () => {
        try {
            // validate
            if (!name) {
                toast({
                    title: 'Name required.',
                    description: "Name is required to confirm attendence.",
                    status: 'error',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            if (!primaryEmail) {
                toast({
                    title: 'Email is required',
                    description: 'Email is required to confirm attendence',
                    status: 'error',
                    duration: 9000,
                    isClosable: true
                });
                return;
            }
            // delete old attendee if any
            // if (oldPrimaryEmail) {
            //     if (primaryEmail !== oldPrimaryEmail) {
            //         await deleteMeetingAssistAttendee(attendeeId)
            //     }
            // }
            // add new attendee info
            const newAttendee = (await axios_1.default.post('/api/external-attendee', { method: 'upsertOneMeetingAssistAttendee', variables: { attendee: {
                        id: attendeeId,
                        name,
                        hostId,
                        userId: userId || (0, uuid_1.v4)(),
                        emails: props?.meetingAssistAttendee
                            ?.emails?.filter(e => (e?.value !== oldPrimaryEmail))
                            ?.filter(e => (!e?.primary))
                            ?.concat([{ primary: true, value: primaryEmail.toLowerCase().trim(), type: 'work', displayName: primaryEmail }])
                            || [{ primary: true, value: primaryEmail.toLowerCase().trim(), type: 'work', displayName: primaryEmail }],
                        meetingId,
                        createdDate: (0, dayjs_1.default)().format(),
                        timezone: dayjs_1.default.tz.guess(),
                        updatedAt: (0, dayjs_1.default)().format(),
                        externalAttendee: true,
                        primaryEmail,
                    } } }))?.data;
            setOldPrimaryEmail(newAttendee?.primaryEmail);
            if (!oldPrimaryEmail) {
                // new attendance count
                const meetingAssist = (await axios_1.default.post('/api/external-attendee', { method: 'getMeetingAssist', variables: { id: meetingId } }))?.data;
                const newAttendanceCount = (meetingAssist?.attendeeCount || 0) + 1;
                const newAttendeeRespondedCount = (meetingAssist?.attendeeRespondedCount || 0) + 1;
                // await updateMeetingAssistAttendanceCount(meetingId, newAttendanceCount)
                await axios_1.default.post('/api/external-attendee', { method: 'updateMeetingAssistAttendanceCount', variables: { id: meetingId, attendeeCount: newAttendanceCount, attendeeRespondedCount: newAttendeeRespondedCount } });
                // update invite response
                await axios_1.default.post('/api/external-attendee', {
                    method: 'updateMeetingAssistInviteResponse',
                    variables: { id: attendeeId, response: 'ATTENDING' },
                });
            }
            setMeetingAttendee(newAttendee);
            toast({
                title: 'Successfully updated',
                description: 'You have sucessfully updated attendance information. Please proceed to the next step.',
                status: 'success',
                duration: 9000,
                isClosable: true
            });
        }
        catch (e) {
            toast({
                title: 'Oops...',
                description: 'Something went wrong, let us know so we can work on it',
                status: 'error',
                duration: 9000,
                isClosable: true
            });
            console.log(e, ' unable to update attendee info');
        }
    };
    const cancelConfirmation = async () => {
        try {
            if (!primaryEmail) {
                toast({
                    title: 'No email present',
                    description: 'Seems like there is no email to cancel confirmation',
                    status: 'warning',
                    duration: 9000,
                    isClosable: true
                });
                return;
            }
            // const oldAttendee = await getMeetingAssistAttendee(attendeeId)
            if (!meetingAttendee?.id) {
                toast({
                    title: 'No registration present',
                    description: 'Seems like there is no registration to cancel confirmation',
                    status: 'warning',
                    duration: 9000,
                    isClosable: true
                });
                return;
            }
            // await deleteMeetingAssistAttendee(meetingAttendee?.id)
            // meetingAttendee?.id
            await axios_1.default.post('/api/external-attendee', { method: 'deleteMeetingAssistAttendee',
                variables: { id: meetingAttendee?.id } });
            toast({
                title: 'Confirmation cancelled',
                description: 'Your confirmation is cancelled succesfully. You may close the window if you wish.',
                status: 'success',
                duration: 9000,
                isClosable: true
            });
            // new attendance count
            const newAttendanceCount = (meetingAssist?.attendeeCount || 0) - 1 < 0 ? 0 : meetingAssist?.attendeeCount - 1;
            // await updateMeetingAssistAttendanceCount(meetingId, newAttendanceCount)
            await axios_1.default.post('api/external-attendee', {
                method: 'updateMeetingAssistAttendanceCount',
                variables: { id: meetingId, attendeeCount: newAttendanceCount, attendeeRespondedCount: meetingAssist?.attendeeRespondedCount },
            });
            if (meetingAssist?.cancelIfAnyRefuse) {
                // await cancelMeetingAssist(meetingId)
                await axios_1.default.post('api/external-attendee', {
                    method: 'cancelMeetingAssist',
                    variables: { id: meetingId },
                });
            }
            // update invite response
            await axios_1.default.post('/api/external-attendee', {
                method: 'updateMeetingAssistInviteResponse',
                variables: { id: attendeeId, response: 'CANCELLED' },
            });
        }
        catch (e) {
            toast({
                title: 'Oops...',
                description: 'Something went wrong, let us know so we can work on it',
                status: 'error',
                duration: 9000,
                isClosable: true
            });
            console.log(e, ' unable to cancel confirmation');
        }
        onClose();
    };
    const handleChangeEmail = (e) => setPrimaryEmail(e?.target?.value);
    const handleChangeName = (e) => setName(e.target.value);
    return ((0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col justify-center items-center h-full w-full", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col justify-around items-center h-full w-full", children: [(0, jsx_runtime_1.jsxs)("div", { className: " sm:text-left lg:my-12 sm:my-8 lg:h-1/6 lg:w-1/2 lg:mx-3 mx-4", children: [(0, jsx_runtime_1.jsx)("h1", { className: "text-xl font-bold text-gray-900 dark:text-gray-200 sm:text-2xl", children: "Let's confirm your attendance" }), (0, jsx_runtime_1.jsx)("p", { className: "mt-1.5 text-sm text-gray-500", children: "Submit your name and contact information to confirm your attendance! 🎉" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col justify-around items-center lg:h-5/6 lg:w-1/2", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { htmlFor: "Name", className: "block text-xs font-medium text-gray-700 dark:text-gray-300", children: "Name" }), (0, jsx_runtime_1.jsx)("input", { type: "text", id: "Name", placeholder: "john", className: "text-gray-900 peer invalid:border-pink-500 invalid:text-pink-600  mt-1 w-full rounded-md border-gray-200 shadow-sm sm:text-sm", value: name, required: true, onChange: handleChangeName }), (0, jsx_runtime_1.jsx)("p", { className: "invisible peer-invalid:visible text-pink-700 font-light", children: "Please enter your name for attendence confirmation" })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { htmlFor: "UserEmail", className: "block text-xs font-medium text-gray-700 dark:text-gray-300", children: "Email" }), (0, jsx_runtime_1.jsx)("input", { type: "email", id: "UserEmail", placeholder: "john@rhcp.com", className: "text-gray-900 peer invalid:border-pink-500 invalid:text-pink-600  mt-1 w-full rounded-md border-gray-200 shadow-sm sm:text-sm", value: primaryEmail, onChange: handleChangeEmail, required: true }), (0, jsx_runtime_1.jsx)("p", { className: "invisible peer-invalid:visible text-pink-700 font-light", children: "Please enter a valid email address" })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "m-auto my-2 w-1/2 lg:flex lg:justify-center lg:items-center lg:space-x-4 lg:w-full", children: [(0, jsx_runtime_1.jsx)("button", { className: 'btn btn-ghost', onClick: cancelConfirmation, children: 'Cancel Confirmation' }), (0, jsx_runtime_1.jsx)("button", { className: 'btn btn-primary', onClick: updateAttendeeInfo, children: 'Confirm Attendance' })] })] })] }), (0, jsx_runtime_1.jsx)(react_2.AlertDialog, { isOpen: isOpen, leastDestructiveRef: cancelRef, onClose: onClose, children: (0, jsx_runtime_1.jsx)(react_2.AlertDialogOverlay, { children: (0, jsx_runtime_1.jsxs)(react_2.AlertDialogContent, { children: [(0, jsx_runtime_1.jsx)(react_2.AlertDialogHeader, { fontSize: 'lg', fontWeight: 'bold', children: "Cancel Confirmation" }), (0, jsx_runtime_1.jsx)(react_2.AlertDialogBody, { children: "Are you sure? Your confirmation will be cancelled" }), (0, jsx_runtime_1.jsxs)(react_2.AlertDialogFooter, { children: [(0, jsx_runtime_1.jsx)("button", { className: 'btn btn-ghost', ref: cancelRef, onClick: onClose, children: "Cancel" }), (0, jsx_runtime_1.jsx)("button", { className: 'btn ml-3', onClick: cancelConfirmation, children: "Delete" })] })] }) }) })] }));
};
exports.default = MeetingAssistExternalAttendee;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZXJuYWwtYXR0ZW5kZWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJleHRlcm5hbC1hdHRlbmRlZS50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsaUNBQWdFO0FBR2hFLCtCQUFpQztBQUVqQyxrREFBeUI7QUFDekIsbUVBQTBDO0FBQzFDLHFFQUE0QztBQUM1Qyx1RUFBOEM7QUFDOUMscUVBQTRDO0FBQzVDLDJEQUFrQztBQUNsQyxzT0FBc087QUFFdE8sa0RBQXlCO0FBQ3pCLDRDQVV5QjtBQUd6QixlQUFLLENBQUMsTUFBTSxDQUFDLGlCQUFPLENBQUMsQ0FBQTtBQUNyQixlQUFLLENBQUMsTUFBTSxDQUFDLGtCQUFRLENBQUMsQ0FBQTtBQUN0QixlQUFLLENBQUMsTUFBTSxDQUFDLG1CQUFTLENBQUMsQ0FBQTtBQUN2QixlQUFLLENBQUMsTUFBTSxDQUFDLGtCQUFRLENBQUMsQ0FBQTtBQUN0QixlQUFLLENBQUMsTUFBTSxDQUFDLGFBQUcsQ0FBQyxDQUFBO0FBU2pCLE1BQU0sNkJBQTZCLEdBQW9CLENBQUMsS0FBWSxFQUFFLEVBQUU7SUFDcEUsTUFBTSxDQUFDLFlBQVksRUFBRSxlQUFlLENBQUMsR0FBRyxJQUFBLGdCQUFRLEVBQVMsS0FBSyxFQUFFLFlBQVksSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUNuRixNQUFNLENBQUMsZUFBZSxFQUFFLGtCQUFrQixDQUFDLEdBQUcsSUFBQSxnQkFBUSxFQUFTLEtBQUssRUFBRSxxQkFBcUIsRUFBRSxZQUFZLElBQUksRUFBRSxDQUFDLENBQUE7SUFDaEgsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxJQUFBLGdCQUFRLEVBQVMsS0FBSyxFQUFFLHFCQUFxQixFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUNsRixNQUFNLENBQUMsZUFBZSxFQUFFLGtCQUFrQixDQUFDLEdBQUcsSUFBQSxnQkFBUSxHQUE2QixDQUFBO0lBQ25GLE1BQU0sQ0FB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UyxFQUFDLHlEQUF5RCxtREFFbEUsSUFDRixJQUNKLEVBQ04saUNBQUssU0FBUyxFQUFDLG9GQUFvRixhQUMvRixtQ0FBUSxTQUFTLEVBQUMsZUFBZSxFQUFDLE9BQU8sRUFBRSxrQkFBa0IsWUFDeEQscUJBQXFCLEdBQ2pCLEVBQ1QsbUNBQVEsU0FBUyxFQUFDLGlCQUFpQixFQUFDLE9BQU8sRUFBRSxrQkFBa0IsWUFDMUQsb0JBQW9CLEdBQ2hCLElBRVAsSUFDSixJQUNKLEVBQ04sdUJBQUMsbUJBQVcsSUFDUixNQUFNLEVBQUUsTUFBTSxFQUNkLG1CQUFtQixFQUFFLFNBQWdCLEVBQ3JDLE9BQU8sRUFBRSxPQUFPLFlBRWhCLHVCQUFDLDBCQUFrQixjQUNmLHdCQUFDLDBCQUFrQixlQUNmLHVCQUFDLHlCQUFpQixJQUFDLFFBQVEsRUFBQyxJQUFJLEVBQUMsVUFBVSxFQUFDLE1BQU0sb0NBRTlCLEVBRXBCLHVCQUFDLHVCQUFlLGNBQ1gsbURBQW1ELEdBQ3RDLEVBRWxCLHdCQUFDLHlCQUFpQixlQUNkLG1DQUFRLFNBQVMsRUFBQyxlQUFlLEVBQUMsR0FBRyxFQUFFLFNBQWdCLEVBQUUsT0FBTyxFQUFFLE9BQU8sdUJBRWhFLEVBQ1QsbUNBQVEsU0FBUyxFQUFDLFVBQVUsRUFBQyxPQUFPLEVBQUUsa0JBQWtCLHVCQUUvQyxJQUNPLElBQ0gsR0FDSixHQUNYLElBQ1osQ0FDVCxDQUFBO0FBQ0wsQ0FBQyxDQUFBO0FBRUQsa0JBQWUsNkJBQTZCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VFdmVudCwgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCB0eXBlIHsgTmV4dFBhZ2UgfSBmcm9tICduZXh0J1xuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSAnbmV4dC9yb3V0ZXInXG5pbXBvcnQgeyB2NCBhcyB1dWlkIH0gZnJvbSAndXVpZCdcbmltcG9ydCB7IEVtYWlsVHlwZSwgTWVldGluZ0Fzc2lzdEF0dGVuZGVlVHlwZSwgTWVldGluZ0Fzc2lzdFR5cGUgfSBmcm9tIFwiQGxpYi90eXBlc1wiXG5pbXBvcnQgZGF5anMgZnJvbSAnZGF5anMnXG5pbXBvcnQgaXNvV2VlayBmcm9tICdkYXlqcy9wbHVnaW4vaXNvV2VlaydcbmltcG9ydCBkdXJhdGlvbiBmcm9tICdkYXlqcy9wbHVnaW4vZHVyYXRpb24nXG5pbXBvcnQgaXNCZXR3ZWVuIGZyb20gJ2RheWpzL3BsdWdpbi9pc0JldHdlZW4nXG5pbXBvcnQgdGltZXpvbmUgZnJvbSAnZGF5anMvcGx1Z2luL3RpbWV6b25lJ1xuaW1wb3J0IHV0YyBmcm9tICdkYXlqcy9wbHVnaW4vdXRjJ1xuLy8gaW1wb3J0IHsgY2FuY2VsTWVldGluZ0Fzc2lzdCwgZGVsZXRlTWVldGluZ0Fzc2lzdEF0dGVuZGVlLCBnZXRNZWV0aW5nQXNzaXN0LCBnZXRNZWV0aW5nQXNzaXN0QXR0ZW5kZWUsIGdldE1lZXRpbmdBc3Npc3RBdHRlbmRlZUJ5RW1haWwsIHVwc2VydE9uZU1lZXRpbmdBc3Npc3RBdHRlbmRlZSwgdXBkYXRlTWVldGluZ0Fzc2lzdEF0dGVuZGFuY2VDb3VudCB9IGZyb20gXCJAbGliL2FwaS1oZWxwZXJcIlxuXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnXG5pbXBvcnQge1xuICAgIEFsZXJ0RGlhbG9nLFxuICAgIEFsZXJ0RGlhbG9nQm9keSxcbiAgICBBbGVydERpYWxvZ0Zvb3RlcixcbiAgICBBbGVydERpYWxvZ0hlYWRlcixcbiAgICBBbGVydERpYWxvZ0NvbnRlbnQsXG4gICAgQWxlcnREaWFsb2dPdmVybGF5LFxuICAgIEJ1dHRvbixcbiAgICB1c2VEaXNjbG9zdXJlLFxuICAgIHVzZVRvYXN0XG59IGZyb20gJ0BjaGFrcmEtdWkvcmVhY3QnXG5cblxuZGF5anMuZXh0ZW5kKGlzb1dlZWspXG5kYXlqcy5leHRlbmQoZHVyYXRpb24pXG5kYXlqcy5leHRlbmQoaXNCZXR3ZWVuKVxuZGF5anMuZXh0ZW5kKHRpbWV6b25lKVxuZGF5anMuZXh0ZW5kKHV0YylcblxudHlwZSBQcm9wcyA9IHtcbiAgICBtZWV0aW5nQXNzaXN0QXR0ZW5kZWU/OiBNZWV0aW5nQXNzaXN0QXR0ZW5kZWVUeXBlLFxuICAgIGhvc3RJZDogc3RyaW5nLFxuICAgIHByaW1hcnlFbWFpbD86IHN0cmluZyxcbiAgICBtZWV0aW5nSWQ6IHN0cmluZyxcbiAgICBhdHRlbmRlZUlkOiBzdHJpbmcsXG59XG5jb25zdCBNZWV0aW5nQXNzaXN0RXh0ZXJuYWxBdHRlbmRlZTogTmV4dFBhZ2U8UHJvcHM+ID0gKHByb3BzOiBQcm9wcykgPT4ge1xuICAgIGNvbnN0IFtwcmltYXJ5RW1haWwsIHNldFByaW1hcnlFbWFpbF0gPSB1c2VTdGF0ZTxzdHJpbmc+KHByb3BzPy5wcmltYXJ5RW1haWwgfHwgJycpXG4gICAgY29uc3QgW29sZFByaW1hcnlFbWFpbCwgc2V0T2xkUHJpbWFyeUVtYWlsXSA9IHVzZVN0YXRlPHN0cmluZz4ocHJvcHM/Lm1lZXRpbmdBc3Npc3RBdHRlbmRlZT8ucHJpbWFyeUVtYWlsIHx8ICcnKVxuICAgIGNvbnN0IFtuYW1lLCBzZXROYW1lXSA9IHVzZVN0YXRlPHN0cmluZz4ocHJvcHM/Lm1lZXRpbmdBc3Npc3RBdHRlbmRlZT8ubmFtZSB8fCAnJylcbiAgICBjb25zdCBbbWVldGluZ0F0dGVuZGVlLCBzZXRNZWV0aW5nQXR0ZW5kZWVdID0gdXNlU3RhdGU8TWVldGluZ0Fzc2lzdEF0dGVuZGVlVHlwZT4oKVxuICAgIGNvbnN0IFttZWV0aW5nQXNzaXN0LCBzZXRNZWV0aW5nQXNzaXN0XSA9IHVzZVN0YXRlPE1lZXRpbmdBc3Npc3RUeXBlPigpXG4gICAgXG4gICAgLy8gY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKClcbiAgICBjb25zdCB0b2FzdCA9IHVzZVRvYXN0KClcbiAgICBjb25zdCB7IGlzT3Blbiwgb25PcGVuLCBvbkNsb3NlIH0gPSB1c2VEaXNjbG9zdXJlKClcbiAgICBjb25zdCBjYW5jZWxSZWYgPSB1c2VSZWYoKVxuICAgIFxuICAgIGNvbnN0IGhvc3RJZCA9IHByb3BzPy5ob3N0SWRcbiAgICBjb25zdCBtZWV0aW5nSWQgPSBwcm9wcz8ubWVldGluZ0lkXG4gICAgY29uc3QgdXNlcklkID0gcHJvcHM/Lm1lZXRpbmdBc3Npc3RBdHRlbmRlZT8udXNlcklkXG4gICAgY29uc3QgYXR0ZW5kZWVJZCA9IHByb3BzPy5hdHRlbmRlZUlkXG5cbiAgICBjb25zb2xlLmxvZyhob3N0SWQsICcgaG9zdElkJylcbiAgICBjb25zb2xlLmxvZyh1c2VySWQsICcgdXNlcklkJylcblxuICAgIC8vIGdldCBvbGQgbWVldGluZyBhc3Npc3QgYXR0ZW5kZWVcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIWF0dGVuZGVlSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ25vIGF0dGVuZGVlSWQgcHJlc2VudCB0byBnZXQgb2xkIG1lZXRpbmcgYXR0ZW5kZWUgaW5mbycpXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IG9sZE1lZXRpbmdBdHRlbmRlZTogTWVldGluZ0Fzc2lzdEF0dGVuZGVlVHlwZSA9IChhd2FpdCBheGlvcy5wb3N0KCcvYXBpL2V4dGVybmFsLWF0dGVuZGVlJywgeyBtZXRob2Q6ICdnZXRNZWV0aW5nQXNzaXN0QXR0ZW5kZWUnLCB2YXJpYWJsZXM6IHsgaWQ6IGF0dGVuZGVlSWQgIH19KSk/LmRhdGFcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhvbGRNZWV0aW5nQXR0ZW5kZWUsICcgb2xkTWVldGluZ0F0dGVuZGVlJylcbiAgICAgICAgICAgICAgICBpZiAob2xkTWVldGluZ0F0dGVuZGVlPy5pZCkge1xuICAgICAgICAgICAgICAgICAgICBzZXRNZWV0aW5nQXR0ZW5kZWUob2xkTWVldGluZ0F0dGVuZGVlKVxuICAgICAgICAgICAgICAgICAgICBpZiAob2xkTWVldGluZ0F0dGVuZGVlPy5wcmltYXJ5RW1haWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICBzZXRPbGRQcmltYXJ5RW1haWwob2xkTWVldGluZ0F0dGVuZGVlPy5wcmltYXJ5RW1haWwpXG4gICAgICAgICAgICAgICAgICAgICAgc2V0UHJpbWFyeUVtYWlsKG9sZE1lZXRpbmdBdHRlbmRlZT8ucHJpbWFyeUVtYWlsKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSwgJyB1bmFibGUgdG8gZ2V0IG9sZCBtZWV0aW5nIGF0dGVuZGVlJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkoKVxuICAgIH0sIFthdHRlbmRlZUlkXSlcblxuICAgIC8vIGdldCBtZWV0aW5nQXNzaXN0XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb2xkTWVldGluZ0Fzc2lzdDogTWVldGluZ0Fzc2lzdFR5cGUgPSAoYXdhaXQgYXhpb3MucG9zdCgnL2FwaS9leHRlcm5hbC1hdHRlbmRlZScsIHsgbWV0aG9kOiAnZ2V0TWVldGluZ0Fzc2lzdCcsIHZhcmlhYmxlczogeyBpZDogbWVldGluZ0lkICB9fSkpPy5kYXRhXG4gICAgICAgICAgICAgICAgc2V0TWVldGluZ0Fzc2lzdChvbGRNZWV0aW5nQXNzaXN0KVxuXG4gICAgICAgICAgICAgICAgaWYgKG9sZE1lZXRpbmdBc3Npc3Q/LmNhbmNlbElmQW55UmVmdXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvYXN0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnTWVldGluZyBjYW5jZWxsZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdUaGUgbWVldGluZyBoYXMgYmVlbiBjYWxsZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAnd2FybmluZycsXG4gICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogOTAwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQ2xvc2FibGU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSwgJyB1bmFibGUgdG8gZ2V0IG1lZXRpbmcgYXNzaXN0JylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkoKVxuICAgIH0sIFttZWV0aW5nSWQsIHRvYXN0XSlcblxuICAgIGNvbnN0IHVwZGF0ZUF0dGVuZGVlSW5mbyA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIHZhbGlkYXRlXG4gICAgICAgICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgICAgICAgICB0b2FzdCh7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnTmFtZSByZXF1aXJlZC4nLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJOYW1lIGlzIHJlcXVpcmVkIHRvIGNvbmZpcm0gYXR0ZW5kZW5jZS5cIixcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAnZXJyb3InLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogOTAwMCxcbiAgICAgICAgICAgICAgICAgICAgaXNDbG9zYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXByaW1hcnlFbWFpbCkge1xuICAgICAgICAgICAgICAgIHRvYXN0KHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdFbWFpbCBpcyByZXF1aXJlZCcsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRW1haWwgaXMgcmVxdWlyZWQgdG8gY29uZmlybSBhdHRlbmRlbmNlJyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAnZXJyb3InLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogOTAwMCxcbiAgICAgICAgICAgICAgICAgICAgaXNDbG9zYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBkZWxldGUgb2xkIGF0dGVuZGVlIGlmIGFueVxuICAgICAgICAgICAgLy8gaWYgKG9sZFByaW1hcnlFbWFpbCkge1xuICAgICAgICAgICAgLy8gICAgIGlmIChwcmltYXJ5RW1haWwgIT09IG9sZFByaW1hcnlFbWFpbCkge1xuICAgICAgICAgICAgLy8gICAgICAgICBhd2FpdCBkZWxldGVNZWV0aW5nQXNzaXN0QXR0ZW5kZWUoYXR0ZW5kZWVJZClcbiAgICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGFkZCBuZXcgYXR0ZW5kZWUgaW5mb1xuICAgICAgICAgICAgY29uc3QgbmV3QXR0ZW5kZWU6IE1lZXRpbmdBc3Npc3RBdHRlbmRlZVR5cGUgPSAoYXdhaXQgYXhpb3MucG9zdCgnL2FwaS9leHRlcm5hbC1hdHRlbmRlZScsIHsgbWV0aG9kOiAndXBzZXJ0T25lTWVldGluZ0Fzc2lzdEF0dGVuZGVlJywgdmFyaWFibGVzOiB7IGF0dGVuZGVlOiB7XG4gICAgICAgICAgICAgICAgaWQ6IGF0dGVuZGVlSWQsXG4gICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICBob3N0SWQsXG4gICAgICAgICAgICAgICAgdXNlcklkOiB1c2VySWQgfHwgdXVpZCgpLFxuICAgICAgICAgICAgICAgIGVtYWlsczogcHJvcHM/Lm1lZXRpbmdBc3Npc3RBdHRlbmRlZVxuICAgICAgICAgICAgICAgICAgICA/LmVtYWlscz8uZmlsdGVyKGUgPT4gKGU/LnZhbHVlICE9PSBvbGRQcmltYXJ5RW1haWwpKVxuICAgICAgICAgICAgICAgICAgICA/LmZpbHRlcihlID0+ICghZT8ucHJpbWFyeSkpXG4gICAgICAgICAgICAgICAgICAgID8uY29uY2F0KFt7IHByaW1hcnk6IHRydWUsIHZhbHVlOiBwcmltYXJ5RW1haWwudG9Mb3dlckNhc2UoKS50cmltKCksIHR5cGU6ICd3b3JrJywgZGlzcGxheU5hbWU6IHByaW1hcnlFbWFpbCB9XSkgYXMgRW1haWxUeXBlW11cbiAgICAgICAgICAgICAgICAgICAgfHwgW3sgcHJpbWFyeTogdHJ1ZSwgdmFsdWU6IHByaW1hcnlFbWFpbC50b0xvd2VyQ2FzZSgpLnRyaW0oKSwgdHlwZTogJ3dvcmsnLCBkaXNwbGF5TmFtZTogcHJpbWFyeUVtYWlsIH1dIGFzIEVtYWlsVHlwZVtdLFxuICAgICAgICAgICAgICAgIG1lZXRpbmdJZCxcbiAgICAgICAgICAgICAgICBjcmVhdGVkRGF0ZTogZGF5anMoKS5mb3JtYXQoKSxcbiAgICAgICAgICAgICAgICB0aW1lem9uZTogZGF5anMudHouZ3Vlc3MoKSxcbiAgICAgICAgICAgICAgICB1cGRhdGVkQXQ6IGRheWpzKCkuZm9ybWF0KCksXG4gICAgICAgICAgICAgICAgZXh0ZXJuYWxBdHRlbmRlZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwcmltYXJ5RW1haWwsXG4gICAgICAgICAgICB9fX0pKT8uZGF0YVxuXG4gICAgICAgICAgICBzZXRPbGRQcmltYXJ5RW1haWwobmV3QXR0ZW5kZWU/LnByaW1hcnlFbWFpbCBhcyBzdHJpbmcpXG5cbiAgICAgICAgICAgIGlmICghb2xkUHJpbWFyeUVtYWlsKSB7XG4gICAgICAgICAgICAgICAgLy8gbmV3IGF0dGVuZGFuY2UgY291bnRcblxuICAgICAgICAgICAgICAgIGNvbnN0IG1lZXRpbmdBc3Npc3Q6IE1lZXRpbmdBc3Npc3RUeXBlID0gKGF3YWl0IGF4aW9zLnBvc3QoJy9hcGkvZXh0ZXJuYWwtYXR0ZW5kZWUnLCB7IG1ldGhvZDogJ2dldE1lZXRpbmdBc3Npc3QnLCB2YXJpYWJsZXM6IHsgaWQ6IG1lZXRpbmdJZCAgfX0pKT8uZGF0YVxuXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3QXR0ZW5kYW5jZUNvdW50ID0gKG1lZXRpbmdBc3Npc3Q/LmF0dGVuZGVlQ291bnQgfHwgMCkgKyAxXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3QXR0ZW5kZWVSZXNwb25kZWRDb3VudCA9IChtZWV0aW5nQXNzaXN0Py5hdHRlbmRlZVJlc3BvbmRlZENvdW50IHx8IDApICsgMVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIGF3YWl0IHVwZGF0ZU1lZXRpbmdBc3Npc3RBdHRlbmRhbmNlQ291bnQobWVldGluZ0lkLCBuZXdBdHRlbmRhbmNlQ291bnQpXG4gICAgICAgICAgICAgICAgYXdhaXQgYXhpb3MucG9zdCgnL2FwaS9leHRlcm5hbC1hdHRlbmRlZScsIHsgbWV0aG9kOiAndXBkYXRlTWVldGluZ0Fzc2lzdEF0dGVuZGFuY2VDb3VudCcsIHZhcmlhYmxlczogeyBpZDogbWVldGluZ0lkLCBhdHRlbmRlZUNvdW50OiBuZXdBdHRlbmRhbmNlQ291bnQsIGF0dGVuZGVlUmVzcG9uZGVkQ291bnQ6IG5ld0F0dGVuZGVlUmVzcG9uZGVkQ291bnQgfX0pXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlIGludml0ZSByZXNwb25zZVxuICAgICAgICAgICAgICAgIGF3YWl0IGF4aW9zLnBvc3QoJy9hcGkvZXh0ZXJuYWwtYXR0ZW5kZWUnLCB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ3VwZGF0ZU1lZXRpbmdBc3Npc3RJbnZpdGVSZXNwb25zZScsXG4gICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlczogeyBpZDogYXR0ZW5kZWVJZCwgcmVzcG9uc2U6ICdBVFRFTkRJTkcnIH0sXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2V0TWVldGluZ0F0dGVuZGVlKG5ld0F0dGVuZGVlKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0b2FzdCh7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdTdWNjZXNzZnVsbHkgdXBkYXRlZCcsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdZb3UgaGF2ZSBzdWNlc3NmdWxseSB1cGRhdGVkIGF0dGVuZGFuY2UgaW5mb3JtYXRpb24uIFBsZWFzZSBwcm9jZWVkIHRvIHRoZSBuZXh0IHN0ZXAuJyxcbiAgICAgICAgICAgICAgICBzdGF0dXM6ICdzdWNjZXNzJyxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogOTAwMCxcbiAgICAgICAgICAgICAgICBpc0Nsb3NhYmxlOiB0cnVlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICBcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdG9hc3Qoe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ09vcHMuLi4nLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1NvbWV0aGluZyB3ZW50IHdyb25nLCBsZXQgdXMga25vdyBzbyB3ZSBjYW4gd29yayBvbiBpdCcsXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDkwMDAsXG4gICAgICAgICAgICAgICAgICAgIGlzQ2xvc2FibGU6IHRydWVcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgY29uc29sZS5sb2coZSwgJyB1bmFibGUgdG8gdXBkYXRlIGF0dGVuZGVlIGluZm8nKVxuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBjYW5jZWxDb25maXJtYXRpb24gPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoIXByaW1hcnlFbWFpbCkge1xuICAgICAgICAgICAgICAgdG9hc3Qoe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ05vIGVtYWlsIHByZXNlbnQnLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1NlZW1zIGxpa2UgdGhlcmUgaXMgbm8gZW1haWwgdG8gY2FuY2VsIGNvbmZpcm1hdGlvbicsXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogJ3dhcm5pbmcnLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogOTAwMCxcbiAgICAgICAgICAgICAgICAgICAgaXNDbG9zYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gY29uc3Qgb2xkQXR0ZW5kZWUgPSBhd2FpdCBnZXRNZWV0aW5nQXNzaXN0QXR0ZW5kZWUoYXR0ZW5kZWVJZClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCFtZWV0aW5nQXR0ZW5kZWU/LmlkKSB7XG4gICAgICAgICAgICAgICAgdG9hc3Qoe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ05vIHJlZ2lzdHJhdGlvbiBwcmVzZW50JyxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdTZWVtcyBsaWtlIHRoZXJlIGlzIG5vIHJlZ2lzdHJhdGlvbiB0byBjYW5jZWwgY29uZmlybWF0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAnd2FybmluZycsXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiA5MDAwLFxuICAgICAgICAgICAgICAgICAgICBpc0Nsb3NhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH0gXG5cbiAgICAgICAgICAgIC8vIGF3YWl0IGRlbGV0ZU1lZXRpbmdBc3Npc3RBdHRlbmRlZShtZWV0aW5nQXR0ZW5kZWU/LmlkKVxuICAgICAgICAgICAgLy8gbWVldGluZ0F0dGVuZGVlPy5pZFxuICAgICAgICAgICAgYXdhaXQgYXhpb3MucG9zdCgnL2FwaS9leHRlcm5hbC1hdHRlbmRlZScsIHsgbWV0aG9kOiAnZGVsZXRlTWVldGluZ0Fzc2lzdEF0dGVuZGVlJyxcbiAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IHsgaWQ6IG1lZXRpbmdBdHRlbmRlZT8uaWQgfSB9KVxuXG4gICAgICAgICAgICB0b2FzdCh7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICdDb25maXJtYXRpb24gY2FuY2VsbGVkJyxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1lvdXIgY29uZmlybWF0aW9uIGlzIGNhbmNlbGxlZCBzdWNjZXNmdWxseS4gWW91IG1heSBjbG9zZSB0aGUgd2luZG93IGlmIHlvdSB3aXNoLicsXG4gICAgICAgICAgICAgICAgc3RhdHVzOiAnc3VjY2VzcycsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDkwMDAsXG4gICAgICAgICAgICAgICAgaXNDbG9zYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgLy8gbmV3IGF0dGVuZGFuY2UgY291bnRcblxuICAgICAgICAgICAgY29uc3QgbmV3QXR0ZW5kYW5jZUNvdW50ID0gKG1lZXRpbmdBc3Npc3Q/LmF0dGVuZGVlQ291bnQgfHwgMCkgLSAxIDwgMCA/IDAgOiAobWVldGluZ0Fzc2lzdD8uYXR0ZW5kZWVDb3VudCBhcyBudW1iZXIpIC0gMVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBhd2FpdCB1cGRhdGVNZWV0aW5nQXNzaXN0QXR0ZW5kYW5jZUNvdW50KG1lZXRpbmdJZCwgbmV3QXR0ZW5kYW5jZUNvdW50KVxuXG4gICAgICAgICAgICBhd2FpdCBheGlvcy5wb3N0KCdhcGkvZXh0ZXJuYWwtYXR0ZW5kZWUnLCB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiAndXBkYXRlTWVldGluZ0Fzc2lzdEF0dGVuZGFuY2VDb3VudCcsXG4gICAgICAgICAgICAgICAgdmFyaWFibGVzOiB7IGlkOiBtZWV0aW5nSWQsIGF0dGVuZGVlQ291bnQ6IG5ld0F0dGVuZGFuY2VDb3VudCwgYXR0ZW5kZWVSZXNwb25kZWRDb3VudDogbWVldGluZ0Fzc2lzdD8uYXR0ZW5kZWVSZXNwb25kZWRDb3VudCB9LFxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgaWYgKG1lZXRpbmdBc3Npc3Q/LmNhbmNlbElmQW55UmVmdXNlKSB7XG4gICAgICAgICAgICAgICAgLy8gYXdhaXQgY2FuY2VsTWVldGluZ0Fzc2lzdChtZWV0aW5nSWQpXG4gICAgICAgICAgICAgICAgYXdhaXQgYXhpb3MucG9zdCgnYXBpL2V4dGVybmFsLWF0dGVuZGVlJywge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdjYW5jZWxNZWV0aW5nQXNzaXN0JyxcbiAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVzOiB7IGlkOiBtZWV0aW5nSWQgfSxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyB1cGRhdGUgaW52aXRlIHJlc3BvbnNlXG4gICAgICAgICAgICBhd2FpdCBheGlvcy5wb3N0KCcvYXBpL2V4dGVybmFsLWF0dGVuZGVlJywge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogJ3VwZGF0ZU1lZXRpbmdBc3Npc3RJbnZpdGVSZXNwb25zZScsXG4gICAgICAgICAgICAgICAgdmFyaWFibGVzOiB7IGlkOiBhdHRlbmRlZUlkLCByZXNwb25zZTogJ0NBTkNFTExFRCcgfSxcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRvYXN0KHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ09vcHMuLi4nLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnU29tZXRoaW5nIHdlbnQgd3JvbmcsIGxldCB1cyBrbm93IHNvIHdlIGNhbiB3b3JrIG9uIGl0JyxcbiAgICAgICAgICAgICAgICBzdGF0dXM6ICdlcnJvcicsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDkwMDAsXG4gICAgICAgICAgICAgICAgaXNDbG9zYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUsICcgdW5hYmxlIHRvIGNhbmNlbCBjb25maXJtYXRpb24nKVxuICAgICAgICB9XG4gICAgICAgIG9uQ2xvc2UoKVxuICAgIH1cblxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZUVtYWlsID0gKGU6IENoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiBzZXRQcmltYXJ5RW1haWwoZT8udGFyZ2V0Py52YWx1ZSlcblxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZU5hbWUgPSAoZTogQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHNldE5hbWUoZS50YXJnZXQudmFsdWUpXG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wganVzdGlmeS1jZW50ZXIgaXRlbXMtY2VudGVyIGgtZnVsbCB3LWZ1bGxcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBmbGV4LWNvbCBqdXN0aWZ5LWFyb3VuZCBpdGVtcy1jZW50ZXIgaC1mdWxsIHctZnVsbFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiIHNtOnRleHQtbGVmdCBsZzpteS0xMiBzbTpteS04IGxnOmgtMS82IGxnOnctMS8yIGxnOm14LTMgbXgtNFwiPlxuICAgICAgICAgICAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwidGV4dC14bCBmb250LWJvbGQgdGV4dC1ncmF5LTkwMCBkYXJrOnRleHQtZ3JheS0yMDAgc206dGV4dC0yeGxcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtcIkxldCdzIGNvbmZpcm0geW91ciBhdHRlbmRhbmNlXCJ9XG4gICAgICAgICAgICAgICAgICAgIDwvaDE+XG5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwibXQtMS41IHRleHQtc20gdGV4dC1ncmF5LTUwMFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAge1wiU3VibWl0IHlvdXIgbmFtZSBhbmQgY29udGFjdCBpbmZvcm1hdGlvbiB0byBjb25maXJtIHlvdXIgYXR0ZW5kYW5jZSEg8J+OiVwifVxuICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIGp1c3RpZnktYXJvdW5kIGl0ZW1zLWNlbnRlciBsZzpoLTUvNiBsZzp3LTEvMlwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cIk5hbWVcIiBjbGFzc05hbWU9XCJibG9jayB0ZXh0LXhzIGZvbnQtbWVkaXVtIHRleHQtZ3JheS03MDAgZGFyazp0ZXh0LWdyYXktMzAwXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJOYW1lXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJqb2huXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidGV4dC1ncmF5LTkwMCBwZWVyIGludmFsaWQ6Ym9yZGVyLXBpbmstNTAwIGludmFsaWQ6dGV4dC1waW5rLTYwMCAgbXQtMSB3LWZ1bGwgcm91bmRlZC1tZCBib3JkZXItZ3JheS0yMDAgc2hhZG93LXNtIHNtOnRleHQtc21cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17bmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZU5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJpbnZpc2libGUgcGVlci1pbnZhbGlkOnZpc2libGUgdGV4dC1waW5rLTcwMCBmb250LWxpZ2h0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBsZWFzZSBlbnRlciB5b3VyIG5hbWUgZm9yIGF0dGVuZGVuY2UgY29uZmlybWF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiVXNlckVtYWlsXCIgY2xhc3NOYW1lPVwiYmxvY2sgdGV4dC14cyBmb250LW1lZGl1bSB0ZXh0LWdyYXktNzAwIGRhcms6dGV4dC1ncmF5LTMwMFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFbWFpbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImVtYWlsXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJVc2VyRW1haWxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cImpvaG5AcmhjcC5jb21cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ0ZXh0LWdyYXktOTAwIHBlZXIgaW52YWxpZDpib3JkZXItcGluay01MDAgaW52YWxpZDp0ZXh0LXBpbmstNjAwICBtdC0xIHctZnVsbCByb3VuZGVkLW1kIGJvcmRlci1ncmF5LTIwMCBzaGFkb3ctc20gc206dGV4dC1zbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtwcmltYXJ5RW1haWx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VFbWFpbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImludmlzaWJsZSBwZWVyLWludmFsaWQ6dmlzaWJsZSB0ZXh0LXBpbmstNzAwIGZvbnQtbGlnaHRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGxlYXNlIGVudGVyIGEgdmFsaWQgZW1haWwgYWRkcmVzc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtLWF1dG8gbXktMiB3LTEvMiBsZzpmbGV4IGxnOmp1c3RpZnktY2VudGVyIGxnOml0ZW1zLWNlbnRlciBsZzpzcGFjZS14LTQgbGc6dy1mdWxsXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT0nYnRuIGJ0bi1naG9zdCcgb25DbGljaz17Y2FuY2VsQ29uZmlybWF0aW9ufT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7J0NhbmNlbCBDb25maXJtYXRpb24nfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT0nYnRuIGJ0bi1wcmltYXJ5JyBvbkNsaWNrPXt1cGRhdGVBdHRlbmRlZUluZm99PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsnQ29uZmlybSBBdHRlbmRhbmNlJ31cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8QWxlcnREaWFsb2dcbiAgICAgICAgICAgICAgICBpc09wZW49e2lzT3Blbn1cbiAgICAgICAgICAgICAgICBsZWFzdERlc3RydWN0aXZlUmVmPXtjYW5jZWxSZWYgYXMgYW55fVxuICAgICAgICAgICAgICAgIG9uQ2xvc2U9e29uQ2xvc2V9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPEFsZXJ0RGlhbG9nT3ZlcmxheT5cbiAgICAgICAgICAgICAgICAgICAgPEFsZXJ0RGlhbG9nQ29udGVudD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxBbGVydERpYWxvZ0hlYWRlciBmb250U2l6ZT0nbGcnIGZvbnRXZWlnaHQ9J2JvbGQnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENhbmNlbCBDb25maXJtYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQWxlcnREaWFsb2dIZWFkZXI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxBbGVydERpYWxvZ0JvZHk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1wiQXJlIHlvdSBzdXJlPyBZb3VyIGNvbmZpcm1hdGlvbiB3aWxsIGJlIGNhbmNlbGxlZFwifVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9BbGVydERpYWxvZ0JvZHk+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxBbGVydERpYWxvZ0Zvb3Rlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT0nYnRuIGJ0bi1naG9zdCcgcmVmPXtjYW5jZWxSZWYgYXMgYW55fSBvbkNsaWNrPXtvbkNsb3NlfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2FuY2VsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9J2J0biBtbC0zJyBvbkNsaWNrPXtjYW5jZWxDb25maXJtYXRpb259PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWxldGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQWxlcnREaWFsb2dGb290ZXI+XG4gICAgICAgICAgICAgICAgICAgIDwvQWxlcnREaWFsb2dDb250ZW50PlxuICAgICAgICAgICAgICAgIDwvQWxlcnREaWFsb2dPdmVybGF5PlxuICAgICAgICAgICAgPC9BbGVydERpYWxvZz5cbiAgICAgICAgPC9kaXY+XG4gICAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBNZWV0aW5nQXNzaXN0RXh0ZXJuYWxBdHRlbmRlZVxuIl19