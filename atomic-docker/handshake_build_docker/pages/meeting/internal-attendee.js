"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const router_1 = require("next/router");
const dayjs_1 = __importDefault(require("dayjs"));
const isoWeek_1 = __importDefault(require("dayjs/plugin/isoWeek"));
const duration_1 = __importDefault(require("dayjs/plugin/duration"));
const isBetween_1 = __importDefault(require("dayjs/plugin/isBetween"));
const timezone_1 = __importDefault(require("dayjs/plugin/timezone"));
const utc_1 = __importDefault(require("dayjs/plugin/utc"));
const react_2 = require("@chakra-ui/react");
const axios_1 = __importDefault(require("axios"));
dayjs_1.default.extend(isoWeek_1.default);
dayjs_1.default.extend(duration_1.default);
dayjs_1.default.extend(isBetween_1.default);
dayjs_1.default.extend(timezone_1.default);
dayjs_1.default.extend(utc_1.default);
const MeetingAssistInternalAttendee = (props) => {
    const [primaryEmail, setPrimaryEmail] = (0, react_1.useState)(props?.primaryEmail || '');
    const [oldPrimaryEmail, setOldPrimaryEmail] = (0, react_1.useState)(props?.meetingAssistAttendee?.primaryEmail || '');
    const [name, setName] = (0, react_1.useState)(props?.meetingAssistAttendee?.name || '');
    const [contactPhone, setContactPhone] = (0, react_1.useState)('');
    const [contactEmail, setContactEmail] = (0, react_1.useState)('');
    const [verifiedUser, setVerifiedUser] = (0, react_1.useState)(false);
    const [registeredUser, setRegisteredUser] = (0, react_1.useState)();
    const [meetingAttendee, setMeetingAttendee] = (0, react_1.useState)();
    const [meetingAssist, setMeetingAssist] = (0, react_1.useState)();
    const router = (0, router_1.useRouter)();
    const toast = (0, react_2.useToast)();
    const { isOpen, onOpen, onClose } = (0, react_2.useDisclosure)();
    const cancelRef = (0, react_1.useRef)();
    const hostId = props?.hostId;
    const meetingId = props?.meetingId;
    const userId = props?.meetingAssistAttendee?.userId;
    const attendeeId = props?.attendeeId;
    console.log(props?.primaryEmail, ' props?.primaryEmail');
    // check internal user
    (0, react_1.useEffect)(() => {
        (async () => {
            try {
                // validate
                if (!primaryEmail) {
                    return;
                }
                // const userInfo = await getUserContactInfo(primaryEmail)
                // primaryEmail
                const userInfo = (await axios_1.default.post('/api/internal-attendee', {
                    method: 'getUserContactInfo',
                    variables: { id: primaryEmail },
                }))?.data;
                if (userInfo?.id) {
                    setVerifiedUser(true);
                    setRegisteredUser(userInfo);
                }
            }
            catch (e) {
                console.log(e, ' unable to get user info from primary email');
            }
        })();
    }, [primaryEmail]);
    // get old meeting assist attendee
    (0, react_1.useEffect)(() => {
        (async () => {
            try {
                if (!attendeeId) {
                    console.log('no attendeeId present to get old meeting attendee info');
                }
                // const oldMeetingAttendee = await getMeetingAssistAttendee(attendeeId as string)
                const oldMeetingAttendee = (await axios_1.default.post('/api/external-attendee', { method: 'getMeetingAssistAttendee', variables: { id: attendeeId } }))?.data;
                if (oldMeetingAttendee?.id) {
                    setMeetingAttendee(oldMeetingAttendee);
                    if (oldMeetingAttendee?.primaryEmail) {
                        setOldPrimaryEmail(oldMeetingAttendee?.primaryEmail);
                        setPrimaryEmail(oldMeetingAttendee?.primaryEmail);
                    }
                }
            }
            catch (e) {
                console.log(e, ' unable to get old meeting attendee');
            }
        })();
    }, [attendeeId]);
    // get meetingAssist
    (0, react_1.useEffect)(() => {
        (async () => {
            try {
                // const oldMeetingAssist = await getMeetingAssist(meetingId)
                const oldMeetingAssist = (await axios_1.default.post('/api/external-attendee', { method: 'getMeetingAssist', variables: { id: meetingId } }))?.data;
                setMeetingAssist(oldMeetingAssist);
                if (oldMeetingAssist?.cancelIfAnyRefuse) {
                    toast({
                        title: 'Meeting cancelled',
                        description: 'The meeting has been called',
                        status: 'warning',
                        duration: 9000,
                        isClosable: true
                    });
                }
            }
            catch (e) {
                console.log(e, ' unable to get meeting assist');
            }
        })();
    }, [meetingId, toast]);
    const verifyInternalAttendee = async () => {
        try {
            // validate
            if (!contactPhone && !contactEmail) {
                toast({
                    title: 'Contact info required to verify',
                    description: 'Either registered phone or email is required to verify you are registered with Atomic',
                    status: 'error',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            if (contactPhone) {
                const contactPhoneCleaned = contactPhone.replace(/[^\d]/g, '');
                // const userInfo = await getUserContactInfo(contactPhoneCleaned)
                const userInfo = (await axios_1.default.post('/api/internal-attendee', {
                    method: 'getUserContactInfo',
                    variables: { id: contactPhoneCleaned },
                }))?.data;
                if (userInfo?.id) {
                    setVerifiedUser(true);
                    setRegisteredUser(userInfo);
                    toast({
                        title: 'User verified',
                        description: 'You have been verified as an Atomic user!',
                        status: 'success',
                        duration: 9000,
                        isClosable: true,
                    });
                    return true;
                }
                else {
                    setVerifiedUser(false);
                    toast({
                        title: 'Contact info required to verify',
                        description: 'Either registered phone or email is required to verify you are registered with Atomic',
                        status: 'error',
                        duration: 9000,
                        isClosable: true,
                    });
                    return false;
                }
            }
            else if (contactEmail) {
                // const userInfo = await getUserContactInfo(contactEmail)
                const userInfo = (await axios_1.default.post('/api/internal-attendee', {
                    method: 'getUserContactInfo',
                    variables: { id: contactEmail },
                }))?.data;
                if (userInfo?.id) {
                    setVerifiedUser(true);
                    setRegisteredUser(userInfo);
                    toast({
                        title: 'User verified',
                        description: 'You have been verified as an Atomic user!',
                        status: 'success',
                        duration: 9000,
                        isClosable: true,
                    });
                    return true;
                }
                else {
                    setVerifiedUser(false);
                    toast({
                        title: 'Contact info required to verify',
                        description: 'Either registered phone or email is required to verify you are registered with Atomic',
                        status: 'error',
                        duration: 9000,
                        isClosable: true,
                    });
                    return false;
                }
            }
        }
        catch (e) {
            console.log(e, ' unable to verify if user is internal attendee');
        }
    };
    const updateAttendeeInfo = async () => {
        try {
            // validate
            if (!name) {
                toast({
                    title: 'Name required.',
                    description: "Name is required to confirm attendence.",
                    status: 'error',
                    duration: 9000,
                    isClosable: true,
                });
                return;
            }
            if (!primaryEmail) {
                toast({
                    title: 'Email is required',
                    description: 'Email is required to confirm attendence',
                    status: 'error',
                    duration: 9000,
                    isClosable: true
                });
                return;
            }
            if (!registeredUser?.userId && !userId) {
                toast({
                    title: 'Missing info',
                    description: 'User id is required but missing. Something went wrong somewhere. Let us know',
                    status: 'error',
                    duration: 9000,
                    isClosable: true
                });
                return;
            }
            const newAttendee = (await axios_1.default.post('/api/external-attendee', { method: 'upsertOneMeetingAssistAttendee', variables: { attendee: {
                        id: attendeeId,
                        name,
                        hostId,
                        userId: registeredUser?.userId ?? userId,
                        emails: props?.meetingAssistAttendee
                            ?.emails?.filter(e => (e?.value !== oldPrimaryEmail))
                            ?.filter(e => (!e?.primary))
                            ?.concat([{ primary: true, value: primaryEmail.toLowerCase().trim(), type: 'work', displayName: primaryEmail }])
                            || [{ primary: true, value: primaryEmail.toLowerCase().trim(), type: 'work', displayName: primaryEmail }],
                        meetingId,
                        createdDate: (0, dayjs_1.default)().format(),
                        timezone: dayjs_1.default.tz.guess(),
                        updatedAt: (0, dayjs_1.default)().format(),
                        externalAttendee: false,
                        primaryEmail,
                    } } }))?.data;
            setOldPrimaryEmail(newAttendee?.primaryEmail);
            if (!oldPrimaryEmail) {
                // new attendance count
                const newAttendanceCount = (meetingAssist?.attendeeCount || 0) + 1;
                const newAttendeeRespondedCount = (meetingAssist?.attendeeRespondedCount || 0) + 1;
                // await updateMeetingAssistAttendanceCount(meetingId, newAttendanceCount)
                await axios_1.default.post('/api/external-attendee', { method: 'updateMeetingAssistAttendanceCount', variables: { id: meetingId, attendeeCount: newAttendanceCount, attendeeRespondedCount: newAttendeeRespondedCount } });
                // update invite response
                await axios_1.default.post('/api/external-attendee', {
                    method: 'updateMeetingAssistInviteResponse',
                    variables: { id: attendeeId, response: 'ATTENDING' },
                });
            }
            setMeetingAttendee(newAttendee);
            toast({
                title: 'Successfully updated',
                description: 'You have sucessfully updated attendance information. Please proceed to the next step.',
                status: 'success',
                duration: 9000,
                isClosable: true
            });
        }
        catch (e) {
            toast({
                title: 'Oops...',
                description: 'Something went wrong, let us know so we can work on it',
                status: 'error',
                duration: 9000,
                isClosable: true
            });
            console.log(e, ' unable to update attendee info');
        }
    };
    const cancelConfirmation = async () => {
        try {
            if (!primaryEmail) {
                toast({
                    title: 'No email present',
                    description: 'Seems like there is no email to cancel confirmation',
                    status: 'warning',
                    duration: 9000,
                    isClosable: true
                });
                return;
            }
            // const oldAttendee = await getMeetingAssistAttendee(attendeeId)
            if (!meetingAttendee?.id) {
                toast({
                    title: 'No registration present',
                    description: 'Seems like there is no registration to cancel confirmation',
                    status: 'warning',
                    duration: 9000,
                    isClosable: true
                });
                return;
            }
            // await deleteMeetingAssistAttendee(meetingAttendee?.id)
            await axios_1.default.post('/api/external-attendee', { method: 'deleteMeetingAssistAttendee',
                variables: { id: meetingAttendee?.id }
            });
            toast({
                title: 'Confirmation cancelled',
                description: 'Your confirmation is cancelled succesfully',
                status: 'success',
                duration: 9000,
                isClosable: true
            });
            // new attendance count
            const newAttendanceCount = (meetingAssist?.attendeeCount || 0) - 1 < 0 ? 0 : meetingAssist?.attendeeCount - 1;
            // await updateMeetingAssistAttendanceCount(meetingId, newAttendanceCount)
            await axios_1.default.post('api/external-attendee', {
                method: 'updateMeetingAssistAttendanceCount',
                variables: { id: meetingId, attendeeCount: newAttendanceCount, attendeeRespondedCount: meetingAssist?.attendeeRespondedCount },
            });
            if (meetingAssist?.cancelIfAnyRefuse) {
                // await cancelMeetingAssist(meetingId)
                await axios_1.default.post('api/external-attendee', {
                    method: 'cancelMeetingAssist',
                    variables: { id: meetingId },
                });
            }
            // update invite response
            await axios_1.default.post('/api/external-attendee', {
                method: 'updateMeetingAssistInviteResponse',
                variables: { id: attendeeId, response: 'CANCELLED' },
            });
        }
        catch (e) {
            toast({
                title: 'Oops...',
                description: 'Something went wrong, let us know so we can work on it',
                status: 'error',
                duration: 9000,
                isClosable: true
            });
            console.log(e, ' unable to cancel confirmation');
        }
        onClose();
    };
    const handleChangeContactPhone = (e) => setContactPhone(e.target.value);
    const handleChangeContactEmail = (e) => setContactEmail(e.target.value);
    const handleChangeName = (e) => setName(e.target.value);
    const handleChangeEmail = (e) => setPrimaryEmail(e?.target?.value);
    if (!verifiedUser) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col justify-between items-center h-full w-full", children: [(0, jsx_runtime_1.jsxs)("div", { className: " sm:text-left lg:my-12 sm:my-8", children: [(0, jsx_runtime_1.jsx)("h1", { className: "text-xl font-bold text-gray-900 dark:text-gray-200 sm:text-2xl", children: "Let's confirm you're an Atomic user" }), (0, jsx_runtime_1.jsx)("p", { className: "mt-1.5 text-sm text-gray-500", children: "Submit a phone number or email you registerd with Atomic to confirm! 🎉" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "mt-1", children: [(0, jsx_runtime_1.jsx)("label", { htmlFor: "ContactPhone", className: "block text-xs font-medium text-gray-700 dark:text-gray-300", children: "Phone Number" }), (0, jsx_runtime_1.jsx)("input", { type: "tel", pattern: "[0-9]{3}-[0-9]{3}-[0-9]{4}", id: "ContactPhone", placeholder: "123-456-7890", className: "peer invalid:border-pink-500 invalid:text-pink-600  mt-1 w-full rounded-md border-gray-200 shadow-sm sm:text-sm", value: contactPhone, onChange: handleChangeContactPhone }), (0, jsx_runtime_1.jsx)("p", { className: "invisible peer-invalid:visible text-pink-700 font-light", children: "Please follow the recommended format" }), (0, jsx_runtime_1.jsx)("p", { className: "mt-1.5 text-sm text-gray-500", children: "Format: 123-456-7890" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "mt-6", children: [(0, jsx_runtime_1.jsx)("label", { htmlFor: "ContactEmail", className: "block text-xs font-medium text-gray-700 dark:text-gray-300", children: "Email" }), (0, jsx_runtime_1.jsx)("input", { type: "email", id: "ContactEmail", placeholder: "john@email.com", className: "peer invalid:border-pink-500 invalid:text-pink-600  mt-1 w-full rounded-md border-gray-200 shadow-sm sm:text-sm", value: contactEmail, onChange: handleChangeContactEmail }), (0, jsx_runtime_1.jsx)("p", { className: "invisible peer-invalid:visible text-pink-700 font-light dark:text-gray-300", children: "Please enter a valid email address format" })] }), (0, jsx_runtime_1.jsx)("div", { className: "flex justify-center items-center mb-3", children: (0, jsx_runtime_1.jsx)("button", { className: 'btn btn-primary', onClick: verifyInternalAttendee, children: 'Verify Atomic User' }) })] }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col justify-center items-center h-full w-full", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col justify-around items-center h-full w-full", children: [(0, jsx_runtime_1.jsxs)("div", { className: "sm:text-left lg:my-12 sm:my-8 lg:h-1/6 lg:w-1/2 lg:mx-3 mx-4", children: [(0, jsx_runtime_1.jsx)("h1", { className: "text-xl font-bold text-gray-900 dark:text-gray-200 sm:text-2xl", children: "Let's confirm your attendance" }), (0, jsx_runtime_1.jsx)("p", { className: "mt-1.5 text-sm text-gray-500", children: "Submit your name and contact information to confirm your attendance! 🎉" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col justify-around items-center h-5/6 lg:w-1/2", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { htmlFor: "Name", className: "block text-xs font-medium text-gray-700 dark:text-gray-300", children: "Name" }), (0, jsx_runtime_1.jsx)("input", { type: "text", id: "Name", placeholder: "john", className: "text-gray-900 peer invalid:border-pink-500 invalid:text-pink-600  mt-1 w-full rounded-md border-gray-200 shadow-sm sm:text-sm", value: name, required: true, onChange: handleChangeName }), (0, jsx_runtime_1.jsx)("p", { className: "invisible peer-invalid:visible text-pink-700 font-light", children: "Please enter your name for attendence confirmation" })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { htmlFor: "UserEmail", className: "block text-xs font-medium text-gray-700 dark:text-gray-300", children: "Email" }), (0, jsx_runtime_1.jsx)("input", { type: "email", id: "UserEmail", placeholder: "john@rhcp.com", className: "text-gray-900 peer invalid:border-pink-500 invalid:text-pink-600  mt-1 w-full rounded-md border-gray-200 shadow-sm sm:text-sm", value: primaryEmail, onChange: handleChangeEmail, required: true }), (0, jsx_runtime_1.jsx)("p", { className: "invisible peer-invalid:visible text-pink-700 font-light", children: "Please enter a valid email address" })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "m-auto my-2 w-1/2 lg:flex lg:justify-center lg:items-center lg:space-x-4 lg:w-full", children: [(0, jsx_runtime_1.jsx)("button", { className: 'btn btn-ghost', onClick: onOpen, children: 'Cancel Confirmation' }), (0, jsx_runtime_1.jsx)("button", { className: 'btn btn-primary', onClick: updateAttendeeInfo, children: 'Confirm Attendance' })] })] })] }), (0, jsx_runtime_1.jsx)(react_2.AlertDialog, { isOpen: isOpen, leastDestructiveRef: cancelRef, onClose: onClose, children: (0, jsx_runtime_1.jsx)(react_2.AlertDialogOverlay, { children: (0, jsx_runtime_1.jsxs)(react_2.AlertDialogContent, { children: [(0, jsx_runtime_1.jsx)(react_2.AlertDialogHeader, { fontSize: 'lg', fontWeight: 'bold', children: "Cancel Confirmation" }), (0, jsx_runtime_1.jsx)(react_2.AlertDialogBody, { children: "Are you sure? Your confirmation will be cancelled" }), (0, jsx_runtime_1.jsxs)(react_2.AlertDialogFooter, { children: [(0, jsx_runtime_1.jsx)("button", { className: 'btn btn-ghost', ref: cancelRef, onClick: onClose, children: "Cancel" }), (0, jsx_runtime_1.jsx)("button", { className: 'btn ml-3', onClick: cancelConfirmation, children: "Delete" })] })] }) }) })] }));
};
exports.default = MeetingAssistInternalAttendee;
//# sourceMappingURL=data:application/json;base64,