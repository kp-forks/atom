"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const axios_1 = __importDefault(require("axios"));
const date_fns_1 = require("date-fns");
const dayjs_1 = __importDefault(require("dayjs"));
// import isoWeek from 'dayjs/plugin/isoWeek'
const duration_1 = __importDefault(require("dayjs/plugin/duration"));
const isBetween_1 = __importDefault(require("dayjs/plugin/isBetween"));
const timezone_1 = __importDefault(require("dayjs/plugin/timezone"));
const utc_1 = __importDefault(require("dayjs/plugin/utc"));
const customParseFormat_1 = __importDefault(require("dayjs/plugin/customParseFormat"));
const react_2 = require("@chakra-ui/react");
const react_datepicker_1 = __importDefault(require("react-datepicker"));
require("react-datepicker/dist/react-datepicker.css");
// dayjs.extend(isoWeek)
dayjs_1.default.extend(duration_1.default);
dayjs_1.default.extend(isBetween_1.default);
dayjs_1.default.extend(timezone_1.default);
dayjs_1.default.extend(utc_1.default);
dayjs_1.default.extend(customParseFormat_1.default);
const dayOfWeekIntConstant = -1;
const ModalTimePreferences = (props) => {
    // const [customDate, setCustomDate] = useState<Date>(props?.minDate)
    // const [minTime, setMinTime] = useState<Date>()
    // const [maxTime, setMaxTime] = useState<Date>()
    const [availableTimes, setAvailableTimes] = (0, react_1.useState)();
    const [availableStartTime, setAvailableStartTime] = (0, react_1.useState)(new Date());
    const [availableEndTime, setAvailableEndTime] = (0, react_1.useState)((0, dayjs_1.default)().add(5, 'h').toDate());
    const [startTime, setStartTime] = (0, react_1.useState)();
    const [endTime, setEndTime] = (0, react_1.useState)();
    const [dayOfWeekInt, setDayOfWeekInt] = (0, react_1.useState)(-2);
    const [dayOfWeekOptions, setDayOfWeekOptions] = (0, react_1.useState)();
    const toast = (0, react_2.useToast)();
    const minDate = props?.minDate;
    const maxDate = props?.maxDate;
    const hostPreferences = props?.hostPreferences;
    const hostTimezone = props?.meetingAssist?.timezone;
    const meetingAssist = props?.meetingAssist;
    const slotDuration = props?.slotDuration;
    const onSubmit = props?.onSubmit;
    const onCancel = props?.onCancel;
    // generate and set available times for time window
    (0, react_1.useEffect)(() => {
        (async () => {
            try {
                const diffDays = (0, dayjs_1.default)(maxDate).diff((0, dayjs_1.default)(minDate), 'd');
                const startDatesForEachDay = [];
                const newDayOfWeekOptions = [];
                const newAvailableTimes = [];
                for (let i = 0; i <= diffDays; i++) {
                    startDatesForEachDay.push((0, dayjs_1.default)((0, dayjs_1.default)(minDate).format().slice(0, 19)).tz(hostTimezone, true).add(i, 'day').format());
                }
                for (let i = 0; i < startDatesForEachDay.length; i++) {
                    if (i === 0) {
                        const availableTime = (await axios_1.default.post('api/modal-time-preferences', {
                            method: 'getCustomAvailableTimes',
                            variables: {
                                slotDuration,
                                hostStartDate: startDatesForEachDay?.[i],
                                hostPreferences,
                                hostTimezone,
                                userTimezone: dayjs_1.default.tz.guess(),
                                isFirstDay: true,
                                isLastDay: false,
                            },
                        }))?.data;
                        //  0123456789
                        //  2020-04-02T08:02:17-05:00
                        if ((availableTime)?.startTime) {
                            newAvailableTimes.push(availableTime);
                        }
                        continue;
                    }
                    if (i === (startDatesForEachDay.length - 1)) {
                        // const availableTime = getCustomAvailableTimes(
                        //     slotDuration,
                        //     startDatesForEachDay?.[i],
                        //     hostPreferences,
                        //     hostTimezone as string,
                        //     dayjs.tz.guess(),
                        //     false,
                        //     true,
                        // )
                        const availableTime = (await axios_1.default.post('api/modal-time-preferences', {
                            method: 'getCustomAvailableTimes',
                            variables: {
                                slotDuration,
                                hostStartDate: startDatesForEachDay?.[i],
                                hostPreferences,
                                hostTimezone,
                                userTimezone: dayjs_1.default.tz.guess(),
                                isFirstDay: false,
                                isLastDay: true,
                            },
                        }))?.data;
                        if (availableTime?.startTime) {
                            newAvailableTimes.push(availableTime);
                        }
                        continue;
                    }
                    // const availableTime = getCustomAvailableTimes(
                    //     slotDuration,
                    //     startDatesForEachDay?.[i],
                    //     hostPreferences,
                    //     hostTimezone as string,
                    //     dayjs.tz.guess(),
                    // )
                    const availableTime = (await axios_1.default.post('api/modal-time-preferences', {
                        method: 'getCustomAvailableTimes',
                        variables: {
                            slotDuration,
                            hostStartDate: startDatesForEachDay?.[i],
                            hostPreferences,
                            hostTimezone,
                            userTimezone: dayjs_1.default.tz.guess(),
                            isFirstDay: false,
                            isLastDay: false,
                        },
                    }))?.data;
                    if (availableTime?.startTime) {
                        newAvailableTimes.push(availableTime);
                    }
                }
                if (newAvailableTimes?.[0]?.startTime) {
                    const oldStartTime = (0, date_fns_1.setISODay)((0, dayjs_1.default)()
                        .hour(parseInt(newAvailableTimes?.[0]?.startTime?.slice(0, 2), 10))
                        .minute(parseInt(newAvailableTimes?.[0]?.startTime?.slice(3), 10))
                        .toDate(), newAvailableTimes?.[0]?.dayOfWeekInt ?? 1);
                    setAvailableStartTime(oldStartTime);
                    const oldEndTime = (0, date_fns_1.setISODay)((0, dayjs_1.default)()
                        .hour(parseInt(newAvailableTimes?.[0]?.endTime?.slice(0, 2), 10))
                        .minute(parseInt(newAvailableTimes?.[0]?.endTime?.slice(3), 10))
                        .toDate(), newAvailableTimes?.[0]?.dayOfWeekInt ?? 1);
                    setAvailableEndTime(oldEndTime);
                    setAvailableTimes(newAvailableTimes);
                }
                // create dayOfWeekOptions
                for (let i = 0; i < startDatesForEachDay.length; i++) {
                    const option = (0, date_fns_1.getISODay)((0, dayjs_1.default)((0, dayjs_1.default)(minDate).format().slice(0, 19)).tz(hostTimezone, true).add(i, 'day').toDate());
                    const value = (option !== -1 ? (0, dayjs_1.default)((0, date_fns_1.setISODay)((0, dayjs_1.default)().toDate(), option)).format('dddd') : 'Any day of the week');
                    newDayOfWeekOptions.push([option, value]);
                }
                newDayOfWeekOptions.push([-1, 'Any day of the week']);
                setDayOfWeekOptions(newDayOfWeekOptions);
            }
            catch (e) {
                console.log(e, ' unable to check modal time preferences');
            }
        })();
    }, [minDate, maxDate, hostTimezone, slotDuration, hostPreferences]);
    // change available time based on dayOfWeekInt
    (0, react_1.useEffect)(() => {
        (() => {
            const availableTime = availableTimes?.find(a => (a?.dayOfWeekInt === dayOfWeekInt));
            if (availableTime) {
                const oldStartTime = (0, date_fns_1.setISODay)((0, dayjs_1.default)()
                    .hour(parseInt(availableTime?.startTime?.slice(0, 2), 10))
                    .minute(parseInt(availableTime?.startTime?.slice(3), 10))
                    .toDate(), availableTime?.dayOfWeekInt ?? 1);
                setAvailableStartTime(oldStartTime);
                const oldEndTime = (0, date_fns_1.setISODay)((0, dayjs_1.default)()
                    .hour(parseInt(availableTime?.endTime?.slice(0, 2), 10))
                    .minute(parseInt(availableTime?.endTime?.slice(3), 10))
                    .toDate(), availableTime?.dayOfWeekInt ?? 1);
                setAvailableEndTime(oldEndTime);
            }
        })();
    }, [availableTimes, dayOfWeekInt]);
    const onChangeOption = (e) => setDayOfWeekInt(e.target.value || -1);
    const onSave = () => {
        onSubmit({
            dayOfWeekInt: typeof dayOfWeekInt === 'string' ? parseInt(dayOfWeekInt, 10) : dayOfWeekInt,
            startTime: (0, dayjs_1.default)(startTime || new Date()).format('HH:mm'),
            endTime: (0, dayjs_1.default)(endTime || (0, dayjs_1.default)().add(8, 'h')).format('HH:mm'),
        });
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col justify-center items-center h-full w-full", children: [(0, jsx_runtime_1.jsxs)("div", { className: "text-center sm:text-left", children: [(0, jsx_runtime_1.jsx)("h2", { className: "lg:text-lg font-bold text-gray-900 dark:text-gray-200 sm:text-xl", children: "Select a Custom Time" }), (0, jsx_runtime_1.jsx)("p", { className: "mt-1.5 text-sm text-gray-500", children: "You can select a time as broad as possible that works for you" })] }), (0, jsx_runtime_1.jsx)("div", { className: "text-left sm:text-xl lg:text-lg lg:my-2 sm:my-3", children: (0, jsx_runtime_1.jsxs)("label", { children: [(0, jsx_runtime_1.jsx)("span", { className: "label-text dark:text-gray-500", children: 'Day Of Week: optional' }), (0, jsx_runtime_1.jsxs)("select", { className: "select select-bordered w-full max-w-xs text-gray-900 bg-gray-200 dark:text-gray-200 dark:bg-gray-900", placeholder: 'Select day of week', onChange: onChangeOption, value: dayOfWeekInt, children: [(0, jsx_runtime_1.jsx)("option", { disabled: true, selected: true, value: -2, children: "Select day of week" }, -2), dayOfWeekOptions?.map(values => ((0, jsx_runtime_1.jsx)("option", { value: values[0], children: values[1] }, values[0])))] })] }) }), (0, jsx_runtime_1.jsx)("div", { className: "text-left sm:text-xl lg:text-lg lg:my-2 sm:my-3", children: (0, jsx_runtime_1.jsxs)("label", { children: [(0, jsx_runtime_1.jsx)("span", { className: "label-text dark:text-gray-500 lg:my-1 sm:my-2", children: 'Start Time:' }), (0, jsx_runtime_1.jsx)(react_datepicker_1.default, { selected: startTime, onChange: (date) => setStartTime(date), showTimeSelect: true, showTimeSelectOnly: true, timeIntervals: slotDuration, timeCaption: "Time", dateFormat: "h:mm aa", minTime: availableStartTime, maxTime: availableEndTime, className: "text-gray-900 bg-gray-200 dark:text-gray-200 dark:bg-gray-900 rounded-lg text-center" })] }) }), (0, jsx_runtime_1.jsx)("div", { className: "text-left sm:text-xl lg:text-lg lg:my-2 sm:my-3", children: (0, jsx_runtime_1.jsxs)("label", { children: [(0, jsx_runtime_1.jsx)("span", { className: "label-text dark:text-gray-500 lg:my-1 sm:my-2", children: 'End Time:' }), (0, jsx_runtime_1.jsx)(react_datepicker_1.default, { selected: endTime, onChange: (date) => setEndTime(date), showTimeSelect: true, showTimeSelectOnly: true, timeIntervals: slotDuration, timeCaption: "Time", dateFormat: "h:mm aa", minTime: availableStartTime, maxTime: availableEndTime, className: "text-gray-900 bg-gray-200 dark:text-gray-200 dark:bg-gray-900 rounded-lg text-center" })] }) }), (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-center items-center space-x-4 w-1/2 lg:m-3 m-4", children: [(0, jsx_runtime_1.jsx)("button", { className: 'btn btn-secondary', onClick: onSave, children: 'Submit' }), (0, jsx_runtime_1.jsx)("button", { className: 'btn btn-ghost', onClick: onCancel, children: 'Cancel' })] })] }));
};
exports.default = ModalTimePreferences;
//# sourceMappingURL=data:application/json;base64,