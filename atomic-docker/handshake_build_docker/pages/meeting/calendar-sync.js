"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const image_1 = __importDefault(require("next/image"));
const dayjs_1 = __importDefault(require("dayjs"));
const isoWeek_1 = __importDefault(require("dayjs/plugin/isoWeek"));
const duration_1 = __importDefault(require("dayjs/plugin/duration"));
const isBetween_1 = __importDefault(require("dayjs/plugin/isBetween"));
const timezone_1 = __importDefault(require("dayjs/plugin/timezone"));
const utc_1 = __importDefault(require("dayjs/plugin/utc"));
const constants_1 = require("@lib/constants");
const react_1 = require("react");
dayjs_1.default.extend(isoWeek_1.default);
dayjs_1.default.extend(duration_1.default);
dayjs_1.default.extend(isBetween_1.default);
dayjs_1.default.extend(timezone_1.default);
dayjs_1.default.extend(utc_1.default);
const CalendarSync = (props) => {
    const attendeeId = props?.attendeeId;
    const meetingId = props?.meetingId;
    const [url, setUrl] = (0, react_1.useState)('');
    (0, react_1.useEffect)(() => {
        const makeLink = () => {
            const newUrl = new URL(constants_1.googleCalendarSyncStartUrl);
            newUrl.searchParams.set('meetingId', meetingId);
            newUrl.searchParams.set('attendeeId', attendeeId);
            setUrl(newUrl.href);
        };
        makeLink();
    }, [attendeeId, meetingId]);
    let googleSignInButton = constants_1.googleSignInNormalButton;
    if (typeof window !== "undefined") {
        googleSignInButton = window.matchMedia('(prefers-color-scheme: dark)').matches ? constants_1.googleSignInDarkButton : constants_1.googleSignInNormalButton;
    }
    const routeToGoogleCalendarSignIn = (e) => {
        e?.preventDefault();
        const newUrl = new URL(constants_1.googleCalendarSyncStartUrl);
        newUrl.searchParams.set('meetingId', meetingId);
        newUrl.searchParams.set('attendeeId', attendeeId);
        window.location.href = newUrl.href;
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col justify-center items-center h-full w-full", children: [(0, jsx_runtime_1.jsxs)("div", { className: " lg:my-12 sm:my-8 lg:h-1/6 sm:w-1/2", children: [(0, jsx_runtime_1.jsx)("h1", { className: "text-xl font-bold text-gray-900 dark:text-gray-200 sm:text-2xl", children: "Sign in to your Google Calendar" }), (0, jsx_runtime_1.jsx)("p", { className: "mt-1.5 text-sm text-gray-500", children: "Sign in to your Google calendar to sync events and avoid conflict ðŸ˜Š " })] }), (0, jsx_runtime_1.jsx)("div", { className: "flex flex-start items-center lg:h-5/6", children: (0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsx)("a", { href: url, onClick: routeToGoogleCalendarSignIn, children: (0, jsx_runtime_1.jsx)(image_1.default, { src: googleSignInButton, alt: "Google Sign In", width: 382, height: 92, className: "rounded" }) }) }) })] }));
};
exports.default = CalendarSync;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItc3luYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNhbGVuZGFyLXN5bmMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHVEQUE4QjtBQUU5QixrREFBeUI7QUFDekIsbUVBQTBDO0FBQzFDLHFFQUE0QztBQUM1Qyx1RUFBOEM7QUFDOUMscUVBQTRDO0FBQzVDLDJEQUFrQztBQUVsQyw4Q0FBNkc7QUFDN0csaUNBQTJDO0FBRTNDLGVBQUssQ0FBQyxNQUFNLENBQUMsaUJBQU8sQ0FBQyxDQUFBO0FBQ3JCLGVBQUssQ0FBQyxNQUFNLENBQUMsa0JBQVEsQ0FBQyxDQUFBO0FBQ3RCLGVBQUssQ0FBQyxNQUFNLENBQUMsbUJBQVMsQ0FBQyxDQUFBO0FBQ3ZCLGVBQUssQ0FBQyxNQUFNLENBQUMsa0JBQVEsQ0FBQyxDQUFBO0FBQ3RCLGVBQUssQ0FBQyxNQUFNLENBQUMsYUFBRyxDQUFDLENBQUE7QUFPakIsTUFBTSxZQUFZLEdBQW9CLENBQUMsS0FBWSxFQUFFLEVBQUU7SUFDbkQsTUFBTSxVQUFVLEdBQUcsS0FBSyxFQUFFLFVBQVUsQ0FBQTtJQUNwQyxNQUFNLFNBQVMsR0FBRyxLQUFLLEVBQUUsU0FBUyxDQUFBO0lBQ2xDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLEdBQUcsSUFBQSxnQkFBUSxFQUFDLEVBQUUsQ0FBQyxDQUFBO0lBRWxDLElBQUEsaUJBQVMsRUFBQyxHQUFHLEVBQUU7UUFDWCxNQUFNLFFBQVEsR0FBRyxHQUFHLEVBQUU7WUFDbEIsTUFBTSxNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsc0NBQTBCLENBQUMsQ0FBQTtZQUNsRCxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUE7WUFDL0MsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFBO1lBQ2pELE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDdkIsQ0FBQyxDQUFBO1FBQ0QsUUFBUSxFQUFFLENBQUE7SUFDZCxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQTtJQUUzQixJQUFJLGtCQUFrQixHQUFHLG9DQUF3QixDQUFBO0lBRWpELElBQUksT0FBTyxNQUFNLEtBQUssV0FBVyxFQUFFLENBQUM7UUFDaEMsa0JBQWtCLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsa0NBQXNCLENBQUMsQ0FBQyxDQUFDLG9DQUF3QixDQUFBO0lBQ3RJLENBQUM7SUFFRCxNQUFNLDJCQUEyQixHQUFHLENBQUMsQ0FBaUMsRUFBRSxFQUFFO1FBQ3RFLENBQUMsRUFBRSxjQUFjLEVBQUUsQ0FBQTtRQUNuQixNQUFNLE1BQU0sR0FBRyxJQUFJLEdBQUcsQ0FBQyxzQ0FBMEIsQ0FBQyxDQUFBO1FBQzlDLE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQTtRQUMvQyxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUE7UUFDckQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQTtJQUV0QyxDQUFDLENBQUE7SUFHRCxPQUFPLENBQ0gsaUNBQUssU0FBUyxFQUFDLHlEQUF5RCxhQUNwRSxpQ0FBSyxTQUFTLEVBQUMscUNBQXFDLGFBQ2hELCtCQUFJLFNBQVMsRUFBQyxnRUFBZ0UsWUFDekUsaUNBQWlDLEdBQ2pDLEVBRUwsOEJBQUcsU0FBUyxFQUFDLDhCQUE4QixZQUN0Qyx1RUFBdUUsR0FDeEUsSUFDRixFQUNOLGdDQUFLLFNBQVMsRUFBQyx1Q0FBdUMsWUFDbEQsMENBQ0ksOEJBQUcsSUFBSSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsMkJBQTJCLFlBQzlDLHVCQUFDLGVBQUssSUFDRixHQUFHLEVBQUUsa0JBQWtCLEVBQ3ZCLEdBQUcsRUFBQyxnQkFBZ0IsRUFDcEIsS0FBSyxFQUFFLEdBQUcsRUFDVixNQUFNLEVBQUUsRUFBRSxFQUNWLFNBQVMsRUFBQyxTQUFTLEdBQ3JCLEdBQ0YsR0FDRixHQUNKLElBQ0osQ0FDVCxDQUFBO0FBQ0wsQ0FBQyxDQUFBO0FBRUQsa0JBQWUsWUFBWSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEltYWdlIGZyb20gJ25leHQvaW1hZ2UnXG5pbXBvcnQgdHlwZSB7IE5leHRQYWdlIH0gZnJvbSAnbmV4dCdcbmltcG9ydCBkYXlqcyBmcm9tICdkYXlqcydcbmltcG9ydCBpc29XZWVrIGZyb20gJ2RheWpzL3BsdWdpbi9pc29XZWVrJ1xuaW1wb3J0IGR1cmF0aW9uIGZyb20gJ2RheWpzL3BsdWdpbi9kdXJhdGlvbidcbmltcG9ydCBpc0JldHdlZW4gZnJvbSAnZGF5anMvcGx1Z2luL2lzQmV0d2VlbidcbmltcG9ydCB0aW1lem9uZSBmcm9tICdkYXlqcy9wbHVnaW4vdGltZXpvbmUnXG5pbXBvcnQgdXRjIGZyb20gJ2RheWpzL3BsdWdpbi91dGMnXG5cbmltcG9ydCB7IGdvb2dsZUNhbGVuZGFyU3luY1N0YXJ0VXJsLCBnb29nbGVTaWduSW5EYXJrQnV0dG9uLCBnb29nbGVTaWduSW5Ob3JtYWxCdXR0b24gfSBmcm9tIFwiQGxpYi9jb25zdGFudHNcIlxuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuXG5kYXlqcy5leHRlbmQoaXNvV2VlaylcbmRheWpzLmV4dGVuZChkdXJhdGlvbilcbmRheWpzLmV4dGVuZChpc0JldHdlZW4pXG5kYXlqcy5leHRlbmQodGltZXpvbmUpXG5kYXlqcy5leHRlbmQodXRjKVxuXG50eXBlIFByb3BzID0ge1xuICAgIGF0dGVuZGVlSWQ6IHN0cmluZyxcbiAgICBtZWV0aW5nSWQ6IHN0cmluZyxcbn1cblxuY29uc3QgQ2FsZW5kYXJTeW5jOiBOZXh0UGFnZTxQcm9wcz4gPSAocHJvcHM6IFByb3BzKSA9PiB7XG4gICAgY29uc3QgYXR0ZW5kZWVJZCA9IHByb3BzPy5hdHRlbmRlZUlkXG4gICAgY29uc3QgbWVldGluZ0lkID0gcHJvcHM/Lm1lZXRpbmdJZFxuICAgIGNvbnN0IFt1cmwsIHNldFVybF0gPSB1c2VTdGF0ZSgnJylcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IG1ha2VMaW5rID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV3VXJsID0gbmV3IFVSTChnb29nbGVDYWxlbmRhclN5bmNTdGFydFVybClcbiAgICAgICAgICAgIG5ld1VybC5zZWFyY2hQYXJhbXMuc2V0KCdtZWV0aW5nSWQnLCBtZWV0aW5nSWQpXG4gICAgICAgICAgICBuZXdVcmwuc2VhcmNoUGFyYW1zLnNldCgnYXR0ZW5kZWVJZCcsIGF0dGVuZGVlSWQpXG4gICAgICAgICAgICBzZXRVcmwobmV3VXJsLmhyZWYpXG4gICAgICAgIH1cbiAgICAgICAgbWFrZUxpbmsoKVxuICAgIH0sIFthdHRlbmRlZUlkLCBtZWV0aW5nSWRdKVxuXG4gICAgbGV0IGdvb2dsZVNpZ25JbkJ1dHRvbiA9IGdvb2dsZVNpZ25Jbk5vcm1hbEJ1dHRvblxuICAgIFxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGdvb2dsZVNpZ25JbkJ1dHRvbiA9IHdpbmRvdy5tYXRjaE1lZGlhKCcocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspJykubWF0Y2hlcyA/IGdvb2dsZVNpZ25JbkRhcmtCdXR0b24gOiBnb29nbGVTaWduSW5Ob3JtYWxCdXR0b25cbiAgICB9XG4gICAgXG4gICAgY29uc3Qgcm91dGVUb0dvb2dsZUNhbGVuZGFyU2lnbkluID0gKGU6IHsgcHJldmVudERlZmF1bHQ6ICgpID0+IHZvaWQgfSkgPT4ge1xuICAgICAgICBlPy5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIGNvbnN0IG5ld1VybCA9IG5ldyBVUkwoZ29vZ2xlQ2FsZW5kYXJTeW5jU3RhcnRVcmwpXG4gICAgICAgICAgICBuZXdVcmwuc2VhcmNoUGFyYW1zLnNldCgnbWVldGluZ0lkJywgbWVldGluZ0lkKVxuICAgICAgICAgICAgbmV3VXJsLnNlYXJjaFBhcmFtcy5zZXQoJ2F0dGVuZGVlSWQnLCBhdHRlbmRlZUlkKVxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IG5ld1VybC5ocmVmXG4gICAgICAgIFxuICAgIH1cblxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIGp1c3RpZnktY2VudGVyIGl0ZW1zLWNlbnRlciBoLWZ1bGwgdy1mdWxsXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIiBsZzpteS0xMiBzbTpteS04IGxnOmgtMS82IHNtOnctMS8yXCI+XG4gICAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cInRleHQteGwgZm9udC1ib2xkIHRleHQtZ3JheS05MDAgZGFyazp0ZXh0LWdyYXktMjAwIHNtOnRleHQtMnhsXCI+XG4gICAgICAgICAgICAgICAgICAgIHtcIlNpZ24gaW4gdG8geW91ciBHb29nbGUgQ2FsZW5kYXJcIn1cbiAgICAgICAgICAgICAgICA8L2gxPlxuXG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwibXQtMS41IHRleHQtc20gdGV4dC1ncmF5LTUwMFwiPlxuICAgICAgICAgICAgICAgICAgICB7XCJTaWduIGluIHRvIHlvdXIgR29vZ2xlIGNhbGVuZGFyIHRvIHN5bmMgZXZlbnRzIGFuZCBhdm9pZCBjb25mbGljdCDwn5iKIFwifVxuICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtc3RhcnQgaXRlbXMtY2VudGVyIGxnOmgtNS82XCI+XG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj17dXJsfSBvbkNsaWNrPXtyb3V0ZVRvR29vZ2xlQ2FsZW5kYXJTaWduSW59PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPXtnb29nbGVTaWduSW5CdXR0b259XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PVwiR29vZ2xlIFNpZ24gSW5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPXszODJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PXs5Mn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJyb3VuZGVkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IENhbGVuZGFyU3luY1xuIl19