"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const tauri_1 = require("@tauri-apps/api/tauri");
require("./App.css");
function Chat() {
    const [messages, setMessages] = (0, react_1.useState)([]);
    const [input, setInput] = (0, react_1.useState)("");
    const [isLoading, setIsLoading] = (0, react_1.useState)(false);
    const handleSend = async () => {
        if (input.trim() === "")
            return;
        const newMessages = [...messages, { text: input, sender: "user" }];
        setMessages(newMessages);
        setInput("");
        setIsLoading(true);
        try {
            const response = await (0, tauri_1.invoke)("send_message_to_agent", { message: input });
            setMessages([...newMessages, { text: response, sender: "agent" }]);
        }
        catch (err) {
            console.error("Error invoking send_message_to_agent:", err);
            setMessages([...newMessages, { text: "Error communicating with the agent.", sender: "agent" }]);
        }
        finally {
            setIsLoading(false);
        }
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: "chat-container", children: [(0, jsx_runtime_1.jsxs)("div", { className: "messages", children: [messages.map((message, index) => ((0, jsx_runtime_1.jsx)("div", { className: `message ${message.sender}`, children: message.text }, index))), isLoading && (0, jsx_runtime_1.jsx)("div", { className: "message agent", children: "..." })] }), (0, jsx_runtime_1.jsxs)("div", { className: "input-container", children: [(0, jsx_runtime_1.jsx)("input", { type: "text", value: input, onChange: (e) => setInput(e.target.value), onKeyPress: (e) => e.key === "Enter" && handleSend(), placeholder: "Type your message..." }), (0, jsx_runtime_1.jsx)("button", { onClick: handleSend, disabled: isLoading, children: "Send" })] })] }));
}
exports.default = Chat;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hhdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNoYXQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlDQUFpQztBQUNqQyxpREFBK0M7QUFDL0MscUJBQW1CO0FBT25CLFNBQVMsSUFBSTtJQUNYLE1BQU0sQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLEdBQUcsSUFBQSxnQkFBUSxFQUFZLEVBQUUsQ0FBQyxDQUFDO0lBQ3hELE1BQU0sQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEdBQUcsSUFBQSxnQkFBUSxFQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDLEdBQUcsSUFBQSxnQkFBUSxFQUFDLEtBQUssQ0FBQyxDQUFDO0lBRWxELE1BQU0sVUFBVSxHQUFHLEtBQUssSUFBSSxFQUFFO1FBQzVCLElBQUksS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUU7WUFBRSxPQUFPO1FBRWhDLE1BQU0sV0FBVyxHQUFjLENBQUMsR0FBRyxRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQzlFLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN6QixRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDYixZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbkIsSUFBSSxDQUFDO1lBQ0gsTUFBTSxRQUFRLEdBQVcsTUFBTSxJQUFBLGNBQU0sRUFBQyx1QkFBdUIsRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBQ25GLFdBQVcsQ0FBQyxDQUFDLEdBQUcsV0FBVyxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3JFLENBQUM7UUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1lBQ2IsT0FBTyxDQUFDLEtBQUssQ0FBQyx1Q0FBdUMsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUM1RCxXQUFXLENBQUMsQ0FBQyxHQUFHLFdBQVcsRUFBRSxFQUFFLElBQUksRUFBRSxxQ0FBcUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2xHLENBQUM7Z0JBQVMsQ0FBQztZQUNULFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN0QixDQUFDO0lBQ0gsQ0FBQyxDQUFDO0lBRUYsT0FBTyxDQUNMLGlDQUFLLFNBQVMsRUFBQyxnQkFBZ0IsYUFDN0IsaUNBQUssU0FBUyxFQUFDLFVBQVUsYUFDdEIsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQ2hDLGdDQUFpQixTQUFTLEVBQUUsV0FBVyxPQUFPLENBQUMsTUFBTSxFQUFFLFlBQ3BELE9BQU8sQ0FBQyxJQUFJLElBREwsS0FBSyxDQUVULENBQ1AsQ0FBQyxFQUNELFNBQVMsSUFBSSxnQ0FBSyxTQUFTLEVBQUMsZUFBZSxvQkFBVSxJQUNsRCxFQUNOLGlDQUFLLFNBQVMsRUFBQyxpQkFBaUIsYUFDOUIsa0NBQ0UsSUFBSSxFQUFDLE1BQU0sRUFDWCxLQUFLLEVBQUUsS0FBSyxFQUNaLFFBQVEsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQ3pDLFVBQVUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxPQUFPLElBQUksVUFBVSxFQUFFLEVBQ3BELFdBQVcsRUFBQyxzQkFBc0IsR0FDbEMsRUFDRixtQ0FBUSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxTQUFTLHFCQUV2QyxJQUNMLElBQ0YsQ0FDUCxDQUFDO0FBQ0osQ0FBQztBQUVELGtCQUFlLElBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBpbnZva2UgfSBmcm9tIFwiQHRhdXJpLWFwcHMvYXBpL3RhdXJpXCI7XG5pbXBvcnQgXCIuL0FwcC5jc3NcIjtcblxuaW50ZXJmYWNlIE1lc3NhZ2Uge1xuICB0ZXh0OiBzdHJpbmc7XG4gIHNlbmRlcjogXCJ1c2VyXCIgfCBcImFnZW50XCI7XG59XG5cbmZ1bmN0aW9uIENoYXQoKSB7XG4gIGNvbnN0IFttZXNzYWdlcywgc2V0TWVzc2FnZXNdID0gdXNlU3RhdGU8TWVzc2FnZVtdPihbXSk7XG4gIGNvbnN0IFtpbnB1dCwgc2V0SW5wdXRdID0gdXNlU3RhdGUoXCJcIik7XG4gIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3QgaGFuZGxlU2VuZCA9IGFzeW5jICgpID0+IHtcbiAgICBpZiAoaW5wdXQudHJpbSgpID09PSBcIlwiKSByZXR1cm47XG5cbiAgICBjb25zdCBuZXdNZXNzYWdlczogTWVzc2FnZVtdID0gWy4uLm1lc3NhZ2VzLCB7IHRleHQ6IGlucHV0LCBzZW5kZXI6IFwidXNlclwiIH1dO1xuICAgIHNldE1lc3NhZ2VzKG5ld01lc3NhZ2VzKTtcbiAgICBzZXRJbnB1dChcIlwiKTtcbiAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2U6IHN0cmluZyA9IGF3YWl0IGludm9rZShcInNlbmRfbWVzc2FnZV90b19hZ2VudFwiLCB7IG1lc3NhZ2U6IGlucHV0IH0pO1xuICAgICAgc2V0TWVzc2FnZXMoWy4uLm5ld01lc3NhZ2VzLCB7IHRleHQ6IHJlc3BvbnNlLCBzZW5kZXI6IFwiYWdlbnRcIiB9XSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgaW52b2tpbmcgc2VuZF9tZXNzYWdlX3RvX2FnZW50OlwiLCBlcnIpO1xuICAgICAgc2V0TWVzc2FnZXMoWy4uLm5ld01lc3NhZ2VzLCB7IHRleHQ6IFwiRXJyb3IgY29tbXVuaWNhdGluZyB3aXRoIHRoZSBhZ2VudC5cIiwgc2VuZGVyOiBcImFnZW50XCIgfV0pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiY2hhdC1jb250YWluZXJcIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVzc2FnZXNcIj5cbiAgICAgICAge21lc3NhZ2VzLm1hcCgobWVzc2FnZSwgaW5kZXgpID0+IChcbiAgICAgICAgICA8ZGl2IGtleT17aW5kZXh9IGNsYXNzTmFtZT17YG1lc3NhZ2UgJHttZXNzYWdlLnNlbmRlcn1gfT5cbiAgICAgICAgICAgIHttZXNzYWdlLnRleHR9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICkpfVxuICAgICAgICB7aXNMb2FkaW5nICYmIDxkaXYgY2xhc3NOYW1lPVwibWVzc2FnZSBhZ2VudFwiPi4uLjwvZGl2Pn1cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1jb250YWluZXJcIj5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgIHZhbHVlPXtpbnB1dH1cbiAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldElucHV0KGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICBvbktleVByZXNzPXsoZSkgPT4gZS5rZXkgPT09IFwiRW50ZXJcIiAmJiBoYW5kbGVTZW5kKCl9XG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJUeXBlIHlvdXIgbWVzc2FnZS4uLlwiXG4gICAgICAgIC8+XG4gICAgICAgIDxidXR0b24gb25DbGljaz17aGFuZGxlU2VuZH0gZGlzYWJsZWQ9e2lzTG9hZGluZ30+XG4gICAgICAgICAgU2VuZFxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBDaGF0O1xuIl19