"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useFinanceAgent = useFinanceAgent;
exports.useFinanceSuggestions = useFinanceSuggestions;
exports.useFinanceEvents = useFinanceEvents;
const react_1 = require("react");
const tauri_1 = require("@tauri-apps/api/tauri");
const event_1 = require("@tauri-apps/api/event");
// Hook for Atom agent finance integration
function useFinanceAgent() {
    const [query, setQuery] = (0, react_1.useState)('');
    const [isLoading, setIsLoading] = (0, react_1.useState)(false);
    const [lastResponse, setLastResponse] = (0, react_1.useState)(null);
    const [listening, setListening] = (0, react_1.useState)(false);
    // Execute finance query through Atom agent
    const queryFinance = (0, react_1.useCallback)(async (question, context) => {
        if (!question.trim())
            return;
        setIsLoading(true);
        try {
            const response = await (0, tauri_1.invoke)('query_finance_agent', {
                question,
                context: context || {}
            });
            setLastResponse(response);
            return response;
        }
        catch (error) {
            console.error('Finance agent error:', error);
            setLastResponse({
                response: "Sorry, I couldn't process your financial query. Please try again.",
                data: null
            });
        }
        finally {
            setIsLoading(false);
        }
    }, []);
    // Voice command shortcuts
    const quickActions = {
        getNetWorth: async () => {
            return await queryFinance('What is my net worth?', { includeHistory: true });
        },
        getBudget: async () => {
            return await queryFinance('Show me my current budget summary');
        },
        getSpendingAnalysis: async (category) => {
            return await queryFinance(`Show my spending${category ? ` on ${category}` : ''} this month`);
        },
        getGoals: async () => {
            return await queryFinance('Show my financial goals and progress');
        },
        getInvestments: async () => {
            return await queryFinance('Show my investment portfolio');
        },
        createBudget: async (category, amount) => {
            return await queryFinance(`Create a ${category} budget of ${amount} dollars`);
        },
        createGoal: async (name, targetAmount, type, date) => {
            return await queryFinance(`Create a ${type || 'savings'} goal: ${name} for ${targetAmount}${date ? ` by ${date}` : ''}`);
        }
    };
    // Listen for finance-related voice commands
    (0, react_1.useEffect)(() => {
        if (!listening) {
            const unlisten = (0, event_1.listen)('finance-voice-command', (event) => {
                const { command, parameters } = event.payload;
                switch (command) {
                    case 'net_worth':
                        quickActions.getNetWorth();
                        break;
                    case 'budget':
                        quickActions.getBudget();
                        break;
                    case 'spending':
                        quickActions.getSpendingAnalysis(parameters?.category);
                        break;
                    case 'goals':
                        quickActions.getGoals();
                        break;
                    case 'investments':
                        quickActions.getInvestments();
                        break;
                    default:
                        if (parameters?.query) {
                            queryFinance(parameters.query);
                        }
                }
            });
            setListening(true);
            return () => {
                unlisten.then(unsubscribe => unsubscribe());
                setListening(false);
            };
        }
    }, [listening, quickActions, queryFinance]);
    // Data fetching utilities
    const fetchNetWorth = (0, react_1.useCallback)(async (userId) => {
        const result = await queryFinance(`net worth for ${userId}`, { userId });
        return result?.data?.netWorth || 0;
    }, [queryFinance]);
    const fetchBudgets = (0, react_1.useCallback)(async (userId) => {
        const result = await queryFinance(`budget for ${userId}`, { userId });
        return result?.data?.budgets || [];
    }, [queryFinance]);
    const fetchGoals = (0, react_1.useCallback)(async (userId) => {
        const result = await queryFinance(`goals for ${userId}`, { userId });
        return result?.data?.goals || [];
    }, [queryFinance]);
    const fetchInvestments = (0, react_1.useCallback)(async (userId) => {
        const result = await queryFinance(`investments for ${userId}`, { userId });
        return result?.data?.portfolio || [];
    }, [queryFinance]);
    // Intelligent recommendations based on patterns
    const getRecommendations = (0, react_1.useCallback)(async (userId) => {
        return await queryFinance('give me financial recommendations', { userId });
    }, [queryFinance]);
    return {
        queryFinance,
        quickActions,
        fetchNetWorth,
        fetchBudgets,
        fetchGoals,
        fetchInvestments,
        getRecommendations,
        isLoading,
        lastResponse,
        clearResponse: () => setLastResponse(null)
    };
}
// Hook for finance command suggestions
function useFinanceSuggestions() {
    const [suggestions, setSuggestions] = (0, react_1.useState)([]);
    const generateSuggestions = (0, react_1.useCallback)((input) => {
        const lowerInput = input.toLowerCase();
        const allSuggestions = [
            'What is my net worth?',
            'Show my budget for this month',
            'How much did I spend on dining?',
            'Create a dining budget of $500',
            'Show my investment portfolio',
            'Set up an emergency fund goal of $10000',
            'Analyze my spending this month',
            'Compare this month to last month',
            'Show my account balances',
            'Track my vacation savings goal',
            'What categories am I overspending in?',
            'Calculate my savings rate',
            'Show my retirement progress',
            'Help me optimize my budget',
            'Find large transactions this month'
        ];
        if (!lowerInput.trim()) {
            setSuggestions(allSuggestions.slice(0, 5));
            return;
        }
        const filtered = allSuggestions.filter(s => s.toLowerCase().includes(lowerInput) ||
            lowerInput.includes(s.toLowerCase().split(' ')[0]), n).slice(0, 5);
        setSuggestions(filtered);
    }, []);
    const getPopularCommands = (0, react_1.useCallback)(() => {
        return [
            'net worth', n, 'budget', n, 'spending', n, 'goals', n, 'investments', n, 'recommendations',
            n
        ];
        n;
    }, []);
    n;
    n;
    return { n, suggestions, n, generateSuggestions, n, getPopularCommands, n, allSuggestions: [n, 'What is my net worth?', n, 'Show my budget', n, 'Where did I spend money?', n, 'Create a savings goal', n, 'Portfolio overview', n], n };
    n;
}
// Hook for tracking finance-related events
function useFinanceEvents() {
    n;
    const [events, setEvents] = react_1.useState < Array < { n, type: string, n, message: string, n, timestamp: Date, n } >> ([]);
    const addEvent = (0, react_1.useCallback)((type, message) => {
        setEvents(prev => [...prev.slice(-9), { type, message, timestamp: new Date() }]);
        n;
    }, []);
    const clearEvents = (0, react_1.useCallback)(() => { n; setEvents([]); n; }, []);
    // Listen for finance-specific events from Tauri backend
    (0, react_1.useEffect)(() => {
        n;
        const setupListener = async () => { n; const unlisten = await (0, event_1.listen)('finance_event', (event) => { n; const { type, message } = event.payload; n; addEvent(type, message); n; }); n; n; return unlisten; n; };
        setupListener().then(unlisten => unlisten).catch(console.error);
        n;
    }, [addEvent]);
    return { n, events, n, addEvent, n, clearEvents, n, latestEvent: events[events.length - 1],
        n };
    n;
}
n;
//# sourceMappingURL=data:application/json;base64,