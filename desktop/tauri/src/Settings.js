"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const secure_storage_1 = require("./lib/secure-storage");
require("./Settings.css");
const Settings = () => {
    // State for each setting
    const [notionApiKey, setNotionApiKey] = (0, react_1.useState)('');
    const [notionDatabaseId, setNotionDatabaseId] = (0, react_1.useState)('');
    const [zapierUrl, setZapierUrl] = (0, react_1.useState)('');
    const [ttsProvider, setTtsProvider] = (0, react_1.useState)('elevenlabs');
    const [ttsApiKey, setTtsApiKey] = (0, react_1.useState)('');
    const [githubApiKey, setGithubApiKey] = (0, react_1.useState)('');
    const [githubOwner, setGithubOwner] = (0, react_1.useState)('');
    const [githubRepo, setGithubRepo] = (0, react_1.useState)('');
    const [slackChannelId, setSlackChannelId] = (0, react_1.useState)('');
    // UI feedback state
    const [message, setMessage] = (0, react_1.useState)('');
    const [error, setError] = (0, react_1.useState)('');
    // Load settings on component mount
    (0, react_1.useEffect)(() => {
        const loadSettings = async () => {
            // Notion
            if (await (0, secure_storage_1.getSettingStatus)('notion_api_key')) {
                setNotionApiKey('********');
            }
            const savedNotionDbId = await (0, secure_storage_1.getSetting)('notion_tasks_database_id');
            setNotionDatabaseId(savedNotionDbId || '');
            // Zapier
            const savedZapierUrl = await (0, secure_storage_1.getSetting)('zapier_webhook_url');
            setZapierUrl(savedZapierUrl || '');
            // TTS Provider
            const savedTtsProvider = await (0, secure_storage_1.getSetting)('tts_provider');
            if (savedTtsProvider) {
                setTtsProvider(savedTtsProvider);
            }
            // TTS API Key (check based on the loaded provider)
            if (await (0, secure_storage_1.getSettingStatus)(`${savedTtsProvider || ttsProvider}_api_key`)) {
                setTtsApiKey('********');
            }
            // GitHub
            if (await (0, secure_storage_1.getSettingStatus)('github_api_key')) {
                setGithubApiKey('********');
            }
            const savedGithubOwner = await (0, secure_storage_1.getSetting)('github_owner');
            setGithubOwner(savedGithubOwner || '');
            const savedGithubRepo = await (0, secure_storage_1.getSetting)('github_repo');
            setGithubRepo(savedGithubRepo || '');
            const savedSlackChannelId = await (0, secure_storage_1.getSetting)('slack_channel_id');
            setSlackChannelId(savedSlackChannelId || '');
        };
        loadSettings();
    }, []);
    const handleSave = async () => {
        setMessage('');
        setError('');
        try {
            // Save Notion API Key (only if it's not masked)
            if (notionApiKey !== '********') {
                await (0, secure_storage_1.saveSetting)('notion_api_key', notionApiKey);
            }
            // Save Notion Database ID
            await (0, secure_storage_1.saveSetting)('notion_tasks_database_id', notionDatabaseId);
            // Save Zapier URL
            await (0, secure_storage_1.saveSetting)('zapier_webhook_url', zapierUrl);
            // Save TTS Provider
            await (0, secure_storage_1.saveSetting)('tts_provider', ttsProvider);
            // Save TTS API Key (only if it's not masked)
            if (ttsApiKey !== '********') {
                await (0, secure_storage_1.saveSetting)(`${ttsProvider}_api_key`, ttsApiKey);
            }
            // Save GitHub API Key (only if it's not masked)
            if (githubApiKey !== '********') {
                await (0, secure_storage_1.saveSetting)('github_api_key', githubApiKey);
            }
            // Save GitHub Owner and Repo
            await (0, secure_storage_1.saveSetting)('github_owner', githubOwner);
            await (0, secure_storage_1.saveSetting)('github_repo', githubRepo);
            await (0, secure_storage_1.saveSetting)('slack_channel_id', slackChannelId);
            setMessage('Settings saved successfully!');
            // Re-mask keys after saving
            if (notionApiKey && notionApiKey !== '********')
                setNotionApiKey('********');
            if (ttsApiKey && ttsApiKey !== '********')
                setTtsApiKey('********');
            if (githubApiKey && githubApiKey !== '********') {
                await (0, secure_storage_1.saveSetting)('github_api_key', githubApiKey);
                setGithubApiKey('********');
            }
        }
        catch (err) {
            setError('Failed to save settings.');
            console.error(err);
        }
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: "settings-container", children: [(0, jsx_runtime_1.jsx)("h2", { children: "Settings" }), message && (0, jsx_runtime_1.jsx)("div", { className: "save-message success", children: message }), error && (0, jsx_runtime_1.jsx)("div", { className: "save-message error", children: error }), (0, jsx_runtime_1.jsxs)("div", { className: "setting", children: [(0, jsx_runtime_1.jsx)("label", { children: "Notion API Key" }), (0, jsx_runtime_1.jsx)("input", { type: "password", value: notionApiKey, onChange: (e) => setNotionApiKey(e.target.value), placeholder: "Enter Notion API Key" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "setting", children: [(0, jsx_runtime_1.jsx)("label", { children: "Notion Tasks Database ID" }), (0, jsx_runtime_1.jsx)("input", { type: "text", value: notionDatabaseId, onChange: (e) => setNotionDatabaseId(e.target.value), placeholder: "Enter Notion Tasks Database ID" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "setting", children: [(0, jsx_runtime_1.jsx)("label", { children: "GitHub Personal Access Token" }), (0, jsx_runtime_1.jsx)("input", { type: "password", value: githubApiKey, onChange: (e) => setGithubApiKey(e.target.value), placeholder: "Enter GitHub Personal Access Token" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "setting", children: [(0, jsx_runtime_1.jsx)("label", { children: "Slack Channel ID" }), (0, jsx_runtime_1.jsx)("input", { type: "text", value: slackChannelId, onChange: (e) => setSlackChannelId(e.target.value), placeholder: "Enter Slack Channel ID to monitor" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "setting", children: [(0, jsx_runtime_1.jsx)("label", { children: "Zapier Webhook URL" }), (0, jsx_runtime_1.jsx)("input", { type: "text", value: zapierUrl, onChange: (e) => setZapierUrl(e.target.value), placeholder: "Enter Zapier Webhook URL" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "setting", children: [(0, jsx_runtime_1.jsx)("label", { children: "TTS Provider" }), (0, jsx_runtime_1.jsxs)("select", { value: ttsProvider, onChange: (e) => {
                            setTtsProvider(e.target.value);
                            setTtsApiKey(''); // Reset API key when provider changes
                        }, children: [(0, jsx_runtime_1.jsx)("option", { value: "elevenlabs", children: "ElevenLabs" }), (0, jsx_runtime_1.jsx)("option", { value: "deepgram", children: "Deepgram" })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "setting", children: [(0, jsx_runtime_1.jsxs)("label", { children: [ttsProvider === 'elevenlabs' ? 'ElevenLabs' : 'Deepgram', " API Key"] }), (0, jsx_runtime_1.jsx)("input", { type: "password", value: ttsApiKey, onChange: (e) => setTtsApiKey(e.target.value), placeholder: `Enter ${ttsProvider === 'elevenlabs' ? 'ElevenLabs' : 'Deepgram'} API Key` })] }), (0, jsx_runtime_1.jsx)("button", { onClick: handleSave, children: "Save Settings" })] }));
};
exports.default = Settings;
//# sourceMappingURL=data:application/json;base64,