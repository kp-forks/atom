"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const useDataFetching_1 = require("./hooks/useDataFetching");
/**
 * Project Status Reporter component for the desktop application.
 * It simulates fetching project data and displays it in a dashboard format.
 */
const Projects = () => {
    const { data: projectData, loading, error, fetchData, } = (0, useDataFetching_1.useDataFetching)();
    // Function to simulate fetching data from a project management tool.
    const fetchProjectData = (0, react_1.useCallback)(() => {
        const dataFetcher = () => new Promise((resolve) => {
            setTimeout(() => {
                const mockDesktopProjectData = {
                    project: {
                        id: "proj-apollo-desktop",
                        name: "Project Apollo (Desktop)",
                        description: "A mission to revolutionize space travel through AI-driven logistics on desktop.",
                        status: "At Risk",
                    },
                    tasks: [
                        {
                            id: "task-d-101",
                            title: "Desktop: Develop propulsion system prototype",
                            status: "In Progress",
                            assignee: "Alex Ray",
                        },
                        {
                            id: "task-d-102",
                            title: "Desktop: Design mission control UI",
                            status: "To Do",
                            assignee: "Casey Jordan",
                        },
                        {
                            id: "task-d-103",
                            title: "Desktop: Set up local build environment",
                            status: "Done",
                            assignee: "Dev Team",
                        },
                    ],
                    team: [
                        {
                            id: "team-d-1",
                            name: "Alex Ray (Desktop)",
                            role: "Lead Engineer",
                        },
                        {
                            id: "team-d-2",
                            name: "Casey Jordan (Desktop)",
                            role: "UX/UI Designer",
                        },
                    ],
                    activityStream: [
                        {
                            id: "act-d-1",
                            description: "Alex Ray flagged a risk in the propulsion system development.",
                            timestamp: "2024-08-01T11:00:00Z",
                        },
                        {
                            id: "act-d-2",
                            description: 'A new task "Design mission control UI" was assigned to Casey Jordan.',
                            timestamp: "2024-07-31T16:00:00Z",
                        },
                    ],
                };
                resolve(mockDesktopProjectData);
            }, 1000); // 1-second delay.
        });
        fetchData(dataFetcher);
    }, [fetchData]);
    // Fetch data when the component first mounts.
    (0, react_1.useEffect)(() => {
        fetchProjectData();
    }, [fetchProjectData]);
    // Helper to determine the color for the project status badge.
    const getStatusColor = (status) => {
        switch (status) {
            case "On Track":
                return "green";
            case "At Risk":
                return "orange";
            case "Off Track":
                return "red";
            default:
                return "grey";
        }
    };
    if (loading && !projectData) {
        return (0, jsx_runtime_1.jsx)("div", { style: { padding: "20px" }, children: "Loading project data..." });
    }
    if (error) {
        return ((0, jsx_runtime_1.jsxs)("div", { style: { padding: "20px", color: "red" }, children: ["Error: ", error.message] }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { style: { padding: "20px", fontFamily: "Arial, sans-serif" }, children: [(0, jsx_runtime_1.jsxs)("div", { style: {
                    display: "flex",
                    justifyContent: "space-between",
                    alignItems: "center",
                }, children: [(0, jsx_runtime_1.jsx)("h1", { children: "Project Status Reporter (Desktop)" }), (0, jsx_runtime_1.jsx)("button", { onClick: () => fetchProjectData(), disabled: loading, style: { padding: "10px 15px", cursor: "pointer" }, children: loading ? "Refreshing..." : "Refresh Data" })] }), projectData ? ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsxs)("div", { style: { marginBottom: "30px" }, children: [(0, jsx_runtime_1.jsxs)("h2", { children: [projectData.project.name, " ", (0, jsx_runtime_1.jsx)("span", { style: {
                                            backgroundColor: getStatusColor(projectData.project.status),
                                            color: "white",
                                            padding: "4px 8px",
                                            borderRadius: "12px",
                                            fontSize: "0.8em",
                                            verticalAlign: "middle",
                                        }, children: projectData.project.status })] }), (0, jsx_runtime_1.jsx)("p", { children: projectData.project.description })] }), (0, jsx_runtime_1.jsxs)("div", { style: { marginBottom: "30px" }, children: [(0, jsx_runtime_1.jsx)("h3", { children: "Tasks" }), (0, jsx_runtime_1.jsx)("ul", { style: { listStyle: "none", padding: 0 }, children: projectData.tasks.map((task) => ((0, jsx_runtime_1.jsxs)("li", { style: { borderBottom: "1px solid #eee", padding: "10px 0" }, children: [(0, jsx_runtime_1.jsx)("strong", { children: task.title }), " - ", task.assignee, " (", task.status, ")"] }, task.id))) })] }), (0, jsx_runtime_1.jsxs)("div", { style: { marginBottom: "30px" }, children: [(0, jsx_runtime_1.jsx)("h3", { children: "Team" }), (0, jsx_runtime_1.jsx)("ul", { style: { listStyle: "none", padding: 0 }, children: projectData.team.map((member) => ((0, jsx_runtime_1.jsxs)("li", { style: { padding: "5px 0" }, children: [member.name, " (", member.role, ")"] }, member.id))) })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h3", { children: "Recent Activity" }), (0, jsx_runtime_1.jsx)("ul", { style: { listStyle: "none", padding: 0 }, children: projectData.activityStream.map((activity) => ((0, jsx_runtime_1.jsxs)("li", { style: { borderBottom: "1px solid #eee", padding: "10px 0" }, children: [(0, jsx_runtime_1.jsxs)("span", { style: { color: "#666" }, children: [new Date(activity.timestamp).toLocaleString(), ":"] }), " ", activity.description] }, activity.id))) })] })] })) : ((0, jsx_runtime_1.jsx)("p", { children: "No project data available. Click \"Refresh Data\" to load." }))] }));
};
exports.default = Projects;
//# sourceMappingURL=data:application/json;base64,