"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const tauri_1 = require("@tauri-apps/api/tauri");
function CompetitorAnalysis() {
    const [competitors, setCompetitors] = (0, react_1.useState)('');
    const [notionDatabaseId, setNotionDatabaseId] = (0, react_1.useState)('');
    const [isLoading, setIsLoading] = (0, react_1.useState)(false);
    const [message, setMessage] = (0, react_1.useState)('');
    const [error, setError] = (0, react_1.useState)('');
    const handleRunAnalysis = async () => {
        setIsLoading(true);
        setMessage('');
        setError('');
        try {
            await (0, tauri_1.invoke)('run_competitor_analysis', {
                competitors: competitors.split(',').map(c => c.trim()),
                notionDatabaseId,
            });
            setMessage('Competitor analysis complete!');
        }
        catch (err) {
            setError(err.toString());
        }
        finally {
            setIsLoading(false);
        }
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: "competitor-analysis-container", children: [(0, jsx_runtime_1.jsx)("h2", { children: "Competitor Analysis" }), isLoading && (0, jsx_runtime_1.jsx)("p", { children: "Loading..." }), message && (0, jsx_runtime_1.jsx)("p", { className: "success", children: message }), error && (0, jsx_runtime_1.jsx)("p", { className: "error", children: error }), (0, jsx_runtime_1.jsxs)("div", { className: "setting", children: [(0, jsx_runtime_1.jsx)("label", { children: "Competitors (comma-separated)" }), (0, jsx_runtime_1.jsx)("input", { type: "text", value: competitors, onChange: (e) => setCompetitors(e.target.value), placeholder: "e.g., Apple, Google, Microsoft" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "setting", children: [(0, jsx_runtime_1.jsx)("label", { children: "Notion Database ID" }), (0, jsx_runtime_1.jsx)("input", { type: "text", value: notionDatabaseId, onChange: (e) => setNotionDatabaseId(e.target.value), placeholder: "Enter Notion Database ID for the report" })] }), (0, jsx_runtime_1.jsx)("button", { onClick: handleRunAnalysis, children: "Run Analysis" })] }));
}
exports.default = CompetitorAnalysis;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tcGV0aXRvckFuYWx5c2lzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQ29tcGV0aXRvckFuYWx5c2lzLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxpQ0FBaUM7QUFDakMsaURBQStDO0FBRS9DLFNBQVMsa0JBQWtCO0lBQ3pCLE1BQU0sQ0FBQyxXQUFXLEVBQUUsY0FBYyxDQUFDLEdBQUcsSUFBQSxnQkFBUSxFQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ25ELE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxtQkFBbUIsQ0FBQyxHQUFHLElBQUEsZ0JBQVEsRUFBQyxFQUFFLENBQUMsQ0FBQztJQUM3RCxNQUFNLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxHQUFHLElBQUEsZ0JBQVEsRUFBQyxLQUFLLENBQUMsQ0FBQztJQUNsRCxNQUFNLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxHQUFHLElBQUEsZ0JBQVEsRUFBQyxFQUFFLENBQUMsQ0FBQztJQUMzQyxNQUFNLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxHQUFHLElBQUEsZ0JBQVEsRUFBQyxFQUFFLENBQUMsQ0FBQztJQUV2QyxNQUFNLGlCQUFpQixHQUFHLEtBQUssSUFBSSxFQUFFO1FBQ25DLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQixVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDZixRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDYixJQUFJLENBQUM7WUFDSCxNQUFNLElBQUEsY0FBTSxFQUFDLHlCQUF5QixFQUFFO2dCQUN0QyxXQUFXLEVBQUUsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ3RELGdCQUFnQjthQUNqQixDQUFDLENBQUM7WUFDSCxVQUFVLENBQUMsK0JBQStCLENBQUMsQ0FBQztRQUM5QyxDQUFDO1FBQUMsT0FBTyxHQUFRLEVBQUUsQ0FBQztZQUNsQixRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDM0IsQ0FBQztnQkFBUyxDQUFDO1lBQ1QsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RCLENBQUM7SUFDSCxDQUFDLENBQUM7SUFFRixPQUFPLENBQ0wsaUNBQUssU0FBUyxFQUFDLCtCQUErQixhQUM1QyxpRUFBNEIsRUFDM0IsU0FBUyxJQUFJLHVEQUFpQixFQUM5QixPQUFPLElBQUksOEJBQUcsU0FBUyxFQUFDLFNBQVMsWUFBRSxPQUFPLEdBQUssRUFDL0MsS0FBSyxJQUFJLDhCQUFHLFNBQVMsRUFBQyxPQUFPLFlBQUUsS0FBSyxHQUFLLEVBQzFDLGlDQUFLLFNBQVMsRUFBQyxTQUFTLGFBQ3RCLDhFQUE0QyxFQUM1QyxrQ0FDRSxJQUFJLEVBQUMsTUFBTSxFQUNYLEtBQUssRUFBRSxXQUFXLEVBQ2xCLFFBQVEsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQy9DLFdBQVcsRUFBQyxnQ0FBZ0MsR0FDNUMsSUFDRSxFQUNOLGlDQUFLLFNBQVMsRUFBQyxTQUFTLGFBQ3RCLG1FQUFpQyxFQUNqQyxrQ0FDRSxJQUFJLEVBQUMsTUFBTSxFQUNYLEtBQUssRUFBRSxnQkFBZ0IsRUFDdkIsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUNwRCxXQUFXLEVBQUMseUNBQXlDLEdBQ3JELElBQ0UsRUFDTixtQ0FBUSxPQUFPLEVBQUUsaUJBQWlCLDZCQUF1QixJQUNyRCxDQUNQLENBQUM7QUFDSixDQUFDO0FBRUQsa0JBQWUsa0JBQWtCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGludm9rZSB9IGZyb20gJ0B0YXVyaS1hcHBzL2FwaS90YXVyaSc7XG5cbmZ1bmN0aW9uIENvbXBldGl0b3JBbmFseXNpcygpIHtcbiAgY29uc3QgW2NvbXBldGl0b3JzLCBzZXRDb21wZXRpdG9yc10gPSB1c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IFtub3Rpb25EYXRhYmFzZUlkLCBzZXROb3Rpb25EYXRhYmFzZUlkXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW21lc3NhZ2UsIHNldE1lc3NhZ2VdID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlKCcnKTtcblxuICBjb25zdCBoYW5kbGVSdW5BbmFseXNpcyA9IGFzeW5jICgpID0+IHtcbiAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XG4gICAgc2V0TWVzc2FnZSgnJyk7XG4gICAgc2V0RXJyb3IoJycpO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBpbnZva2UoJ3J1bl9jb21wZXRpdG9yX2FuYWx5c2lzJywge1xuICAgICAgICBjb21wZXRpdG9yczogY29tcGV0aXRvcnMuc3BsaXQoJywnKS5tYXAoYyA9PiBjLnRyaW0oKSksXG4gICAgICAgIG5vdGlvbkRhdGFiYXNlSWQsXG4gICAgICB9KTtcbiAgICAgIHNldE1lc3NhZ2UoJ0NvbXBldGl0b3IgYW5hbHlzaXMgY29tcGxldGUhJyk7XG4gICAgfSBjYXRjaCAoZXJyOiBhbnkpIHtcbiAgICAgIHNldEVycm9yKGVyci50b1N0cmluZygpKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbXBldGl0b3ItYW5hbHlzaXMtY29udGFpbmVyXCI+XG4gICAgICA8aDI+Q29tcGV0aXRvciBBbmFseXNpczwvaDI+XG4gICAgICB7aXNMb2FkaW5nICYmIDxwPkxvYWRpbmcuLi48L3A+fVxuICAgICAge21lc3NhZ2UgJiYgPHAgY2xhc3NOYW1lPVwic3VjY2Vzc1wiPnttZXNzYWdlfTwvcD59XG4gICAgICB7ZXJyb3IgJiYgPHAgY2xhc3NOYW1lPVwiZXJyb3JcIj57ZXJyb3J9PC9wPn1cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2V0dGluZ1wiPlxuICAgICAgICA8bGFiZWw+Q29tcGV0aXRvcnMgKGNvbW1hLXNlcGFyYXRlZCk8L2xhYmVsPlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgdmFsdWU9e2NvbXBldGl0b3JzfVxuICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0Q29tcGV0aXRvcnMoZS50YXJnZXQudmFsdWUpfVxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwiZS5nLiwgQXBwbGUsIEdvb2dsZSwgTWljcm9zb2Z0XCJcbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZXR0aW5nXCI+XG4gICAgICAgIDxsYWJlbD5Ob3Rpb24gRGF0YWJhc2UgSUQ8L2xhYmVsPlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgdmFsdWU9e25vdGlvbkRhdGFiYXNlSWR9XG4gICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBzZXROb3Rpb25EYXRhYmFzZUlkKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIE5vdGlvbiBEYXRhYmFzZSBJRCBmb3IgdGhlIHJlcG9ydFwiXG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxidXR0b24gb25DbGljaz17aGFuZGxlUnVuQW5hbHlzaXN9PlJ1biBBbmFseXNpczwvYnV0dG9uPlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBDb21wZXRpdG9yQW5hbHlzaXM7XG4iXX0=