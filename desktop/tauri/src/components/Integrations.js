"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const secure_storage_1 = require("../lib/secure-storage");
require("../Settings.css");
const Integrations = () => {
    // State for each setting
    const [boxClientId, setBoxClientId] = (0, react_1.useState)('');
    const [boxClientSecret, setBoxClientSecret] = (0, react_1.useState)('');
    const [asanaClientId, setAsanaClientId] = (0, react_1.useState)('');
    const [asanaClientSecret, setAsanaClientSecret] = (0, react_1.useState)('');
    const [trelloApiKey, setTrelloApiKey] = (0, react_1.useState)('');
    const [trelloApiSecret, setTrelloApiSecret] = (0, react_1.useState)('');
    const [jiraServerUrl, setJiraServerUrl] = (0, react_1.useState)('');
    const [jiraUsername, setJiraUsername] = (0, react_1.useState)('');
    const [jiraApiKey, setJiraApiKey] = (0, react_1.useState)('');
    // UI feedback state
    const [message, setMessage] = (0, react_1.useState)('');
    const [error, setError] = (0, react_1.useState)('');
    // Load settings on component mount
    (0, react_1.useEffect)(() => {
        const loadSettings = async () => {
            // Box
            if (await (0, secure_storage_1.getSettingStatus)('box_client_id')) {
                setBoxClientId('********');
            }
            if (await (0, secure_storage_1.getSettingStatus)('box_client_secret')) {
                setBoxClientSecret('********');
            }
            // Asana
            if (await (0, secure_storage_1.getSettingStatus)('asana_client_id')) {
                setAsanaClientId('********');
            }
            if (await (0, secure_storage_1.getSettingStatus)('asana_client_secret')) {
                setAsanaClientSecret('********');
            }
            // Trello
            if (await (0, secure_storage_1.getSettingStatus)('trello_api_key')) {
                setTrelloApiKey('********');
            }
            if (await (0, secure_storage_1.getSettingStatus)('trello_api_secret')) {
                setTrelloApiSecret('********');
            }
            // Jira
            const savedJiraServerUrl = await (0, secure_storage_1.getSetting)('jira_server_url');
            setJiraServerUrl(savedJiraServerUrl || '');
            const savedJiraUsername = await (0, secure_storage_1.getSetting)('jira_username');
            setJiraUsername(savedJiraUsername || '');
            if (await (0, secure_storage_1.getSettingStatus)('jira_api_key')) {
                setJiraApiKey('********');
            }
        };
        loadSettings();
    }, []);
    const handleSave = async () => {
        setMessage('');
        setError('');
        try {
            // Box
            if (boxClientId !== '********') {
                await (0, secure_storage_1.saveSetting)('box_client_id', boxClientId);
            }
            if (boxClientSecret !== '********') {
                await (0, secure_storage_1.saveSetting)('box_client_secret', boxClientSecret);
            }
            // Asana
            if (asanaClientId !== '********') {
                await (0, secure_storage_1.saveSetting)('asana_client_id', asanaClientId);
            }
            if (asanaClientSecret !== '********') {
                await (0, secure_storage_1.saveSetting)('asana_client_secret', asanaClientSecret);
            }
            // Trello
            if (trelloApiKey !== '********') {
                await (0, secure_storage_1.saveSetting)('trello_api_key', trelloApiKey);
            }
            if (trelloApiSecret !== '********') {
                await (0, secure_storage_1.saveSetting)('trello_api_secret', trelloApiSecret);
            }
            // Jira
            await (0, secure_storage_1.saveSetting)('jira_server_url', jiraServerUrl);
            await (0, secure_storage_1.saveSetting)('jira_username', jiraUsername);
            if (jiraApiKey !== '********') {
                await (0, secure_storage_1.saveSetting)('jira_api_key', jiraApiKey);
            }
            setMessage('Settings saved successfully!');
            // Re-mask keys after saving
            if (boxClientId && boxClientId !== '********')
                setBoxClientId('********');
            if (boxClientSecret && boxClientSecret !== '********')
                setBoxClientSecret('********');
            if (asanaClientId && asanaClientId !== '********')
                setAsanaClientId('********');
            if (asanaClientSecret && asanaClientSecret !== '********')
                setAsanaClientSecret('********');
            if (trelloApiKey && trelloApiKey !== '********')
                setTrelloApiKey('********');
            if (trelloApiSecret && trelloApiSecret !== '********')
                setTrelloApiSecret('********');
            if (jiraApiKey && jiraApiKey !== '********')
                setJiraApiKey('********');
        }
        catch (err) {
            setError('Failed to save settings.');
            console.error(err);
        }
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: "settings-container", children: [(0, jsx_runtime_1.jsx)("h2", { children: "Integrations" }), message && (0, jsx_runtime_1.jsx)("div", { className: "save-message success", children: message }), error && (0, jsx_runtime_1.jsx)("div", { className: "save-message error", children: error }), (0, jsx_runtime_1.jsxs)("div", { className: "setting", children: [(0, jsx_runtime_1.jsx)("label", { children: "Box Client ID" }), (0, jsx_runtime_1.jsx)("input", { type: "password", value: boxClientId, onChange: (e) => setBoxClientId(e.target.value), placeholder: "Enter Box Client ID" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "setting", children: [(0, jsx_runtime_1.jsx)("label", { children: "Box Client Secret" }), (0, jsx_runtime_1.jsx)("input", { type: "password", value: boxClientSecret, onChange: (e) => setBoxClientSecret(e.target.value), placeholder: "Enter Box Client Secret" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "setting", children: [(0, jsx_runtime_1.jsx)("label", { children: "Asana Client ID" }), (0, jsx_runtime_1.jsx)("input", { type: "password", value: asanaClientId, onChange: (e) => setAsanaClientId(e.target.value), placeholder: "Enter Asana Client ID" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "setting", children: [(0, jsx_runtime_1.jsx)("label", { children: "Asana Client Secret" }), (0, jsx_runtime_1.jsx)("input", { type: "password", value: asanaClientSecret, onChange: (e) => setAsanaClientSecret(e.target.value), placeholder: "Enter Asana Client Secret" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "setting", children: [(0, jsx_runtime_1.jsx)("label", { children: "Trello API Key" }), (0, jsx_runtime_1.jsx)("input", { type: "password", value: trelloApiKey, onChange: (e) => setTrelloApiKey(e.target.value), placeholder: "Enter Trello API Key" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "setting", children: [(0, jsx_runtime_1.jsx)("label", { children: "Trello API Secret" }), (0, jsx_runtime_1.jsx)("input", { type: "password", value: trelloApiSecret, onChange: (e) => setTrelloApiSecret(e.target.value), placeholder: "Enter Trello API Secret" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "setting", children: [(0, jsx_runtime_1.jsx)("label", { children: "Jira Server URL" }), (0, jsx_runtime_1.jsx)("input", { type: "text", value: jiraServerUrl, onChange: (e) => setJiraServerUrl(e.target.value), placeholder: "Enter Jira Server URL" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "setting", children: [(0, jsx_runtime_1.jsx)("label", { children: "Jira Username" }), (0, jsx_runtime_1.jsx)("input", { type: "text", value: jiraUsername, onChange: (e) => setJiraUsername(e.target.value), placeholder: "Enter Jira Username" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "setting", children: [(0, jsx_runtime_1.jsx)("label", { children: "Jira API Key" }), (0, jsx_runtime_1.jsx)("input", { type: "password", value: jiraApiKey, onChange: (e) => setJiraApiKey(e.target.value), placeholder: "Enter Jira API Key" })] }), (0, jsx_runtime_1.jsx)("button", { onClick: handleSave, children: "Save Settings" })] }));
};
exports.default = Integrations;
//# sourceMappingURL=data:application/json;base64,