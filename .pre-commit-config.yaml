# Pre-commit configuration for preventing cache conflicts and code quality
# Install with: pip install pre-commit && pre-commit install
# Run on all files: pre-commit run --all-files

default_stages: [commit]

repos:
  # Clean cache files before commits
  - repo: local
    hooks:
      - id: clean-python-cache
        name: Remove Python cache files
        entry: bash -c 'find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true; find . -name "*.pyc" -delete 2>/dev/null || true; find . -name "*.pyo" -delete 2>/dev/null || true'
        language: system
        pass_filenames: false
        always_run: true

      - id: clean-cache-directories
        name: Clean development cache directories
        entry: bash -c 'find . -name ".pytest_cache,.mypy_cache,.ruff_cache,.coverage" -type d -exec rm -rf {} + 2>/dev/null || true; find . -name "*.log" -delete 2>/dev/null || true'
        language: system
        pass_filenames: false
        always_run: true

      - id: clean-system-files
        name: Remove system files
        entry: bash -c 'find . -name ".DS_Store" -delete 2>/dev/null || true; find . -name "._*" -delete 2>/dev/null || true; find . -name "Thumbs.db" -delete 2>/dev/null || true'
        language: system
        pass_filenames: false
        always_run: true

  # Python-specific file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
        args: ["--maxkb=1000"]
      - id: check-merge-conflict
      - id: check-symlinks
      - id: check-toml
      - id: check-xml
      - id: debug-statements
      - id: mixed-line-ending
        args: ["--fix=lf"]
      - id: pretty-format-json
        args: ["--autofix"]
      - id: check-case-conflict

  # Node/TypeScript specific
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        types_or: [javascript, jsx, ts, tsx, json, yaml, markdown]

  # Python-specific cache/prevention
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3
        exclude: __pycache__|\.pyc|\.pyo$

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: ["--profile", "black", "--filter-files"]
        exclude: __pycache__|\.pyc|\.pyo$

  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        exclude: __pycache__|\.pyc|\.pyo$
        args: [--max-line-length=88]

  # Prevent cache file commits
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: forbid-files
        name: Prevent Python caches
        entry: Found Python cache files in commit
        language: fail
        files: '.*\.pyc$|__pycache__/.*|\.pyo$|\.pyd$'

  # Validate .gitignore is protecting caches
  - repo: local
    hooks:
      - id: validate-gitignore
        name: Validate .gitignore cache exclusions
        entry: bash -c 'if grep -q "__pycache__" .gitignore && grep -q "\.pyc" .gitignore; then echo "âœ… .gitignore properly configured"; else exit 1; fi'
        language: system
        always_run: true
        pass_filenames: false

# Exclude patterns that should never be checked or modified
exclude: |
  (?x)^(
    __pycache__/|
    \.pytest_cache/|
    \.mypy_cache/|
    \.ruff_cache/|
    \.next/|
    build/|
    dist/|
    node_modules/
  )$
