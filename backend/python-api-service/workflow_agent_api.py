import logging
from flask import Blueprint, jsonify, request
from typing import Dict, List, Any, Optional
import uuid
from datetime import datetime

from workflow_agent_integration import workflow_agent_integration_service

# Create blueprint
workflow_agent_api_bp = Blueprint(
    "workflow_agent_api", __name__, url_prefix="/api/workflow-agent"
)

logger = logging.getLogger(__name__)


@workflow_agent_api_bp.route("/analyze", methods=["POST"])
def analyze_workflow_request():
    """Analyze natural language input for workflow creation"""
    try:
        data = request.get_json()

        if not data:
            return jsonify({"success": False, "error": "No JSON data provided"}), 400

        user_input = data.get("user_input")
        user_id = data.get("user_id", "anonymous")
        session_id = data.get("session_id", str(uuid.uuid4()))

        if not user_input:
            return jsonify({"success": False, "error": "user_input is required"}), 400

        # Process the workflow request
        result = workflow_agent_integration_service.process_natural_language_workflow_request(
            user_input, user_id, session_id
        )

        return jsonify(result)

    except Exception as e:
        logger.error(f"Error analyzing workflow request: {e}")
        return jsonify({"success": False, "error": str(e)}), 500


@workflow_agent_api_bp.route("/generate", methods=["POST"])
def generate_workflow():
    """Generate a workflow from natural language description"""
    try:
        data = request.get_json()

        if not data:
            return jsonify({"success": False, "error": "No JSON data provided"}), 400

        user_input = data.get("user_input")
        user_id = data.get("user_id", "anonymous")
        session_id = data.get("session_id", str(uuid.uuid4()))

        if not user_input:
            return jsonify({"success": False, "error": "user_input is required"}), 400

        # Process and generate workflow
        result = workflow_agent_integration_service.process_natural_language_workflow_request(
            user_input, user_id, session_id
        )

        if not result.get("success"):
            return jsonify(result)

        # If workflow was generated successfully, return the details
        workflow_id = result.get("workflow_id")

        return jsonify(
            {
                "success": True,
                "workflow_id": workflow_id,
                "workflow_name": result.get("workflow_name"),
                "description": result.get("description"),
                "steps_count": result.get("steps_count"),
                "is_scheduled": result.get("is_scheduled", False),
                "next_execution": result.get("next_execution"),
                "message": result.get("message"),
                "requires_confirmation": True,
            }
        )

    except Exception as e:
        logger.error(f"Error generating workflow: {e}")
        return jsonify({"success": False, "error": str(e)}), 500


@workflow_agent_api_bp.route("/execute-generated", methods=["POST"])
def execute_generated_workflow():
    """Execute a workflow that was generated by the agent"""
    try:
        data = request.get_json()

        if not data:
            return jsonify({"success": False, "error": "No JSON data provided"}), 400

        workflow_id = data.get("workflow_id")
        input_data = data.get("input_data", {})

        if not workflow_id:
            return jsonify({"success": False, "error": "workflow_id is required"}), 400

        # Execute the generated workflow
        result = workflow_agent_integration_service.execute_generated_workflow(
            workflow_id, input_data
        )

        return jsonify(result)

    except Exception as e:
        logger.error(f"Error executing generated workflow: {e}")
        return jsonify({"success": False, "error": str(e)}), 500


@workflow_agent_api_bp.route("/ai-workflows", methods=["GET"])
def list_ai_generated_workflows():
    """List all workflows generated by AI agents"""
    try:
        user_id = request.args.get("user_id")

        workflows = workflow_agent_integration_service.list_ai_generated_workflows(
            user_id
        )

        return jsonify(
            {"success": True, "workflows": workflows, "count": len(workflows)}
        )

    except Exception as e:
        logger.error(f"Error listing AI generated workflows: {e}")
        return jsonify({"success": False, "error": str(e)}), 500


@workflow_agent_api_bp.route("/suggestions", methods=["GET"])
def get_workflow_suggestions():
    """Get workflow suggestions based on user context"""
    try:
        user_context = {}

        # Extract user context from query parameters
        if request.args.get("has_calendar"):
            user_context["has_calendar_integration"] = True
        if request.args.get("has_tasks"):
            user_context["has_task_management"] = True
        if request.args.get("has_documents"):
            user_context["frequent_document_work"] = True
        if request.args.get("industry"):
            user_context["industry"] = request.args.get("industry")
        if request.args.get("role"):
            user_context["role"] = request.args.get("role")

        suggestions = workflow_agent_integration_service.get_workflow_suggestions(
            user_context
        )

        return jsonify(
            {"success": True, "suggestions": suggestions, "count": len(suggestions)}
        )

    except Exception as e:
        logger.error(f"Error getting workflow suggestions: {e}")
        return jsonify({"success": False, "error": str(e)}), 500


@workflow_agent_api_bp.route("/chat", methods=["POST"])
def workflow_chat():
    """Chat interface for workflow creation and management"""
    try:
        data = request.get_json()

        if not data:
            return jsonify({"success": False, "error": "No JSON data provided"}), 400

        message = data.get("message")
        user_id = data.get("user_id", "anonymous")
        session_id = data.get("session_id", str(uuid.uuid4()))
        conversation_history = data.get("conversation_history", [])

        if not message:
            return jsonify({"success": False, "error": "message is required"}), 400

        # Process the chat message for workflow creation
        result = workflow_agent_integration_service.process_natural_language_workflow_request(
            message, user_id, session_id
        )

        # Format response for chat interface
        if result.get("success"):
            response = {
                "type": "workflow_generated",
                "message": result.get("message"),
                "workflow_id": result.get("workflow_id"),
                "workflow_name": result.get("workflow_name"),
                "steps_count": result.get("steps_count"),
                "is_scheduled": result.get("is_scheduled", False),
                "requires_confirmation": True,
                "actions": [
                    {
                        "type": "execute",
                        "label": "Execute Now",
                        "workflow_id": result.get("workflow_id"),
                    },
                    {
                        "type": "schedule",
                        "label": "Schedule",
                        "workflow_id": result.get("workflow_id"),
                    },
                    {
                        "type": "edit",
                        "label": "Edit Workflow",
                        "workflow_id": result.get("workflow_id"),
                    },
                ],
            }
        else:
            if result.get("is_workflow_request", False):
                # It's a workflow request but couldn't be processed
                response = {
                    "type": "clarification_needed",
                    "message": result.get(
                        "message", "I need more information to create this workflow."
                    ),
                    "suggestions": [
                        "Please specify the trigger for the workflow",
                        "What actions should be performed?",
                        "Which services should be involved?",
                    ],
                }
            else:
                # Not a workflow request
                response = {
                    "type": "not_workflow",
                    "message": 'I can help you create automated workflows. Try saying something like: "Create a workflow that sends me an email when I receive a calendar invitation" or "Automate my task creation from emails".',
                }

        return jsonify(
            {
                "success": True,
                "response": response,
                "session_id": session_id,
                "timestamp": datetime.now().isoformat(),
            }
        )

    except Exception as e:
        logger.error(f"Error in workflow chat: {e}")
        return jsonify(
            {
                "success": False,
                "error": str(e),
                "response": {
                    "type": "error",
                    "message": "Sorry, I encountered an error while processing your request.",
                },
            }
        ), 500


@workflow_agent_api_bp.route("/health", methods=["GET"])
def workflow_agent_health():
    """Health check for workflow agent integration"""
    try:
        # Test service availability
        test_workflows = (
            workflow_agent_integration_service.list_ai_generated_workflows()
        )

        return jsonify(
            {
                "success": True,
                "status": "healthy",
                "service": "workflow-agent-integration",
                "ai_workflows_count": len(test_workflows),
                "timestamp": datetime.now().isoformat(),
            }
        )

    except Exception as e:
        logger.error(f"Workflow agent health check failed: {e}")
        return jsonify({"success": False, "status": "unhealthy", "error": str(e)}), 500
