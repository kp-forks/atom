"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAgentAudioControl = exports.AgentAudioControlProvider = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const AgentAudioControlContext = (0, react_1.createContext)(undefined);
const AgentAudioControlProvider = ({ children }) => {
    const [latestCommand, setLatestCommand] = (0, react_1.useState)(null);
    const dispatchAgentCommand = (0, react_1.useCallback)((command) => {
        console.log('AgentAudioControlContext: Dispatching command:', command);
        setLatestCommand(command);
    }, []);
    const clearLastCommand = (0, react_1.useCallback)(() => {
        console.log('AgentAudioControlContext: Clearing last command.');
        setLatestCommand(null);
    }, []);
    return ((0, jsx_runtime_1.jsx)(AgentAudioControlContext.Provider, { value: { latestCommand, dispatchAgentCommand, clearLastCommand }, children: children }));
};
exports.AgentAudioControlProvider = AgentAudioControlProvider;
const useAgentAudioControl = () => {
    const context = (0, react_1.useContext)(AgentAudioControlContext);
    if (context === undefined) {
        throw new Error('useAgentAudioControl must be used within an AgentAudioControlProvider');
    }
    return context;
};
exports.useAgentAudioControl = useAgentAudioControl;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWdlbnRBdWRpb0NvbnRyb2xDb250ZXh0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQWdlbnRBdWRpb0NvbnRyb2xDb250ZXh0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUNBQTJGO0FBbUIzRixNQUFNLHdCQUF3QixHQUFHLElBQUEscUJBQWEsRUFBMkMsU0FBUyxDQUFDLENBQUM7QUFFN0YsTUFBTSx5QkFBeUIsR0FBc0MsQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUU7SUFDM0YsTUFBTSxDQUFDLGFBQWEsRUFBRSxnQkFBZ0IsQ0FBQyxHQUFHLElBQUEsZ0JBQVEsRUFBMkIsSUFBSSxDQUFDLENBQUM7SUFFbkYsTUFBTSxvQkFBb0IsR0FBRyxJQUFBLG1CQUFXLEVBQUMsQ0FBQyxPQUEwQixFQUFFLEVBQUU7UUFDdEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnREFBZ0QsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2RSxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM1QixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFUCxNQUFNLGdCQUFnQixHQUFHLElBQUEsbUJBQVcsRUFBQyxHQUFHLEVBQUU7UUFDeEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrREFBa0QsQ0FBQyxDQUFDO1FBQ2hFLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUVQLE9BQU8sQ0FDTCx1QkFBQyx3QkFBd0IsQ0FBQyxRQUFRLElBQUMsS0FBSyxFQUFFLEVBQUUsYUFBYSxFQUFFLG9CQUFvQixFQUFFLGdCQUFnQixFQUFFLFlBQ2hHLFFBQVEsR0FDeUIsQ0FDckMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQWxCVyxRQUFBLHlCQUF5Qiw2QkFrQnBDO0FBRUssTUFBTSxvQkFBb0IsR0FBRyxHQUFpQyxFQUFFO0lBQ3JFLE1BQU0sT0FBTyxHQUFHLElBQUEsa0JBQVUsRUFBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBQ3JELElBQUksT0FBTyxLQUFLLFNBQVMsRUFBRSxDQUFDO1FBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsdUVBQXVFLENBQUMsQ0FBQztJQUMzRixDQUFDO0lBQ0QsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQyxDQUFDO0FBTlcsUUFBQSxvQkFBb0Isd0JBTS9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IGNyZWF0ZUNvbnRleHQsIHVzZVN0YXRlLCB1c2VDb250ZXh0LCBSZWFjdE5vZGUsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuXG4vLyBEZWZpbmUgdGhlIHN0cnVjdHVyZSBvZiBjb21tYW5kcyByZWNlaXZlZCBmcm9tIHRoZSBhZ2VudFxuLy8gVGhpcyBzaG91bGQgYWxpZ24gd2l0aCB0aGUgYEFnZW50Q2xpZW50Q29tbWFuZGAgZGVmaW5lZCBpbiB0aGUgYWdlbnQgc2tpbGxcbmV4cG9ydCBpbnRlcmZhY2UgQWdlbnRBdWRpb0NvbW1hbmQge1xuICBjb21tYW5kX2lkOiBzdHJpbmc7XG4gIGFjdGlvbjogJ1NUQVJUX1JFQ09SRElOR19TRVNTSU9OJyB8ICdTVE9QX1JFQ09SRElOR19TRVNTSU9OJyB8ICdDQU5DRUxfUkVDT1JESU5HX1NFU1NJT04nO1xuICBwYXlsb2FkPzoge1xuICAgIHN1Z2dlc3RlZFRpdGxlPzogc3RyaW5nO1xuICAgIGxpbmtlZEV2ZW50SWQ/OiBzdHJpbmc7XG4gIH07XG59XG5cbmludGVyZmFjZSBBZ2VudEF1ZGlvQ29udHJvbENvbnRleHRUeXBlIHtcbiAgbGF0ZXN0Q29tbWFuZDogQWdlbnRBdWRpb0NvbW1hbmQgfCBudWxsO1xuICBkaXNwYXRjaEFnZW50Q29tbWFuZDogKGNvbW1hbmQ6IEFnZW50QXVkaW9Db21tYW5kKSA9PiB2b2lkOyAvLyBDYWxsZWQgYnkgV2ViU29ja2V0IGxpc3RlbmVyXG4gIGNsZWFyTGFzdENvbW1hbmQ6ICgpID0+IHZvaWQ7IC8vIENhbGxlZCBieSBjb21wb25lbnRzIGFmdGVyIGNvbnN1bWluZyB0aGUgY29tbWFuZFxufVxuXG5jb25zdCBBZ2VudEF1ZGlvQ29udHJvbENvbnRleHQgPSBjcmVhdGVDb250ZXh0PEFnZW50QXVkaW9Db250cm9sQ29udGV4dFR5cGUgfCB1bmRlZmluZWQ+KHVuZGVmaW5lZCk7XG5cbmV4cG9ydCBjb25zdCBBZ2VudEF1ZGlvQ29udHJvbFByb3ZpZGVyOiBSZWFjdC5GQzx7IGNoaWxkcmVuOiBSZWFjdE5vZGUgfT4gPSAoeyBjaGlsZHJlbiB9KSA9PiB7XG4gIGNvbnN0IFtsYXRlc3RDb21tYW5kLCBzZXRMYXRlc3RDb21tYW5kXSA9IHVzZVN0YXRlPEFnZW50QXVkaW9Db21tYW5kIHwgbnVsbD4obnVsbCk7XG5cbiAgY29uc3QgZGlzcGF0Y2hBZ2VudENvbW1hbmQgPSB1c2VDYWxsYmFjaygoY29tbWFuZDogQWdlbnRBdWRpb0NvbW1hbmQpID0+IHtcbiAgICBjb25zb2xlLmxvZygnQWdlbnRBdWRpb0NvbnRyb2xDb250ZXh0OiBEaXNwYXRjaGluZyBjb21tYW5kOicsIGNvbW1hbmQpO1xuICAgIHNldExhdGVzdENvbW1hbmQoY29tbWFuZCk7XG4gIH0sIFtdKTtcblxuICBjb25zdCBjbGVhckxhc3RDb21tYW5kID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdBZ2VudEF1ZGlvQ29udHJvbENvbnRleHQ6IENsZWFyaW5nIGxhc3QgY29tbWFuZC4nKTtcbiAgICBzZXRMYXRlc3RDb21tYW5kKG51bGwpO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8QWdlbnRBdWRpb0NvbnRyb2xDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7IGxhdGVzdENvbW1hbmQsIGRpc3BhdGNoQWdlbnRDb21tYW5kLCBjbGVhckxhc3RDb21tYW5kIH19PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvQWdlbnRBdWRpb0NvbnRyb2xDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZUFnZW50QXVkaW9Db250cm9sID0gKCk6IEFnZW50QXVkaW9Db250cm9sQ29udGV4dFR5cGUgPT4ge1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChBZ2VudEF1ZGlvQ29udHJvbENvbnRleHQpO1xuICBpZiAoY29udGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1c2VBZ2VudEF1ZGlvQ29udHJvbCBtdXN0IGJlIHVzZWQgd2l0aGluIGFuIEFnZW50QXVkaW9Db250cm9sUHJvdmlkZXInKTtcbiAgfVxuICByZXR1cm4gY29udGV4dDtcbn07XG5cbi8vIEV4YW1wbGUgb2YgaG93IGEgV2ViU29ja2V0IGxpc3RlbmVyIG1pZ2h0IHVzZSB0aGlzIGNvbnRleHQ6XG4vLyAoVGhpcyBwYXJ0IHdvdWxkIE5PVCBiZSBpbiB0aGlzIGZpbGUsIGJ1dCBpbiB5b3VyIFdlYlNvY2tldCBoYW5kbGluZyBsb2dpYylcbi8qXG5mdW5jdGlvbiB3ZWJTb2NrZXRNZXNzYWdlSGFuZGxlcihtZXNzYWdlOiBhbnksIGRpc3BhdGNoQWdlbnRDb21tYW5kOiAoY29tbWFuZDogQWdlbnRBdWRpb0NvbW1hbmQpID0+IHZvaWQpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBwYXJzZWRNZXNzYWdlID0gSlNPTi5wYXJzZShtZXNzYWdlLmRhdGEpOyAvLyBPciBob3dldmVyIG1lc3NhZ2VzIGFyZSBzdHJ1Y3R1cmVkXG5cbiAgICAvLyBDaGVjayBpZiBpdCdzIGFuIGF1ZGlvIGNvbnRyb2wgY29tbWFuZFxuICAgIGlmIChwYXJzZWRNZXNzYWdlICYmIHBhcnNlZE1lc3NhZ2UudHlwZSA9PT0gJ0FHRU5UX0FVRElPX0NPTlRST0xfQ09NTUFORCcgJiYgcGFyc2VkTWVzc2FnZS5jb21tYW5kRGV0YWlscykge1xuICAgICAgY29uc3QgY29tbWFuZERldGFpbHMgPSBwYXJzZWRNZXNzYWdlLmNvbW1hbmREZXRhaWxzIGFzIEFnZW50QXVkaW9Db21tYW5kO1xuICAgICAgLy8gVmFsaWRhdGUgY29tbWFuZERldGFpbHMgc3RydWN0dXJlIGlmIG5lY2Vzc2FyeVxuICAgICAgaWYgKGNvbW1hbmREZXRhaWxzLmFjdGlvbiAmJiBjb21tYW5kRGV0YWlscy5jb21tYW5kX2lkKSB7XG4gICAgICAgICBkaXNwYXRjaEFnZW50Q29tbWFuZChjb21tYW5kRGV0YWlscyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJSZWNlaXZlZCBpbnZhbGlkIGFnZW50IGF1ZGlvIGNvbW1hbmQgc3RydWN0dXJlOlwiLCBjb21tYW5kRGV0YWlscyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEhhbmRsZSBvdGhlciB0eXBlcyBvZiBXZWJTb2NrZXQgbWVzc2FnZXNcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIHByb2Nlc3NpbmcgV2ViU29ja2V0IG1lc3NhZ2U6XCIsIGVycm9yKTtcbiAgfVxufVxuXG4vLyBTb21ld2hlcmUgaW4geW91ciBhcHAgd2hlcmUgV2ViU29ja2V0IGlzIGluaXRpYWxpemVkOlxuLy8gY29uc3QgeyBkaXNwYXRjaEFnZW50Q29tbWFuZCB9ID0gdXNlQWdlbnRBdWRpb0NvbnRyb2woKTsgLy8gSWYgY29udGV4dCBpcyBhdmFpbGFibGUgZ2xvYmFsbHlcbi8vIG9yIHBhc3MgZGlzcGF0Y2hBZ2VudENvbW1hbmQgdG8geW91ciBXZWJTb2NrZXQgc2VydmljZS5cbi8vIHdlYlNvY2tldC5vbm1lc3NhZ2UgPSAoZXZlbnQpID0+IHdlYlNvY2tldE1lc3NhZ2VIYW5kbGVyKGV2ZW50LCBkaXNwYXRjaEFnZW50Q29tbWFuZCk7XG4qL1xuIl19