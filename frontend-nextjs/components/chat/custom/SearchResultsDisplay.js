"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const utils_1 = require("@lib/Chat/utils");
const formatDate = (isoString) => {
    if (!isoString)
        return "N/A";
    try {
        return new Date(isoString).toLocaleDateString(undefined, {
            year: 'numeric', month: 'short', day: 'numeric'
        });
    }
    catch (e) {
        console.error("Error formatting date:", isoString, e);
        return "Invalid Date";
    }
};
const MatchTypeTag = ({ type }) => {
    const baseClasses = "text-xs font-semibold px-2 py-0.5 rounded-full";
    const typeStyles = {
        semantic: "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300",
        keyword: "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300",
        hybrid: "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300",
    };
    return ((0, jsx_runtime_1.jsx)("span", { className: (0, utils_1.cn)(baseClasses, typeStyles[type]), children: type.charAt(0).toUpperCase() + type.slice(1) }));
};
const SearchResultItem = ({ item }) => {
    const displayDate = formatDate(item.last_modified_source || item.created_at_source || item.ingested_at);
    const dateTitle = item.last_modified_source || item.created_at_source || item.ingested_at || "No date available";
    return ((0, jsx_runtime_1.jsxs)("div", { className: (0, utils_1.cn)("mb-3 p-3 border rounded-lg shadow-sm transition-shadow", "bg-white dark:bg-gray-800", "border-gray-200 dark:border-gray-700", "hover:shadow-lg"), children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-start mb-1", children: [(0, jsx_runtime_1.jsx)("h4", { className: "text-base font-semibold text-gray-800 dark:text-gray-100 flex-grow", children: (0, jsx_runtime_1.jsx)("a", { href: item.source_uri || '#', target: "_blank", rel: "noopener noreferrer", className: "text-sky-600 hover:text-sky-700 dark:text-sky-400 dark:hover:text-sky-300 hover:underline focus:outline-none focus:ring-1 focus:ring-sky-500 rounded", title: item.title || "View Source", children: item.title || "Untitled Document" }) }), (0, jsx_runtime_1.jsx)("div", { className: "flex-shrink-0 ml-2", children: (0, jsx_runtime_1.jsx)(MatchTypeTag, { type: item.match_type }) })] }), (0, jsx_runtime_1.jsxs)("div", { className: "text-xs text-gray-500 dark:text-gray-400 mb-2 space-x-2 flex items-center flex-wrap", children: [item.doc_type &&
                        (0, jsx_runtime_1.jsx)("span", { className: "font-medium bg-gray-100 dark:bg-gray-700 px-1.5 py-0.5 rounded", children: item.doc_type.replace(/_/g, ' ').toUpperCase() }), (0, jsx_runtime_1.jsxs)("span", { title: dateTitle, children: ["Date: ", displayDate] }), (0, jsx_runtime_1.jsxs)("span", { className: "inline-block pl-2 border-l border-gray-300 dark:border-gray-600", children: ["Score: ", item.score !== undefined && item.score !== null ? item.score.toFixed(4) : 'N/A'] })] }), (item.snippet || item.extracted_text_preview) && ((0, jsx_runtime_1.jsx)("p", { className: (0, utils_1.cn)("text-sm leading-relaxed", "text-gray-700 dark:text-gray-300", "max-h-28 overflow-hidden text-ellipsis whitespace-pre-wrap"), children: item.snippet || item.extracted_text_preview }))] }));
};
const SearchResultsDisplay = ({ results }) => {
    if (!results || results.length === 0) {
        return (0, jsx_runtime_1.jsx)("div", { className: "p-3 text-sm text-gray-600 dark:text-gray-400 font-sans", children: "No relevant documents found." });
    }
    return ((0, jsx_runtime_1.jsx)("div", { className: (0, utils_1.cn)("mt-2 p-2 rounded-lg text-left font-sans", "bg-gray-50 dark:bg-gray-700/60", "border border-gray-200 dark:border-gray-700", "max-h-96 overflow-y-auto custom-scrollbar"), children: results.map((item) => ((0, jsx_runtime_1.jsx)(SearchResultItem, { item: item }, item.doc_id))) }));
};
exports.default = SearchResultsDisplay;
//# sourceMappingURL=data:application/json;base64,