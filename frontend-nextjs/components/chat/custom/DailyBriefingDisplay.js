"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const utils_1 = require("@lib/Chat/utils");
const icons_1 = require("../ui/icons"); // Assuming icons are available
const getIconForType = (type) => {
    const iconProps = { className: "mr-2 h-4 w-4" };
    switch (type) {
        case 'meeting':
            return (0, jsx_runtime_1.jsx)(icons_1.IconCalendar, { ...iconProps });
        case 'task':
            return (0, jsx_runtime_1.jsx)(icons_1.IconCheck, { ...iconProps });
        case 'email':
            return (0, jsx_runtime_1.jsx)(icons_1.IconMail, { ...iconProps });
        case 'slack_message':
            return (0, jsx_runtime_1.jsx)(icons_1.IconMessage, { ...iconProps }); // Assuming IconMessage for Slack
        case 'teams_message':
            return (0, jsx_runtime_1.jsx)(icons_1.IconMessage2, { ...iconProps }); // Assuming IconMessage2 for Teams
        default:
            return null;
    }
};
const getButtonTextForType = (type) => {
    switch (type) {
        case 'meeting': return "View Event";
        case 'task': return "Open Task";
        case 'email': return "View Email";
        case 'slack_message': return "View Message";
        case 'teams_message': return "View Message";
        default: return "Open Link";
    }
};
const BriefingItemCard = ({ item }) => {
    const icon = getIconForType(item.type);
    const buttonText = getButtonTextForType(item.type);
    return ((0, jsx_runtime_1.jsxs)("div", { className: (0, utils_1.cn)("p-3 mb-3 border rounded-lg shadow-sm transition-shadow hover:shadow-md", "bg-white dark:bg-gray-800", "border-gray-200 dark:border-gray-700"), children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center mb-1", children: [icon, (0, jsx_runtime_1.jsx)("h4", { className: "text-sm font-semibold text-gray-800 dark:text-gray-100", children: item.title })] }), (0, jsx_runtime_1.jsx)("p", { className: "text-xs text-gray-600 dark:text-gray-400 pl-6 mb-2", children: item.details }), item.link && ((0, jsx_runtime_1.jsx)("div", { className: "pl-6 mt-2", children: (0, jsx_runtime_1.jsxs)("a", { href: item.link, target: "_blank", rel: "noopener noreferrer", className: (0, utils_1.cn)(buttonVariants({ variant: 'outline', size: 'sm' }), "h-8 text-xs"), children: [buttonText, " ", (0, jsx_runtime_1.jsx)(icons_1.IconArrowRight, { className: "ml-1 h-3 w-3" })] }) }))] }));
};
const DailyBriefingDisplay = ({ briefing }) => {
    if (!briefing) {
        return (0, jsx_runtime_1.jsx)("div", { className: "p-3 text-sm text-gray-600 dark:text-gray-400 font-sans", children: "No briefing data available." });
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: (0, utils_1.cn)("p-4 my-2 rounded-lg shadow font-sans", "bg-gray-50 dark:bg-gray-800/50", "border border-gray-200 dark:border-gray-700"), children: [briefing.overall_summary_message && ((0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-800 dark:text-gray-200 mb-4 whitespace-pre-wrap", children: briefing.overall_summary_message })), (0, jsx_runtime_1.jsx)("div", { className: "max-h-96 overflow-y-auto custom-scrollbar pr-2", children: briefing.priority_items.length > 0 ? (briefing.priority_items.map((item, index) => ((0, jsx_runtime_1.jsx)(BriefingItemCard, { item: item }, item.source_id || `item-${index}`)))) : ((0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: "You have no priority items for this day." })) }), briefing.errors_encountered && briefing.errors_encountered.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "mt-4 p-3 rounded-lg bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-700/50", children: [(0, jsx_runtime_1.jsx)("h4", { className: "text-sm font-semibold mb-1 text-red-800 dark:text-red-200", children: "Data Retrieval Issues" }), (0, jsx_runtime_1.jsx)("ul", { className: "list-disc list-inside pl-2 space-y-1", children: briefing.errors_encountered.map((error, index) => ((0, jsx_runtime_1.jsxs)("li", { className: "text-xs text-red-700 dark:text-red-300", children: [(0, jsx_runtime_1.jsxs)("span", { className: "font-medium", children: [error.source_area, ":"] }), " ", error.message] }, index))) })] }))] }));
};
exports.default = DailyBriefingDisplay;
//# sourceMappingURL=data:application/json;base64,