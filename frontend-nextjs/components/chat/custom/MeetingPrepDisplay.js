"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const utils_1 = require("@lib/Chat/utils");
const ItemCard = ({ children, className }) => ((0, jsx_runtime_1.jsx)("div", { className: (0, utils_1.cn)("p-3 mb-2 border rounded-lg shadow-sm transition-shadow hover:shadow-md", "bg-white dark:bg-gray-800", "border-gray-200 dark:border-gray-600", className), children: children }));
const ItemLink = ({ href, children, className }) => ((0, jsx_runtime_1.jsx)("a", { href: href, target: "_blank", rel: "noopener noreferrer", className: (0, utils_1.cn)("text-xs hover:underline focus:outline-none focus:ring-1 focus:ring-sky-500 rounded", className), children: children }));
const GmailResultItem = ({ item }) => ((0, jsx_runtime_1.jsxs)(ItemCard, { children: [(0, jsx_runtime_1.jsx)("p", { className: "text-sm font-semibold text-sky-700 dark:text-sky-400", children: item.subject || 'No Subject' }), (0, jsx_runtime_1.jsxs)("p", { className: "text-xs text-gray-600 dark:text-gray-400", children: ["From: ", item.from || 'N/A', " | Date: ", item.date ? new Date(item.date).toLocaleDateString() : 'N/A'] }), (0, jsx_runtime_1.jsx)("p", { className: "text-xs text-gray-700 dark:text-gray-300 mt-1 truncate", children: item.snippet || 'No snippet' }), item.link && (0, jsx_runtime_1.jsx)(ItemLink, { href: item.link, className: "text-sky-600 dark:text-sky-500", children: "View Email" })] }));
const SlackResultItem = ({ item }) => ((0, jsx_runtime_1.jsxs)(ItemCard, { children: [(0, jsx_runtime_1.jsx)("p", { className: "text-sm font-semibold text-purple-600 dark:text-purple-400", children: "Slack Message" }), (0, jsx_runtime_1.jsxs)("p", { className: "text-xs text-gray-600 dark:text-gray-400", children: ["Channel: ", item.channel?.name || item.channel?.id || 'N/A', " | User: ", item.user?.name || item.user?.id || 'N/A'] }), (0, jsx_runtime_1.jsx)("p", { className: "text-xs text-gray-700 dark:text-gray-300 mt-1 whitespace-pre-wrap", children: item.text || 'No text' }), item.permalink && (0, jsx_runtime_1.jsx)(ItemLink, { href: item.permalink, className: "text-purple-500 dark:text-purple-400", children: "View Message" })] }));
const NotionResultItem = ({ item }) => ((0, jsx_runtime_1.jsxs)(ItemCard, { children: [(0, jsx_runtime_1.jsx)("p", { className: "text-sm font-semibold text-emerald-600 dark:text-emerald-400", children: item.title || 'Untitled Page' }), (0, jsx_runtime_1.jsxs)("p", { className: "text-xs text-gray-600 dark:text-gray-400", children: ["Last Edited: ", item.last_edited_time ? new Date(item.last_edited_time).toLocaleDateString() : 'N/A'] }), item.preview_text && (0, jsx_runtime_1.jsx)("p", { className: "text-xs text-gray-700 dark:text-gray-300 mt-1 truncate", children: item.preview_text }), item.url && (0, jsx_runtime_1.jsx)(ItemLink, { href: item.url, className: "text-emerald-500 dark:text-emerald-400", children: "View Page" })] }));
const RelatedCalendarEventItem = ({ item }) => ((0, jsx_runtime_1.jsxs)(ItemCard, { children: [(0, jsx_runtime_1.jsx)("p", { className: "text-sm font-semibold text-amber-600 dark:text-amber-400", children: item.summary || 'Untitled Event' }), (0, jsx_runtime_1.jsxs)("p", { className: "text-xs text-gray-600 dark:text-gray-400", children: ["Starts: ", item.start ? new Date(item.start).toLocaleString() : 'N/A'] }), (0, jsx_runtime_1.jsxs)("p", { className: "text-xs text-gray-600 dark:text-gray-400", children: ["Ends: ", item.end ? new Date(item.end).toLocaleString() : 'N/A'] }), item.htmlLink && (0, jsx_runtime_1.jsx)(ItemLink, { href: item.htmlLink, className: "text-amber-500 dark:text-amber-400", children: "View Event" })] }));
const Section = ({ title, children, className }) => ((0, jsx_runtime_1.jsxs)("div", { className: (0, utils_1.cn)("mb-4 p-3 rounded-lg", className), children: [(0, jsx_runtime_1.jsx)("h3", { className: "text-base font-semibold mb-2 text-gray-700 dark:text-gray-200", children: title }), children] }));
const MeetingPrepDisplay = ({ briefing }) => {
    if (!briefing) {
        return (0, jsx_runtime_1.jsx)("div", { className: "p-3 text-sm text-gray-600 dark:text-gray-400 font-sans", children: "No meeting preparation data available." });
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: (0, utils_1.cn)("p-4 my-2 rounded-lg shadow font-sans", "bg-gray-50 dark:bg-gray-800/50", // Slightly more transparent dark bg
        "border border-gray-200 dark:border-gray-700"), children: [(0, jsx_runtime_1.jsxs)("h2", { className: "text-lg font-semibold text-gray-800 dark:text-gray-100 mb-3", children: ["Meeting Prep: ", briefing.meeting_reference_identified || "General Briefing"] }), briefing.identified_calendar_event && ((0, jsx_runtime_1.jsxs)(Section, { title: "Identified Event", className: "bg-sky-50 dark:bg-sky-900/30 border border-sky-200 dark:border-sky-700/50", children: [(0, jsx_runtime_1.jsx)("p", { className: "text-sm text-sky-800 dark:text-sky-200", children: briefing.identified_calendar_event.summary }), (0, jsx_runtime_1.jsxs)("p", { className: "text-xs text-sky-600 dark:text-sky-400", children: [new Date(briefing.identified_calendar_event.start || '').toLocaleString(), " - ", new Date(briefing.identified_calendar_event.end || '').toLocaleString()] })] })), briefing.overall_summary_notes && ((0, jsx_runtime_1.jsx)(Section, { title: "Overall Summary", className: "bg-emerald-50 dark:bg-emerald-900/30 border border-emerald-200 dark:border-emerald-700/50", children: (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-emerald-800 dark:text-emerald-200 whitespace-pre-wrap", children: briefing.overall_summary_notes }) })), briefing.results_by_source && briefing.results_by_source.length > 0 && ((0, jsx_runtime_1.jsx)(Section, { title: "Information Found", className: "bg-slate-50 dark:bg-slate-800/30 border border-slate-200 dark:border-slate-700/50", children: briefing.results_by_source.map((sourceEntry, index) => ((0, jsx_runtime_1.jsxs)("div", { className: "mb-4 last:mb-0", children: [(0, jsx_runtime_1.jsxs)("h4", { className: "text-sm font-semibold text-gray-600 dark:text-gray-300 mb-1", children: ["From ", sourceEntry.source, " (", sourceEntry.count, " item(s))"] }), sourceEntry.error_message && ((0, jsx_runtime_1.jsxs)("p", { className: "text-xs text-red-600 dark:text-red-400 py-1 px-2 bg-red-50 dark:bg-red-900/50 border border-red-200 dark:border-red-700/50 rounded-md", children: ["Error: ", sourceEntry.error_message] })), (0, jsx_runtime_1.jsx)("div", { className: "mt-1 max-h-72 overflow-y-auto pr-2 custom-scrollbar space-y-2", children: sourceEntry.results.map((item, itemIndex) => {
                                const key = `${sourceEntry.source}-${itemIndex}`;
                                switch (sourceEntry.source) {
                                    case 'gmail':
                                        return (0, jsx_runtime_1.jsx)(GmailResultItem, { item: item }, key);
                                    case 'slack':
                                        return (0, jsx_runtime_1.jsx)(SlackResultItem, { item: item }, key);
                                    case 'notion':
                                        return (0, jsx_runtime_1.jsx)(NotionResultItem, { item: item }, key);
                                    case 'calendar_events':
                                        return (0, jsx_runtime_1.jsx)(RelatedCalendarEventItem, { item: item }, key);
                                    default:
                                        return (0, jsx_runtime_1.jsx)("p", { className: "text-xs text-gray-500 dark:text-gray-400", children: "Unsupported item type" }, key);
                                }
                            }) })] }, index))) })), briefing.errors_encountered && briefing.errors_encountered.length > 0 && ((0, jsx_runtime_1.jsx)(Section, { title: "Errors Encountered During Prep", className: "bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-700/50", children: (0, jsx_runtime_1.jsx)("ul", { className: "list-disc list-inside pl-2 space-y-1", children: briefing.errors_encountered.map((error, index) => ((0, jsx_runtime_1.jsxs)("li", { className: "text-xs text-red-700 dark:text-red-300", children: [(0, jsx_runtime_1.jsxs)("span", { className: "font-medium", children: [error.source_attempted || 'Overall', ":"] }), " ", error.message, error.details && (0, jsx_runtime_1.jsxs)("span", { className: "block text-xxs text-red-500 dark:text-red-400 truncate", children: ["Details: ", error.details] })] }, index))) }) }))] }));
};
exports.default = MeetingPrepDisplay;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVldGluZ1ByZXBEaXNwbGF5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiTWVldGluZ1ByZXBEaXNwbGF5LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFTQSwyQ0FBcUM7QUFFckMsTUFBTSxRQUFRLEdBQWdFLENBQUMsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQ3ZHLGdDQUFLLFNBQVMsRUFBRSxJQUFBLFVBQUUsRUFDZCx3RUFBd0UsRUFDeEUsMkJBQTJCLEVBQzNCLHNDQUFzQyxFQUN0QyxTQUFTLENBQ1osWUFDSSxRQUFRLEdBQ1AsQ0FDVCxDQUFDO0FBRUYsTUFBTSxRQUFRLEdBQThFLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUMzSCw4QkFBRyxJQUFJLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBQyxRQUFRLEVBQUMsR0FBRyxFQUFDLHFCQUFxQixFQUNyRCxTQUFTLEVBQUUsSUFBQSxVQUFFLEVBQUMsb0ZBQW9GLEVBQUUsU0FBUyxDQUFDLFlBQzVHLFFBQVEsR0FDVCxDQUNQLENBQUM7QUFFRixNQUFNLGVBQWUsR0FBNEMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUMzRSx3QkFBQyxRQUFRLGVBQ0wsOEJBQUcsU0FBUyxFQUFDLHNEQUFzRCxZQUFFLElBQUksQ0FBQyxPQUFPLElBQUksWUFBWSxHQUFLLEVBQ3RHLCtCQUFHLFNBQVMsRUFBQywwQ0FBMEMsdUJBQzVDLElBQUksQ0FBQyxJQUFJLElBQUksS0FBSyxlQUFXLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQ2hHLEVBQ0osOEJBQUcsU0FBUyxFQUFDLHdEQUF3RCxZQUFFLElBQUksQ0FBQyxPQUFPLElBQUksWUFBWSxHQUFLLEVBQ3ZHLElBQUksQ0FBQyxJQUFJLElBQUksdUJBQUMsUUFBUSxJQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBQyxnQ0FBZ0MsMkJBQXNCLElBQ2xHLENBQ2QsQ0FBQztBQUVGLE1BQU0sZUFBZSxHQUE0QyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQzNFLHdCQUFDLFFBQVEsZUFDTCw4QkFBRyxTQUFTLEVBQUMsNERBQTRELDhCQUFrQixFQUMzRiwrQkFBRyxTQUFTLEVBQUMsMENBQTBDLDBCQUN6QyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsSUFBSSxLQUFLLGVBQVcsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksS0FBSyxJQUM3RyxFQUNKLDhCQUFHLFNBQVMsRUFBQyxtRUFBbUUsWUFBRSxJQUFJLENBQUMsSUFBSSxJQUFJLFNBQVMsR0FBSyxFQUM1RyxJQUFJLENBQUMsU0FBUyxJQUFJLHVCQUFDLFFBQVEsSUFBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUMsc0NBQXNDLDZCQUF3QixJQUNwSCxDQUNkLENBQUM7QUFFRixNQUFNLGdCQUFnQixHQUEwQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQzFFLHdCQUFDLFFBQVEsZUFDTCw4QkFBRyxTQUFTLEVBQUMsOERBQThELFlBQUUsSUFBSSxDQUFDLEtBQUssSUFBSSxlQUFlLEdBQUssRUFDL0csK0JBQUcsU0FBUyxFQUFDLDBDQUEwQyw4QkFDckMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQ2xHLEVBQ0gsSUFBSSxDQUFDLFlBQVksSUFBSSw4QkFBRyxTQUFTLEVBQUMsd0RBQXdELFlBQUUsSUFBSSxDQUFDLFlBQVksR0FBSyxFQUNsSCxJQUFJLENBQUMsR0FBRyxJQUFJLHVCQUFDLFFBQVEsSUFBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUMsd0NBQXdDLDBCQUFxQixJQUN2RyxDQUNkLENBQUM7QUFFRixNQUFNLHdCQUF3QixHQUE2QyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQ3JGLHdCQUFDLFFBQVEsZUFDTCw4QkFBRyxTQUFTLEVBQUMsMERBQTBELFlBQUUsSUFBSSxDQUFDLE9BQU8sSUFBSSxnQkFBZ0IsR0FBSyxFQUM5RywrQkFBRyxTQUFTLEVBQUMsMENBQTBDLHlCQUMxQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFDbkUsRUFDSiwrQkFBRyxTQUFTLEVBQUMsMENBQTBDLHVCQUM1QyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFDN0QsRUFDSCxJQUFJLENBQUMsUUFBUSxJQUFJLHVCQUFDLFFBQVEsSUFBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUMsb0NBQW9DLDJCQUFzQixJQUM5RyxDQUNkLENBQUM7QUFNRixNQUFNLE9BQU8sR0FBK0UsQ0FBQyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQzVILGlDQUFLLFNBQVMsRUFBRSxJQUFBLFVBQUUsRUFBQyxxQkFBcUIsRUFBRSxTQUFTLENBQUMsYUFDaEQsK0JBQUksU0FBUyxFQUFDLCtEQUErRCxZQUFFLEtBQUssR0FBTSxFQUN6RixRQUFRLElBQ1AsQ0FDVCxDQUFDO0FBR0YsTUFBTSxrQkFBa0IsR0FBc0MsQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUU7SUFDM0UsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ1osT0FBTyxnQ0FBSyxTQUFTLEVBQUMsd0RBQXdELHVEQUE2QyxDQUFDO0lBQ2hJLENBQUM7SUFFRCxPQUFPLENBQ0gsaUNBQUssU0FBUyxFQUFFLElBQUEsVUFBRSxFQUNkLHNDQUFzQyxFQUN0QyxnQ0FBZ0MsRUFBRSxvQ0FBb0M7UUFDdEUsNkNBQTZDLENBQ2hELGFBQ0csZ0NBQUksU0FBUyxFQUFDLDZEQUE2RCwrQkFDeEQsUUFBUSxDQUFDLDRCQUE0QixJQUFJLGtCQUFrQixJQUN6RSxFQUVKLFFBQVEsQ0FBQyx5QkFBeUIsSUFBSSxDQUNuQyx3QkFBQyxPQUFPLElBQUMsS0FBSyxFQUFDLGtCQUFrQixFQUFDLFNBQVMsRUFBQywyRUFBMkUsYUFDbkgsOEJBQUcsU0FBUyxFQUFDLHdDQUF3QyxZQUFFLFFBQVEsQ0FBQyx5QkFBeUIsQ0FBQyxPQUFPLEdBQUssRUFDdEcsK0JBQUcsU0FBUyxFQUFDLHdDQUF3QyxhQUNoRCxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMseUJBQXlCLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDLGNBQWMsRUFBRSxTQUFLLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLENBQUMsY0FBYyxFQUFFLElBQ3RKLElBQ0UsQ0FDYixFQUVBLFFBQVEsQ0FBQyxxQkFBcUIsSUFBSSxDQUMvQix1QkFBQyxPQUFPLElBQUMsS0FBSyxFQUFDLGlCQUFpQixFQUFDLFNBQVMsRUFBQywyRkFBMkYsWUFDbEksOEJBQUcsU0FBUyxFQUFDLG9FQUFvRSxZQUFFLFFBQVEsQ0FBQyxxQkFBcUIsR0FBSyxHQUNoSCxDQUNiLEVBRUEsUUFBUSxDQUFDLGlCQUFpQixJQUFJLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQ3BFLHVCQUFDLE9BQU8sSUFBQyxLQUFLLEVBQUMsbUJBQW1CLEVBQUMsU0FBUyxFQUFDLG1GQUFtRixZQUMzSCxRQUFRLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUMsV0FBVyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FDcEQsaUNBQWlCLFNBQVMsRUFBQyxnQkFBZ0IsYUFDdkMsZ0NBQUksU0FBUyxFQUFDLDZEQUE2RCxzQkFDakUsV0FBVyxDQUFDLE1BQU0sUUFBSSxXQUFXLENBQUMsS0FBSyxpQkFDNUMsRUFDSixXQUFXLENBQUMsYUFBYSxJQUFJLENBQzFCLCtCQUFHLFNBQVMsRUFBQyx1SUFBdUksd0JBQVMsV0FBVyxDQUFDLGFBQWEsSUFBSyxDQUM5TCxFQUNELGdDQUFLLFNBQVMsRUFBQywrREFBK0QsWUFDekUsV0FBVyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLEVBQUU7Z0NBQ3pDLE1BQU0sR0FBRyxHQUFHLEdBQUcsV0FBVyxDQUFDLE1BQU0sSUFBSSxTQUFTLEVBQUUsQ0FBQztnQ0FDakQsUUFBUSxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUM7b0NBQ3pCLEtBQUssT0FBTzt3Q0FDUixPQUFPLHVCQUFDLGVBQWUsSUFBVyxJQUFJLEVBQUUsSUFBMkIsSUFBdEMsR0FBRyxDQUF1QyxDQUFDO29DQUM1RSxLQUFLLE9BQU87d0NBQ1IsT0FBTyx1QkFBQyxlQUFlLElBQVcsSUFBSSxFQUFFLElBQTJCLElBQXRDLEdBQUcsQ0FBdUMsQ0FBQztvQ0FDNUUsS0FBSyxRQUFRO3dDQUNULE9BQU8sdUJBQUMsZ0JBQWdCLElBQVcsSUFBSSxFQUFFLElBQXlCLElBQXBDLEdBQUcsQ0FBcUMsQ0FBQztvQ0FDM0UsS0FBSyxpQkFBaUI7d0NBQ2xCLE9BQU8sdUJBQUMsd0JBQXdCLElBQVcsSUFBSSxFQUFFLElBQTRCLElBQXZDLEdBQUcsQ0FBd0MsQ0FBQztvQ0FDdEY7d0NBQ0ksT0FBTyw4QkFBYSxTQUFTLEVBQUMsMENBQTBDLHVDQUF6RCxHQUFHLENBQWdGLENBQUM7Z0NBQzNHLENBQUM7NEJBQ0wsQ0FBQyxDQUFDLEdBQ0EsS0F2QkEsS0FBSyxDQXdCVCxDQUNULENBQUMsR0FDSSxDQUNiLEVBRUEsUUFBUSxDQUFDLGtCQUFrQixJQUFJLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQ3JFLHVCQUFDLE9BQU8sSUFBQyxLQUFLLEVBQUMsZ0NBQWdDLEVBQUMsU0FBUyxFQUFDLDJFQUEyRSxZQUNsSSwrQkFBSSxTQUFTLEVBQUMsc0NBQXNDLFlBQy9DLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUMvQyxnQ0FBZ0IsU0FBUyxFQUFDLHdDQUF3QyxhQUM5RCxrQ0FBTSxTQUFTLEVBQUMsYUFBYSxhQUFFLEtBQUssQ0FBQyxnQkFBZ0IsSUFBSSxTQUFTLFNBQVMsT0FBRSxLQUFLLENBQUMsT0FBTyxFQUN6RixLQUFLLENBQUMsT0FBTyxJQUFJLGtDQUFNLFNBQVMsRUFBQyx3REFBd0QsMEJBQVcsS0FBSyxDQUFDLE9BQU8sSUFBUSxLQUZySCxLQUFLLENBR1QsQ0FDUixDQUFDLEdBQ0QsR0FDQyxDQUNiLElBQ0MsQ0FDVCxDQUFDO0FBQ04sQ0FBQyxDQUFDO0FBRUYsa0JBQWUsa0JBQWtCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgICBBZ2dyZWdhdGVkUHJlcFJlc3VsdHMsXG4gICAgUHJlcFJlc3VsdFNvdXJjZUVudHJ5LFxuICAgIEdtYWlsTWVzc2FnZVNuaXBwZXQsXG4gICAgU2xhY2tNZXNzYWdlU25pcHBldCxcbiAgICBOb3Rpb25QYWdlU3VtbWFyeSxcbiAgICBDYWxlbmRhckV2ZW50U3VtbWFyeVxufSBmcm9tICdAbGliL2RhdGFUeXBlcy9NZXNzYWdpbmcvTWVzc2FnaW5nVHlwZXMnO1xuaW1wb3J0IHsgY24gfSBmcm9tICdAbGliL0NoYXQvdXRpbHMnO1xuXG5jb25zdCBJdGVtQ2FyZDogUmVhY3QuRkM8eyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlOyBjbGFzc05hbWU/OiBzdHJpbmcgfT4gPSAoeyBjaGlsZHJlbiwgY2xhc3NOYW1lIH0pID0+IChcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y24oXG4gICAgICAgIFwicC0zIG1iLTIgYm9yZGVyIHJvdW5kZWQtbGcgc2hhZG93LXNtIHRyYW5zaXRpb24tc2hhZG93IGhvdmVyOnNoYWRvdy1tZFwiLFxuICAgICAgICBcImJnLXdoaXRlIGRhcms6YmctZ3JheS04MDBcIixcbiAgICAgICAgXCJib3JkZXItZ3JheS0yMDAgZGFyazpib3JkZXItZ3JheS02MDBcIixcbiAgICAgICAgY2xhc3NOYW1lXG4gICAgKX0+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICA8L2Rpdj5cbik7XG5cbmNvbnN0IEl0ZW1MaW5rOiBSZWFjdC5GQzx7IGhyZWY6IHN0cmluZzsgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTsgY2xhc3NOYW1lPzogc3RyaW5nIH0+ID0gKHsgaHJlZiwgY2hpbGRyZW4sIGNsYXNzTmFtZSB9KSA9PiAoXG4gICAgPGEgaHJlZj17aHJlZn0gdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgY2xhc3NOYW1lPXtjbihcInRleHQteHMgaG92ZXI6dW5kZXJsaW5lIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpyaW5nLTEgZm9jdXM6cmluZy1za3ktNTAwIHJvdW5kZWRcIiwgY2xhc3NOYW1lKX0+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICA8L2E+XG4pO1xuXG5jb25zdCBHbWFpbFJlc3VsdEl0ZW06IFJlYWN0LkZDPHsgaXRlbTogR21haWxNZXNzYWdlU25pcHBldCB9PiA9ICh7IGl0ZW0gfSkgPT4gKFxuICAgIDxJdGVtQ2FyZD5cbiAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSBmb250LXNlbWlib2xkIHRleHQtc2t5LTcwMCBkYXJrOnRleHQtc2t5LTQwMFwiPntpdGVtLnN1YmplY3QgfHwgJ05vIFN1YmplY3QnfTwvcD5cbiAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC14cyB0ZXh0LWdyYXktNjAwIGRhcms6dGV4dC1ncmF5LTQwMFwiPlxuICAgICAgICAgICAgRnJvbToge2l0ZW0uZnJvbSB8fCAnTi9BJ30gfCBEYXRlOiB7aXRlbS5kYXRlID8gbmV3IERhdGUoaXRlbS5kYXRlKS50b0xvY2FsZURhdGVTdHJpbmcoKSA6ICdOL0EnfVxuICAgICAgICA8L3A+XG4gICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQteHMgdGV4dC1ncmF5LTcwMCBkYXJrOnRleHQtZ3JheS0zMDAgbXQtMSB0cnVuY2F0ZVwiPntpdGVtLnNuaXBwZXQgfHwgJ05vIHNuaXBwZXQnfTwvcD5cbiAgICAgICAge2l0ZW0ubGluayAmJiA8SXRlbUxpbmsgaHJlZj17aXRlbS5saW5rfSBjbGFzc05hbWU9XCJ0ZXh0LXNreS02MDAgZGFyazp0ZXh0LXNreS01MDBcIj5WaWV3IEVtYWlsPC9JdGVtTGluaz59XG4gICAgPC9JdGVtQ2FyZD5cbik7XG5cbmNvbnN0IFNsYWNrUmVzdWx0SXRlbTogUmVhY3QuRkM8eyBpdGVtOiBTbGFja01lc3NhZ2VTbmlwcGV0IH0+ID0gKHsgaXRlbSB9KSA9PiAoXG4gICAgPEl0ZW1DYXJkPlxuICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXNtIGZvbnQtc2VtaWJvbGQgdGV4dC1wdXJwbGUtNjAwIGRhcms6dGV4dC1wdXJwbGUtNDAwXCI+U2xhY2sgTWVzc2FnZTwvcD5cbiAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC14cyB0ZXh0LWdyYXktNjAwIGRhcms6dGV4dC1ncmF5LTQwMFwiPlxuICAgICAgICAgICAgQ2hhbm5lbDoge2l0ZW0uY2hhbm5lbD8ubmFtZSB8fCBpdGVtLmNoYW5uZWw/LmlkIHx8ICdOL0EnfSB8IFVzZXI6IHtpdGVtLnVzZXI/Lm5hbWUgfHwgaXRlbS51c2VyPy5pZCB8fCAnTi9BJ31cbiAgICAgICAgPC9wPlxuICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXhzIHRleHQtZ3JheS03MDAgZGFyazp0ZXh0LWdyYXktMzAwIG10LTEgd2hpdGVzcGFjZS1wcmUtd3JhcFwiPntpdGVtLnRleHQgfHwgJ05vIHRleHQnfTwvcD5cbiAgICAgICAge2l0ZW0ucGVybWFsaW5rICYmIDxJdGVtTGluayBocmVmPXtpdGVtLnBlcm1hbGlua30gY2xhc3NOYW1lPVwidGV4dC1wdXJwbGUtNTAwIGRhcms6dGV4dC1wdXJwbGUtNDAwXCI+VmlldyBNZXNzYWdlPC9JdGVtTGluaz59XG4gICAgPC9JdGVtQ2FyZD5cbik7XG5cbmNvbnN0IE5vdGlvblJlc3VsdEl0ZW06IFJlYWN0LkZDPHsgaXRlbTogTm90aW9uUGFnZVN1bW1hcnkgfT4gPSAoeyBpdGVtIH0pID0+IChcbiAgICA8SXRlbUNhcmQ+XG4gICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtc20gZm9udC1zZW1pYm9sZCB0ZXh0LWVtZXJhbGQtNjAwIGRhcms6dGV4dC1lbWVyYWxkLTQwMFwiPntpdGVtLnRpdGxlIHx8ICdVbnRpdGxlZCBQYWdlJ308L3A+XG4gICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQteHMgdGV4dC1ncmF5LTYwMCBkYXJrOnRleHQtZ3JheS00MDBcIj5cbiAgICAgICAgICAgIExhc3QgRWRpdGVkOiB7aXRlbS5sYXN0X2VkaXRlZF90aW1lID8gbmV3IERhdGUoaXRlbS5sYXN0X2VkaXRlZF90aW1lKS50b0xvY2FsZURhdGVTdHJpbmcoKSA6ICdOL0EnfVxuICAgICAgICA8L3A+XG4gICAgICAgIHtpdGVtLnByZXZpZXdfdGV4dCAmJiA8cCBjbGFzc05hbWU9XCJ0ZXh0LXhzIHRleHQtZ3JheS03MDAgZGFyazp0ZXh0LWdyYXktMzAwIG10LTEgdHJ1bmNhdGVcIj57aXRlbS5wcmV2aWV3X3RleHR9PC9wPn1cbiAgICAgICAge2l0ZW0udXJsICYmIDxJdGVtTGluayBocmVmPXtpdGVtLnVybH0gY2xhc3NOYW1lPVwidGV4dC1lbWVyYWxkLTUwMCBkYXJrOnRleHQtZW1lcmFsZC00MDBcIj5WaWV3IFBhZ2U8L0l0ZW1MaW5rPn1cbiAgICA8L0l0ZW1DYXJkPlxuKTtcblxuY29uc3QgUmVsYXRlZENhbGVuZGFyRXZlbnRJdGVtOiBSZWFjdC5GQzx7IGl0ZW06IENhbGVuZGFyRXZlbnRTdW1tYXJ5IH0+ID0gKHsgaXRlbSB9KSA9PiAoXG4gICAgPEl0ZW1DYXJkPlxuICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXNtIGZvbnQtc2VtaWJvbGQgdGV4dC1hbWJlci02MDAgZGFyazp0ZXh0LWFtYmVyLTQwMFwiPntpdGVtLnN1bW1hcnkgfHwgJ1VudGl0bGVkIEV2ZW50J308L3A+XG4gICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQteHMgdGV4dC1ncmF5LTYwMCBkYXJrOnRleHQtZ3JheS00MDBcIj5cbiAgICAgICAgICAgIFN0YXJ0czoge2l0ZW0uc3RhcnQgPyBuZXcgRGF0ZShpdGVtLnN0YXJ0KS50b0xvY2FsZVN0cmluZygpIDogJ04vQSd9XG4gICAgICAgIDwvcD5cbiAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC14cyB0ZXh0LWdyYXktNjAwIGRhcms6dGV4dC1ncmF5LTQwMFwiPlxuICAgICAgICAgICAgRW5kczoge2l0ZW0uZW5kID8gbmV3IERhdGUoaXRlbS5lbmQpLnRvTG9jYWxlU3RyaW5nKCkgOiAnTi9BJ31cbiAgICAgICAgPC9wPlxuICAgICAgICB7aXRlbS5odG1sTGluayAmJiA8SXRlbUxpbmsgaHJlZj17aXRlbS5odG1sTGlua30gY2xhc3NOYW1lPVwidGV4dC1hbWJlci01MDAgZGFyazp0ZXh0LWFtYmVyLTQwMFwiPlZpZXcgRXZlbnQ8L0l0ZW1MaW5rPn1cbiAgICA8L0l0ZW1DYXJkPlxuKTtcblxuaW50ZXJmYWNlIE1lZXRpbmdQcmVwRGlzcGxheVByb3BzIHtcbiAgICBicmllZmluZzogQWdncmVnYXRlZFByZXBSZXN1bHRzO1xufVxuXG5jb25zdCBTZWN0aW9uOiBSZWFjdC5GQzx7IHRpdGxlOiBzdHJpbmc7IGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGU7IGNsYXNzTmFtZT86IHN0cmluZyB9PiA9ICh7IHRpdGxlLCBjaGlsZHJlbiwgY2xhc3NOYW1lIH0pID0+IChcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y24oXCJtYi00IHAtMyByb3VuZGVkLWxnXCIsIGNsYXNzTmFtZSl9PlxuICAgICAgICA8aDMgY2xhc3NOYW1lPVwidGV4dC1iYXNlIGZvbnQtc2VtaWJvbGQgbWItMiB0ZXh0LWdyYXktNzAwIGRhcms6dGV4dC1ncmF5LTIwMFwiPnt0aXRsZX08L2gzPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgPC9kaXY+XG4pO1xuXG5cbmNvbnN0IE1lZXRpbmdQcmVwRGlzcGxheTogUmVhY3QuRkM8TWVldGluZ1ByZXBEaXNwbGF5UHJvcHM+ID0gKHsgYnJpZWZpbmcgfSkgPT4ge1xuICAgIGlmICghYnJpZWZpbmcpIHtcbiAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwicC0zIHRleHQtc20gdGV4dC1ncmF5LTYwMCBkYXJrOnRleHQtZ3JheS00MDAgZm9udC1zYW5zXCI+Tm8gbWVldGluZyBwcmVwYXJhdGlvbiBkYXRhIGF2YWlsYWJsZS48L2Rpdj47XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NuKFxuICAgICAgICAgICAgXCJwLTQgbXktMiByb3VuZGVkLWxnIHNoYWRvdyBmb250LXNhbnNcIixcbiAgICAgICAgICAgIFwiYmctZ3JheS01MCBkYXJrOmJnLWdyYXktODAwLzUwXCIsIC8vIFNsaWdodGx5IG1vcmUgdHJhbnNwYXJlbnQgZGFyayBiZ1xuICAgICAgICAgICAgXCJib3JkZXIgYm9yZGVyLWdyYXktMjAwIGRhcms6Ym9yZGVyLWdyYXktNzAwXCJcbiAgICAgICAgKX0+XG4gICAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwidGV4dC1sZyBmb250LXNlbWlib2xkIHRleHQtZ3JheS04MDAgZGFyazp0ZXh0LWdyYXktMTAwIG1iLTNcIj5cbiAgICAgICAgICAgICAgICBNZWV0aW5nIFByZXA6IHticmllZmluZy5tZWV0aW5nX3JlZmVyZW5jZV9pZGVudGlmaWVkIHx8IFwiR2VuZXJhbCBCcmllZmluZ1wifVxuICAgICAgICAgICAgPC9oMj5cblxuICAgICAgICAgICAge2JyaWVmaW5nLmlkZW50aWZpZWRfY2FsZW5kYXJfZXZlbnQgJiYgKFxuICAgICAgICAgICAgICAgIDxTZWN0aW9uIHRpdGxlPVwiSWRlbnRpZmllZCBFdmVudFwiIGNsYXNzTmFtZT1cImJnLXNreS01MCBkYXJrOmJnLXNreS05MDAvMzAgYm9yZGVyIGJvcmRlci1za3ktMjAwIGRhcms6Ym9yZGVyLXNreS03MDAvNTBcIj5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSB0ZXh0LXNreS04MDAgZGFyazp0ZXh0LXNreS0yMDBcIj57YnJpZWZpbmcuaWRlbnRpZmllZF9jYWxlbmRhcl9ldmVudC5zdW1tYXJ5fTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC14cyB0ZXh0LXNreS02MDAgZGFyazp0ZXh0LXNreS00MDBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtuZXcgRGF0ZShicmllZmluZy5pZGVudGlmaWVkX2NhbGVuZGFyX2V2ZW50LnN0YXJ0IHx8ICcnKS50b0xvY2FsZVN0cmluZygpfSAtIHtuZXcgRGF0ZShicmllZmluZy5pZGVudGlmaWVkX2NhbGVuZGFyX2V2ZW50LmVuZCB8fCAnJykudG9Mb2NhbGVTdHJpbmcoKX1cbiAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgIDwvU2VjdGlvbj5cbiAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgIHticmllZmluZy5vdmVyYWxsX3N1bW1hcnlfbm90ZXMgJiYgKFxuICAgICAgICAgICAgICAgIDxTZWN0aW9uIHRpdGxlPVwiT3ZlcmFsbCBTdW1tYXJ5XCIgY2xhc3NOYW1lPVwiYmctZW1lcmFsZC01MCBkYXJrOmJnLWVtZXJhbGQtOTAwLzMwIGJvcmRlciBib3JkZXItZW1lcmFsZC0yMDAgZGFyazpib3JkZXItZW1lcmFsZC03MDAvNTBcIj5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSB0ZXh0LWVtZXJhbGQtODAwIGRhcms6dGV4dC1lbWVyYWxkLTIwMCB3aGl0ZXNwYWNlLXByZS13cmFwXCI+e2JyaWVmaW5nLm92ZXJhbGxfc3VtbWFyeV9ub3Rlc308L3A+XG4gICAgICAgICAgICAgICAgPC9TZWN0aW9uPlxuICAgICAgICAgICAgKX1cblxuICAgICAgICAgICAge2JyaWVmaW5nLnJlc3VsdHNfYnlfc291cmNlICYmIGJyaWVmaW5nLnJlc3VsdHNfYnlfc291cmNlLmxlbmd0aCA+IDAgJiYgKFxuICAgICAgICAgICAgICAgIDxTZWN0aW9uIHRpdGxlPVwiSW5mb3JtYXRpb24gRm91bmRcIiBjbGFzc05hbWU9XCJiZy1zbGF0ZS01MCBkYXJrOmJnLXNsYXRlLTgwMC8zMCBib3JkZXIgYm9yZGVyLXNsYXRlLTIwMCBkYXJrOmJvcmRlci1zbGF0ZS03MDAvNTBcIj5cbiAgICAgICAgICAgICAgICAgICAge2JyaWVmaW5nLnJlc3VsdHNfYnlfc291cmNlLm1hcCgoc291cmNlRW50cnksIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGtleT17aW5kZXh9IGNsYXNzTmFtZT1cIm1iLTQgbGFzdDptYi0wXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzTmFtZT1cInRleHQtc20gZm9udC1zZW1pYm9sZCB0ZXh0LWdyYXktNjAwIGRhcms6dGV4dC1ncmF5LTMwMCBtYi0xXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZyb20ge3NvdXJjZUVudHJ5LnNvdXJjZX0gKHtzb3VyY2VFbnRyeS5jb3VudH0gaXRlbShzKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzb3VyY2VFbnRyeS5lcnJvcl9tZXNzYWdlICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC14cyB0ZXh0LXJlZC02MDAgZGFyazp0ZXh0LXJlZC00MDAgcHktMSBweC0yIGJnLXJlZC01MCBkYXJrOmJnLXJlZC05MDAvNTAgYm9yZGVyIGJvcmRlci1yZWQtMjAwIGRhcms6Ym9yZGVyLXJlZC03MDAvNTAgcm91bmRlZC1tZFwiPkVycm9yOiB7c291cmNlRW50cnkuZXJyb3JfbWVzc2FnZX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm10LTEgbWF4LWgtNzIgb3ZlcmZsb3cteS1hdXRvIHByLTIgY3VzdG9tLXNjcm9sbGJhciBzcGFjZS15LTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3NvdXJjZUVudHJ5LnJlc3VsdHMubWFwKChpdGVtLCBpdGVtSW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGAke3NvdXJjZUVudHJ5LnNvdXJjZX0tJHtpdGVtSW5kZXh9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoc291cmNlRW50cnkuc291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZ21haWwnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gPEdtYWlsUmVzdWx0SXRlbSBrZXk9e2tleX0gaXRlbT17aXRlbSBhcyBHbWFpbE1lc3NhZ2VTbmlwcGV0fSAvPjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzbGFjayc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA8U2xhY2tSZXN1bHRJdGVtIGtleT17a2V5fSBpdGVtPXtpdGVtIGFzIFNsYWNrTWVzc2FnZVNuaXBwZXR9IC8+O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ25vdGlvbic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA8Tm90aW9uUmVzdWx0SXRlbSBrZXk9e2tleX0gaXRlbT17aXRlbSBhcyBOb3Rpb25QYWdlU3VtbWFyeX0gLz47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY2FsZW5kYXJfZXZlbnRzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDxSZWxhdGVkQ2FsZW5kYXJFdmVudEl0ZW0ga2V5PXtrZXl9IGl0ZW09e2l0ZW0gYXMgQ2FsZW5kYXJFdmVudFN1bW1hcnl9IC8+O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA8cCBrZXk9e2tleX0gY2xhc3NOYW1lPVwidGV4dC14cyB0ZXh0LWdyYXktNTAwIGRhcms6dGV4dC1ncmF5LTQwMFwiPlVuc3VwcG9ydGVkIGl0ZW0gdHlwZTwvcD47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgIDwvU2VjdGlvbj5cbiAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgIHticmllZmluZy5lcnJvcnNfZW5jb3VudGVyZWQgJiYgYnJpZWZpbmcuZXJyb3JzX2VuY291bnRlcmVkLmxlbmd0aCA+IDAgJiYgKFxuICAgICAgICAgICAgICAgICA8U2VjdGlvbiB0aXRsZT1cIkVycm9ycyBFbmNvdW50ZXJlZCBEdXJpbmcgUHJlcFwiIGNsYXNzTmFtZT1cImJnLXJlZC01MCBkYXJrOmJnLXJlZC05MDAvMzAgYm9yZGVyIGJvcmRlci1yZWQtMjAwIGRhcms6Ym9yZGVyLXJlZC03MDAvNTBcIj5cbiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImxpc3QtZGlzYyBsaXN0LWluc2lkZSBwbC0yIHNwYWNlLXktMVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAge2JyaWVmaW5nLmVycm9yc19lbmNvdW50ZXJlZC5tYXAoKGVycm9yLCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBrZXk9e2luZGV4fSBjbGFzc05hbWU9XCJ0ZXh0LXhzIHRleHQtcmVkLTcwMCBkYXJrOnRleHQtcmVkLTMwMFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJmb250LW1lZGl1bVwiPntlcnJvci5zb3VyY2VfYXR0ZW1wdGVkIHx8ICdPdmVyYWxsJ306PC9zcGFuPiB7ZXJyb3IubWVzc2FnZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2Vycm9yLmRldGFpbHMgJiYgPHNwYW4gY2xhc3NOYW1lPVwiYmxvY2sgdGV4dC14eHMgdGV4dC1yZWQtNTAwIGRhcms6dGV4dC1yZWQtNDAwIHRydW5jYXRlXCI+RGV0YWlsczoge2Vycm9yLmRldGFpbHN9PC9zcGFuPn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgPC9TZWN0aW9uPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1lZXRpbmdQcmVwRGlzcGxheTtcbiJdfQ==