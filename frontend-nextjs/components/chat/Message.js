"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const date_utils_1 = require("@lib/date-utils");
const react_1 = __importStar(require("react"));
const AudioModeContext_1 = require("@lib/contexts/AudioModeContext");
const chat_message_actions_1 = require("./chat-message-actions");
const email_content_copy_1 = require("./email-content-copy");
const utils_1 = require("@lib/Chat/utils"); // Import cn for class utility
// Dynamically import the SearchResultsDisplay component
const SearchResultsDisplay = react_1.default.lazy(() => import('./custom/SearchResultsDisplay'));
const MeetingPrepDisplay = react_1.default.lazy(() => import('./custom/MeetingPrepDisplay'));
const DailyBriefingDisplay = react_1.default.lazy(() => import('./custom/DailyBriefingDisplay'));
const ImageDisplay = react_1.default.lazy(() => import('./custom/ImageDisplay'));
const ChartDisplay = react_1.default.lazy(() => import('./custom/ChartDisplay'));
function Message({ message, isLoading, formData, htmlEmail }) {
    const divRef = (0, react_1.useRef)(null);
    const { isAudioModeEnabled, triggerReplyListen } = (0, AudioModeContext_1.useAudioMode)();
    (0, react_1.useEffect)(() => {
        if (isAudioModeEnabled && message.role === 'assistant' && message.content && !message.audioUrl) {
            const ttsErrorMessages = [
                "Failed to synthesize audio.",
                "Error occurred during audio synthesis.",
                "TTS synthesis succeeded but no audio URL was returned."
            ];
            const isTtsError = ttsErrorMessages.some(errMsg => message.content.includes(errMsg));
            if (isTtsError) {
                console.log("Message.tsx: TTS error detected in Audio Mode, playing error sound for message:", message.content);
                const errorAudio = new Audio('/assets/audio/tts_error.mp3');
                errorAudio.play().catch(e => console.error("Error playing TTS error sound:", e));
            }
        }
    }, [message.content, message.role, message.audioUrl, isAudioModeEnabled]);
    const isUser = message?.role === 'user';
    const bubbleBaseClasses = "group/item relative mb-2 px-4 py-3 max-w-xl lg:max-w-2xl break-words"; // Added break-words
    const userBubbleClasses = "bg-sky-600 text-white dark:bg-sky-500 dark:text-white rounded-2xl rounded-br-none";
    const assistantBubbleClasses = "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-100 rounded-2xl rounded-bl-none";
    const loadingBubbleClasses = "bg-gray-200 dark:bg-gray-600 rounded-2xl";
    return ((0, jsx_runtime_1.jsx)("div", { className: (0, utils_1.cn)("flex w-full px-2 my-3 font-sans", isUser ? "justify-end" : "justify-start"), children: (0, jsx_runtime_1.jsxs)("div", { className: (0, utils_1.cn)("flex flex-col", isUser ? "items-end" : "items-start"), children: [(0, jsx_runtime_1.jsx)("div", { className: (0, utils_1.cn)("text-xs mb-1", isUser ? "text-right mr-1" : "text-left ml-1", "text-gray-600 dark:text-gray-400"), children: isUser ? "You" : "Assistant" }), isLoading && !isUser ? ((0, jsx_runtime_1.jsxs)("div", { className: (0, utils_1.cn)(bubbleBaseClasses, loadingBubbleClasses, "flex items-center justify-center h-16 w-24"), children: [" ", (0, jsx_runtime_1.jsx)("div", { className: "dot-elastic" }), " "] })) : ((0, jsx_runtime_1.jsxs)("div", { className: (0, utils_1.cn)(bubbleBaseClasses, isUser ? userBubbleClasses : assistantBubbleClasses, "text-base" // Ensure base font size for message content
                    ), children: [(0, jsx_runtime_1.jsx)(chat_message_actions_1.ChatMessageActions, { message: message, className: isUser ? "text-white dark:text-white" : "text-gray-700 dark:text-gray-200" }), (0, jsx_runtime_1.jsx)("div", { className: "whitespace-pre-wrap", children: message.content }), " ", message.audioUrl && !isUser && ( // Only show audio for assistant messages if needed
                        (0, jsx_runtime_1.jsx)("audio", { src: message.audioUrl, autoPlay: true, controls: false, style: { display: 'none' }, onEnded: () => {
                                if (isAudioModeEnabled) {
                                    console.log("Message.tsx: Audio ended, requesting listen for reply.");
                                    triggerReplyListen();
                                }
                            }, onError: (e) => console.error('Error playing audio in Message.tsx:', e) }, message.audioUrl))] })), (0, jsx_runtime_1.jsx)("div", { className: (0, utils_1.cn)("text-xs mt-1 opacity-75", isUser ? "text-right mr-1" : "text-left ml-1", "text-gray-500 dark:text-gray-400"), children: (0, jsx_runtime_1.jsx)("time", { children: (0, date_utils_1.dayjs)(message.date).fromNow() }) }), !isUser && !isLoading && (htmlEmail || formData || message.customComponentType) && ((0, jsx_runtime_1.jsxs)("div", { className: (0, utils_1.cn)("mt-2 w-full max-w-xl lg:max-w-2xl", isUser ? "ml-auto" : "mr-auto"), children: [" ", message.customComponentType === 'semantic_search_results' && message.customComponentProps?.results && ((0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)("div", { className: "text-sm text-gray-500 dark:text-gray-400", children: "Loading search results..." }), children: (0, jsx_runtime_1.jsx)(SearchResultsDisplay, { results: message.customComponentProps.results }) })), message.customComponentType === 'meeting_prep_results' && message.customComponentProps?.briefing && ((0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)("div", { className: "text-sm text-gray-500 dark:text-gray-400", children: "Loading meeting preparation..." }), children: (0, jsx_runtime_1.jsx)(MeetingPrepDisplay, { briefing: message.customComponentProps.briefing }) })), message.customComponentType === 'daily_briefing_results' && message.customComponentProps?.briefing && ((0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)("div", { className: "text-sm text-gray-500 dark:text-gray-400", children: "Loading daily briefing..." }), children: (0, jsx_runtime_1.jsx)(DailyBriefingDisplay, { briefing: message.customComponentProps.briefing }) })), message.customComponentType === 'image_display' && message.customComponentProps?.imageUrl && ((0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)("div", { className: "text-sm text-gray-500 dark:text-gray-400", children: "Loading image..." }), children: (0, jsx_runtime_1.jsx)(ImageDisplay, { imageUrl: message.customComponentProps.imageUrl }) })), message.customComponentType === 'chart_display' && message.customComponentProps?.data && ((0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)("div", { className: "text-sm text-gray-500 dark:text-gray-400", children: "Loading chart..." }), children: (0, jsx_runtime_1.jsx)(ChartDisplay, { data: message.customComponentProps.data, chartType: message.customComponentProps.chartType }) })), htmlEmail && !message.customComponentType && ((0, jsx_runtime_1.jsxs)("div", { className: "group/email p-2 border rounded-lg bg-white dark:bg-gray-800 shadow", children: [(0, jsx_runtime_1.jsx)(email_content_copy_1.EmailContentCopy, { emailContent: divRef }), (0, jsx_runtime_1.jsx)("div", { ref: divRef, className: "prose dark:prose-invert max-w-none", dangerouslySetInnerHTML: { __html: htmlEmail } })] })), formData && !message.customComponentType && !htmlEmail && ((0, jsx_runtime_1.jsx)("div", { className: "p-2 border rounded-lg bg-white dark:bg-gray-800 shadow", children: formData }))] }))] }) }));
}
exports.default = Message;
//# sourceMappingURL=data:application/json;base64,