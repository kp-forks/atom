"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const utils_1 = require("@lib/Chat/utils"); // Using cn from utils
const button_scroll_to_bottom_1 = require("@components/chat/button-scroll-to-bottom");
const ScrollContainer = ({ children, isNewSession }) => {
    const outerDiv = (0, react_1.useRef)(null);
    const innerDiv = (0, react_1.useRef)(null);
    const prevInnerDivHeight = (0, react_1.useRef)(null); // Corrected type
    const [showMessages, setShowMessages] = (0, react_1.useState)(false);
    // const [showScrollButton, setShowScrollButton] = useState(false); // This state seems unused, ButtonScrollToBottom handles its own visibility
    (0, react_1.useEffect)(() => {
        if (!outerDiv.current || !innerDiv.current)
            return;
        const outerDivHeight = outerDiv.current.clientHeight;
        const innerDivHeight = innerDiv.current.scrollHeight; // Use scrollHeight for true content height
        const outerDivScrollTop = outerDiv.current.scrollTop;
        // Auto-scroll to bottom if already at bottom or if it's the initial load (no prev height)
        // And if the component is not part of a new session transition (not dimmed)
        if (!isNewSession &&
            (!prevInnerDivHeight.current || (outerDivScrollTop >= (prevInnerDivHeight.current - outerDivHeight - 20))) // Allow some threshold
        ) {
            outerDiv.current.scrollTo({
                top: innerDivHeight, // Scroll to the very bottom of content
                left: 0,
                behavior: prevInnerDivHeight.current ? "smooth" : "auto" // Smooth scroll for updates, auto for initial
            });
            if (!showMessages)
                setShowMessages(true); // Show messages after initial scroll
        }
        else if (!showMessages && !isNewSession) {
            setShowMessages(true); // If not scrolling, but not new session, still show messages
        }
        // else {
        // setShowScrollButton(true); // This logic is now within ButtonScrollToBottom via useAtBottom hook
        // }
        prevInnerDivHeight.current = innerDivHeight;
    }, [children, isNewSession, showMessages]); // Added isNewSession and showMessages to dependency array
    // handleScrollButtonClick is now handled by ButtonScrollToBottom's onClick directly
    return ((0, jsx_runtime_1.jsxs)("div", { className: (0, utils_1.cn)("h-full w-full font-sans", "bg-white dark:bg-gray-800" // Applied theme background
        // Removed opacity here, should be handled by parent or specific components if needed for isNewSession
        ), children: [(0, jsx_runtime_1.jsx)(button_scroll_to_bottom_1.ButtonScrollToBottom, {}), (0, jsx_runtime_1.jsx)("div", { className: (0, utils_1.cn)("relative h-full w-full overflow-y-auto overflow-x-hidden", // overflow-scroll to overflow-y-auto
                "scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100", // Custom scrollbar styles
                "dark:scrollbar-thumb-gray-600 dark:scrollbar-track-gray-800", { 'opacity-50': isNewSession } // Opacity for new session transition
                ), ref: outerDiv, children: (0, jsx_runtime_1.jsx)("div", { className: (0, utils_1.cn)("relative transition-opacity duration-300", "px-2 md:px-4 pt-4 pb-28 md:pb-32" // Padding for messages, esp. bottom for ChatInput
                    ), style: { opacity: showMessages && !isNewSession ? 1 : 0 }, ref: innerDiv, children: children }) })] }));
};
exports.default = ScrollContainer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2Nyb2xsQ29udGFpbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiU2Nyb2xsQ29udGFpbmVyLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxpQ0FBd0U7QUFDeEUsMkNBQXFDLENBQUMsc0JBQXNCO0FBQzVELHNGQUFnRjtBQU9oRixNQUFNLGVBQWUsR0FBRyxDQUFDLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBeUMsRUFBRyxFQUFFO0lBQzdGLE1BQU0sUUFBUSxHQUFHLElBQUEsY0FBTSxFQUF3QixJQUFJLENBQUMsQ0FBQztJQUNyRCxNQUFNLFFBQVEsR0FBRyxJQUFBLGNBQU0sRUFBd0IsSUFBSSxDQUFDLENBQUM7SUFDckQsTUFBTSxrQkFBa0IsR0FBRyxJQUFBLGNBQU0sRUFBZ0IsSUFBSSxDQUFDLENBQUMsQ0FBQyxpQkFBaUI7SUFFekUsTUFBTSxDQUFDLFlBQVksRUFBRSxlQUFlLENBQUMsR0FBRyxJQUFBLGdCQUFRLEVBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEQsK0lBQStJO0lBRS9JLElBQUEsaUJBQVMsRUFBQyxHQUFHLEVBQUU7UUFDYixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPO1lBQUUsT0FBTztRQUVuRCxNQUFNLGNBQWMsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQztRQUNyRCxNQUFNLGNBQWMsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLDJDQUEyQztRQUNqRyxNQUFNLGlCQUFpQixHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBRXJELDBGQUEwRjtRQUMxRiw0RUFBNEU7UUFDNUUsSUFDRSxDQUFDLFlBQVk7WUFDYixDQUFDLENBQUMsa0JBQWtCLENBQUMsT0FBTyxJQUFJLENBQUMsaUJBQWlCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLEdBQUcsY0FBYyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyx1QkFBdUI7VUFDbEksQ0FBQztZQUNELFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO2dCQUN4QixHQUFHLEVBQUUsY0FBYyxFQUFFLHVDQUF1QztnQkFDNUQsSUFBSSxFQUFFLENBQUM7Z0JBQ1AsUUFBUSxFQUFFLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsOENBQThDO2FBQ3hHLENBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxZQUFZO2dCQUFFLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLHFDQUFxQztRQUNqRixDQUFDO2FBQU0sSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQ3hDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLDZEQUE2RDtRQUN4RixDQUFDO1FBQ0QsU0FBUztRQUNQLG1HQUFtRztRQUNyRyxJQUFJO1FBRUosa0JBQWtCLENBQUMsT0FBTyxHQUFHLGNBQWMsQ0FBQztJQUM5QyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsWUFBWSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQywwREFBMEQ7SUFFdEcsb0ZBQW9GO0lBRXBGLE9BQU8sQ0FDTCxpQ0FBSyxTQUFTLEVBQUUsSUFBQSxVQUFFLEVBQ2QseUJBQXlCLEVBQ3pCLDJCQUEyQixDQUFDLDJCQUEyQjtRQUN2RCxzR0FBc0c7U0FDckcsYUFDSCx1QkFBQyw4Q0FBb0IsS0FBRyxFQUN4QixnQ0FDRSxTQUFTLEVBQUUsSUFBQSxVQUFFLEVBQ1QsMERBQTBELEVBQUUscUNBQXFDO2dCQUNqRyxrRUFBa0UsRUFBRSwwQkFBMEI7Z0JBQzlGLDZEQUE2RCxFQUM3RCxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsQ0FBQyxxQ0FBcUM7aUJBQ3ZFLEVBQ0QsR0FBRyxFQUFFLFFBQVEsWUFFYixnQ0FDRSxTQUFTLEVBQUUsSUFBQSxVQUFFLEVBQ1gsMENBQTBDLEVBQzFDLGtDQUFrQyxDQUFDLGtEQUFrRDtxQkFDcEYsRUFDSCxLQUFLLEVBQUUsRUFBRSxPQUFPLEVBQUUsWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUN6RCxHQUFHLEVBQUUsUUFBUSxZQUVaLFFBQVEsR0FDTCxHQUNGLElBQ0YsQ0FDUCxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsa0JBQWUsZUFBZSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVJlZiwgdXNlRWZmZWN0LCB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGNuIH0gZnJvbSBcIkBsaWIvQ2hhdC91dGlsc1wiOyAvLyBVc2luZyBjbiBmcm9tIHV0aWxzXG5pbXBvcnQgeyBCdXR0b25TY3JvbGxUb0JvdHRvbSB9IGZyb20gJ0Bjb21wb25lbnRzL2NoYXQvYnV0dG9uLXNjcm9sbC10by1ib3R0b20nO1xuXG50eXBlIFByb3BzID0ge1xuICAgIC8vIHNjcm9sbEN0YTogc3RyaW5nLCAvLyBzY3JvbGxDdGEgc2VlbXMgdW51c2VkXG4gICAgaXNOZXdTZXNzaW9uOiBib29sZWFuLFxufVxuXG5jb25zdCBTY3JvbGxDb250YWluZXIgPSAoeyBjaGlsZHJlbiwgaXNOZXdTZXNzaW9uIH06IFByb3BzICYgeyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIH0pICA9PiB7XG4gIGNvbnN0IG91dGVyRGl2ID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50IHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IGlubmVyRGl2ID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50IHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IHByZXZJbm5lckRpdkhlaWdodCA9IHVzZVJlZjxudW1iZXIgfCBudWxsPihudWxsKTsgLy8gQ29ycmVjdGVkIHR5cGVcblxuICBjb25zdCBbc2hvd01lc3NhZ2VzLCBzZXRTaG93TWVzc2FnZXNdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAvLyBjb25zdCBbc2hvd1Njcm9sbEJ1dHRvbiwgc2V0U2hvd1Njcm9sbEJ1dHRvbl0gPSB1c2VTdGF0ZShmYWxzZSk7IC8vIFRoaXMgc3RhdGUgc2VlbXMgdW51c2VkLCBCdXR0b25TY3JvbGxUb0JvdHRvbSBoYW5kbGVzIGl0cyBvd24gdmlzaWJpbGl0eVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFvdXRlckRpdi5jdXJyZW50IHx8ICFpbm5lckRpdi5jdXJyZW50KSByZXR1cm47XG5cbiAgICBjb25zdCBvdXRlckRpdkhlaWdodCA9IG91dGVyRGl2LmN1cnJlbnQuY2xpZW50SGVpZ2h0O1xuICAgIGNvbnN0IGlubmVyRGl2SGVpZ2h0ID0gaW5uZXJEaXYuY3VycmVudC5zY3JvbGxIZWlnaHQ7IC8vIFVzZSBzY3JvbGxIZWlnaHQgZm9yIHRydWUgY29udGVudCBoZWlnaHRcbiAgICBjb25zdCBvdXRlckRpdlNjcm9sbFRvcCA9IG91dGVyRGl2LmN1cnJlbnQuc2Nyb2xsVG9wO1xuXG4gICAgLy8gQXV0by1zY3JvbGwgdG8gYm90dG9tIGlmIGFscmVhZHkgYXQgYm90dG9tIG9yIGlmIGl0J3MgdGhlIGluaXRpYWwgbG9hZCAobm8gcHJldiBoZWlnaHQpXG4gICAgLy8gQW5kIGlmIHRoZSBjb21wb25lbnQgaXMgbm90IHBhcnQgb2YgYSBuZXcgc2Vzc2lvbiB0cmFuc2l0aW9uIChub3QgZGltbWVkKVxuICAgIGlmIChcbiAgICAgICFpc05ld1Nlc3Npb24gJiZcbiAgICAgICghcHJldklubmVyRGl2SGVpZ2h0LmN1cnJlbnQgfHwgKG91dGVyRGl2U2Nyb2xsVG9wID49IChwcmV2SW5uZXJEaXZIZWlnaHQuY3VycmVudCAtIG91dGVyRGl2SGVpZ2h0IC0gMjApKSkgLy8gQWxsb3cgc29tZSB0aHJlc2hvbGRcbiAgICApIHtcbiAgICAgIG91dGVyRGl2LmN1cnJlbnQuc2Nyb2xsVG8oe1xuICAgICAgICB0b3A6IGlubmVyRGl2SGVpZ2h0LCAvLyBTY3JvbGwgdG8gdGhlIHZlcnkgYm90dG9tIG9mIGNvbnRlbnRcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgYmVoYXZpb3I6IHByZXZJbm5lckRpdkhlaWdodC5jdXJyZW50ID8gXCJzbW9vdGhcIiA6IFwiYXV0b1wiIC8vIFNtb290aCBzY3JvbGwgZm9yIHVwZGF0ZXMsIGF1dG8gZm9yIGluaXRpYWxcbiAgICAgIH0pO1xuICAgICAgaWYgKCFzaG93TWVzc2FnZXMpIHNldFNob3dNZXNzYWdlcyh0cnVlKTsgLy8gU2hvdyBtZXNzYWdlcyBhZnRlciBpbml0aWFsIHNjcm9sbFxuICAgIH0gZWxzZSBpZiAoIXNob3dNZXNzYWdlcyAmJiAhaXNOZXdTZXNzaW9uKSB7XG4gICAgICAgIHNldFNob3dNZXNzYWdlcyh0cnVlKTsgLy8gSWYgbm90IHNjcm9sbGluZywgYnV0IG5vdCBuZXcgc2Vzc2lvbiwgc3RpbGwgc2hvdyBtZXNzYWdlc1xuICAgIH1cbiAgICAvLyBlbHNlIHtcbiAgICAgIC8vIHNldFNob3dTY3JvbGxCdXR0b24odHJ1ZSk7IC8vIFRoaXMgbG9naWMgaXMgbm93IHdpdGhpbiBCdXR0b25TY3JvbGxUb0JvdHRvbSB2aWEgdXNlQXRCb3R0b20gaG9va1xuICAgIC8vIH1cblxuICAgIHByZXZJbm5lckRpdkhlaWdodC5jdXJyZW50ID0gaW5uZXJEaXZIZWlnaHQ7XG4gIH0sIFtjaGlsZHJlbiwgaXNOZXdTZXNzaW9uLCBzaG93TWVzc2FnZXNdKTsgLy8gQWRkZWQgaXNOZXdTZXNzaW9uIGFuZCBzaG93TWVzc2FnZXMgdG8gZGVwZW5kZW5jeSBhcnJheVxuXG4gIC8vIGhhbmRsZVNjcm9sbEJ1dHRvbkNsaWNrIGlzIG5vdyBoYW5kbGVkIGJ5IEJ1dHRvblNjcm9sbFRvQm90dG9tJ3Mgb25DbGljayBkaXJlY3RseVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NuKFxuICAgICAgICBcImgtZnVsbCB3LWZ1bGwgZm9udC1zYW5zXCIsXG4gICAgICAgIFwiYmctd2hpdGUgZGFyazpiZy1ncmF5LTgwMFwiIC8vIEFwcGxpZWQgdGhlbWUgYmFja2dyb3VuZFxuICAgICAgICAvLyBSZW1vdmVkIG9wYWNpdHkgaGVyZSwgc2hvdWxkIGJlIGhhbmRsZWQgYnkgcGFyZW50IG9yIHNwZWNpZmljIGNvbXBvbmVudHMgaWYgbmVlZGVkIGZvciBpc05ld1Nlc3Npb25cbiAgICAgICAgKX0+XG4gICAgICA8QnV0dG9uU2Nyb2xsVG9Cb3R0b20gLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPXtjbihcbiAgICAgICAgICAgIFwicmVsYXRpdmUgaC1mdWxsIHctZnVsbCBvdmVyZmxvdy15LWF1dG8gb3ZlcmZsb3cteC1oaWRkZW5cIiwgLy8gb3ZlcmZsb3ctc2Nyb2xsIHRvIG92ZXJmbG93LXktYXV0b1xuICAgICAgICAgICAgXCJzY3JvbGxiYXItdGhpbiBzY3JvbGxiYXItdGh1bWItZ3JheS0zMDAgc2Nyb2xsYmFyLXRyYWNrLWdyYXktMTAwXCIsIC8vIEN1c3RvbSBzY3JvbGxiYXIgc3R5bGVzXG4gICAgICAgICAgICBcImRhcms6c2Nyb2xsYmFyLXRodW1iLWdyYXktNjAwIGRhcms6c2Nyb2xsYmFyLXRyYWNrLWdyYXktODAwXCIsXG4gICAgICAgICAgICB7ICdvcGFjaXR5LTUwJzogaXNOZXdTZXNzaW9uIH0gLy8gT3BhY2l0eSBmb3IgbmV3IHNlc3Npb24gdHJhbnNpdGlvblxuICAgICAgICApfVxuICAgICAgICByZWY9e291dGVyRGl2fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPXtjbihcbiAgICAgICAgICAgIFwicmVsYXRpdmUgdHJhbnNpdGlvbi1vcGFjaXR5IGR1cmF0aW9uLTMwMFwiLFxuICAgICAgICAgICAgXCJweC0yIG1kOnB4LTQgcHQtNCBwYi0yOCBtZDpwYi0zMlwiIC8vIFBhZGRpbmcgZm9yIG1lc3NhZ2VzLCBlc3AuIGJvdHRvbSBmb3IgQ2hhdElucHV0XG4gICAgICAgICAgICApfVxuICAgICAgICAgIHN0eWxlPXt7IG9wYWNpdHk6IHNob3dNZXNzYWdlcyAmJiAhaXNOZXdTZXNzaW9uID8gMSA6IDAgfX0gLy8gT3BhY2l0eSB0aWVkIHRvIHNob3dNZXNzYWdlcyBhbmQgbm90IG5ldyBzZXNzaW9uXG4gICAgICAgICAgcmVmPXtpbm5lckRpdn1cbiAgICAgICAgPlxuICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNjcm9sbENvbnRhaW5lcjtcbiJdfQ==