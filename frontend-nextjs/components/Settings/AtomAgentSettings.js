"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const router_1 = require("next/router");
const Box_1 = __importDefault(require("@components/common/Box"));
const Text_1 = __importDefault(require("@components/common/Text"));
const Button_1 = __importDefault(require("@components/Button"));
const Switch_1 = __importDefault(require("@components/Switch"));
const WakeWordContext_1 = require("contexts/WakeWordContext");
const LiveMeetingAttendanceSettings_1 = __importDefault(require("./LiveMeetingAttendanceSettings")); // Moved import to top
const GDriveManager_1 = __importDefault(require("./GDriveManager")); // Import the GDriveManager
const DropboxManager_1 = __importDefault(require("./DropboxManager")); // Import the new DropboxManager
const VoiceSettings_1 = __importDefault(require("./VoiceSettings")); // Import the new VoiceSettings
const ThirdPartyIntegrations_1 = __importDefault(require("./ThirdPartyIntegrations")); // Import the new ThirdPartyIntegrations
const AtomAgentSettings = () => {
    const router = (0, router_1.useRouter)();
    const { isWakeWordEnabled, toggleWakeWord, isListening, wakeWordError } = (0, WakeWordContext_1.useWakeWord)();
    // TODO: This state should ideally be fetched from a backend endpoint
    // that checks actual token status for the user.
    const [isCalendarConnected, setIsCalendarConnected] = (0, react_1.useState)(false);
    const [userEmail, setUserEmail] = (0, react_1.useState)(null);
    const [apiMessage, setApiMessage] = (0, react_1.useState)(null);
    const [apiError, setApiError] = (0, react_1.useState)(null);
    const [isLoadingStatus, setIsLoadingStatus] = (0, react_1.useState)(true);
    (0, react_1.useEffect)(() => {
        // Function to fetch connection status
        const fetchStatus = async () => {
            setIsLoadingStatus(true);
            try {
                const response = await fetch('/api/atom/auth/calendar/status');
                const data = await response.json();
                if (response.ok) {
                    setIsCalendarConnected(data.isConnected);
                    if (data.isConnected) {
                        // Assuming the status endpoint might return user email or a generic placeholder
                        setUserEmail(data.email || 'Connected');
                    }
                    else {
                        setUserEmail(null);
                        if (data.error) {
                            // Optionally set an error message if status check reveals an issue
                            // setApiError(`Status check failed: ${data.error}`);
                            console.warn("Calendar status check indicates not connected or an error:", data.error);
                        }
                    }
                }
                else {
                    setApiError(data.message || 'Failed to fetch calendar connection status.');
                    setIsCalendarConnected(false);
                    setUserEmail(null);
                }
            }
            catch (err) {
                console.error('Error fetching calendar status:', err);
                setApiError('Could not connect to the server to check calendar status.');
                setIsCalendarConnected(false);
                setUserEmail(null);
            }
            setIsLoadingStatus(false);
        };
        fetchStatus(); // Fetch status on component mount
        // Handling query parameters from OAuth redirects
        const { query } = router;
        let messageFromRedirect = null;
        let errorFromRedirect = null;
        if (query.calendar_auth_success === 'true' && query.atom_agent === 'true') {
            messageFromRedirect = 'Google Calendar connected successfully!';
            fetchStatus(); // Re-fetch status to update UI correctly
        }
        else if (query.calendar_auth_error && query.atom_agent === 'true') {
            errorFromRedirect = `Google Calendar connection failed: ${query.calendar_auth_error}`;
            fetchStatus(); // Re-fetch status
        }
        else if (query.calendar_disconnect_success === 'true' && query.atom_agent === 'true') {
            messageFromRedirect = 'Google Calendar disconnected successfully!';
            fetchStatus(); // Re-fetch status
        }
        if (messageFromRedirect)
            setApiMessage(messageFromRedirect);
        if (errorFromRedirect)
            setApiError(errorFromRedirect);
        if (query.calendar_auth_success || query.calendar_auth_error || query.calendar_disconnect_success) {
            // Clean the query params from URL without page reload
            router.replace('/Settings/UserViewSettings', undefined, { shallow: true });
        }
    }, [router]); // Rerun effect if router object itself changes (includes query changes for initial load)
    const handleConnectGoogleCalendar = () => {
        setApiMessage(null);
        setApiError(null);
        // Redirect to the OAuth initiation URL
        router.push('/api/atom/auth/calendar/initiate');
    };
    const handleDisconnectGoogleCalendar = async () => {
        setApiMessage(null);
        setApiError(null);
        setIsLoadingStatus(true); // Indicate loading during disconnect
        try {
            // The disconnect API now redirects, so we don't need to process response here directly
            // The redirect will trigger the useEffect to update status based on query params
            await router.push('/api/atom/auth/calendar/disconnect');
            // If server-side redirect in disconnect doesn't work as expected or for SPA-like behavior:
            // const response = await fetch('/api/atom/auth/calendar/disconnect', {
            //   method: 'POST',
            // });
            // const data = await response.json();
            // if (response.ok && data.success) {
            //   setIsCalendarConnected(false);
            //   setUserEmail(null);
            //   setApiMessage(data.message || 'Google Calendar disconnected successfully!');
            // } else {
            //   setApiError(data.message || 'Failed to disconnect Google Calendar.');
            // }
        }
        catch (err) {
            console.error('Disconnect error:', err);
            setApiError('An error occurred while trying to disconnect Google Calendar.');
        }
        // setIsLoadingStatus(false); // Status will be updated by useEffect via redirect
    };
    const [zapierUrl, setZapierUrl] = (0, react_1.useState)('');
    (0, react_1.useEffect)(() => {
        const fetchZapierUrl = async () => {
            try {
                const response = await fetch('/api/atom/integrations/get-zapier-url');
                if (response.ok) {
                    const data = await response.json();
                    setZapierUrl(data.url);
                }
            }
            catch (error) {
                console.error('Error fetching Zapier URL:', error);
            }
        };
        fetchZapierUrl();
    }, []);
    const handleSaveZapierUrl = async () => {
        try {
            const response = await fetch('/api/atom/integrations/save-zapier-url', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ url: zapierUrl }),
            });
            if (response.ok) {
                setApiMessage('Zapier URL saved successfully!');
            }
            else {
                const data = await response.json();
                setApiError(data.message || 'Failed to save Zapier URL.');
            }
        }
        catch (error) {
            console.error('Error saving Zapier URL:', error);
            setApiError('An error occurred while saving the Zapier URL.');
        }
    };
    return ((0, jsx_runtime_1.jsxs)(Box_1.default, { padding: { phone: 'm', tablet: 'l' }, borderWidth: 1, borderColor: "hairline", borderRadius: "m", margin: { phone: 'm', tablet: 'l' }, backgroundColor: "white" // Assuming settings sections have a white background
        , children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "sectionHeader", marginBottom: "m", children: "Atom Agent Configuration" }), apiMessage && ((0, jsx_runtime_1.jsx)(Box_1.default, { backgroundColor: "green.100", padding: "s", marginBottom: "m", borderRadius: "s", children: (0, jsx_runtime_1.jsx)(Text_1.default, { color: "green.700", children: apiMessage }) })), apiError && ((0, jsx_runtime_1.jsx)(Box_1.default, { backgroundColor: "red.100", padding: "s", marginBottom: "m", borderRadius: "s", children: (0, jsx_runtime_1.jsx)(Text_1.default, { color: "red.700", children: apiError }) })), (0, jsx_runtime_1.jsxs)(Box_1.default, { marginBottom: "m", paddingBottom: "m", borderBottomWidth: 1, borderColor: "hairline", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subHeader", marginBottom: "s", children: "Google Account (Calendar, Gmail)" }), isLoadingStatus ? ((0, jsx_runtime_1.jsx)(Text_1.default, { children: "Loading Google connection status..." })) : isCalendarConnected ? ( // isCalendarConnected now implies Google Account is connected
                    (0, jsx_runtime_1.jsxs)(Box_1.default, { children: [(0, jsx_runtime_1.jsxs)(Text_1.default, { marginBottom: "s", children: ["Status: Connected (", userEmail || 'Details unavailable', ")"] }), (0, jsx_runtime_1.jsx)(Text_1.default, { fontSize: "sm", color: "gray.600", marginBottom: "s", children: "Provides access to Google Calendar and Gmail (read-only). Reconnecting may be needed if previously connected without Gmail permissions." }), (0, jsx_runtime_1.jsx)(Button_1.default, { onPress: handleDisconnectGoogleCalendar, variant: "danger", title: "Disconnect Google Account" })] })) : ((0, jsx_runtime_1.jsxs)(Box_1.default, { children: [(0, jsx_runtime_1.jsx)(Text_1.default, { marginBottom: "s", children: "Status: Not Connected" }), (0, jsx_runtime_1.jsx)(Button_1.default, { onPress: handleConnectGoogleCalendar, variant: "primary", title: "Connect Google Account" })] }))] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { marginBottom: "m", paddingBottom: "m", borderBottomWidth: 1, borderColor: "hairline", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subHeader", marginBottom: "s", children: "Email Account" }), (0, jsx_runtime_1.jsx)(Button_1.default, { onPress: () => console.log('Connect Email Account clicked'), variant: "primary", title: "Connect Email Account" })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { marginBottom: "m", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subHeader", marginBottom: "s", children: "Zapier Integration" }), (0, jsx_runtime_1.jsx)("input", { type: "text", placeholder: "Enter Zapier Webhook URL for Atom", value: zapierUrl, onChange: (e) => setZapierUrl(e.target.value), style: {
                            width: '100%',
                            padding: '8px',
                            marginBottom: '8px',
                            border: '1px solid #ccc',
                            borderRadius: '4px',
                        } }), (0, jsx_runtime_1.jsx)(Button_1.default, { onPress: handleSaveZapierUrl, variant: "primary", title: "Save Zapier URL" })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { marginTop: "m", paddingTop: "m", borderTopWidth: 1, borderColor: "hairline", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subHeader", marginBottom: "s", children: "Wake Word Detection (Experimental)" }), (0, jsx_runtime_1.jsxs)(Box_1.default, { flexDirection: "row", alignItems: "center", marginBottom: "s", children: [(0, jsx_runtime_1.jsx)(Switch_1.default, { value: isWakeWordEnabled, onValueChange: toggleWakeWord, accessibilityLabel: "Toggle Wake Word Detection" }), (0, jsx_runtime_1.jsx)(Text_1.default, { marginLeft: "s", children: "Enable Wake Word (\"Atom\")" })] }), isWakeWordEnabled && isListening && ((0, jsx_runtime_1.jsx)(Text_1.default, { color: "green.500", marginBottom: "s", children: "Status: Listening..." })), isWakeWordEnabled && !isListening && !wakeWordError && ((0, jsx_runtime_1.jsx)(Text_1.default, { color: "gray.500", marginBottom: "s", children: "Status: Enabled, but not actively listening (e.g. mic permission pending or idle)" })), isWakeWordEnabled && !isListening && wakeWordError && ((0, jsx_runtime_1.jsx)(Text_1.default, { color: "orange.500", marginBottom: "s", children: "Status: Enabled, but currently not listening due to error." })), wakeWordError && ((0, jsx_runtime_1.jsx)(Box_1.default, { backgroundColor: "red.100", padding: "s", marginBottom: "m", borderRadius: "s", children: (0, jsx_runtime_1.jsxs)(Text_1.default, { color: "red.700", children: ["Wake Word Error: ", wakeWordError] }) })), (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "body", fontSize: "sm", color: "gray.600", children: "Allows Atom to listen for the wake word \"Atom\" to start interactions. Requires microphone permission. This feature is experimental and relies on a configured audio processor (NEXT_PUBLIC_AUDIO_PROCESSOR_URL). If NEXT_PUBLIC_MOCK_WAKE_WORD_DETECTION is true, it will simulate detection." })] }), (0, jsx_runtime_1.jsxs)(Box_1.default, { marginTop: "m", paddingTop: "m", borderTopWidth: 1, borderColor: "hairline", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subHeader", marginBottom: "s", children: "Microsoft Teams Account" }), (0, jsx_runtime_1.jsx)(Button_1.default, { onPress: () => router.push('/api/atom/auth/msteams/initiate'), variant: "primary", title: "Connect Microsoft Teams", marginBottom: "s" }), (0, jsx_runtime_1.jsx)(Text_1.default, { variant: "body", fontSize: "xs", color: "gray.500", children: "Connect your Microsoft account to allow Atom to read Teams messages (for AI-powered search and information extraction) and manage Teams calendar events. Requires delegated permissions." })] }), (0, jsx_runtime_1.jsx)(LiveMeetingAttendanceSettings_1.default, {}), (0, jsx_runtime_1.jsxs)(Box_1.default, { marginTop: "m", paddingTop: "m", borderTopWidth: 1, borderColor: "hairline", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subHeader", marginBottom: "s", children: "Cloud Storage (for Document Search)" }), (0, jsx_runtime_1.jsx)(GDriveManager_1.default, {}), (0, jsx_runtime_1.jsx)(DropboxManager_1.default, {})] }), (0, jsx_runtime_1.jsx)(VoiceSettings_1.default, {}), (0, jsx_runtime_1.jsx)(ThirdPartyIntegrations_1.default, {}), (0, jsx_runtime_1.jsxs)(Box_1.default, { marginTop: "m", paddingTop: "m", borderTopWidth: 1, borderColor: "hairline", children: [(0, jsx_runtime_1.jsx)(Text_1.default, { variant: "subHeader", marginBottom: "s", children: "LLM Model" }), (0, jsx_runtime_1.jsxs)("select", { style: {
                            width: '100%',
                            padding: '8px',
                            marginBottom: '8px',
                            border: '1px solid #ccc',
                            borderRadius: '4px',
                        }, children: [(0, jsx_runtime_1.jsx)("option", { value: "gpt-3.5-turbo", children: "GPT-3.5 Turbo" }), (0, jsx_runtime_1.jsx)("option", { value: "gpt-4", children: "GPT-4" })] })] })] }));
};
exports.default = AtomAgentSettings;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXRvbUFnZW50U2V0dGluZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJBdG9tQWdlbnRTZXR0aW5ncy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsaUNBQW1EO0FBQ25ELHdDQUF3QztBQUN4QyxpRUFBeUM7QUFDekMsbUVBQTJDO0FBQzNDLGdFQUF3QztBQUN4QyxnRUFBd0M7QUFDeEMsOERBQXVEO0FBQ3ZELG9HQUE0RSxDQUFDLHNCQUFzQjtBQUNuRyxvRUFBNEMsQ0FBQywyQkFBMkI7QUFDeEUsc0VBQThDLENBQUMsZ0NBQWdDO0FBQy9FLG9FQUE0QyxDQUFDLCtCQUErQjtBQUM1RSxzRkFBOEQsQ0FBQyx3Q0FBd0M7QUFFdkcsTUFBTSxpQkFBaUIsR0FBRyxHQUFHLEVBQUU7SUFDN0IsTUFBTSxNQUFNLEdBQUcsSUFBQSxrQkFBUyxHQUFFLENBQUM7SUFDM0IsTUFBTSxFQUFFLGlCQUFpQixFQUFFLGNBQWMsRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLEdBQUcsSUFBQSw2QkFBVyxHQUFFLENBQUM7SUFDeEYscUVBQXFFO0lBQ3JFLGdEQUFnRDtJQUNoRCxNQUFNLENBQUMsbUJBQW1CLEVBQUUsc0JBQXNCLENBQUMsR0FBRyxJQUFBLGdCQUFRLEVBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEUsTUFBTSxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsR0FBRyxJQUFBLGdCQUFRLEVBQWdCLElBQUksQ0FBQyxDQUFDO0lBQ2hFLE1BQU0sQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDLEdBQUcsSUFBQSxnQkFBUSxFQUFnQixJQUFJLENBQUMsQ0FBQztJQUNsRSxNQUFNLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxHQUFHLElBQUEsZ0JBQVEsRUFBZ0IsSUFBSSxDQUFDLENBQUM7SUFDOUQsTUFBTSxDQUFDLGVBQWUsRUFBRSxrQkFBa0IsQ0FBQyxHQUFHLElBQUEsZ0JBQVEsRUFBQyxJQUFJLENBQUMsQ0FBQztJQUc3RCxJ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LEdBQUcsRUFDM0ksdUJBQUMsY0FBSSxJQUFDLE9BQU8sRUFBQyxNQUFNLEVBQUMsUUFBUSxFQUFDLElBQUksRUFBQyxLQUFLLEVBQUMsVUFBVSx5TUFFN0MsSUFDSCxFQUdOLHVCQUFDLHVDQUE2QixLQUFHLEVBR2pDLHdCQUFDLGFBQUcsSUFBQyxTQUFTLEVBQUMsR0FBRyxFQUFDLFVBQVUsRUFBQyxHQUFHLEVBQUMsY0FBYyxFQUFFLENBQUMsRUFBRSxXQUFXLEVBQUMsVUFBVSxhQUN4RSx1QkFBQyxjQUFJLElBQUMsT0FBTyxFQUFDLFdBQVcsRUFBQyxZQUFZLEVBQUMsR0FBRyxvREFFcEMsRUFFUCx1QkFBQyx1QkFBYSxLQUFHLEVBRWpCLHVCQUFDLHdCQUFjLEtBQUcsSUFDZCxFQUdOLHVCQUFDLHVCQUFhLEtBQUcsRUFHakIsdUJBQUMsZ0NBQXNCLEtBQUcsRUFHMUIsd0JBQUMsYUFBRyxJQUFDLFNBQVMsRUFBQyxHQUFHLEVBQUMsVUFBVSxFQUFDLEdBQUcsRUFBQyxjQUFjLEVBQUUsQ0FBQyxFQUFFLFdBQVcsRUFBQyxVQUFVLGFBQ3pFLHVCQUFDLGNBQUksSUFBQyxPQUFPLEVBQUMsV0FBVyxFQUFDLFlBQVksRUFBQyxHQUFHLDBCQUVuQyxFQUNQLG9DQUNFLEtBQUssRUFBRTs0QkFDTCxLQUFLLEVBQUUsTUFBTTs0QkFDYixPQUFPLEVBQUUsS0FBSzs0QkFDZCxZQUFZLEVBQUUsS0FBSzs0QkFDbkIsTUFBTSxFQUFFLGdCQUFnQjs0QkFDeEIsWUFBWSxFQUFFLEtBQUs7eUJBQ3BCLGFBRUQsbUNBQVEsS0FBSyxFQUFDLGVBQWUsOEJBQXVCLEVBQ3BELG1DQUFRLEtBQUssRUFBQyxPQUFPLHNCQUFlLElBQzdCLElBQ0wsSUFDRixDQUNQLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixrQkFBZSxpQkFBaUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSAnbmV4dC9yb3V0ZXInO1xuaW1wb3J0IEJveCBmcm9tICdAY29tcG9uZW50cy9jb21tb24vQm94JztcbmltcG9ydCBUZXh0IGZyb20gJ0Bjb21wb25lbnRzL2NvbW1vbi9UZXh0JztcbmltcG9ydCBCdXR0b24gZnJvbSAnQGNvbXBvbmVudHMvQnV0dG9uJztcbmltcG9ydCBTd2l0Y2ggZnJvbSAnQGNvbXBvbmVudHMvU3dpdGNoJztcbmltcG9ydCB7IHVzZVdha2VXb3JkIH0gZnJvbSAnY29udGV4dHMvV2FrZVdvcmRDb250ZXh0JztcbmltcG9ydCBMaXZlTWVldGluZ0F0dGVuZGFuY2VTZXR0aW5ncyBmcm9tICcuL0xpdmVNZWV0aW5nQXR0ZW5kYW5jZVNldHRpbmdzJzsgLy8gTW92ZWQgaW1wb3J0IHRvIHRvcFxuaW1wb3J0IEdEcml2ZU1hbmFnZXIgZnJvbSAnLi9HRHJpdmVNYW5hZ2VyJzsgLy8gSW1wb3J0IHRoZSBHRHJpdmVNYW5hZ2VyXG5pbXBvcnQgRHJvcGJveE1hbmFnZXIgZnJvbSAnLi9Ecm9wYm94TWFuYWdlcic7IC8vIEltcG9ydCB0aGUgbmV3IERyb3Bib3hNYW5hZ2VyXG5pbXBvcnQgVm9pY2VTZXR0aW5ncyBmcm9tICcuL1ZvaWNlU2V0dGluZ3MnOyAvLyBJbXBvcnQgdGhlIG5ldyBWb2ljZVNldHRpbmdzXG5pbXBvcnQgVGhpcmRQYXJ0eUludGVncmF0aW9ucyBmcm9tICcuL1RoaXJkUGFydHlJbnRlZ3JhdGlvbnMnOyAvLyBJbXBvcnQgdGhlIG5ldyBUaGlyZFBhcnR5SW50ZWdyYXRpb25zXG5cbmNvbnN0IEF0b21BZ2VudFNldHRpbmdzID0gKCkgPT4ge1xuICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcbiAgY29uc3QgeyBpc1dha2VXb3JkRW5hYmxlZCwgdG9nZ2xlV2FrZVdvcmQsIGlzTGlzdGVuaW5nLCB3YWtlV29yZEVycm9yIH0gPSB1c2VXYWtlV29yZCgpO1xuICAvLyBUT0RPOiBUaGlzIHN0YXRlIHNob3VsZCBpZGVhbGx5IGJlIGZldGNoZWQgZnJvbSBhIGJhY2tlbmQgZW5kcG9pbnRcbiAgLy8gdGhhdCBjaGVja3MgYWN0dWFsIHRva2VuIHN0YXR1cyBmb3IgdGhlIHVzZXIuXG4gIGNvbnN0IFtpc0NhbGVuZGFyQ29ubmVjdGVkLCBzZXRJc0NhbGVuZGFyQ29ubmVjdGVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3VzZXJFbWFpbCwgc2V0VXNlckVtYWlsXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbYXBpTWVzc2FnZSwgc2V0QXBpTWVzc2FnZV0gPSB1c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW2FwaUVycm9yLCBzZXRBcGlFcnJvcl0gPSB1c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW2lzTG9hZGluZ1N0YXR1cywgc2V0SXNMb2FkaW5nU3RhdHVzXSA9IHVzZVN0YXRlKHRydWUpO1xuXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBGdW5jdGlvbiB0byBmZXRjaCBjb25uZWN0aW9uIHN0YXR1c1xuICAgIGNvbnN0IGZldGNoU3RhdHVzID0gYXN5bmMgKCkgPT4ge1xuICAgICAgc2V0SXNMb2FkaW5nU3RhdHVzKHRydWUpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2FwaS9hdG9tL2F1dGgvY2FsZW5kYXIvc3RhdHVzJyk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICAgIHNldElzQ2FsZW5kYXJDb25uZWN0ZWQoZGF0YS5pc0Nvbm5lY3RlZCk7XG4gICAgICAgICAgaWYgKGRhdGEuaXNDb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIC8vIEFzc3VtaW5nIHRoZSBzdGF0dXMgZW5kcG9pbnQgbWlnaHQgcmV0dXJuIHVzZXIgZW1haWwgb3IgYSBnZW5lcmljIHBsYWNlaG9sZGVyXG4gICAgICAgICAgICBzZXRVc2VyRW1haWwoZGF0YS5lbWFpbCB8fCAnQ29ubmVjdGVkJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldFVzZXJFbWFpbChudWxsKTtcbiAgICAgICAgICAgIGlmIChkYXRhLmVycm9yKSB7XG4gICAgICAgICAgICAgIC8vIE9wdGlvbmFsbHkgc2V0IGFuIGVycm9yIG1lc3NhZ2UgaWYgc3RhdHVzIGNoZWNrIHJldmVhbHMgYW4gaXNzdWVcbiAgICAgICAgICAgICAgLy8gc2V0QXBpRXJyb3IoYFN0YXR1cyBjaGVjayBmYWlsZWQ6ICR7ZGF0YS5lcnJvcn1gKTtcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiQ2FsZW5kYXIgc3RhdHVzIGNoZWNrIGluZGljYXRlcyBub3QgY29ubmVjdGVkIG9yIGFuIGVycm9yOlwiLCBkYXRhLmVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0QXBpRXJyb3IoZGF0YS5tZXNzYWdlIHx8ICdGYWlsZWQgdG8gZmV0Y2ggY2FsZW5kYXIgY29ubmVjdGlvbiBzdGF0dXMuJyk7XG4gICAgICAgICAgc2V0SXNDYWxlbmRhckNvbm5lY3RlZChmYWxzZSk7XG4gICAgICAgICAgc2V0VXNlckVtYWlsKG51bGwpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgY2FsZW5kYXIgc3RhdHVzOicsIGVycik7XG4gICAgICAgIHNldEFwaUVycm9yKCdDb3VsZCBub3QgY29ubmVjdCB0byB0aGUgc2VydmVyIHRvIGNoZWNrIGNhbGVuZGFyIHN0YXR1cy4nKTtcbiAgICAgICAgc2V0SXNDYWxlbmRhckNvbm5lY3RlZChmYWxzZSk7XG4gICAgICAgIHNldFVzZXJFbWFpbChudWxsKTtcbiAgICAgIH1cbiAgICAgIHNldElzTG9hZGluZ1N0YXR1cyhmYWxzZSk7XG4gICAgfTtcblxuICAgIGZldGNoU3RhdHVzKCk7IC8vIEZldGNoIHN0YXR1cyBvbiBjb21wb25lbnQgbW91bnRcblxuICAgIC8vIEhhbmRsaW5nIHF1ZXJ5IHBhcmFtZXRlcnMgZnJvbSBPQXV0aCByZWRpcmVjdHNcbiAgICBjb25zdCB7IHF1ZXJ5IH0gPSByb3V0ZXI7XG4gICAgbGV0IG1lc3NhZ2VGcm9tUmVkaXJlY3QgPSBudWxsO1xuICAgIGxldCBlcnJvckZyb21SZWRpcmVjdCA9IG51bGw7XG5cbiAgICBpZiAocXVlcnkuY2FsZW5kYXJfYXV0aF9zdWNjZXNzID09PSAndHJ1ZScgJiYgcXVlcnkuYXRvbV9hZ2VudCA9PT0gJ3RydWUnKSB7XG4gICAgICBtZXNzYWdlRnJvbVJlZGlyZWN0ID0gJ0dvb2dsZSBDYWxlbmRhciBjb25uZWN0ZWQgc3VjY2Vzc2Z1bGx5ISc7XG4gICAgICBmZXRjaFN0YXR1cygpOyAvLyBSZS1mZXRjaCBzdGF0dXMgdG8gdXBkYXRlIFVJIGNvcnJlY3RseVxuICAgIH0gZWxzZSBpZiAocXVlcnkuY2FsZW5kYXJfYXV0aF9lcnJvciAmJiBxdWVyeS5hdG9tX2FnZW50ID09PSAndHJ1ZScpIHtcbiAgICAgIGVycm9yRnJvbVJlZGlyZWN0ID0gYEdvb2dsZSBDYWxlbmRhciBjb25uZWN0aW9uIGZhaWxlZDogJHtxdWVyeS5jYWxlbmRhcl9hdXRoX2Vycm9yfWA7XG4gICAgICBmZXRjaFN0YXR1cygpOyAvLyBSZS1mZXRjaCBzdGF0dXNcbiAgICB9IGVsc2UgaWYgKHF1ZXJ5LmNhbGVuZGFyX2Rpc2Nvbm5lY3Rfc3VjY2VzcyA9PT0gJ3RydWUnICYmIHF1ZXJ5LmF0b21fYWdlbnQgPT09ICd0cnVlJykge1xuICAgICAgbWVzc2FnZUZyb21SZWRpcmVjdCA9ICdHb29nbGUgQ2FsZW5kYXIgZGlzY29ubmVjdGVkIHN1Y2Nlc3NmdWxseSEnO1xuICAgICAgZmV0Y2hTdGF0dXMoKTsgLy8gUmUtZmV0Y2ggc3RhdHVzXG4gICAgfVxuXG4gICAgaWYgKG1lc3NhZ2VGcm9tUmVkaXJlY3QpIHNldEFwaU1lc3NhZ2UobWVzc2FnZUZyb21SZWRpcmVjdCk7XG4gICAgaWYgKGVycm9yRnJvbVJlZGlyZWN0KSBzZXRBcGlFcnJvcihlcnJvckZyb21SZWRpcmVjdCk7XG5cbiAgICBpZiAocXVlcnkuY2FsZW5kYXJfYXV0aF9zdWNjZXNzIHx8IHF1ZXJ5LmNhbGVuZGFyX2F1dGhfZXJyb3IgfHwgcXVlcnkuY2FsZW5kYXJfZGlzY29ubmVjdF9zdWNjZXNzKSB7XG4gICAgICAvLyBDbGVhbiB0aGUgcXVlcnkgcGFyYW1zIGZyb20gVVJMIHdpdGhvdXQgcGFnZSByZWxvYWRcbiAgICAgIHJvdXRlci5yZXBsYWNlKCcvU2V0dGluZ3MvVXNlclZpZXdTZXR0aW5ncycsIHVuZGVmaW5lZCwgeyBzaGFsbG93OiB0cnVlIH0pO1xuICAgIH1cbiAgfSwgW3JvdXRlcl0pOyAvLyBSZXJ1biBlZmZlY3QgaWYgcm91dGVyIG9iamVjdCBpdHNlbGYgY2hhbmdlcyAoaW5jbHVkZXMgcXVlcnkgY2hhbmdlcyBmb3IgaW5pdGlhbCBsb2FkKVxuXG4gIGNvbnN0IGhhbmRsZUNvbm5lY3RHb29nbGVDYWxlbmRhciA9ICgpID0+IHtcbiAgICBzZXRBcGlNZXNzYWdlKG51bGwpO1xuICAgIHNldEFwaUVycm9yKG51bGwpO1xuICAgIC8vIFJlZGlyZWN0IHRvIHRoZSBPQXV0aCBpbml0aWF0aW9uIFVSTFxuICAgIHJvdXRlci5wdXNoKCcvYXBpL2F0b20vYXV0aC9jYWxlbmRhci9pbml0aWF0ZScpO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZURpc2Nvbm5lY3RHb29nbGVDYWxlbmRhciA9IGFzeW5jICgpID0+IHtcbiAgICBzZXRBcGlNZXNzYWdlKG51bGwpO1xuICAgIHNldEFwaUVycm9yKG51bGwpO1xuICAgIHNldElzTG9hZGluZ1N0YXR1cyh0cnVlKTsgLy8gSW5kaWNhdGUgbG9hZGluZyBkdXJpbmcgZGlzY29ubmVjdFxuICAgIHRyeSB7XG4gICAgICAvLyBUaGUgZGlzY29ubmVjdCBBUEkgbm93IHJlZGlyZWN0cywgc28gd2UgZG9uJ3QgbmVlZCB0byBwcm9jZXNzIHJlc3BvbnNlIGhlcmUgZGlyZWN0bHlcbiAgICAgIC8vIFRoZSByZWRpcmVjdCB3aWxsIHRyaWdnZXIgdGhlIHVzZUVmZmVjdCB0byB1cGRhdGUgc3RhdHVzIGJhc2VkIG9uIHF1ZXJ5IHBhcmFtc1xuICAgICAgYXdhaXQgcm91dGVyLnB1c2goJy9hcGkvYXRvbS9hdXRoL2NhbGVuZGFyL2Rpc2Nvbm5lY3QnKTtcbiAgICAgIC8vIElmIHNlcnZlci1zaWRlIHJlZGlyZWN0IGluIGRpc2Nvbm5lY3QgZG9lc24ndCB3b3JrIGFzIGV4cGVjdGVkIG9yIGZvciBTUEEtbGlrZSBiZWhhdmlvcjpcbiAgICAgIC8vIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvYXRvbS9hdXRoL2NhbGVuZGFyL2Rpc2Nvbm5lY3QnLCB7XG4gICAgICAvLyAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgLy8gfSk7XG4gICAgICAvLyBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgLy8gaWYgKHJlc3BvbnNlLm9rICYmIGRhdGEuc3VjY2Vzcykge1xuICAgICAgLy8gICBzZXRJc0NhbGVuZGFyQ29ubmVjdGVkKGZhbHNlKTtcbiAgICAgIC8vICAgc2V0VXNlckVtYWlsKG51bGwpO1xuICAgICAgLy8gICBzZXRBcGlNZXNzYWdlKGRhdGEubWVzc2FnZSB8fCAnR29vZ2xlIENhbGVuZGFyIGRpc2Nvbm5lY3RlZCBzdWNjZXNzZnVsbHkhJyk7XG4gICAgICAvLyB9IGVsc2Uge1xuICAgICAgLy8gICBzZXRBcGlFcnJvcihkYXRhLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byBkaXNjb25uZWN0IEdvb2dsZSBDYWxlbmRhci4nKTtcbiAgICAgIC8vIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Rpc2Nvbm5lY3QgZXJyb3I6JywgZXJyKTtcbiAgICAgIHNldEFwaUVycm9yKCdBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSB0cnlpbmcgdG8gZGlzY29ubmVjdCBHb29nbGUgQ2FsZW5kYXIuJyk7XG4gICAgfVxuICAgIC8vIHNldElzTG9hZGluZ1N0YXR1cyhmYWxzZSk7IC8vIFN0YXR1cyB3aWxsIGJlIHVwZGF0ZWQgYnkgdXNlRWZmZWN0IHZpYSByZWRpcmVjdFxuICB9O1xuXG4gIGNvbnN0IFt6YXBpZXJVcmwsIHNldFphcGllclVybF0gPSB1c2VTdGF0ZSgnJyk7XG5cbnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgZmV0Y2haYXBpZXJVcmwgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL2F0b20vaW50ZWdyYXRpb25zL2dldC16YXBpZXItdXJsJyk7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgICAgIHNldFphcGllclVybChkYXRhLnVybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBaYXBpZXIgVVJMOicsIGVycm9yKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgZmV0Y2haYXBpZXJVcmwoKTtcbn0sIFtdKTtcblxuY29uc3QgaGFuZGxlU2F2ZVphcGllclVybCA9IGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL2F0b20vaW50ZWdyYXRpb25zL3NhdmUtemFwaWVyLXVybCcsIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyB1cmw6IHphcGllclVybCB9KSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgc2V0QXBpTWVzc2FnZSgnWmFwaWVyIFVSTCBzYXZlZCBzdWNjZXNzZnVsbHkhJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgc2V0QXBpRXJyb3IoZGF0YS5tZXNzYWdlIHx8ICdGYWlsZWQgdG8gc2F2ZSBaYXBpZXIgVVJMLicpO1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igc2F2aW5nIFphcGllciBVUkw6JywgZXJyb3IpO1xuICAgICAgICBzZXRBcGlFcnJvcignQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgc2F2aW5nIHRoZSBaYXBpZXIgVVJMLicpO1xuICAgIH1cbn07XG5cbiAgcmV0dXJuIChcbiAgICA8Qm94XG4gICAgICBwYWRkaW5nPXt7IHBob25lOiAnbScsIHRhYmxldDogJ2wnIH19XG4gICAgICBib3JkZXJXaWR0aD17MX1cbiAgICAgIGJvcmRlckNvbG9yPVwiaGFpcmxpbmVcIlxuICAgICAgYm9yZGVyUmFkaXVzPVwibVwiXG4gICAgICBtYXJnaW49e3sgcGhvbmU6ICdtJywgdGFibGV0OiAnbCcgfX1cbiAgICAgIGJhY2tncm91bmRDb2xvcj1cIndoaXRlXCIgLy8gQXNzdW1pbmcgc2V0dGluZ3Mgc2VjdGlvbnMgaGF2ZSBhIHdoaXRlIGJhY2tncm91bmRcbiAgICA+XG4gICAgICA8VGV4dCB2YXJpYW50PVwic2VjdGlvbkhlYWRlclwiIG1hcmdpbkJvdHRvbT1cIm1cIj5cbiAgICAgICAgQXRvbSBBZ2VudCBDb25maWd1cmF0aW9uXG4gICAgICA8L1RleHQ+XG5cbiAgICAgIHthcGlNZXNzYWdlICYmIChcbiAgICAgICAgPEJveCBiYWNrZ3JvdW5kQ29sb3I9XCJncmVlbi4xMDBcIiBwYWRkaW5nPVwic1wiIG1hcmdpbkJvdHRvbT1cIm1cIiBib3JkZXJSYWRpdXM9XCJzXCI+XG4gICAgICAgICAgPFRleHQgY29sb3I9XCJncmVlbi43MDBcIj57YXBpTWVzc2FnZX08L1RleHQ+XG4gICAgICAgIDwvQm94PlxuICAgICAgKX1cbiAgICAgIHthcGlFcnJvciAmJiAoXG4gICAgICAgIDxCb3ggYmFja2dyb3VuZENvbG9yPVwicmVkLjEwMFwiIHBhZGRpbmc9XCJzXCIgbWFyZ2luQm90dG9tPVwibVwiIGJvcmRlclJhZGl1cz1cInNcIj5cbiAgICAgICAgICA8VGV4dCBjb2xvcj1cInJlZC43MDBcIj57YXBpRXJyb3J9PC9UZXh0PlxuICAgICAgICA8L0JveD5cbiAgICAgICl9XG5cbiAgICAgIHsvKiBHb29nbGUgQWNjb3VudCBTZWN0aW9uIChDYWxlbmRhciAmIEdtYWlsKSAqL31cbiAgICAgIDxCb3ggbWFyZ2luQm90dG9tPVwibVwiIHBhZGRpbmdCb3R0b209XCJtXCIgYm9yZGVyQm90dG9tV2lkdGg9ezF9IGJvcmRlckNvbG9yPVwiaGFpcmxpbmVcIj5cbiAgICAgICAgPFRleHQgdmFyaWFudD1cInN1YkhlYWRlclwiIG1hcmdpbkJvdHRvbT1cInNcIj5cbiAgICAgICAgICBHb29nbGUgQWNjb3VudCAoQ2FsZW5kYXIsIEdtYWlsKVxuICAgICAgICA8L1RleHQ+XG4gICAgICAgIHtpc0xvYWRpbmdTdGF0dXMgPyAoXG4gICAgICAgICAgPFRleHQ+TG9hZGluZyBHb29nbGUgY29ubmVjdGlvbiBzdGF0dXMuLi48L1RleHQ+XG4gICAgICAgICkgOiBpc0NhbGVuZGFyQ29ubmVjdGVkID8gKCAvLyBpc0NhbGVuZGFyQ29ubmVjdGVkIG5vdyBpbXBsaWVzIEdvb2dsZSBBY2NvdW50IGlzIGNvbm5lY3RlZFxuICAgICAgICAgIDxCb3g+XG4gICAgICAgICAgICA8VGV4dCBtYXJnaW5Cb3R0b209XCJzXCI+U3RhdHVzOiBDb25uZWN0ZWQgKHt1c2VyRW1haWwgfHwgJ0RldGFpbHMgdW5hdmFpbGFibGUnfSk8L1RleHQ+XG4gICAgICAgICAgICA8VGV4dCBmb250U2l6ZT1cInNtXCIgY29sb3I9XCJncmF5LjYwMFwiIG1hcmdpbkJvdHRvbT1cInNcIj5cbiAgICAgICAgICAgICAgUHJvdmlkZXMgYWNjZXNzIHRvIEdvb2dsZSBDYWxlbmRhciBhbmQgR21haWwgKHJlYWQtb25seSkuIFJlY29ubmVjdGluZyBtYXkgYmUgbmVlZGVkIGlmIHByZXZpb3VzbHkgY29ubmVjdGVkIHdpdGhvdXQgR21haWwgcGVybWlzc2lvbnMuXG4gICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICA8QnV0dG9uIG9uUHJlc3M9e2hhbmRsZURpc2Nvbm5lY3RHb29nbGVDYWxlbmRhcn0gdmFyaWFudD1cImRhbmdlclwiIHRpdGxlPVwiRGlzY29ubmVjdCBHb29nbGUgQWNjb3VudFwiIC8+XG4gICAgICAgICAgPC9Cb3g+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgPEJveD5cbiAgICAgICAgICAgIDxUZXh0IG1hcmdpbkJvdHRvbT1cInNcIj5TdGF0dXM6IE5vdCBDb25uZWN0ZWQ8L1RleHQ+XG4gICAgICAgICAgICA8QnV0dG9uIG9uUHJlc3M9e2hhbmRsZUNvbm5lY3RHb29nbGVDYWxlbmRhcn0gdmFyaWFudD1cInByaW1hcnlcIiB0aXRsZT1cIkNvbm5lY3QgR29vZ2xlIEFjY291bnRcIiAvPlxuICAgICAgICAgIDwvQm94PlxuICAgICAgICApfVxuICAgICAgPC9Cb3g+XG5cbiAgICAgIHsvKiBFbWFpbCBBY2NvdW50IFNlY3Rpb24gLSBUaGlzIG1pZ2h0IGJlY29tZSByZWR1bmRhbnQgaWYgR21haWwgaXMgdGhlIHByaW1hcnkgZW1haWwsIG9yIGNvdWxkIGJlIGZvciBvdGhlciBJTUFQIGV0Yy4gKi99XG4gICAgICA8Qm94IG1hcmdpbkJvdHRvbT1cIm1cIiBwYWRkaW5nQm90dG9tPVwibVwiIGJvcmRlckJvdHRvbVdpZHRoPXsxfSBib3JkZXJDb2xvcj1cImhhaXJsaW5lXCI+XG4gICAgICAgIDxUZXh0IHZhcmlhbnQ9XCJzdWJIZWFkZXJcIiBtYXJnaW5Cb3R0b209XCJzXCI+XG4gICAgICAgICAgRW1haWwgQWNjb3VudFxuICAgICAgICA8L1RleHQ+XG4gICAgICAgIDxCdXR0b24gb25QcmVzcz17KCkgPT4gY29uc29sZS5sb2coJ0Nvbm5lY3QgRW1haWwgQWNjb3VudCBjbGlja2VkJyl9IHZhcmlhbnQ9XCJwcmltYXJ5XCIgdGl0bGU9XCJDb25uZWN0IEVtYWlsIEFjY291bnRcIiAvPlxuICAgICAgICB7LyogRXhhbXBsZSBvZiBjb25kaXRpb25hbCBkaXNwbGF5OlxuICAgICAgICB7aXNFbWFpbEFjY291bnRDb25uZWN0ZWQgPyAoXG4gICAgICAgICAgPEJveD5cbiAgICAgICAgICAgIDxUZXh0PkNvbm5lY3RlZDogdXNlckBleGFtcGxlLmNvbTwvVGV4dD5cbiAgICAgICAgICAgIDxCdXR0b24gb25QcmVzcz17KCkgPT4gY29uc29sZS5sb2coJ0Rpc2Nvbm5lY3QgRW1haWwgQWNjb3VudCcpfSB0aXRsZT1cIkRpc2Nvbm5lY3RcIiB2YXJpYW50PVwiZGFuZ2VyXCIgLz5cbiAgICAgICAgICA8L0JveD5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8QnV0dG9uIG9uUHJlc3M9eygpID0+IGNvbnNvbGUubG9nKCdDb25uZWN0IEVtYWlsIEFjY291bnQgY2xpY2tlZCcpfSB2YXJpYW50PVwicHJpbWFyeVwiIHRpdGxlPVwiQ29ubmVjdCBFbWFpbCBBY2NvdW50XCIgLz5cbiAgICAgICAgKX1cbiAgICAgICAgKi99XG4gICAgICA8L0JveD5cblxuICAgICAgey8qIFphcGllciBJbnRlZ3JhdGlvbiBTZWN0aW9uICovfVxuICAgICAgPEJveCBtYXJnaW5Cb3R0b209XCJtXCI+XG4gICAgICAgIDxUZXh0IHZhcmlhbnQ9XCJzdWJIZWFkZXJcIiBtYXJnaW5Cb3R0b209XCJzXCI+XG4gICAgICAgICAgWmFwaWVyIEludGVncmF0aW9uXG4gICAgICAgIDwvVGV4dD5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRW50ZXIgWmFwaWVyIFdlYmhvb2sgVVJMIGZvciBBdG9tXCJcbiAgICAgICAgICB2YWx1ZT17emFwaWVyVXJsfVxuICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0WmFwaWVyVXJsKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgIHBhZGRpbmc6ICc4cHgnLFxuICAgICAgICAgICAgbWFyZ2luQm90dG9tOiAnOHB4JyxcbiAgICAgICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCAjY2NjJyxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzRweCcsXG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgICAgPEJ1dHRvbiBvblByZXNzPXtoYW5kbGVTYXZlWmFwaWVyVXJsfSB2YXJpYW50PVwicHJpbWFyeVwiIHRpdGxlPVwiU2F2ZSBaYXBpZXIgVVJMXCIgLz5cbiAgICAgIDwvQm94PlxuXG4gICAgICB7LyogV2FrZSBXb3JkIERldGVjdGlvbiBTZWN0aW9uICovfVxuICAgICAgPEJveCBtYXJnaW5Ub3A9XCJtXCIgcGFkZGluZ1RvcD1cIm1cIiBib3JkZXJUb3BXaWR0aD17MX0gYm9yZGVyQ29sb3I9XCJoYWlybGluZVwiPlxuICAgICAgICA8VGV4dCB2YXJpYW50PVwic3ViSGVhZGVyXCIgbWFyZ2luQm90dG9tPVwic1wiPlxuICAgICAgICAgIFdha2UgV29yZCBEZXRlY3Rpb24gKEV4cGVyaW1lbnRhbClcbiAgICAgICAgPC9UZXh0PlxuICAgICAgICA8Qm94IGZsZXhEaXJlY3Rpb249XCJyb3dcIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCIgbWFyZ2luQm90dG9tPVwic1wiPlxuICAgICAgICAgIDxTd2l0Y2hcbiAgICAgICAgICAgIHZhbHVlPXtpc1dha2VXb3JkRW5hYmxlZH1cbiAgICAgICAgICAgIG9uVmFsdWVDaGFuZ2U9e3RvZ2dsZVdha2VXb3JkfVxuICAgICAgICAgICAgYWNjZXNzaWJpbGl0eUxhYmVsPVwiVG9nZ2xlIFdha2UgV29yZCBEZXRlY3Rpb25cIlxuICAgICAgICAgIC8+XG4gICAgICAgICAgPFRleHQgbWFyZ2luTGVmdD1cInNcIj5FbmFibGUgV2FrZSBXb3JkIChcIkF0b21cIik8L1RleHQ+XG4gICAgICAgIDwvQm94PlxuICAgICAgICB7aXNXYWtlV29yZEVuYWJsZWQgJiYgaXNMaXN0ZW5pbmcgJiYgKFxuICAgICAgICAgIDxUZXh0IGNvbG9yPVwiZ3JlZW4uNTAwXCIgbWFyZ2luQm90dG9tPVwic1wiPlN0YXR1czogTGlzdGVuaW5nLi4uPC9UZXh0PlxuICAgICAgICApfVxuICAgICAgICB7aXNXYWtlV29yZEVuYWJsZWQgJiYgIWlzTGlzdGVuaW5nICYmICF3YWtlV29yZEVycm9yICYmIChcbiAgICAgICAgICA8VGV4dCBjb2xvcj1cImdyYXkuNTAwXCIgbWFyZ2luQm90dG9tPVwic1wiPlN0YXR1czogRW5hYmxlZCwgYnV0IG5vdCBhY3RpdmVseSBsaXN0ZW5pbmcgKGUuZy4gbWljIHBlcm1pc3Npb24gcGVuZGluZyBvciBpZGxlKTwvVGV4dD5cbiAgICAgICAgKX1cbiAgICAgICAgIHtpc1dha2VXb3JkRW5hYmxlZCAmJiAhaXNMaXN0ZW5pbmcgJiYgd2FrZVdvcmRFcnJvciAmJiAoXG4gICAgICAgICAgPFRleHQgY29sb3I9XCJvcmFuZ2UuNTAwXCIgbWFyZ2luQm90dG9tPVwic1wiPlN0YXR1czogRW5hYmxlZCwgYnV0IGN1cnJlbnRseSBub3QgbGlzdGVuaW5nIGR1ZSB0byBlcnJvci48L1RleHQ+XG4gICAgICAgICl9XG4gICAgICAgIHt3YWtlV29yZEVycm9yICYmIChcbiAgICAgICAgICA8Qm94IGJhY2tncm91bmRDb2xvcj1cInJlZC4xMDBcIiBwYWRkaW5nPVwic1wiIG1hcmdpbkJvdHRvbT1cIm1cIiBib3JkZXJSYWRpdXM9XCJzXCI+XG4gICAgICAgICAgICA8VGV4dCBjb2xvcj1cInJlZC43MDBcIj5XYWtlIFdvcmQgRXJyb3I6IHt3YWtlV29yZEVycm9yfTwvVGV4dD5cbiAgICAgICAgICA8L0JveD5cbiAgICAgICAgKX1cbiAgICAgICAgPFRleHQgdmFyaWFudD1cImJvZHlcIiBmb250U2l6ZT1cInNtXCIgY29sb3I9XCJncmF5LjYwMFwiPlxuICAgICAgICAgIEFsbG93cyBBdG9tIHRvIGxpc3RlbiBmb3IgdGhlIHdha2Ugd29yZCBcIkF0b21cIiB0byBzdGFydCBpbnRlcmFjdGlvbnMuIFJlcXVpcmVzIG1pY3JvcGhvbmUgcGVybWlzc2lvbi5cbiAgICAgICAgICBUaGlzIGZlYXR1cmUgaXMgZXhwZXJpbWVudGFsIGFuZCByZWxpZXMgb24gYSBjb25maWd1cmVkIGF1ZGlvIHByb2Nlc3NvciAoTkVYVF9QVUJMSUNfQVVESU9fUFJPQ0VTU09SX1VSTCkuXG4gICAgICAgICAgSWYgTkVYVF9QVUJMSUNfTU9DS19XQUtFX1dPUkRfREVURUNUSU9OIGlzIHRydWUsIGl0IHdpbGwgc2ltdWxhdGUgZGV0ZWN0aW9uLlxuICAgICAgICA8L1RleHQ+XG4gICAgICA8L0JveD5cblxuICAgICAgey8qIE1pY3Jvc29mdCBUZWFtcyBTZWN0aW9uICovfVxuICAgICAgPEJveCBtYXJnaW5Ub3A9XCJtXCIgcGFkZGluZ1RvcD1cIm1cIiBib3JkZXJUb3BXaWR0aD17MX0gYm9yZGVyQ29sb3I9XCJoYWlybGluZVwiPlxuICAgICAgICA8VGV4dCB2YXJpYW50PVwic3ViSGVhZGVyXCIgbWFyZ2luQm90dG9tPVwic1wiPlxuICAgICAgICAgIE1pY3Jvc29mdCBUZWFtcyBBY2NvdW50XG4gICAgICAgIDwvVGV4dD5cbiAgICAgICAgey8qIFRPRE86IEZldGNoIGFuZCBkaXNwbGF5IGFjdHVhbCBNUyBUZWFtcyBjb25uZWN0aW9uIHN0YXR1cyAqL31cbiAgICAgICAgey8qIEZvciBub3csIHVzaW5nIGEgcGxhY2Vob2xkZXIgc3RhdGUgYW5kIGxvZ2ljICovfVxuICAgICAgICB7LyogPFRleHQgbWFyZ2luQm90dG9tPVwic1wiPlN0YXR1czoge2lzTVNUZWFtc0Nvbm5lY3RlZCA/IGBDb25uZWN0ZWQgKCR7bXNUZWFtc1VzZXJFbWFpbCB8fCAnRGV0YWlscyB1bmF2YWlsYWJsZSd9KWAgOiAnTm90IENvbm5lY3RlZCd9PC9UZXh0PiAqL31cbiAgICAgICAgey8qIHtpc01TVGVhbXNDb25uZWN0ZWQgPyAoXG4gICAgICAgICAgPEJ1dHRvbiBvblByZXNzPXtoYW5kbGVEaXNjb25uZWN0TVNUZWFtc30gdmFyaWFudD1cImRhbmdlclwiIHRpdGxlPVwiRGlzY29ubmVjdCBNaWNyb3NvZnQgVGVhbXNcIiAvPlxuICAgICAgICApIDogKFxuICAgICAgICAgIDxCdXR0b24gb25QcmVzcz17aGFuZGxlQ29ubmVjdE1TVGVhbXN9IHZhcmlhbnQ9XCJwcmltYXJ5XCIgdGl0bGU9XCJDb25uZWN0IE1pY3Jvc29mdCBUZWFtc1wiIC8+XG4gICAgICAgICl9ICovfVxuICAgICAgICA8QnV0dG9uIG9uUHJlc3M9eygpID0+IHJvdXRlci5wdXNoKCcvYXBpL2F0b20vYXV0aC9tc3RlYW1zL2luaXRpYXRlJyl9IHZhcmlhbnQ9XCJwcmltYXJ5XCIgdGl0bGU9XCJDb25uZWN0IE1pY3Jvc29mdCBUZWFtc1wiIG1hcmdpbkJvdHRvbT1cInNcIiAvPlxuICAgICAgICAgPFRleHQgdmFyaWFudD1cImJvZHlcIiBmb250U2l6ZT1cInhzXCIgY29sb3I9XCJncmF5LjUwMFwiPlxuICAgICAgICAgICAgQ29ubmVjdCB5b3VyIE1pY3Jvc29mdCBhY2NvdW50IHRvIGFsbG93IEF0b20gdG8gcmVhZCBUZWFtcyBtZXNzYWdlcyAoZm9yIEFJLXBvd2VyZWQgc2VhcmNoIGFuZCBpbmZvcm1hdGlvbiBleHRyYWN0aW9uKSBhbmQgbWFuYWdlIFRlYW1zIGNhbGVuZGFyIGV2ZW50cy4gUmVxdWlyZXMgZGVsZWdhdGVkIHBlcm1pc3Npb25zLlxuICAgICAgICA8L1RleHQ+XG4gICAgICA8L0JveD5cblxuICAgICAgey8qIExpdmUgTWVldGluZyBBdHRlbmRhbmNlIFNlY3Rpb24gKi99XG4gICAgICA8TGl2ZU1lZXRpbmdBdHRlbmRhbmNlU2V0dGluZ3MgLz5cblxuICAgICAgey8qIENsb3VkIFN0b3JhZ2UgU2VjdGlvbiAqL31cbiAgICAgIDxCb3ggbWFyZ2luVG9wPVwibVwiIHBhZGRpbmdUb3A9XCJtXCIgYm9yZGVyVG9wV2lkdGg9ezF9IGJvcmRlckNvbG9yPVwiaGFpcmxpbmVcIj5cbiAgICAgICAgIDxUZXh0IHZhcmlhbnQ9XCJzdWJIZWFkZXJcIiBtYXJnaW5Cb3R0b209XCJzXCI+XG4gICAgICAgICAgQ2xvdWQgU3RvcmFnZSAoZm9yIERvY3VtZW50IFNlYXJjaClcbiAgICAgICAgPC9UZXh0PlxuICAgICAgICB7LyogR0RyaXZlIE1hbmFnZXIgKi99XG4gICAgICAgIDxHRHJpdmVNYW5hZ2VyIC8+XG4gICAgICAgIHsvKiBEcm9wYm94IE1hbmFnZXIgKi99XG4gICAgICAgIDxEcm9wYm94TWFuYWdlciAvPlxuICAgICAgPC9Cb3g+XG5cbiAgICAgIHsvKiBWb2ljZSBTZXR0aW5ncyBTZWN0aW9uICovfVxuICAgICAgPFZvaWNlU2V0dGluZ3MgLz5cblxuICAgICAgey8qIFRoaXJkLVBhcnR5IEludGVncmF0aW9ucyBTZWN0aW9uICovfVxuICAgICAgPFRoaXJkUGFydHlJbnRlZ3JhdGlvbnMgLz5cblxuICAgICAgey8qIExMTSBNb2RlbCBTZWxlY3Rpb24gU2VjdGlvbiAqL31cbiAgICAgIDxCb3ggbWFyZ2luVG9wPVwibVwiIHBhZGRpbmdUb3A9XCJtXCIgYm9yZGVyVG9wV2lkdGg9ezF9IGJvcmRlckNvbG9yPVwiaGFpcmxpbmVcIj5cbiAgICAgICAgPFRleHQgdmFyaWFudD1cInN1YkhlYWRlclwiIG1hcmdpbkJvdHRvbT1cInNcIj5cbiAgICAgICAgICBMTE0gTW9kZWxcbiAgICAgICAgPC9UZXh0PlxuICAgICAgICA8c2VsZWN0XG4gICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICBwYWRkaW5nOiAnOHB4JyxcbiAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogJzhweCcsXG4gICAgICAgICAgICBib3JkZXI6ICcxcHggc29saWQgI2NjYycsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc0cHgnLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiZ3B0LTMuNS10dXJib1wiPkdQVC0zLjUgVHVyYm88L29wdGlvbj5cbiAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiZ3B0LTRcIj5HUFQtNDwvb3B0aW9uPlxuICAgICAgICA8L3NlbGVjdD5cbiAgICAgIDwvQm94PlxuICAgIDwvQm94PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXRvbUFnZW50U2V0dGluZ3M7XG4iXX0=