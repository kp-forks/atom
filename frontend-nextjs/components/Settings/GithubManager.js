"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@chakra-ui/react");
const GitHubManager = () => {
    const [apiKey, setApiKey] = (0, react_1.useState)('');
    const [isConnected, setIsConnected] = (0, react_1.useState)(false);
    const [isLoading, setIsLoading] = (0, react_1.useState)(true);
    const toast = (0, react_2.useToast)();
    (0, react_1.useEffect)(() => {
        const checkConnection = async () => {
            try {
                const response = await fetch('/api/integrations/credentials?service=github');
                const data = await response.json();
                if (data.isConnected) {
                    setIsConnected(true);
                    setApiKey('********');
                }
            }
            catch (error) {
                console.error('Error checking GitHub connection:', error);
            }
            finally {
                setIsLoading(false);
            }
        };
        checkConnection();
    }, []);
    const handleSaveApiKey = async () => {
        try {
            await fetch('/api/integrations/credentials', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ service: 'github', secret: apiKey }),
            });
            setIsConnected(true);
            toast({
                title: 'GitHub API key saved.',
                status: 'success',
                duration: 3000,
                isClosable: true,
            });
        }
        catch (error) {
            console.error('Error saving GitHub API key:', error);
            toast({
                title: 'Error saving GitHub API key.',
                status: 'error',
                duration: 3000,
                isClosable: true,
            });
        }
    };
    if (isLoading) {
        return (0, jsx_runtime_1.jsx)(react_2.Text, { children: "Loading..." });
    }
    return ((0, jsx_runtime_1.jsxs)(react_2.Box, { children: [(0, jsx_runtime_1.jsx)(react_2.Text, { fontSize: "xl", mb: 4, children: "GitHub Integration" }), isConnected ? ((0, jsx_runtime_1.jsx)(react_2.Text, { children: "You are connected to GitHub." })) : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(react_2.Input, { placeholder: "Enter your GitHub API Key", value: apiKey, onChange: (e) => setApiKey(e.target.value), mb: 4 }), (0, jsx_runtime_1.jsx)(react_2.Button, { onClick: handleSaveApiKey, children: "Save API Key" })] }))] }));
};
exports.default = GitHubManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2l0aHViTWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkdpdGh1Yk1hbmFnZXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlDQUFtRDtBQUNuRCw0Q0FBc0U7QUFFdEUsTUFBTSxhQUFhLEdBQUcsR0FBRyxFQUFFO0lBQ3ZCLE1BQU0sQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLEdBQUcsSUFBQSxnQkFBUSxFQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3pDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsY0FBYyxDQUFDLEdBQUcsSUFBQSxnQkFBUSxFQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RELE1BQU0sQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDLEdBQUcsSUFBQSxnQkFBUSxFQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pELE1BQU0sS0FBSyxHQUFHLElBQUEsZ0JBQVEsR0FBRSxDQUFDO0lBRXpCLElBQUEsaUJBQVMsRUFBQyxHQUFHLEVBQUU7UUFDWCxNQUFNLGVBQWUsR0FBRyxLQUFLLElBQUksRUFBRTtZQUMvQixJQUFJLENBQUM7Z0JBQ0QsTUFBTSxRQUFRLEdBQUcsTUFBTSxLQUFLLENBQUMsOENBQThDLENBQUMsQ0FBQztnQkFDN0UsTUFBTSxJQUFJLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ25DLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO29CQUNuQixjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ3JCLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDMUIsQ0FBQztZQUNMLENBQUM7WUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO2dCQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsbUNBQW1DLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDOUQsQ0FBQztvQkFBUyxDQUFDO2dCQUNQLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN4QixDQUFDO1FBQ0wsQ0FBQyxDQUFDO1FBQ0YsZUFBZSxFQUFFLENBQUM7SUFDdEIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRVAsTUFBTSxnQkFBZ0IsR0FBRyxLQUFLLElBQUksRUFBRTtRQUNoQyxJQUFJLENBQUM7WUFDRCxNQUFNLEtBQUssQ0FBQywrQkFBK0IsRUFBRTtnQkFDekMsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsT0FBTyxFQUFFO29CQUNMLGNBQWMsRUFBRSxrQkFBa0I7aUJBQ3JDO2dCQUNELElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUM7YUFDOUQsQ0FBQyxDQUFDO1lBQ0gsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JCLEtBQUssQ0FBQztnQkFDRixLQUFLLEVBQUUsdUJBQXVCO2dCQUM5QixNQUFNLEVBQUUsU0FBUztnQkFDakIsUUFBUSxFQUFFLElBQUk7Z0JBQ2QsVUFBVSxFQUFFLElBQUk7YUFDbkIsQ0FBQyxDQUFDO1FBQ1AsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLDhCQUE4QixFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3JELEtBQUssQ0FBQztnQkFDRixLQUFLLEVBQUUsOEJBQThCO2dCQUNyQyxNQUFNLEVBQUUsT0FBTztnQkFDZixRQUFRLEVBQUUsSUFBSTtnQkFDZCxVQUFVLEVBQUUsSUFBSTthQUNuQixDQUFDLENBQUM7UUFDUCxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBRUYsSUFBSSxTQUFTLEVBQUUsQ0FBQztRQUNaLE9BQU8sdUJBQUMsWUFBSSw2QkFBa0IsQ0FBQztJQUNuQyxDQUFDO0lBRUQsT0FBTyxDQUNILHdCQUFDLFdBQUcsZUFDQSx1QkFBQyxZQUFJLElBQUMsUUFBUSxFQUFDLElBQUksRUFBQyxFQUFFLEVBQUUsQ0FBQyxtQ0FBMkIsRUFDbkQsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUNYLHVCQUFDLFlBQUksK0NBQW9DLENBQzVDLENBQUMsQ0FBQyxDQUFDLENBQ0EsNkRBQ0ksdUJBQUMsYUFBSyxJQUNGLFdBQVcsRUFBQywyQkFBMkIsRUFDdkMsS0FBSyxFQUFFLE1BQU0sRUFDYixRQUFRLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUMxQyxFQUFFLEVBQUUsQ0FBQyxHQUNQLEVBQ0YsdUJBQUMsY0FBTSxJQUFDLE9BQU8sRUFBRSxnQkFBZ0IsNkJBQXVCLElBQ3pELENBQ04sSUFDQyxDQUNULENBQUM7QUFDTixDQUFDLENBQUM7QUFFRixrQkFBZSxhQUFhLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJveCwgQnV0dG9uLCBJbnB1dCwgVGV4dCwgdXNlVG9hc3QgfSBmcm9tICdAY2hha3JhLXVpL3JlYWN0JztcblxuY29uc3QgR2l0SHViTWFuYWdlciA9ICgpID0+IHtcbiAgICBjb25zdCBbYXBpS2V5LCBzZXRBcGlLZXldID0gdXNlU3RhdGUoJycpO1xuICAgIGNvbnN0IFtpc0Nvbm5lY3RlZCwgc2V0SXNDb25uZWN0ZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcbiAgICBjb25zdCB0b2FzdCA9IHVzZVRvYXN0KCk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja0Nvbm5lY3Rpb24gPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvaW50ZWdyYXRpb25zL2NyZWRlbnRpYWxzP3NlcnZpY2U9Z2l0aHViJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5pc0Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICBzZXRJc0Nvbm5lY3RlZCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0QXBpS2V5KCcqKioqKioqKicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY2hlY2tpbmcgR2l0SHViIGNvbm5lY3Rpb246JywgZXJyb3IpO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjaGVja0Nvbm5lY3Rpb24oKTtcbiAgICB9LCBbXSk7XG5cbiAgICBjb25zdCBoYW5kbGVTYXZlQXBpS2V5ID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgZmV0Y2goJy9hcGkvaW50ZWdyYXRpb25zL2NyZWRlbnRpYWxzJywge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgc2VydmljZTogJ2dpdGh1YicsIHNlY3JldDogYXBpS2V5IH0pLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZXRJc0Nvbm5lY3RlZCh0cnVlKTtcbiAgICAgICAgICAgIHRvYXN0KHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0dpdEh1YiBBUEkga2V5IHNhdmVkLicsXG4gICAgICAgICAgICAgICAgc3RhdHVzOiAnc3VjY2VzcycsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDMwMDAsXG4gICAgICAgICAgICAgICAgaXNDbG9zYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igc2F2aW5nIEdpdEh1YiBBUEkga2V5OicsIGVycm9yKTtcbiAgICAgICAgICAgIHRvYXN0KHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0Vycm9yIHNhdmluZyBHaXRIdWIgQVBJIGtleS4nLFxuICAgICAgICAgICAgICAgIHN0YXR1czogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMzAwMCxcbiAgICAgICAgICAgICAgICBpc0Nsb3NhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKGlzTG9hZGluZykge1xuICAgICAgICByZXR1cm4gPFRleHQ+TG9hZGluZy4uLjwvVGV4dD47XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPEJveD5cbiAgICAgICAgICAgIDxUZXh0IGZvbnRTaXplPVwieGxcIiBtYj17NH0+R2l0SHViIEludGVncmF0aW9uPC9UZXh0PlxuICAgICAgICAgICAge2lzQ29ubmVjdGVkID8gKFxuICAgICAgICAgICAgICAgIDxUZXh0PllvdSBhcmUgY29ubmVjdGVkIHRvIEdpdEh1Yi48L1RleHQ+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJFbnRlciB5b3VyIEdpdEh1YiBBUEkgS2V5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXthcGlLZXl9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldEFwaUtleShlLnRhcmdldC52YWx1ZSl9XG4gICAgICAgICAgICAgICAgICAgICAgICBtYj17NH1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXtoYW5kbGVTYXZlQXBpS2V5fT5TYXZlIEFQSSBLZXk8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICl9XG4gICAgICAgIDwvQm94PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBHaXRIdWJNYW5hZ2VyO1xuIl19