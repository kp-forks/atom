"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const button_1 = require("../chat/ui/button"); // Assuming button is available
const icons_1 = require("../chat/ui/icons"); // Assuming icons are available
const MetadataFilter = ({ properties, onChange }) => {
    // Convert the properties object into an array of {key, value} for easier mapping
    const propertyArray = Object.entries(properties).map(([key, value]) => ({ key, value }));
    const handlePropertyChange = (index, field, newValue) => {
        const newArray = [...propertyArray];
        newArray[index] = { ...newArray[index], [field]: newValue };
        // Convert back to an object, ensuring no empty keys which can be problematic
        const newProperties = newArray.reduce((acc, prop) => {
            if (prop.key.trim()) {
                acc[prop.key.trim()] = prop.value;
            }
            return acc;
        }, {});
        onChange(newProperties);
    };
    const handleAddProperty = () => {
        // Add a new empty property, which will be finalized on input change
        const newProperties = { ...properties, '': '' };
        onChange(newProperties);
    };
    const handleRemoveProperty = (keyToRemove) => {
        const newProperties = { ...properties };
        delete newProperties[keyToRemove];
        onChange(newProperties);
    };
    return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { className: "block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1", children: "Filter by Metadata" }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2 p-2 border rounded-md bg-gray-50 dark:bg-gray-700/50 border-gray-200 dark:border-gray-600", children: [propertyArray.map((prop, index) => ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)("input", { type: "text", placeholder: "Property Key (e.g., author)", value: prop.key, onChange: (e) => handlePropertyChange(index, 'key', e.target.value), className: "flex-1 text-sm rounded-md border-gray-300 dark:border-gray-500 dark:bg-gray-600 dark:text-white shadow-sm focus:border-sky-500 focus:ring-sky-500" }), (0, jsx_runtime_1.jsx)("input", { type: "text", placeholder: "Property Value", value: prop.value, onChange: (e) => handlePropertyChange(index, 'value', e.target.value), className: "flex-1 text-sm rounded-md border-gray-300 dark:border-gray-500 dark:bg-gray-600 dark:text-white shadow-sm focus:border-sky-500 focus:ring-sky-500" }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "ghost", size: "icon", className: "h-8 w-8 text-gray-500 hover:bg-red-100 hover:text-red-600 dark:hover:bg-red-900/50 dark:hover:text-red-400", onClick: () => handleRemoveProperty(prop.key), children: (0, jsx_runtime_1.jsx)(icons_1.IconTrash, { className: "h-4 w-4" }) })] }, index))), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", size: "sm", className: "text-xs", onClick: handleAddProperty, children: [(0, jsx_runtime_1.jsx)(icons_1.IconPlus, { className: "mr-1 h-4 w-4" }), "Add Property"] })] })] }));
};
exports.default = MetadataFilter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWV0YWRhdGFGaWx0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJNZXRhZGF0YUZpbHRlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsOENBQTJDLENBQUMsK0JBQStCO0FBQzNFLDRDQUF1RCxDQUFDLCtCQUErQjtBQU92RixNQUFNLGNBQWMsR0FBa0MsQ0FBQyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFO0lBQ2pGLGlGQUFpRjtJQUNqRixNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztJQUV6RixNQUFNLG9CQUFvQixHQUFHLENBQUMsS0FBYSxFQUFFLEtBQXNCLEVBQUUsUUFBZ0IsRUFBRSxFQUFFO1FBQ3ZGLE1BQU0sUUFBUSxHQUFHLENBQUMsR0FBRyxhQUFhLENBQUMsQ0FBQztRQUNwQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLFFBQVEsRUFBRSxDQUFDO1FBRTVELDZFQUE2RTtRQUM3RSxNQUFNLGFBQWEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFO1lBQ2xELElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDO2dCQUNwQixHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDcEMsQ0FBQztZQUNELE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQyxFQUFFLEVBQTRCLENBQUMsQ0FBQztRQUVqQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDMUIsQ0FBQyxDQUFDO0lBRUYsTUFBTSxpQkFBaUIsR0FBRyxHQUFHLEVBQUU7UUFDN0Isb0VBQW9FO1FBQ3BFLE1BQU0sYUFBYSxHQUFHLEVBQUUsR0FBRyxVQUFVLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ2hELFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUMxQixDQUFDLENBQUM7SUFFRixNQUFNLG9CQUFvQixHQUFHLENBQUMsV0FBbUIsRUFBRSxFQUFFO1FBQ25ELE1BQU0sYUFBYSxHQUFHLEVBQUUsR0FBRyxVQUFVLEVBQUUsQ0FBQztRQUN4QyxPQUFPLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNsQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDMUIsQ0FBQyxDQUFDO0lBRUYsT0FBTyxDQUNMLDRDQUNFLGtDQUFPLFNBQVMsRUFBQyxpRUFBaUUsbUNBRTFFLEVBQ1IsaUNBQUssU0FBUyxFQUFDLHFHQUFxRyxhQUNqSCxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FDbEMsaUNBQWlCLFNBQVMsRUFBQyx5QkFBeUIsYUFDbEQsa0NBQ0UsSUFBSSxFQUFDLE1BQU0sRUFDWCxXQUFXLEVBQUMsNkJBQTZCLEVBQ3pDLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxFQUNmLFFBQVEsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsb0JBQW9CLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUNuRSxTQUFTLEVBQUMsbUpBQW1KLEdBQzdKLEVBQ0Ysa0NBQ0UsSUFBSSxFQUFDLE1BQU0sRUFDWCxXQUFXLEVBQUMsZ0JBQWdCLEVBQzVCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUNqQixRQUFRLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLG9CQUFvQixDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFDckUsU0FBUyxFQUFDLG1KQUFtSixHQUM3SixFQUNGLHVCQUFDLGVBQU0sSUFDTCxPQUFPLEVBQUMsT0FBTyxFQUNmLElBQUksRUFBQyxNQUFNLEVBQ1gsU0FBUyxFQUFDLDRHQUE0RyxFQUN0SCxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUU3Qyx1QkFBQyxpQkFBUyxJQUFDLFNBQVMsRUFBQyxTQUFTLEdBQUcsR0FDMUIsS0F0QkQsS0FBSyxDQXVCVCxDQUNQLENBQUMsRUFDRix3QkFBQyxlQUFNLElBQ0wsT0FBTyxFQUFDLFNBQVMsRUFDakIsSUFBSSxFQUFDLElBQUksRUFDVCxTQUFTLEVBQUMsU0FBUyxFQUNuQixPQUFPLEVBQUUsaUJBQWlCLGFBRTFCLHVCQUFDLGdCQUFRLElBQUMsU0FBUyxFQUFDLGNBQWMsR0FBRyxvQkFFOUIsSUFDTCxJQUNGLENBQ1AsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLGtCQUFlLGNBQWMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJy4uL2NoYXQvdWkvYnV0dG9uJzsgLy8gQXNzdW1pbmcgYnV0dG9uIGlzIGF2YWlsYWJsZVxuaW1wb3J0IHsgSWNvblBsdXMsIEljb25UcmFzaCB9IGZyb20gJy4uL2NoYXQvdWkvaWNvbnMnOyAvLyBBc3N1bWluZyBpY29ucyBhcmUgYXZhaWxhYmxlXG5cbmludGVyZmFjZSBNZXRhZGF0YUZpbHRlclByb3BzIHtcbiAgcHJvcGVydGllczogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbiAgb25DaGFuZ2U6IChwcm9wZXJ0aWVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KSA9PiB2b2lkO1xufVxuXG5jb25zdCBNZXRhZGF0YUZpbHRlcjogUmVhY3QuRkM8TWV0YWRhdGFGaWx0ZXJQcm9wcz4gPSAoeyBwcm9wZXJ0aWVzLCBvbkNoYW5nZSB9KSA9PiB7XG4gIC8vIENvbnZlcnQgdGhlIHByb3BlcnRpZXMgb2JqZWN0IGludG8gYW4gYXJyYXkgb2Yge2tleSwgdmFsdWV9IGZvciBlYXNpZXIgbWFwcGluZ1xuICBjb25zdCBwcm9wZXJ0eUFycmF5ID0gT2JqZWN0LmVudHJpZXMocHJvcGVydGllcykubWFwKChba2V5LCB2YWx1ZV0pID0+ICh7IGtleSwgdmFsdWUgfSkpO1xuXG4gIGNvbnN0IGhhbmRsZVByb3BlcnR5Q2hhbmdlID0gKGluZGV4OiBudW1iZXIsIGZpZWxkOiAna2V5JyB8ICd2YWx1ZScsIG5ld1ZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBuZXdBcnJheSA9IFsuLi5wcm9wZXJ0eUFycmF5XTtcbiAgICBuZXdBcnJheVtpbmRleF0gPSB7IC4uLm5ld0FycmF5W2luZGV4XSwgW2ZpZWxkXTogbmV3VmFsdWUgfTtcblxuICAgIC8vIENvbnZlcnQgYmFjayB0byBhbiBvYmplY3QsIGVuc3VyaW5nIG5vIGVtcHR5IGtleXMgd2hpY2ggY2FuIGJlIHByb2JsZW1hdGljXG4gICAgY29uc3QgbmV3UHJvcGVydGllcyA9IG5ld0FycmF5LnJlZHVjZSgoYWNjLCBwcm9wKSA9PiB7XG4gICAgICBpZiAocHJvcC5rZXkudHJpbSgpKSB7XG4gICAgICAgIGFjY1twcm9wLmtleS50cmltKCldID0gcHJvcC52YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30gYXMgUmVjb3JkPHN0cmluZywgc3RyaW5nPik7XG5cbiAgICBvbkNoYW5nZShuZXdQcm9wZXJ0aWVzKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVBZGRQcm9wZXJ0eSA9ICgpID0+IHtcbiAgICAvLyBBZGQgYSBuZXcgZW1wdHkgcHJvcGVydHksIHdoaWNoIHdpbGwgYmUgZmluYWxpemVkIG9uIGlucHV0IGNoYW5nZVxuICAgIGNvbnN0IG5ld1Byb3BlcnRpZXMgPSB7IC4uLnByb3BlcnRpZXMsICcnOiAnJyB9O1xuICAgIG9uQ2hhbmdlKG5ld1Byb3BlcnRpZXMpO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVJlbW92ZVByb3BlcnR5ID0gKGtleVRvUmVtb3ZlOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBuZXdQcm9wZXJ0aWVzID0geyAuLi5wcm9wZXJ0aWVzIH07XG4gICAgZGVsZXRlIG5ld1Byb3BlcnRpZXNba2V5VG9SZW1vdmVdO1xuICAgIG9uQ2hhbmdlKG5ld1Byb3BlcnRpZXMpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJibG9jayB0ZXh0LXNtIGZvbnQtbWVkaXVtIHRleHQtZ3JheS03MDAgZGFyazp0ZXh0LWdyYXktMzAwIG1iLTFcIj5cbiAgICAgICAgRmlsdGVyIGJ5IE1ldGFkYXRhXG4gICAgICA8L2xhYmVsPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTIgcC0yIGJvcmRlciByb3VuZGVkLW1kIGJnLWdyYXktNTAgZGFyazpiZy1ncmF5LTcwMC81MCBib3JkZXItZ3JheS0yMDAgZGFyazpib3JkZXItZ3JheS02MDBcIj5cbiAgICAgICAge3Byb3BlcnR5QXJyYXkubWFwKChwcm9wLCBpbmRleCkgPT4gKFxuICAgICAgICAgIDxkaXYga2V5PXtpbmRleH0gY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiUHJvcGVydHkgS2V5IChlLmcuLCBhdXRob3IpXCJcbiAgICAgICAgICAgICAgdmFsdWU9e3Byb3Aua2V5fVxuICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IGhhbmRsZVByb3BlcnR5Q2hhbmdlKGluZGV4LCAna2V5JywgZS50YXJnZXQudmFsdWUpfVxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmbGV4LTEgdGV4dC1zbSByb3VuZGVkLW1kIGJvcmRlci1ncmF5LTMwMCBkYXJrOmJvcmRlci1ncmF5LTUwMCBkYXJrOmJnLWdyYXktNjAwIGRhcms6dGV4dC13aGl0ZSBzaGFkb3ctc20gZm9jdXM6Ym9yZGVyLXNreS01MDAgZm9jdXM6cmluZy1za3ktNTAwXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlByb3BlcnR5IFZhbHVlXCJcbiAgICAgICAgICAgICAgdmFsdWU9e3Byb3AudmFsdWV9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gaGFuZGxlUHJvcGVydHlDaGFuZ2UoaW5kZXgsICd2YWx1ZScsIGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZmxleC0xIHRleHQtc20gcm91bmRlZC1tZCBib3JkZXItZ3JheS0zMDAgZGFyazpib3JkZXItZ3JheS01MDAgZGFyazpiZy1ncmF5LTYwMCBkYXJrOnRleHQtd2hpdGUgc2hhZG93LXNtIGZvY3VzOmJvcmRlci1za3ktNTAwIGZvY3VzOnJpbmctc2t5LTUwMFwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICB2YXJpYW50PVwiZ2hvc3RcIlxuICAgICAgICAgICAgICBzaXplPVwiaWNvblwiXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImgtOCB3LTggdGV4dC1ncmF5LTUwMCBob3ZlcjpiZy1yZWQtMTAwIGhvdmVyOnRleHQtcmVkLTYwMCBkYXJrOmhvdmVyOmJnLXJlZC05MDAvNTAgZGFyazpob3Zlcjp0ZXh0LXJlZC00MDBcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYW5kbGVSZW1vdmVQcm9wZXJ0eShwcm9wLmtleSl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxJY29uVHJhc2ggY2xhc3NOYW1lPVwiaC00IHctNFwiIC8+XG4gICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKSl9XG4gICAgICAgIDxCdXR0b25cbiAgICAgICAgICB2YXJpYW50PVwib3V0bGluZVwiXG4gICAgICAgICAgc2l6ZT1cInNtXCJcbiAgICAgICAgICBjbGFzc05hbWU9XCJ0ZXh0LXhzXCJcbiAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVBZGRQcm9wZXJ0eX1cbiAgICAgICAgPlxuICAgICAgICAgIDxJY29uUGx1cyBjbGFzc05hbWU9XCJtci0xIGgtNCB3LTRcIiAvPlxuICAgICAgICAgIEFkZCBQcm9wZXJ0eVxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTWV0YWRhdGFGaWx0ZXI7XG4iXX0=