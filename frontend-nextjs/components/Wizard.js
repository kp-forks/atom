"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Wizard;
const jsx_runtime_1 = require("react/jsx-runtime");
const wizard_helper_1 = require("./wizard/wizard-helper");
function WizardItem(props) {
    const state = props?.state;
    const label = props?.label;
    const index = props?.index;
    if (state === wizard_helper_1.WizardState.COMPLETED) {
        return ((0, jsx_runtime_1.jsx)("li", { className: "flex", children: (0, jsx_runtime_1.jsx)("span", { className: "rounded bg-green-50 p-1.5 text-green-600", children: (0, jsx_runtime_1.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", className: "h-3 w-3", viewBox: "0 0 20 20", fill: "currentColor", children: (0, jsx_runtime_1.jsx)("path", { fillRule: "evenodd", d: "M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z", clipRule: "evenodd" }) }) }) }));
    }
    if (state === wizard_helper_1.WizardState.ENABLED) {
        return ((0, jsx_runtime_1.jsxs)("li", { className: "flex items-center justify-center gap-2 text-purple-600", children: [(0, jsx_runtime_1.jsx)("span", { className: "h-6 w-6 rounded bg-purple-50 text-center text-[10px] font-bold leading-6", children: index + 1 }), (0, jsx_runtime_1.jsxs)("span", { children: [" ", label, " "] })] }));
    }
    return (0, jsx_runtime_1.jsx)("div", {});
}
function Wizard(props) {
    const items = props?.items;
    const activeIndex = props?.activeIndex;
    const completed = props?.completed;
    // getStepState
    return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h2", { className: "sr-only", children: "Steps" }), (0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsx)("ol", { className: "flex items-center gap-2 text-xs font-medium text-gray-500 sm:gap-4", children: items?.map((item) => (0, jsx_runtime_1.jsx)(WizardItem, { state: (0, wizard_helper_1.getStepState)(item?.index, completed, activeIndex), index: item?.index, label: item?.label }, item?.label)) }) })] }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2l6YXJkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiV2l6YXJkLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQW1EQSx5QkF3QkM7O0FBdkVELDBEQUFrRTtBQUVsRSxTQUFTLFVBQVUsQ0FBQyxLQUFpQztJQUNqRCxNQUFNLEtBQUssR0FBRyxLQUFLLEVBQUUsS0FBSyxDQUFBO0lBQzFCLE1BQU0sS0FBSyxHQUFHLEtBQUssRUFBRSxLQUFLLENBQUE7SUFDMUIsTUFBTSxLQUFLLEdBQUcsS0FBSyxFQUFFLEtBQUssQ0FBQTtJQUUxQixJQUFJLEtBQUssS0FBSywyQkFBVyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRWxDLE9BQU8sQ0FDSCwrQkFBSSxTQUFTLEVBQUMsTUFBTSxZQUNoQixpQ0FBTSxTQUFTLEVBQUMsMENBQTBDLFlBQ3RELGdDQUNJLEtBQUssRUFBQyw0QkFBNEIsRUFDbEMsU0FBUyxFQUFDLFNBQVMsRUFDbkIsT0FBTyxFQUFDLFdBQVcsRUFDbkIsSUFBSSxFQUFDLGNBQWMsWUFFbkIsaUNBQ0EsUUFBUSxFQUFDLFNBQVMsRUFDbEIsQ0FBQyxFQUFDLG9IQUFvSCxFQUN0SCxRQUFRLEVBQUMsU0FBUyxHQUNoQixHQUNBLEdBQ0gsR0FDTixDQUNSLENBQUE7SUFDTCxDQUFDO0lBRUQsSUFBSSxLQUFLLEtBQUssMkJBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNoQyxPQUFPLENBQ0gsZ0NBQUksU0FBUyxFQUFDLHdEQUF3RCxhQUNsRSxpQ0FDQSxTQUFTLEVBQUMsMEVBQTBFLFlBRW5GLEtBQUssR0FBRyxDQUFDLEdBQ0gsRUFFUCxrREFBUSxLQUFLLFNBQVMsSUFDckIsQ0FDUixDQUFBO0lBQ0wsQ0FBQztJQUVELE9BQU8saUNBQU8sQ0FBQTtBQUNsQixDQUFDO0FBR0QsU0FBd0IsTUFBTSxDQUFDLEtBQXNCO0lBQ2pELE1BQU0sS0FBSyxHQUFHLEtBQUssRUFBRSxLQUFLLENBQUE7SUFDMUIsTUFBTSxXQUFXLEdBQUcsS0FBSyxFQUFFLFdBQVcsQ0FBQTtJQUN0QyxNQUFNLFNBQVMsR0FBRyxLQUFLLEVBQUUsU0FBUyxDQUFBO0lBRWxDLGVBQWU7SUFJZixPQUFPLENBQ0gsNENBQ0ksK0JBQUksU0FBUyxFQUFDLFNBQVMsc0JBQVcsRUFFbEMsMENBQ0ksK0JBQ0EsU0FBUyxFQUFDLG9FQUFvRSxZQUV6RSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyx1QkFBQyxVQUFVLElBQW1CLEtBQUssRUFBRSxJQUFBLDRCQUFZLEVBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsV0FBVyxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLElBQTdHLElBQUksRUFBRSxLQUFLLENBQXNHLENBQUMsR0FDeEosR0FDSCxJQUNKLENBQ1QsQ0FBQTtBQUdMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgUmVhY3RFbGVtZW50IH0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCBjbHMgZnJvbSAnY2xhc3NuYW1lcydcbmltcG9ydCB7IFdpemFyZEl0ZW1EaXNwbGF5UHJvcHNUeXBlLCBXaXphcmRJdGVtUHJvcHNUeXBlLCBXaXphcmRQcm9wc1R5cGUgfSBmcm9tICcuL3dpemFyZC90eXBlcydcbmltcG9ydCB7IGdldFN0ZXBTdGF0ZSwgV2l6YXJkU3RhdGUgfSBmcm9tICcuL3dpemFyZC93aXphcmQtaGVscGVyJ1xuXG5mdW5jdGlvbiBXaXphcmRJdGVtKHByb3BzOiBXaXphcmRJdGVtRGlzcGxheVByb3BzVHlwZSkge1xuICAgIGNvbnN0IHN0YXRlID0gcHJvcHM/LnN0YXRlXG4gICAgY29uc3QgbGFiZWwgPSBwcm9wcz8ubGFiZWxcbiAgICBjb25zdCBpbmRleCA9IHByb3BzPy5pbmRleFxuXG4gICAgaWYgKHN0YXRlID09PSBXaXphcmRTdGF0ZS5DT01QTEVURUQpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwiZmxleFwiPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInJvdW5kZWQgYmctZ3JlZW4tNTAgcC0xLjUgdGV4dC1ncmVlbi02MDBcIj5cbiAgICAgICAgICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJoLTMgdy0zXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgMjAgMjBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD1cImN1cnJlbnRDb2xvclwiXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsUnVsZT1cImV2ZW5vZGRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgZD1cIk0xNi43MDcgNS4yOTNhMSAxIDAgMDEwIDEuNDE0bC04IDhhMSAxIDAgMDEtMS40MTQgMGwtNC00YTEgMSAwIDAxMS40MTQtMS40MTRMOCAxMi41ODZsNy4yOTMtNy4yOTNhMSAxIDAgMDExLjQxNCAwelwiXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlwUnVsZT1cImV2ZW5vZGRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgKVxuICAgIH1cblxuICAgIGlmIChzdGF0ZSA9PT0gV2l6YXJkU3RhdGUuRU5BQkxFRCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIGdhcC0yIHRleHQtcHVycGxlLTYwMFwiPlxuICAgICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiaC02IHctNiByb3VuZGVkIGJnLXB1cnBsZS01MCB0ZXh0LWNlbnRlciB0ZXh0LVsxMHB4XSBmb250LWJvbGQgbGVhZGluZy02XCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge2luZGV4ICsgMX1cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG5cbiAgICAgICAgICAgICAgICA8c3Bhbj4ge2xhYmVsfSA8L3NwYW4+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuIDxkaXYgLz5cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBXaXphcmQocHJvcHM6IFdpemFyZFByb3BzVHlwZSkge1xuICAgIGNvbnN0IGl0ZW1zID0gcHJvcHM/Lml0ZW1zXG4gICAgY29uc3QgYWN0aXZlSW5kZXggPSBwcm9wcz8uYWN0aXZlSW5kZXhcbiAgICBjb25zdCBjb21wbGV0ZWQgPSBwcm9wcz8uY29tcGxldGVkXG5cbiAgICAvLyBnZXRTdGVwU3RhdGVcblxuICAgIFxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxoMiBjbGFzc05hbWU9XCJzci1vbmx5XCI+U3RlcHM8L2gyPlxuXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxvbFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0yIHRleHQteHMgZm9udC1tZWRpdW0gdGV4dC1ncmF5LTUwMCBzbTpnYXAtNFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7aXRlbXM/Lm1hcCgoaXRlbSkgPT4gPFdpemFyZEl0ZW0ga2V5PXtpdGVtPy5sYWJlbH0gc3RhdGU9e2dldFN0ZXBTdGF0ZShpdGVtPy5pbmRleCwgY29tcGxldGVkLCBhY3RpdmVJbmRleCl9IGluZGV4PXtpdGVtPy5pbmRleH0gbGFiZWw9e2l0ZW0/LmxhYmVsfSAvPil9XG4gICAgICAgICAgICAgICAgPC9vbD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApXG5cblxufVxuIl19