"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listGoogleDriveFiles = listGoogleDriveFiles;
exports.getGoogleDriveFileMetadata = getGoogleDriveFileMetadata;
exports.triggerGoogleDriveFileIngestion = triggerGoogleDriveFileIngestion;
exports.getGDriveConnectionStatus = getGDriveConnectionStatus;
exports.disconnectGDrive = disconnectGDrive;
const axios_1 = __importDefault(require("axios"));
const constants_1 = require("../../atomic-docker/project/functions/atom-agent/_libs/constants");
const logger_1 = require("../../atomic-docker/project/functions/_utils/logger");
const GDRIVE_API_TIMEOUT = 20000; // Default for most GDrive ops
const GDRIVE_STATUS_TIMEOUT = 5000; // Shorter for status checks
const GDRIVE_DISCONNECT_TIMEOUT = 10000;
// Helper to construct SkillResponse from axios errors
function handleAxiosError(error, operationName) {
    if (error.response) {
        logger_1.logger.error(`[gdriveSkills:${operationName}] Error: ${error.response.status}`, error.response.data);
        const errData = error.response.data;
        return {
            ok: false,
            error: {
                code: errData?.error?.code || `HTTP_${error.response.status}`,
                message: errData?.error?.message || `Failed to ${operationName}. Status: ${error.response.status}`,
                details: errData?.error?.details || errData,
            },
        };
    }
    else if (error.request) {
        logger_1.logger.error(`[gdriveSkills:${operationName}] Error: No response received for ${operationName}`, error.request);
        return { ok: false, error: { code: 'NETWORK_ERROR', message: `No response received for ${operationName}.` } };
    }
    else {
        logger_1.logger.error(`[gdriveSkills:${operationName}] Error setting up request: ${error.message}`);
        return { ok: false, error: { code: 'REQUEST_SETUP_ERROR', message: `Error setting up request for ${operationName}: ${error.message}` } };
    }
}
async function listGoogleDriveFiles(userId, folderId, query, pageSize = 50, pageToken) {
    if (!constants_1.PYTHON_API_SERVICE_BASE_URL) {
        return { ok: false, error: { code: 'CONFIG_ERROR', message: 'PYTHON_API_SERVICE_BASE_URL not configured.' } };
    }
    if (!userId) {
        return { ok: false, error: { code: 'VALIDATION_ERROR', message: 'userId is required to list Google Drive files.' } };
    }
    // No longer directly fetching access_token here; backend will handle it.
    const endpoint = `${constants_1.PYTHON_API_SERVICE_BASE_URL}/api/gdrive/list-files`;
    const payload = {
        user_id: userId, // Send user_id instead of access_token
        folder_id: folderId,
        query: query,
        page_size: pageSize,
        page_token: pageToken
    };
    logger_1.logger.info(`[listGoogleDriveFiles] Listing GDrive files for user ${userId}. Folder: ${folderId || 'root/all'}, Query: ${query || 'none'}`);
    try {
        // Python endpoint now returns SkillResponse-like structure directly
        const response = await axios_1.default.post(endpoint, payload, { timeout: GDRIVE_API_TIMEOUT });
        if (response.data && response.data.ok && response.data.data) {
            logger_1.logger.info(`[listGoogleDriveFiles] Successfully listed ${response.data.data.files?.length || 0} GDrive files for user ${userId}.`);
            return { ok: true, data: response.data.data };
        }
        else if (response.data && !response.data.ok && response.data.error) {
            logger_1.logger.warn(`[listGoogleDriveFiles] Failed for user ${userId}. API Error:`, response.data.error);
            return { ok: false, error: response.data.error };
        }
        else {
            // Fallback for unexpected response structure
            logger_1.logger.warn(`[listGoogleDriveFiles] Failed for user ${userId}. Unexpected response structure.`, response.data);
            return { ok: false, error: { code: 'UNEXPECTED_RESPONSE', message: 'Unexpected response from GDrive list files API.' } };
        }
    }
    catch (error) {
        return handleAxiosError(error, 'listGoogleDriveFiles');
    }
}
async function getGoogleDriveFileMetadata(userId, fileId, fields // Optional fields string for the API
) {
    if (!constants_1.PYTHON_API_SERVICE_BASE_URL) {
        return { ok: false, error: { code: 'CONFIG_ERROR', message: 'PYTHON_API_SERVICE_BASE_URL not configured.' } };
    }
    if (!userId)
        return { ok: false, error: { code: 'VALIDATION_ERROR', message: 'userId is required.' } };
    if (!fileId)
        return { ok: false, error: { code: 'VALIDATION_ERROR', message: 'fileId is required.' } };
    // No longer directly fetching access_token here.
    const endpoint = `${constants_1.PYTHON_API_SERVICE_BASE_URL}/api/gdrive/get-file-metadata`;
    const payload = {
        user_id: userId,
        file_id: fileId
    };
    if (fields)
        payload.fields = fields;
    logger_1.logger.info(`[getGoogleDriveFileMetadata] Fetching metadata for GDrive file ID ${fileId} for user ${userId}`);
    try {
        const response = await axios_1.default.post(endpoint, payload, { timeout: GDRIVE_API_TIMEOUT });
        if (response.data && response.data.ok && response.data.data) {
            logger_1.logger.info(`[getGoogleDriveFileMetadata] Successfully fetched metadata for GDrive file ID ${fileId}`);
            return { ok: true, data: response.data.data };
        }
        else if (response.data && !response.data.ok && response.data.error) {
            logger_1.logger.warn(`[getGoogleDriveFileMetadata] Failed for file ID ${fileId}. API Error:`, response.data.error);
            return { ok: false, error: response.data.error };
        }
        else {
            logger_1.logger.warn(`[getGoogleDriveFileMetadata] Failed for file ID ${fileId}. Unexpected response.`, response.data);
            return { ok: false, error: { code: 'UNEXPECTED_RESPONSE', message: 'Unexpected response from GDrive get metadata API.' } };
        }
    }
    catch (error) {
        return handleAxiosError(error, 'getGoogleDriveFileMetadata');
    }
}
async function triggerGoogleDriveFileIngestion(userId, gdriveFileId, originalFileMetadata) {
    if (!constants_1.PYTHON_API_SERVICE_BASE_URL) {
        return { ok: false, error: { code: 'CONFIG_ERROR', message: 'PYTHON_API_SERVICE_BASE_URL not configured.' } };
    }
    if (!userId)
        return { ok: false, error: { code: 'VALIDATION_ERROR', message: 'userId is required.' } };
    if (!gdriveFileId)
        return { ok: false, error: { code: 'VALIDATION_ERROR', message: 'gdriveFileId is required.' } };
    if (!originalFileMetadata || !originalFileMetadata.name || !originalFileMetadata.mimeType) {
        return { ok: false, error: { code: 'VALIDATION_ERROR', message: 'originalFileMetadata (with name and mimeType) is required.' } };
    }
    // No longer directly fetching access_token here.
    const endpoint = `${constants_1.PYTHON_API_SERVICE_BASE_URL}/api/ingest-gdrive-document`;
    const payload = {
        user_id: userId,
        gdrive_file_id: gdriveFileId,
        original_file_metadata: originalFileMetadata,
    };
    logger_1.logger.info(`[triggerGoogleDriveFileIngestion] Triggering ingestion for GDrive file ID ${gdriveFileId} for user ${userId}`);
    try {
        const response = await axios_1.default.post(endpoint, payload, { timeout: GDRIVE_API_TIMEOUT * 2 });
        if (response.data && response.data.ok && response.data.data) {
            logger_1.logger.info(`[triggerGoogleDriveFileIngestion] Successfully triggered ingestion for GDrive file ${gdriveFileId}. Doc ID: ${response.data.data.doc_id}`);
            return { ok: true, data: response.data.data };
        }
        else if (response.data && !response.data.ok && response.data.error) {
            logger_1.logger.warn(`[triggerGoogleDriveFileIngestion] Failed. API Error:`, response.data.error);
            return { ok: false, error: response.data.error };
        }
        else {
            logger_1.logger.warn(`[triggerGoogleDriveFileIngestion] Failed. Unexpected response.`, response.data);
            return { ok: false, error: { code: 'UNEXPECTED_RESPONSE', message: 'Unexpected response from GDrive trigger ingestion API.' } };
        }
    }
    catch (error) {
        return handleAxiosError(error, 'triggerGoogleDriveFileIngestion');
    }
}
// --- New functions for GDrive Connection Management ---
async function getGDriveConnectionStatus(userId) {
    if (!constants_1.PYTHON_API_SERVICE_BASE_URL) {
        return { ok: false, error: { code: 'CONFIG_ERROR', message: 'PYTHON_API_SERVICE_BASE_URL not configured.' } };
    }
    if (!userId)
        return { ok: false, error: { code: 'VALIDATION_ERROR', message: 'userId is required.' } };
    const endpoint = `${constants_1.PYTHON_API_SERVICE_BASE_URL}/api/gdrive/connection-status?user_id=${userId}`;
    logger_1.logger.info(`[getGDriveConnectionStatus] Checking GDrive connection status for user ${userId}`);
    try {
        const response = await axios_1.default.get(endpoint, { timeout: GDRIVE_STATUS_TIMEOUT });
        if (response.data && response.data.ok && typeof response.data.data?.isConnected === 'boolean') {
            logger_1.logger.info(`[getGDriveConnectionStatus] Status for user ${userId}: Connected - ${response.data.data.isConnected}, Email - ${response.data.data.email}`);
            return { ok: true, data: response.data.data };
        }
        else if (response.data && !response.data.ok && response.data.error) {
            logger_1.logger.warn(`[getGDriveConnectionStatus] Failed. API Error:`, response.data.error);
            return { ok: false, error: response.data.error };
        }
        else {
            logger_1.logger.warn(`[getGDriveConnectionStatus] Failed. Unexpected response.`, response.data);
            return { ok: false, error: { code: 'UNEXPECTED_RESPONSE', message: 'Unexpected response from GDrive connection status API.' } };
        }
    }
    catch (error) {
        return handleAxiosError(error, 'getGDriveConnectionStatus');
    }
}
async function disconnectGDrive(userId) {
    if (!constants_1.PYTHON_API_SERVICE_BASE_URL) {
        return { ok: false, error: { code: 'CONFIG_ERROR', message: 'PYTHON_API_SERVICE_BASE_URL not configured.' } };
    }
    if (!userId)
        return { ok: false, error: { code: 'VALIDATION_ERROR', message: 'userId is required.' } };
    const endpoint = `${constants_1.PYTHON_API_SERVICE_BASE_URL}/api/auth/gdrive/disconnect`;
    const payload = { user_id: userId };
    logger_1.logger.info(`[disconnectGDrive] Disconnecting GDrive for user ${userId}`);
    try {
        const response = await axios_1.default.post(endpoint, payload, { timeout: GDRIVE_DISCONNECT_TIMEOUT });
        if (response.data && response.data.ok) {
            logger_1.logger.info(`[disconnectGDrive] Successfully disconnected GDrive for user ${userId}. Message: ${response.data.message}`);
            return { ok: true, data: { message: response.data.message || "Successfully disconnected." }, message: response.data.message };
        }
        else if (response.data && !response.data.ok && response.data.error) {
            logger_1.logger.warn(`[disconnectGDrive] Failed. API Error:`, response.data.error);
            return { ok: false, error: response.data.error };
        }
        else {
            logger_1.logger.warn(`[disconnectGDrive] Failed. Unexpected response.`, response.data);
            return { ok: false, error: { code: 'UNEXPECTED_RESPONSE', message: 'Unexpected response from GDrive disconnect API.' } };
        }
    }
    catch (error) {
        return handleAxiosError(error, 'disconnectGDrive');
    }
}
`` `
;
//# sourceMappingURL=data:application/json;base64,