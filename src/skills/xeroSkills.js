"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listXeroInvoices = listXeroInvoices;
exports.listXeroBills = listXeroBills;
exports.listXeroContacts = listXeroContacts;
exports.createXeroInvoice = createXeroInvoice;
exports.createXeroBill = createXeroBill;
exports.createXeroContact = createXeroContact;
exports.updateXeroContact = updateXeroContact;
exports.getXeroContact = getXeroContact;
const axios_1 = __importDefault(require("axios"));
const constants_1 = require("../../atomic-docker/project/functions/atom-agent/_libs/constants");
const logger_1 = require("../../atomic-docker/project/functions/_utils/logger");
// Helper to handle Python API responses, can be centralized later
function handlePythonApiResponse(response, // Adjust type as per actual Python API response structure
operationName) {
    if (response.data && response.data.ok && response.data.data) {
        return { ok: true, data: response.data.data };
    }
    logger_1.logger.warn(`[${operationName}] Failed API call.`, response.data?.error);
    return {
        ok: false,
        error: {
            code: response.data?.error?.code || 'PYTHON_API_ERROR',
            message: response.data?.error?.message || `Failed to ${operationName}.`,
            details: response.data?.error?.details,
        },
    };
}
// Helper to handle network/axios errors
function handleAxiosError(error, operationName) {
    if (error.response) {
        logger_1.logger.error(`[${operationName}] Error: ${error.response.status}`, error.response.data);
        const errData = error.response.data;
        return {
            ok: false,
            error: {
                code: `HTTP_${error.response.status}`,
                message: errData?.error?.message || `Failed to ${operationName}.`,
            },
        };
    }
    else if (error.request) {
        logger_1.logger.error(`[${operationName}] Error: No response received`, error.request);
        return {
            ok: false,
            error: {
                code: 'NETWORK_ERROR',
                message: `No response received for ${operationName}.`,
            },
        };
    }
    logger_1.logger.error(`[${operationName}] Error: ${error.message}`);
    return {
        ok: false,
        error: {
            code: 'REQUEST_SETUP_ERROR',
            message: `Error setting up request for ${operationName}: ${error.message}`,
        },
    };
}
async function listXeroInvoices(userId) {
    if (!constants_1.PYTHON_API_SERVICE_BASE_URL) {
        return {
            ok: false,
            error: {
                code: 'CONFIG_ERROR',
                message: 'Python API service URL is not configured.',
            },
        };
    }
    const endpoint = `${constants_1.PYTHON_API_SERVICE_BASE_URL}/api/xero/invoices?user_id=${userId}`;
    try {
        const response = await axios_1.default.get(endpoint);
        return handlePythonApiResponse(response, 'listXeroInvoices');
    }
    catch (error) {
        return handleAxiosError(error, 'listXeroInvoices');
    }
}
async function listXeroBills(userId) {
    if (!constants_1.PYTHON_API_SERVICE_BASE_URL) {
        return {
            ok: false,
            error: {
                code: 'CONFIG_ERROR',
                message: 'Python API service URL is not configured.',
            },
        };
    }
    const endpoint = `${constants_1.PYTHON_API_SERVICE_BASE_URL}/api/xero/bills?user_id=${userId}`;
    try {
        const response = await axios_1.default.get(endpoint);
        return handlePythonApiResponse(response, 'listXeroBills');
    }
    catch (error) {
        return handleAxiosError(error, 'listXeroBills');
    }
}
async function listXeroContacts(userId) {
    if (!constants_1.PYTHON_API_SERVICE_BASE_URL) {
        return {
            ok: false,
            error: {
                code: 'CONFIG_ERROR',
                message: 'Python API service URL is not configured.',
            },
        };
    }
    const endpoint = `${constants_1.PYTHON_API_SERVICE_BASE_URL}/api/xero/contacts?user_id=${userId}`;
    try {
        const response = await axios_1.default.get(endpoint);
        return handlePythonApiResponse(response, 'listXeroContacts');
    }
    catch (error) {
        return handleAxiosError(error, 'listXeroContacts');
    }
}
async function createXeroInvoice(userId, contactId, lineItems, // Simplified for example
type = 'ACCREC') {
    if (!constants_1.PYTHON_API_SERVICE_BASE_URL) {
        return {
            ok: false,
            error: {
                code: 'CONFIG_ERROR',
                message: 'Python API service URL is not configured.',
            },
        };
    }
    const endpoint = `${constants_1.PYTHON_API_SERVICE_BASE_URL}/api/xero/invoices`;
    try {
        const response = await axios_1.default.post(endpoint, {
            user_id: userId,
            Contact: { ContactID: contactId },
            LineItems: lineItems,
            Type: type,
            Status: 'DRAFT',
        });
        return handlePythonApiResponse(response, 'createXeroInvoice');
    }
    catch (error) {
        return handleAxiosError(error, 'createXeroInvoice');
    }
}
async function createXeroBill(userId, contactId, lineItems, // Simplified for example
type = 'ACCPAY') {
    if (!constants_1.PYTHON_API_SERVICE_BASE_URL) {
        return {
            ok: false,
            error: {
                code: 'CONFIG_ERROR',
                message: 'Python API service URL is not configured.',
            },
        };
    }
    const endpoint = `${constants_1.PYTHON_API_SERVICE_BASE_URL}/api/xero/bills`;
    try {
        const response = await axios_1.default.post(endpoint, {
            user_id: userId,
            Contact: { ContactID: contactId },
            LineItems: lineItems,
            Type: type,
            Status: 'DRAFT',
        });
        return handlePythonApiResponse(response, 'createXeroBill');
    }
    catch (error) {
        return handleAxiosError(error, 'createXeroBill');
    }
}
async function createXeroContact(userId, name, email) {
    if (!constants_1.PYTHON_API_SERVICE_BASE_URL) {
        return {
            ok: false,
            error: {
                code: 'CONFIG_ERROR',
                message: 'Python API service URL is not configured.',
            },
        };
    }
    const endpoint = `${constants_1.PYTHON_API_SERVICE_BASE_URL}/api/xero/contacts`;
    try {
        const response = await axios_1.default.post(endpoint, {
            user_id: userId,
            Name: name,
            EmailAddress: email,
        });
        return handlePythonApiResponse(response, 'createXeroContact');
    }
    catch (error) {
        return handleAxiosError(error, 'createXeroContact');
    }
}
async function updateXeroContact(userId, contactId, fields) {
    if (!constants_1.PYTHON_API_SERVICE_BASE_URL) {
        return {
            ok: false,
            error: {
                code: 'CONFIG_ERROR',
                message: 'Python API service URL is not configured.',
            },
        };
    }
    const endpoint = `${constants_1.PYTHON_API_SERVICE_BASE_URL}/api/xero/contacts/${contactId}`;
    try {
        const response = await axios_1.default.put(endpoint, {
            user_id: userId,
            ...fields,
        });
        return handlePythonApiResponse(response, 'updateXeroContact');
    }
    catch (error) {
        return handleAxiosError(error, 'updateXeroContact');
    }
}
async function getXeroContact(userId, contactId) {
    if (!constants_1.PYTHON_API_SERVICE_BASE_URL) {
        return {
            ok: false,
            error: {
                code: 'CONFIG_ERROR',
                message: 'Python API service URL is not configured.',
            },
        };
    }
    const endpoint = `${constants_1.PYTHON_API_SERVICE_BASE_URL}/api/xero/contacts/${contactId}?user_id=${userId}`;
    try {
        const response = await axios_1.default.get(endpoint);
        return handlePythonApiResponse(response, 'getXeroContact');
    }
    catch (error) {
        return handleAxiosError(error, 'getXeroContact');
    }
}
//# sourceMappingURL=data:application/json;base64,