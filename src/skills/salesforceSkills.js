"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listSalesforceContacts = listSalesforceContacts;
exports.listSalesforceAccounts = listSalesforceAccounts;
exports.listSalesforceOpportunities = listSalesforceOpportunities;
exports.createSalesforceContact = createSalesforceContact;
exports.createSalesforceAccount = createSalesforceAccount;
exports.createSalesforceOpportunity = createSalesforceOpportunity;
exports.updateSalesforceOpportunity = updateSalesforceOpportunity;
exports.getSalesforceOpportunity = getSalesforceOpportunity;
const axios_1 = __importDefault(require("axios"));
const constants_1 = require("../../atomic-docker/project/functions/atom-agent/_libs/constants");
const logger_1 = require("../../atomic-docker/project/functions/_utils/logger");
// Helper to handle Python API responses, can be centralized later
function handlePythonApiResponse(response, // Adjust type as per actual Python API response structure
operationName) {
    if (response.data && response.data.ok && response.data.data) {
        return { ok: true, data: response.data.data };
    }
    logger_1.logger.warn(`[${operationName}] Failed API call.`, response.data?.error);
    return {
        ok: false,
        error: {
            code: response.data?.error?.code || 'PYTHON_API_ERROR',
            message: response.data?.error?.message || `Failed to ${operationName}.`,
            details: response.data?.error?.details,
        },
    };
}
// Helper to handle network/axios errors
function handleAxiosError(error, operationName) {
    if (error.response) {
        logger_1.logger.error(`[${operationName}] Error: ${error.response.status}`, error.response.data);
        const errData = error.response.data;
        return {
            ok: false,
            error: {
                code: `HTTP_${error.response.status}`,
                message: errData?.error?.message || `Failed to ${operationName}.`,
            },
        };
    }
    else if (error.request) {
        logger_1.logger.error(`[${operationName}] Error: No response received`, error.request);
        return {
            ok: false,
            error: {
                code: 'NETWORK_ERROR',
                message: `No response received for ${operationName}.`,
            },
        };
    }
    logger_1.logger.error(`[${operationName}] Error: ${error.message}`);
    return {
        ok: false,
        error: {
            code: 'REQUEST_SETUP_ERROR',
            message: `Error setting up request for ${operationName}: ${error.message}`,
        },
    };
}
async function listSalesforceContacts(userId) {
    if (!constants_1.PYTHON_API_SERVICE_BASE_URL) {
        return {
            ok: false,
            error: {
                code: 'CONFIG_ERROR',
                message: 'Python API service URL is not configured.',
            },
        };
    }
    const endpoint = `${constants_1.PYTHON_API_SERVICE_BASE_URL}/api/salesforce/contacts?user_id=${userId}`;
    try {
        const response = await axios_1.default.get(endpoint);
        return handlePythonApiResponse(response, 'listSalesforceContacts');
    }
    catch (error) {
        return handleAxiosError(error, 'listSalesforceContacts');
    }
}
async function listSalesforceAccounts(userId) {
    if (!constants_1.PYTHON_API_SERVICE_BASE_URL) {
        return {
            ok: false,
            error: {
                code: 'CONFIG_ERROR',
                message: 'Python API service URL is not configured.',
            },
        };
    }
    const endpoint = `${constants_1.PYTHON_API_SERVICE_BASE_URL}/api/salesforce/accounts?user_id=${userId}`;
    try {
        const response = await axios_1.default.get(endpoint);
        return handlePythonApiResponse(response, 'listSalesforceAccounts');
    }
    catch (error) {
        return handleAxiosError(error, 'listSalesforceAccounts');
    }
}
async function listSalesforceOpportunities(userId) {
    if (!constants_1.PYTHON_API_SERVICE_BASE_URL) {
        return {
            ok: false,
            error: {
                code: 'CONFIG_ERROR',
                message: 'Python API service URL is not configured.',
            },
        };
    }
    const endpoint = `${constants_1.PYTHON_API_SERVICE_BASE_URL}/api/salesforce/opportunities?user_id=${userId}`;
    try {
        const response = await axios_1.default.get(endpoint);
        return handlePythonApiResponse(response, 'listSalesforceOpportunities');
    }
    catch (error) {
        return handleAxiosError(error, 'listSalesforceOpportunities');
    }
}
async function createSalesforceContact(userId, lastName, firstName, email) {
    if (!constants_1.PYTHON_API_SERVICE_BASE_URL) {
        return {
            ok: false,
            error: {
                code: 'CONFIG_ERROR',
                message: 'Python API service URL is not configured.',
            },
        };
    }
    const endpoint = `${constants_1.PYTHON_API_SERVICE_BASE_URL}/api/salesforce/contacts`;
    try {
        const response = await axios_1.default.post(endpoint, {
            user_id: userId,
            LastName: lastName,
            FirstName: firstName,
            Email: email,
        });
        return handlePythonApiResponse(response, 'createSalesforceContact');
    }
    catch (error) {
        return handleAxiosError(error, 'createSalesforceContact');
    }
}
async function createSalesforceAccount(userId, name) {
    if (!constants_1.PYTHON_API_SERVICE_BASE_URL) {
        return {
            ok: false,
            error: {
                code: 'CONFIG_ERROR',
                message: 'Python API service URL is not configured.',
            },
        };
    }
    const endpoint = `${constants_1.PYTHON_API_SERVICE_BASE_URL}/api/salesforce/accounts`;
    try {
        const response = await axios_1.default.post(endpoint, {
            user_id: userId,
            Name: name,
        });
        return handlePythonApiResponse(response, 'createSalesforceAccount');
    }
    catch (error) {
        return handleAxiosError(error, 'createSalesforceAccount');
    }
}
async function createSalesforceOpportunity(userId, name, stageName, closeDate, amount) {
    if (!constants_1.PYTHON_API_SERVICE_BASE_URL) {
        return {
            ok: false,
            error: {
                code: 'CONFIG_ERROR',
                message: 'Python API service URL is not configured.',
            },
        };
    }
    const endpoint = `${constants_1.PYTHON_API_SERVICE_BASE_URL}/api/salesforce/opportunities`;
    try {
        const response = await axios_1.default.post(endpoint, {
            user_id: userId,
            Name: name,
            StageName: stageName,
            CloseDate: closeDate,
            Amount: amount,
        });
        return handlePythonApiResponse(response, 'createSalesforceOpportunity');
    }
    catch (error) {
        return handleAxiosError(error, 'createSalesforceOpportunity');
    }
}
async function updateSalesforceOpportunity(userId, opportunityId, fields) {
    if (!constants_1.PYTHON_API_SERVICE_BASE_URL) {
        return {
            ok: false,
            error: {
                code: 'CONFIG_ERROR',
                message: 'Python API service URL is not configured.',
            },
        };
    }
    const endpoint = `${constants_1.PYTHON_API_SERVICE_BASE_URL}/api/salesforce/opportunities/${opportunityId}`;
    try {
        const response = await axios_1.default.put(endpoint, {
            user_id: userId,
            ...fields,
        });
        return handlePythonApiResponse(response, 'updateSalesforceOpportunity');
    }
    catch (error) {
        return handleAxiosError(error, 'updateSalesforceOpportunity');
    }
}
async function getSalesforceOpportunity(userId, opportunityId) {
    if (!constants_1.PYTHON_API_SERVICE_BASE_URL) {
        return {
            ok: false,
            error: {
                code: 'CONFIG_ERROR',
                message: 'Python API service URL is not configured.',
            },
        };
    }
    const endpoint = `${constants_1.PYTHON_API_SERVICE_BASE_URL}/api/salesforce/opportunities/${opportunityId}?user_id=${userId}`;
    try {
        const response = await axios_1.default.get(endpoint);
        return handlePythonApiResponse(response, 'getSalesforceOpportunity');
    }
    catch (error) {
        return handleAxiosError(error, 'getSalesforceOpportunity');
    }
}
//# sourceMappingURL=data:application/json;base64,