# Production Kubernetes Deployment Configuration for Atom
# Ensure all environment variables are properly configured via ConfigMaps/Secrets
apiVersion: v1
kind: Namespace
metadata:
  name: atom-production
  labels:
    name: atom-production
    environment: production
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: atom-config
  namespace: atom-production
data:
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  REDIS_URL: "redis://atom-redis:6379"
  DATABASE_URL: "postgresql://atom_prod_user:SECRET@atom-postgres:5432/atom_production"
  JWT_SECRET: "SECRET" # Use Kubernetes secret
  PLAID_CLIENT_ID: "SECRET" # Use Kubernetes secret
  PLAID_SECRET: "SECRET" # Use Kubernetes secret
  OPENAI_API_KEY: "SECRET" # Use Kubernetes secret
  CORS_ORIGIN: "https://app.atom.com,https://atom.com"
  API_BASE_URL: "https://api.atom.com"
  WEBHOOK_URL: "https://api.atom.com/webhooks"
  SESSION_SECRET: "SECRET" # Use Kubernetes secret
---
apiVersion: v1
kind: Secret
metadata:
  name: atom-secrets
  namespace: atom-production
type: Opaque
stringData:
  database-password: "CHANGE_ME"
  jwt-secret: "CHANGE_ME"
  plaid-client-id: "CHANGE_ME"
  plaid-secret: "CHANGE_ME"
  openai-api-key: "CHANGE_ME"
  session-secret: "CHANGE_ME"
  redis-password: "CHANGE_ME"
  oauth-client-secret: "CHANGE_ME"
  encryption-key: "CHANGE_ME"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: atom-app
  namespace: atom-production
  labels:
    app: atom-app
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: atom-app
  template:
    metadata:
      labels:
        app: atom-app
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "9090"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: atom-app
        image: atom/app:production-latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: atom-config
              key: NODE_ENV
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: atom-secrets
              key: database-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: atom-secrets
              key: jwt-secret
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: atom-config
              key: REDIS_URL
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir:
          sizeLimit: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: atom-worker
  namespace: atom-production
  labels:
    app: atom-worker
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: atom-worker
  template:
    metadata:
      labels:
        app: atom-worker
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: atom-worker
        image: atom/worker:production-latest
        imagePullPolicy: Always
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: atom-config
              key: NODE_ENV
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: atom-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: atom-config
              key: REDIS_URL
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: atom-app-service
  namespace: atom-production
  labels:
    app: atom-app
spec:
  selector:
    app: atom-app
  ports:
  - name: http
    port: 80
    targetPort: 3000
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: atom-redis
  namespace: atom-production
  labels:
    app: redis
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: atom-production
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command: ["redis-server", "--appendonly", "yes", "--requirepass", "CHANGE_ME_FROM_SECRET"]
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: atom-production
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: atom-ingress
  namespace: atom-production
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-burst: "2000"
spec:
  tls:
  - hosts:
    - app.atom.com
    secretName: atom-tls-secret
  rules:
  - host: app.atom.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: atom-app-service
            port:
              number: 80
      - path: /
        pathType: Prefix
        backend:
          service:
            name: atom-app-service
            port:
              number: 80
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: atom-app-pdb
  namespace: atom-production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: atom-app
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: atom-hpa
  namespace: atom-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: atom-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
