{
 "Resources": {
  "AtomicDataBucketE642B1DA": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
       }
      }
     ]
    },
    "BucketName": {
     "Fn::Join": [
      "",
      [
       "awsstack-atomic-data-bucket-",
       {
        "Ref": "AWS::AccountId"
       },
       "-",
       {
        "Ref": "AWS::Region"
       }
      ]
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicDataBucket/Resource"
   }
  },
  "AtomicDataBucketPolicy5E8D6043": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "AtomicDataBucketE642B1DA"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:PutBucketPolicy"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "AtomicDataBucketE642B1DA",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "AtomicDataBucketE642B1DA",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicDataBucket/Policy/Resource"
   }
  },
  "AtomicDataBucketAutoDeleteObjectsCustomResource942CD73A": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "AtomicDataBucketE642B1DA"
    }
   },
   "DependsOn": [
    "AtomicDataBucketPolicy5E8D6043"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicDataBucket/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      "Arn"
     ]
    },
    "Runtime": "nodejs22.x",
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting objects in ",
       {
        "Ref": "AtomicDataBucketE642B1DA"
       },
       " S3 bucket."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
   ],
   "Metadata": {
    "aws:cdk:path": "AwsStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler",
    "aws:asset:path": "asset.faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6",
    "aws:asset:property": "Code"
   }
  },
  "AtomicFunctionsRepoCA9ADB29": {
   "Type": "AWS::ECR::Repository",
   "Properties": {
    "RepositoryName": "atomic-functions",
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-images",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicFunctionsRepo/Resource"
   }
  },
  "AtomicFunctionsRepoAutoDeleteImagesCustomResource54DE9CE8": {
   "Type": "Custom::ECRAutoDeleteImages",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomECRAutoDeleteImagesCustomResourceProviderHandler8D89C030",
      "Arn"
     ]
    },
    "RepositoryName": {
     "Ref": "AtomicFunctionsRepoCA9ADB29"
    }
   },
   "DependsOn": [
    "AtomicFunctionsRepoCA9ADB29"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicFunctionsRepo/AutoDeleteImagesCustomResource/Default"
   }
  },
  "CustomECRAutoDeleteImagesCustomResourceProviderRole665F2773": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ],
    "Policies": [
     {
      "PolicyName": "Inline",
      "PolicyDocument": {
       "Version": "2012-10-17",
       "Statement": [
        {
         "Effect": "Allow",
         "Action": [
          "ecr:BatchDeleteImage",
          "ecr:DescribeRepositories",
          "ecr:ListImages",
          "ecr:ListTagsForResource"
         ],
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "arn:",
             {
              "Ref": "AWS::Partition"
             },
             ":ecr:",
             {
              "Ref": "AWS::Region"
             },
             ":",
             {
              "Ref": "AWS::AccountId"
             },
             ":repository/*"
            ]
           ]
          }
         ],
         "Condition": {
          "StringEquals": {
           "ecr:ResourceTag/aws-cdk:auto-delete-images": "true"
          }
         }
        }
       ]
      }
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/Custom::ECRAutoDeleteImagesCustomResourceProvider/Role"
   }
  },
  "CustomECRAutoDeleteImagesCustomResourceProviderHandler8D89C030": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "35a53bc183aaf4d7fe84d5e5ed06d48f33ef294fa1325c16cf5db800fa6ee72d.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomECRAutoDeleteImagesCustomResourceProviderRole665F2773",
      "Arn"
     ]
    },
    "Runtime": "nodejs22.x",
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting images in ",
       {
        "Ref": "AtomicFunctionsRepoCA9ADB29"
       },
       " repository."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomECRAutoDeleteImagesCustomResourceProviderRole665F2773"
   ],
   "Metadata": {
    "aws:cdk:path": "AwsStack/Custom::ECRAutoDeleteImagesCustomResourceProvider/Handler",
    "aws:asset:path": "asset.35a53bc183aaf4d7fe84d5e5ed06d48f33ef294fa1325c16cf5db800fa6ee72d",
    "aws:asset:property": "Code"
   }
  },
  "AtomicHandshakeRepo7FD56D21": {
   "Type": "AWS::ECR::Repository",
   "Properties": {
    "RepositoryName": "atomic-handshake",
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-images",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicHandshakeRepo/Resource"
   }
  },
  "AtomicHandshakeRepoAutoDeleteImagesCustomResource233CA07B": {
   "Type": "Custom::ECRAutoDeleteImages",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomECRAutoDeleteImagesCustomResourceProviderHandler8D89C030",
      "Arn"
     ]
    },
    "RepositoryName": {
     "Ref": "AtomicHandshakeRepo7FD56D21"
    }
   },
   "DependsOn": [
    "AtomicHandshakeRepo7FD56D21"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicHandshakeRepo/AutoDeleteImagesCustomResource/Default"
   }
  },
  "AtomicOauthRepoCAF08457": {
   "Type": "AWS::ECR::Repository",
   "Properties": {
    "RepositoryName": "atomic-oauth",
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-images",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicOauthRepo/Resource"
   }
  },
  "AtomicOauthRepoAutoDeleteImagesCustomResource5BB9BDBF": {
   "Type": "Custom::ECRAutoDeleteImages",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomECRAutoDeleteImagesCustomResourceProviderHandler8D89C030",
      "Arn"
     ]
    },
    "RepositoryName": {
     "Ref": "AtomicOauthRepoCAF08457"
    }
   },
   "DependsOn": [
    "AtomicOauthRepoCAF08457"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicOauthRepo/AutoDeleteImagesCustomResource/Default"
   }
  },
  "AtomicAppRepo2D8E1244": {
   "Type": "AWS::ECR::Repository",
   "Properties": {
    "RepositoryName": "atomic-app",
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-images",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicAppRepo/Resource"
   }
  },
  "AtomicAppRepoAutoDeleteImagesCustomResource3E2101A6": {
   "Type": "Custom::ECRAutoDeleteImages",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomECRAutoDeleteImagesCustomResourceProviderHandler8D89C030",
      "Arn"
     ]
    },
    "RepositoryName": {
     "Ref": "AtomicAppRepo2D8E1244"
    }
   },
   "DependsOn": [
    "AtomicAppRepo2D8E1244"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicAppRepo/AutoDeleteImagesCustomResource/Default"
   }
  },
  "AtomicOptaplannerRepo893F41D8": {
   "Type": "AWS::ECR::Repository",
   "Properties": {
    "RepositoryName": "atomic-optaplanner",
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-images",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicOptaplannerRepo/Resource"
   }
  },
  "AtomicOptaplannerRepoAutoDeleteImagesCustomResource9A90340F": {
   "Type": "Custom::ECRAutoDeleteImages",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomECRAutoDeleteImagesCustomResourceProviderHandler8D89C030",
      "Arn"
     ]
    },
    "RepositoryName": {
     "Ref": "AtomicOptaplannerRepo893F41D8"
    }
   },
   "DependsOn": [
    "AtomicOptaplannerRepo893F41D8"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicOptaplannerRepo/AutoDeleteImagesCustomResource/Default"
   }
  },
  "AtomicVpcD404E496": {
   "Type": "AWS::EC2::VPC",
   "Properties": {
    "CidrBlock": "10.0.0.0/16",
    "EnableDnsHostnames": true,
    "EnableDnsSupport": true,
    "InstanceTenancy": "default",
    "Tags": [
     {
      "Key": "Name",
      "Value": "AwsStack/AtomicVpc"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicVpc/Resource"
   }
  },
  "AtomicVpcPublicSubnetSubnet1SubnetA3F000BA": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.0.0/24",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "PublicSubnet"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "AwsStack/AtomicVpc/PublicSubnetSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "AtomicVpcD404E496"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicVpc/PublicSubnetSubnet1/Subnet"
   }
  },
  "AtomicVpcPublicSubnetSubnet1RouteTable2ADC4781": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "AwsStack/AtomicVpc/PublicSubnetSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "AtomicVpcD404E496"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicVpc/PublicSubnetSubnet1/RouteTable"
   }
  },
  "AtomicVpcPublicSubnetSubnet1RouteTableAssociation8DCF7832": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "AtomicVpcPublicSubnetSubnet1RouteTable2ADC4781"
    },
    "SubnetId": {
     "Ref": "AtomicVpcPublicSubnetSubnet1SubnetA3F000BA"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicVpc/PublicSubnetSubnet1/RouteTableAssociation"
   }
  },
  "AtomicVpcPublicSubnetSubnet1DefaultRoute80618E44": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "AtomicVpcIGW53D98970"
    },
    "RouteTableId": {
     "Ref": "AtomicVpcPublicSubnetSubnet1RouteTable2ADC4781"
    }
   },
   "DependsOn": [
    "AtomicVpcVPCGWDDE21E70"
   ],
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicVpc/PublicSubnetSubnet1/DefaultRoute"
   }
  },
  "AtomicVpcPublicSubnetSubnet1EIP7AEE3E7A": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [
     {
      "Key": "Name",
      "Value": "AwsStack/AtomicVpc/PublicSubnetSubnet1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicVpc/PublicSubnetSubnet1/EIP"
   }
  },
  "AtomicVpcPublicSubnetSubnet1NATGateway76048EA8": {
   "Type": "AWS::EC2::NatGateway",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "AtomicVpcPublicSubnetSubnet1EIP7AEE3E7A",
      "AllocationId"
     ]
    },
    "SubnetId": {
     "Ref": "AtomicVpcPublicSubnetSubnet1SubnetA3F000BA"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "AwsStack/AtomicVpc/PublicSubnetSubnet1"
     }
    ]
   },
   "DependsOn": [
    "AtomicVpcPublicSubnetSubnet1DefaultRoute80618E44",
    "AtomicVpcPublicSubnetSubnet1RouteTableAssociation8DCF7832"
   ],
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicVpc/PublicSubnetSubnet1/NATGateway"
   }
  },
  "AtomicVpcPublicSubnetSubnet2Subnet4556046B": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.1.0/24",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "PublicSubnet"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "AwsStack/AtomicVpc/PublicSubnetSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "AtomicVpcD404E496"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicVpc/PublicSubnetSubnet2/Subnet"
   }
  },
  "AtomicVpcPublicSubnetSubnet2RouteTable0A3C697C": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "AwsStack/AtomicVpc/PublicSubnetSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "AtomicVpcD404E496"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicVpc/PublicSubnetSubnet2/RouteTable"
   }
  },
  "AtomicVpcPublicSubnetSubnet2RouteTableAssociation8D95DA6A": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "AtomicVpcPublicSubnetSubnet2RouteTable0A3C697C"
    },
    "SubnetId": {
     "Ref": "AtomicVpcPublicSubnetSubnet2Subnet4556046B"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicVpc/PublicSubnetSubnet2/RouteTableAssociation"
   }
  },
  "AtomicVpcPublicSubnetSubnet2DefaultRouteFC7E878A": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "AtomicVpcIGW53D98970"
    },
    "RouteTableId": {
     "Ref": "AtomicVpcPublicSubnetSubnet2RouteTable0A3C697C"
    }
   },
   "DependsOn": [
    "AtomicVpcVPCGWDDE21E70"
   ],
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicVpc/PublicSubnetSubnet2/DefaultRoute"
   }
  },
  "AtomicVpcPrivateSubnetSubnet1SubnetCEF3D184": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.2.0/24",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "PrivateSubnet"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Private"
     },
     {
      "Key": "Name",
      "Value": "AwsStack/AtomicVpc/PrivateSubnetSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "AtomicVpcD404E496"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicVpc/PrivateSubnetSubnet1/Subnet"
   }
  },
  "AtomicVpcPrivateSubnetSubnet1RouteTable6D554B41": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "AwsStack/AtomicVpc/PrivateSubnetSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "AtomicVpcD404E496"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicVpc/PrivateSubnetSubnet1/RouteTable"
   }
  },
  "AtomicVpcPrivateSubnetSubnet1RouteTableAssociation41866D9F": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "AtomicVpcPrivateSubnetSubnet1RouteTable6D554B41"
    },
    "SubnetId": {
     "Ref": "AtomicVpcPrivateSubnetSubnet1SubnetCEF3D184"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicVpc/PrivateSubnetSubnet1/RouteTableAssociation"
   }
  },
  "AtomicVpcPrivateSubnetSubnet1DefaultRouteFDDC8008": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "AtomicVpcPublicSubnetSubnet1NATGateway76048EA8"
    },
    "RouteTableId": {
     "Ref": "AtomicVpcPrivateSubnetSubnet1RouteTable6D554B41"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicVpc/PrivateSubnetSubnet1/DefaultRoute"
   }
  },
  "AtomicVpcPrivateSubnetSubnet2Subnet21C2DC90": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.3.0/24",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "PrivateSubnet"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Private"
     },
     {
      "Key": "Name",
      "Value": "AwsStack/AtomicVpc/PrivateSubnetSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "AtomicVpcD404E496"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicVpc/PrivateSubnetSubnet2/Subnet"
   }
  },
  "AtomicVpcPrivateSubnetSubnet2RouteTable8E7D1813": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "AwsStack/AtomicVpc/PrivateSubnetSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "AtomicVpcD404E496"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicVpc/PrivateSubnetSubnet2/RouteTable"
   }
  },
  "AtomicVpcPrivateSubnetSubnet2RouteTableAssociation0317AC40": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "AtomicVpcPrivateSubnetSubnet2RouteTable8E7D1813"
    },
    "SubnetId": {
     "Ref": "AtomicVpcPrivateSubnetSubnet2Subnet21C2DC90"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicVpc/PrivateSubnetSubnet2/RouteTableAssociation"
   }
  },
  "AtomicVpcPrivateSubnetSubnet2DefaultRoute17CBCC33": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "AtomicVpcPublicSubnetSubnet1NATGateway76048EA8"
    },
    "RouteTableId": {
     "Ref": "AtomicVpcPrivateSubnetSubnet2RouteTable8E7D1813"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicVpc/PrivateSubnetSubnet2/DefaultRoute"
   }
  },
  "AtomicVpcIGW53D98970": {
   "Type": "AWS::EC2::InternetGateway",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "AwsStack/AtomicVpc"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicVpc/IGW"
   }
  },
  "AtomicVpcVPCGWDDE21E70": {
   "Type": "AWS::EC2::VPCGatewayAttachment",
   "Properties": {
    "InternetGatewayId": {
     "Ref": "AtomicVpcIGW53D98970"
    },
    "VpcId": {
     "Ref": "AtomicVpcD404E496"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicVpc/VPCGW"
   }
  },
  "AtomicVpcRestrictDefaultSecurityGroupCustomResource0C2758BC": {
   "Type": "Custom::VpcRestrictDefaultSG",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E",
      "Arn"
     ]
    },
    "DefaultSecurityGroupId": {
     "Fn::GetAtt": [
      "AtomicVpcD404E496",
      "DefaultSecurityGroup"
     ]
    },
    "Account": {
     "Ref": "AWS::AccountId"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicVpc/RestrictDefaultSecurityGroupCustomResource/Default"
   }
  },
  "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ],
    "Policies": [
     {
      "PolicyName": "Inline",
      "PolicyDocument": {
       "Version": "2012-10-17",
       "Statement": [
        {
         "Effect": "Allow",
         "Action": [
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:RevokeSecurityGroupEgress"
         ],
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "arn:",
             {
              "Ref": "AWS::Partition"
             },
             ":ec2:",
             {
              "Ref": "AWS::Region"
             },
             ":",
             {
              "Ref": "AWS::AccountId"
             },
             ":security-group/",
             {
              "Fn::GetAtt": [
               "AtomicVpcD404E496",
               "DefaultSecurityGroup"
              ]
             }
            ]
           ]
          }
         ]
        }
       ]
      }
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Role"
   }
  },
  "CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "7fa1e366ee8a9ded01fc355f704cff92bfd179574e6f9cfee800a3541df1b200.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "__entrypoint__.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0",
      "Arn"
     ]
    },
    "Runtime": "nodejs22.x",
    "Description": "Lambda function for removing all inbound/outbound rules from the VPC default security group"
   },
   "DependsOn": [
    "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0"
   ],
   "Metadata": {
    "aws:cdk:path": "AwsStack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Handler",
    "aws:asset:path": "asset.7fa1e366ee8a9ded01fc355f704cff92bfd179574e6f9cfee800a3541df1b200",
    "aws:asset:property": "Code"
   }
  },
  "RdsSecurityGroup632A77E4": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "Allow inbound traffic to RDS from within VPC",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "AtomicVpcD404E496"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/RdsSecurityGroup/Resource"
   }
  },
  "RdsSecurityGroupfromAwsStackSupertokensSGC2B15E925432F0961C4B": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "Description": "Allow Supertokens to connect to RDS",
    "FromPort": 5432,
    "GroupId": {
     "Fn::GetAtt": [
      "RdsSecurityGroup632A77E4",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "SupertokensSG8D961012",
      "GroupId"
     ]
    },
    "ToPort": 5432
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/RdsSecurityGroup/from AwsStackSupertokensSGC2B15E92:5432"
   }
  },
  "RdsSecurityGroupfromAwsStackHasuraSGB75C40175432DEDDB2F0": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "Description": "Allow Hasura to connect to RDS",
    "FromPort": 5432,
    "GroupId": {
     "Fn::GetAtt": [
      "RdsSecurityGroup632A77E4",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "HasuraSGF7432EF8",
      "GroupId"
     ]
    },
    "ToPort": 5432
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/RdsSecurityGroup/from AwsStackHasuraSGB75C4017:5432"
   }
  },
  "RdsSecurityGroupfromAwsStackOptaplannerSGB8DCFB76543235E54F24": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "Description": "Allow traffic from Optaplanner to RDS",
    "FromPort": 5432,
    "GroupId": {
     "Fn::GetAtt": [
      "RdsSecurityGroup632A77E4",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "OptaplannerSG10E13F9F",
      "GroupId"
     ]
    },
    "ToPort": 5432
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/RdsSecurityGroup/from AwsStackOptaplannerSGB8DCFB76:5432"
   }
  },
  "AtomicPostgresDBSubnetGroup067D56E3": {
   "Type": "AWS::RDS::DBSubnetGroup",
   "Properties": {
    "DBSubnetGroupDescription": "Subnet group for AtomicPostgresDB database",
    "SubnetIds": [
     {
      "Ref": "AtomicVpcPrivateSubnetSubnet1SubnetCEF3D184"
     },
     {
      "Ref": "AtomicVpcPrivateSubnetSubnet2Subnet21C2DC90"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicPostgresDB/SubnetGroup/Default"
   }
  },
  "AwsStackAtomicPostgresDBSecret13CD6E0E3fdaad7efa858a3daf9490cf0a702aeb": {
   "Type": "AWS::SecretsManager::Secret",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Generated by the CDK for stack: ",
       {
        "Ref": "AWS::StackName"
       }
      ]
     ]
    },
    "GenerateSecretString": {
     "ExcludeCharacters": " %+~`#$&*()|[]{}:;<>?!'/@\"\\",
     "GenerateStringKey": "password",
     "PasswordLength": 30,
     "SecretStringTemplate": "{\"username\":\"PostgresAdminCredentials\"}"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicPostgresDB/Secret/Resource"
   }
  },
  "AtomicPostgresDBSecretAttachmentDB0B9A31": {
   "Type": "AWS::SecretsManager::SecretTargetAttachment",
   "Properties": {
    "SecretId": {
     "Ref": "AwsStackAtomicPostgresDBSecret13CD6E0E3fdaad7efa858a3daf9490cf0a702aeb"
    },
    "TargetId": {
     "Ref": "AtomicPostgresDB2E9D697F"
    },
    "TargetType": "AWS::RDS::DBInstance"
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicPostgresDB/Secret/Attachment/Resource"
   }
  },
  "AtomicPostgresDB2E9D697F": {
   "Type": "AWS::RDS::DBInstance",
   "Properties": {
    "AllocatedStorage": "100",
    "CopyTagsToSnapshot": true,
    "DBInstanceClass": "db.t3.small",
    "DBName": "atomicdb",
    "DBSubnetGroupName": {
     "Ref": "AtomicPostgresDBSubnetGroup067D56E3"
    },
    "Engine": "postgres",
    "EngineVersion": "15",
    "MasterUserPassword": {
     "Fn::Join": [
      "",
      [
       "{{resolve:secretsmanager:",
       {
        "Ref": "AwsStackAtomicPostgresDBSecret13CD6E0E3fdaad7efa858a3daf9490cf0a702aeb"
       },
       ":SecretString:password::}}"
      ]
     ]
    },
    "MasterUsername": "PostgresAdminCredentials",
    "PubliclyAccessible": false,
    "StorageType": "gp2",
    "VPCSecurityGroups": [
     {
      "Fn::GetAtt": [
       "RdsSecurityGroup632A77E4",
       "GroupId"
      ]
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicPostgresDB/Resource"
   }
  },
  "AtomicCluster0DDF655C": {
   "Type": "AWS::ECS::Cluster",
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicCluster/Resource"
   }
  },
  "AlbSecurityGroup86A59E99": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "Allow HTTP/HTTPS traffic to ALB",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "SecurityGroupIngress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow HTTP from anywhere",
      "FromPort": 80,
      "IpProtocol": "tcp",
      "ToPort": 80
     }
    ],
    "VpcId": {
     "Ref": "AtomicVpcD404E496"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/AlbSecurityGroup/Resource"
   }
  },
  "AtomicAlbF873927A": {
   "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
   "Properties": {
    "LoadBalancerAttributes": [
     {
      "Key": "deletion_protection.enabled",
      "Value": "false"
     }
    ],
    "Scheme": "internet-facing",
    "SecurityGroups": [
     {
      "Fn::GetAtt": [
       "AlbSecurityGroup86A59E99",
       "GroupId"
      ]
     }
    ],
    "Subnets": [
     {
      "Ref": "AtomicVpcPublicSubnetSubnet1SubnetA3F000BA"
     },
     {
      "Ref": "AtomicVpcPublicSubnetSubnet2Subnet4556046B"
     }
    ],
    "Type": "application"
   },
   "DependsOn": [
    "AtomicVpcPublicSubnetSubnet1DefaultRoute80618E44",
    "AtomicVpcPublicSubnetSubnet1RouteTableAssociation8DCF7832",
    "AtomicVpcPublicSubnetSubnet2DefaultRouteFC7E878A",
    "AtomicVpcPublicSubnetSubnet2RouteTableAssociation8D95DA6A"
   ],
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicAlb/Resource"
   }
  },
  "AtomicAlbHttpListener370F09B3": {
   "Type": "AWS::ElasticLoadBalancingV2::Listener",
   "Properties": {
    "DefaultActions": [
     {
      "FixedResponseConfig": {
       "ContentType": "text/plain",
       "MessageBody": "Resource not found",
       "StatusCode": "404"
      },
      "Type": "fixed-response"
     }
    ],
    "LoadBalancerArn": {
     "Ref": "AtomicAlbF873927A"
    },
    "Port": 80,
    "Protocol": "HTTP"
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/AtomicAlb/HttpListener/Resource"
   }
  },
  "ECSTaskRoleF2ADB362": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Description": "Role for ECS tasks to access other AWS services"
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/ECSTaskRole/Resource"
   }
  },
  "ECSTaskRoleDefaultPolicy82FC9293": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "secretsmanager:GetSecretValue",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:aws:secretsmanager:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":secret:AwsStack/*"
          ]
         ]
        },
        {
         "Ref": "ApiTokenSecret3A926DEB"
        },
        {
         "Ref": "AtomicPostgresDBSecretAttachmentDB0B9A31"
        },
        {
         "Ref": "HasuraAdminSecret359C72F3"
        },
        {
         "Ref": "HasuraDbConnStringSecret6DFFC41D"
        },
        {
         "Ref": "OpenAiApiKeySecret05681F66"
        },
        {
         "Ref": "OptaplannerDbConnString28A909E6"
        },
        {
         "Ref": "PlaceholderHasuraJwtSecret5A36E06E"
        },
        {
         "Ref": "SupertokensDbConnStringSecretC2E71EE2"
        }
       ]
      },
      {
       "Action": [
        "s3:Abort*",
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "AtomicDataBucketE642B1DA",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "AtomicDataBucketE642B1DA",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:BatchGetImage",
        "ecr:GetAuthorizationToken",
        "ecr:GetDownloadUrlForLayer"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "AppLogGroup7D8CD952",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "FunctionsLogGroup0226F429",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "HandshakeLogGroup90831F6C",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "OAuthLogGroupF9A7E869",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "OptaplannerLogGroup6EFDA77B",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:aws:logs:",
           {
            "Ref": "AWS::Region"
           },
           ":",
           {
            "Ref": "AWS::AccountId"
           },
           ":log-group:/aws/ecs/",
           {
            "Ref": "AtomicCluster0DDF655C"
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:BatchGetImage",
        "ecr:GetDownloadUrlForLayer"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "AtomicAppRepo2D8E1244",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "AtomicFunctionsRepoCA9ADB29",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "AtomicHandshakeRepo7FD56D21",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "AtomicOauthRepoCAF08457",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "AtomicOptaplannerRepo893F41D8",
          "Arn"
         ]
        }
       ]
      },
      {
       "Action": [
        "secretsmanager:DescribeSecret",
        "secretsmanager:GetSecretValue"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Ref": "ApiTokenSecret3A926DEB"
        },
        {
         "Ref": "AtomicPostgresDBSecretAttachmentDB0B9A31"
        },
        {
         "Ref": "HasuraAdminSecret359C72F3"
        },
        {
         "Ref": "OpenAiApiKeySecret05681F66"
        },
        {
         "Ref": "OptaplannerDbConnString28A909E6"
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ECSTaskRoleDefaultPolicy82FC9293",
    "Roles": [
     {
      "Ref": "ECSTaskRoleF2ADB362"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/ECSTaskRole/DefaultPolicy/Resource"
   }
  },
  "SupertokensDbConnStringSecretC2E71EE2": {
   "Type": "AWS::SecretsManager::Secret",
   "Properties": {
    "Description": "Manually populate with: postgresql://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}",
    "GenerateSecretString": {},
    "Name": "AwsStack/SupertokensDbConnString"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/SupertokensDbConnStringSecret/Resource"
   }
  },
  "HasuraDbConnStringSecret6DFFC41D": {
   "Type": "AWS::SecretsManager::Secret",
   "Properties": {
    "Description": "Manually populate with: postgres://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}",
    "GenerateSecretString": {},
    "Name": "AwsStack/HasuraDbConnString"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/HasuraDbConnStringSecret/Resource"
   }
  },
  "PlaceholderHasuraJwtSecret5A36E06E": {
   "Type": "AWS::SecretsManager::Secret",
   "Properties": {
    "Description": "Placeholder for HASURA_GRAPHQL_JWT_SECRET. MUST be replaced in AWS Secrets Manager console with a valid JSON containing a strong 256-bit key. Example structure: {\"type\":\"HS256\",\"key\":\"YOUR_STRONG_SECRET_KEY\",\"issuer\":\"supertokens\"}",
    "Name": "AwsStack/HasuraJwtSecret",
    "SecretString": "{\"type\":\"HS256\",\"key\":\"REPLACE_WITH_A_STRONG_64_CHAR_HEX_SECRET_OR_MIN_32_CHAR_ASCII\",\"issuer\":\"supertokens\"}"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/PlaceholderHasuraJwtSecret/Resource"
   }
  },
  "ApiTokenSecret3A926DEB": {
   "Type": "AWS::SecretsManager::Secret",
   "Properties": {
    "Description": "Generic API token for inter-service communication.",
    "GenerateSecretString": {
     "ExcludePunctuation": true,
     "PasswordLength": 32
    },
    "Name": "AwsStack/InternalApiToken"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/ApiTokenSecret/Resource"
   }
  },
  "OpenAiApiKeySecret05681F66": {
   "Type": "AWS::SecretsManager::Secret",
   "Properties": {
    "Description": "Manually populate with actual OpenAI API Key",
    "GenerateSecretString": {},
    "Name": "AwsStack/OpenAiApiKey"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/OpenAiApiKeySecret/Resource"
   }
  },
  "OptaplannerDbConnString28A909E6": {
   "Type": "AWS::SecretsManager::Secret",
   "Properties": {
    "Description": "Manually populate with Optaplanner JDBC URL: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}",
    "GenerateSecretString": {},
    "Name": "AwsStack/OptaplannerDbConnString"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/OptaplannerDbConnString/Resource"
   }
  },
  "HasuraAdminSecret359C72F3": {
   "Type": "AWS::SecretsManager::Secret",
   "Properties": {
    "Description": "Admin secret for Hasura GraphQL engine",
    "GenerateSecretString": {
     "ExcludePunctuation": true,
     "GenerateStringKey": "HASURA_GRAPHQL_ADMIN_SECRET_VALUE",
     "PasswordLength": 32,
     "SecretStringTemplate": "{\"HASURA_GRAPHQL_ADMIN_SECRET\":\"dummyPasswordPlaceholder\"}"
    },
    "Name": "AwsStack/HasuraAdminSecret"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/HasuraAdminSecret/Resource"
   }
  },
  "SupertokensSG8D961012": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "AwsStack/SupertokensSG",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "AtomicVpcD404E496"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/SupertokensSG/Resource"
   }
  },
  "SupertokensSGfromAwsStackAlbSecurityGroupFEFFD71B35672816E8EC": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "Description": "Allow SuperTokens from ALB",
    "FromPort": 3567,
    "GroupId": {
     "Fn::GetAtt": [
      "SupertokensSG8D961012",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "AlbSecurityGroup86A59E99",
      "GroupId"
     ]
    },
    "ToPort": 3567
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/SupertokensSG/from AwsStackAlbSecurityGroupFEFFD71B:3567"
   }
  },
  "SupertokensTaskDef562C1644": {
   "Type": "AWS::ECS::TaskDefinition",
   "Properties": {
    "ContainerDefinitions": [
     {
      "Environment": [
       {
        "Name": "POSTGRESQL_TABLE_NAMES_PREFIX",
        "Value": "Supertokens"
       }
      ],
      "Essential": true,
      "Image": "registry.supertokens.io/supertokens/supertokens-postgresql:6.0",
      "LogConfiguration": {
       "LogDriver": "awslogs",
       "Options": {
        "awslogs-group": {
         "Ref": "SupertokensLogGroup841B0C09"
        },
        "awslogs-stream-prefix": "supertokens-ecs",
        "awslogs-region": {
         "Ref": "AWS::Region"
        }
       }
      },
      "Name": "SupertokensContainer",
      "PortMappings": [
       {
        "ContainerPort": 3567,
        "Protocol": "tcp"
       }
      ],
      "Secrets": [
       {
        "Name": "POSTGRESQL_CONNECTION_URI",
        "ValueFrom": {
         "Ref": "SupertokensDbConnStringSecretC2E71EE2"
        }
       }
      ]
     }
    ],
    "Cpu": "256",
    "ExecutionRoleArn": {
     "Fn::GetAtt": [
      "SupertokensTaskDefExecutionRole30464032",
      "Arn"
     ]
    },
    "Family": "supertokens-fargate",
    "Memory": "512",
    "NetworkMode": "awsvpc",
    "RequiresCompatibilities": [
     "FARGATE"
    ],
    "RuntimePlatform": {
     "CpuArchitecture": "X86_64",
     "OperatingSystemFamily": "LINUX"
    },
    "TaskRoleArn": {
     "Fn::GetAtt": [
      "ECSTaskRoleF2ADB362",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/SupertokensTaskDef/Resource"
   }
  },
  "SupertokensTaskDefExecutionRole30464032": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/SupertokensTaskDef/ExecutionRole/Resource"
   }
  },
  "SupertokensTaskDefExecutionRoleDefaultPolicy9F77350D": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "SupertokensLogGroup841B0C09",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "secretsmanager:DescribeSecret",
        "secretsmanager:GetSecretValue"
       ],
       "Effect": "Allow",
       "Resource": {
        "Ref": "SupertokensDbConnStringSecretC2E71EE2"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "SupertokensTaskDefExecutionRoleDefaultPolicy9F77350D",
    "Roles": [
     {
      "Ref": "SupertokensTaskDefExecutionRole30464032"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/SupertokensTaskDef/ExecutionRole/DefaultPolicy/Resource"
   }
  },
  "SupertokensLogGroup841B0C09": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/ecs/",
       {
        "Ref": "AtomicCluster0DDF655C"
       },
       "/supertokens"
      ]
     ]
    },
    "RetentionInDays": 731
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/SupertokensLogGroup/Resource"
   }
  },
  "SupertokensService6D0139D7": {
   "Type": "AWS::ECS::Service",
   "Properties": {
    "Cluster": {
     "Ref": "AtomicCluster0DDF655C"
    },
    "DeploymentConfiguration": {
     "MaximumPercent": 200,
     "MinimumHealthyPercent": 50
    },
    "DesiredCount": 1,
    "EnableECSManagedTags": false,
    "HealthCheckGracePeriodSeconds": 60,
    "LaunchType": "FARGATE",
    "LoadBalancers": [
     {
      "ContainerName": "SupertokensContainer",
      "ContainerPort": 3567,
      "TargetGroupArn": {
       "Ref": "SupertokensTargetGroupEC539A5A"
      }
     }
    ],
    "NetworkConfiguration": {
     "AwsvpcConfiguration": {
      "AssignPublicIp": "DISABLED",
      "SecurityGroups": [
       {
        "Fn::GetAtt": [
         "SupertokensSG8D961012",
         "GroupId"
        ]
       }
      ],
      "Subnets": [
       {
        "Ref": "AtomicVpcPrivateSubnetSubnet1SubnetCEF3D184"
       },
       {
        "Ref": "AtomicVpcPrivateSubnetSubnet2Subnet21C2DC90"
       }
      ]
     }
    },
    "TaskDefinition": {
     "Ref": "SupertokensTaskDef562C1644"
    }
   },
   "DependsOn": [
    "ECSTaskRoleDefaultPolicy82FC9293",
    "ECSTaskRoleF2ADB362",
    "SupertokensListenerRule0FF7B3A0"
   ],
   "Metadata": {
    "aws:cdk:path": "AwsStack/SupertokensService/Service"
   }
  },
  "SupertokensTargetGroupEC539A5A": {
   "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
   "Properties": {
    "HealthCheckIntervalSeconds": 30,
    "HealthCheckPath": "/hello",
    "HealthCheckTimeoutSeconds": 5,
    "HealthyThresholdCount": 2,
    "Port": 3567,
    "Protocol": "HTTP",
    "TargetGroupAttributes": [
     {
      "Key": "stickiness.enabled",
      "Value": "false"
     }
    ],
    "TargetType": "ip",
    "UnhealthyThresholdCount": 2,
    "VpcId": {
     "Ref": "AtomicVpcD404E496"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/SupertokensTargetGroup/Resource"
   }
  },
  "SupertokensListenerRule0FF7B3A0": {
   "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
   "Properties": {
    "Actions": [
     {
      "TargetGroupArn": {
       "Ref": "SupertokensTargetGroupEC539A5A"
      },
      "Type": "forward"
     }
    ],
    "Conditions": [
     {
      "Field": "path-pattern",
      "PathPatternConfig": {
       "Values": [
        "/v1/auth/*"
       ]
      }
     }
    ],
    "ListenerArn": {
     "Ref": "AtomicAlbHttpListener370F09B3"
    },
    "Priority": 10
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/SupertokensListenerRule/Resource"
   }
  },
  "HasuraSGF7432EF8": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "AwsStack/HasuraSG",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "AtomicVpcD404E496"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/HasuraSG/Resource"
   }
  },
  "HasuraSGfromAwsStackAlbSecurityGroupFEFFD71B808037841BB8": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "Description": "Allow Hasura from ALB",
    "FromPort": 8080,
    "GroupId": {
     "Fn::GetAtt": [
      "HasuraSGF7432EF8",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "AlbSecurityGroup86A59E99",
      "GroupId"
     ]
    },
    "ToPort": 8080
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/HasuraSG/from AwsStackAlbSecurityGroupFEFFD71B:8080"
   }
  },
  "HasuraSGfromAwsStackFunctionsSG4487B3938080F8F86324": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "Description": "Allow Functions to connect to Hasura",
    "FromPort": 8080,
    "GroupId": {
     "Fn::GetAtt": [
      "HasuraSGF7432EF8",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "FunctionsSGE05723DC",
      "GroupId"
     ]
    },
    "ToPort": 8080
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/HasuraSG/from AwsStackFunctionsSG4487B393:8080"
   }
  },
  "HasuraSGfromAwsStackHandshakeSG021993A2808054773D92": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "Description": "Allow Handshake to connect to Hasura",
    "FromPort": 8080,
    "GroupId": {
     "Fn::GetAtt": [
      "HasuraSGF7432EF8",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "HandshakeSGAE954E91",
      "GroupId"
     ]
    },
    "ToPort": 8080
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/HasuraSG/from AwsStackHandshakeSG021993A2:8080"
   }
  },
  "HasuraSGfromAwsStackOAuthSG55F90F0980800835E7B3": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "Description": "Allow OAuth to connect to Hasura",
    "FromPort": 8080,
    "GroupId": {
     "Fn::GetAtt": [
      "HasuraSGF7432EF8",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "OAuthSGCA2E2DFC",
      "GroupId"
     ]
    },
    "ToPort": 8080
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/HasuraSG/from AwsStackOAuthSG55F90F09:8080"
   }
  },
  "HasuraTaskDef31ABDC68": {
   "Type": "AWS::ECS::TaskDefinition",
   "Properties": {
    "ContainerDefinitions": [
     {
      "Environment": [
       {
        "Name": "HASURA_GRAPHQL_UNAUTHORIZED_ROLE",
        "Value": "public"
       },
       {
        "Name": "HASURA_GRAPHQL_LOG_LEVEL",
        "Value": "debug"
       },
       {
        "Name": "HASURA_GRAPHQL_ENABLE_CONSOLE",
        "Value": "true"
       },
       {
        "Name": "HASURA_GRAPHQL_DEV_MODE",
        "Value": "true"
       }
      ],
      "Essential": true,
      "Image": "hasura/graphql-engine:v2.38.0",
      "LogConfiguration": {
       "LogDriver": "awslogs",
       "Options": {
        "awslogs-group": {
         "Ref": "HasuraLogGroupB47AF772"
        },
        "awslogs-stream-prefix": "hasura-ecs",
        "awslogs-region": {
         "Ref": "AWS::Region"
        }
       }
      },
      "Name": "HasuraContainer",
      "PortMappings": [
       {
        "ContainerPort": 8080,
        "Protocol": "tcp"
       }
      ],
      "Secrets": [
       {
        "Name": "HASURA_GRAPHQL_ADMIN_SECRET",
        "ValueFrom": {
         "Ref": "HasuraAdminSecret359C72F3"
        }
       },
       {
        "Name": "HASURA_GRAPHQL_JWT_SECRET",
        "ValueFrom": {
         "Ref": "PlaceholderHasuraJwtSecret5A36E06E"
        }
       },
       {
        "Name": "HASURA_GRAPHQL_DATABASE_URL",
        "ValueFrom": {
         "Ref": "HasuraDbConnStringSecret6DFFC41D"
        }
       }
      ]
     }
    ],
    "Cpu": "512",
    "ExecutionRoleArn": {
     "Fn::GetAtt": [
      "HasuraTaskDefExecutionRoleD3078284",
      "Arn"
     ]
    },
    "Family": "hasura-fargate",
    "Memory": "1024",
    "NetworkMode": "awsvpc",
    "RequiresCompatibilities": [
     "FARGATE"
    ],
    "RuntimePlatform": {
     "CpuArchitecture": "X86_64",
     "OperatingSystemFamily": "LINUX"
    },
    "TaskRoleArn": {
     "Fn::GetAtt": [
      "ECSTaskRoleF2ADB362",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/HasuraTaskDef/Resource"
   }
  },
  "HasuraTaskDefExecutionRoleD3078284": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/HasuraTaskDef/ExecutionRole/Resource"
   }
  },
  "HasuraTaskDefExecutionRoleDefaultPolicy7A47E19B": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "HasuraLogGroupB47AF772",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "secretsmanager:DescribeSecret",
        "secretsmanager:GetSecretValue"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Ref": "HasuraAdminSecret359C72F3"
        },
        {
         "Ref": "HasuraDbConnStringSecret6DFFC41D"
        },
        {
         "Ref": "PlaceholderHasuraJwtSecret5A36E06E"
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "HasuraTaskDefExecutionRoleDefaultPolicy7A47E19B",
    "Roles": [
     {
      "Ref": "HasuraTaskDefExecutionRoleD3078284"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/HasuraTaskDef/ExecutionRole/DefaultPolicy/Resource"
   }
  },
  "HasuraLogGroupB47AF772": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/ecs/",
       {
        "Ref": "AtomicCluster0DDF655C"
       },
       "/hasura"
      ]
     ]
    },
    "RetentionInDays": 731
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/HasuraLogGroup/Resource"
   }
  },
  "HasuraService0424AA98": {
   "Type": "AWS::ECS::Service",
   "Properties": {
    "Cluster": {
     "Ref": "AtomicCluster0DDF655C"
    },
    "DeploymentConfiguration": {
     "MaximumPercent": 200,
     "MinimumHealthyPercent": 50
    },
    "DesiredCount": 1,
    "EnableECSManagedTags": false,
    "HealthCheckGracePeriodSeconds": 60,
    "LaunchType": "FARGATE",
    "LoadBalancers": [
     {
      "ContainerName": "HasuraContainer",
      "ContainerPort": 8080,
      "TargetGroupArn": {
       "Ref": "HasuraTargetGroup0636F42A"
      }
     }
    ],
    "NetworkConfiguration": {
     "AwsvpcConfiguration": {
      "AssignPublicIp": "DISABLED",
      "SecurityGroups": [
       {
        "Fn::GetAtt": [
         "HasuraSGF7432EF8",
         "GroupId"
        ]
       }
      ],
      "Subnets": [
       {
        "Ref": "AtomicVpcPrivateSubnetSubnet1SubnetCEF3D184"
       },
       {
        "Ref": "AtomicVpcPrivateSubnetSubnet2Subnet21C2DC90"
       }
      ]
     }
    },
    "TaskDefinition": {
     "Ref": "HasuraTaskDef31ABDC68"
    }
   },
   "DependsOn": [
    "ECSTaskRoleDefaultPolicy82FC9293",
    "ECSTaskRoleF2ADB362",
    "HasuraListenerRuleCEF25397"
   ],
   "Metadata": {
    "aws:cdk:path": "AwsStack/HasuraService/Service"
   }
  },
  "HasuraTargetGroup0636F42A": {
   "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
   "Properties": {
    "HealthCheckIntervalSeconds": 30,
    "HealthCheckPath": "/healthz",
    "Port": 8080,
    "Protocol": "HTTP",
    "TargetGroupAttributes": [
     {
      "Key": "stickiness.enabled",
      "Value": "false"
     }
    ],
    "TargetType": "ip",
    "VpcId": {
     "Ref": "AtomicVpcD404E496"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/HasuraTargetGroup/Resource"
   }
  },
  "HasuraListenerRuleCEF25397": {
   "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
   "Properties": {
    "Actions": [
     {
      "TargetGroupArn": {
       "Ref": "HasuraTargetGroup0636F42A"
      },
      "Type": "forward"
     }
    ],
    "Conditions": [
     {
      "Field": "path-pattern",
      "PathPatternConfig": {
       "Values": [
        "/v1/graphql/*"
       ]
      }
     }
    ],
    "ListenerArn": {
     "Ref": "AtomicAlbHttpListener370F09B3"
    },
    "Priority": 20
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/HasuraListenerRule/Resource"
   }
  },
  "FunctionsSGE05723DC": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "AwsStack/FunctionsSG",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "AtomicVpcD404E496"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/FunctionsSG/Resource"
   }
  },
  "FunctionsSGfromAwsStackAlbSecurityGroupFEFFD71B8006705D43": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "Description": "Allow Functions from ALB on its container port",
    "FromPort": 80,
    "GroupId": {
     "Fn::GetAtt": [
      "FunctionsSGE05723DC",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "AlbSecurityGroup86A59E99",
      "GroupId"
     ]
    },
    "ToPort": 80
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/FunctionsSG/from AwsStackAlbSecurityGroupFEFFD71B:80"
   }
  },
  "FunctionsTaskDef51ECFDE2": {
   "Type": "AWS::ECS::TaskDefinition",
   "Properties": {
    "ContainerDefinitions": [
     {
      "Environment": [
       {
        "Name": "HASURA_GRAPHQL_GRAPHQL_URL",
        "Value": {
         "Fn::Join": [
          "",
          [
           "http://",
           {
            "Fn::GetAtt": [
             "AtomicAlbF873927A",
             "DNSName"
            ]
           },
           "/v1/graphql"
          ]
         ]
        }
       },
       {
        "Name": "FUNCTION_SERVER_URL",
        "Value": {
         "Fn::Join": [
          "",
          [
           "http://",
           {
            "Fn::GetAtt": [
             "AtomicAlbF873927A",
             "DNSName"
            ]
           },
           "/v1/functions"
          ]
         ]
        }
       },
       {
        "Name": "APP_CLIENT_URL",
        "Value": {
         "Fn::Join": [
          "",
          [
           "http://",
           {
            "Fn::GetAtt": [
             "AtomicAlbF873927A",
             "DNSName"
            ]
           }
          ]
         ]
        }
       },
       {
        "Name": "S3_BUCKET",
        "Value": {
         "Ref": "AtomicDataBucketE642B1DA"
        }
       },
       {
        "Name": "AWS_REGION",
        "Value": {
         "Ref": "AWS::Region"
        }
       }
      ],
      "Essential": true,
      "Image": {
       "Fn::Join": [
        "",
        [
         {
          "Fn::Select": [
           4,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "AtomicFunctionsRepoCA9ADB29",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".dkr.ecr.",
         {
          "Fn::Select": [
           3,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "AtomicFunctionsRepoCA9ADB29",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".",
         {
          "Ref": "AWS::URLSuffix"
         },
         "/",
         {
          "Ref": "AtomicFunctionsRepoCA9ADB29"
         },
         ":latest"
        ]
       ]
      },
      "LogConfiguration": {
       "LogDriver": "awslogs",
       "Options": {
        "awslogs-group": {
         "Ref": "FunctionsLogGroup0226F429"
        },
        "awslogs-stream-prefix": "functions-ecs",
        "awslogs-region": {
         "Ref": "AWS::Region"
        }
       }
      },
      "Name": "FunctionsContainer",
      "PortMappings": [
       {
        "ContainerPort": 80,
        "Protocol": "tcp"
       }
      ],
      "Secrets": [
       {
        "Name": "HASURA_GRAPHQL_ADMIN_SECRET",
        "ValueFrom": {
         "Ref": "HasuraAdminSecret359C72F3"
        }
       },
       {
        "Name": "OPENAI_API_KEY",
        "ValueFrom": {
         "Ref": "OpenAiApiKeySecret05681F66"
        }
       }
      ]
     }
    ],
    "Cpu": "512",
    "ExecutionRoleArn": {
     "Fn::GetAtt": [
      "ECSTaskRoleF2ADB362",
      "Arn"
     ]
    },
    "Family": "functions-fargate",
    "Memory": "1024",
    "NetworkMode": "awsvpc",
    "RequiresCompatibilities": [
     "FARGATE"
    ],
    "RuntimePlatform": {
     "CpuArchitecture": "X86_64",
     "OperatingSystemFamily": "LINUX"
    },
    "TaskRoleArn": {
     "Fn::GetAtt": [
      "ECSTaskRoleF2ADB362",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/FunctionsTaskDef/Resource"
   }
  },
  "FunctionsLogGroup0226F429": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/ecs/",
       {
        "Ref": "AtomicCluster0DDF655C"
       },
       "/functions"
      ]
     ]
    },
    "RetentionInDays": 731
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/FunctionsLogGroup/Resource"
   }
  },
  "FunctionsService070CDCF4": {
   "Type": "AWS::ECS::Service",
   "Properties": {
    "Cluster": {
     "Ref": "AtomicCluster0DDF655C"
    },
    "DeploymentConfiguration": {
     "MaximumPercent": 200,
     "MinimumHealthyPercent": 50
    },
    "DesiredCount": 1,
    "EnableECSManagedTags": false,
    "HealthCheckGracePeriodSeconds": 60,
    "LaunchType": "FARGATE",
    "LoadBalancers": [
     {
      "ContainerName": "FunctionsContainer",
      "ContainerPort": 80,
      "TargetGroupArn": {
       "Ref": "FunctionsTargetGroup7D789BB7"
      }
     }
    ],
    "NetworkConfiguration": {
     "AwsvpcConfiguration": {
      "AssignPublicIp": "DISABLED",
      "SecurityGroups": [
       {
        "Fn::GetAtt": [
         "FunctionsSGE05723DC",
         "GroupId"
        ]
       }
      ],
      "Subnets": [
       {
        "Ref": "AtomicVpcPrivateSubnetSubnet1SubnetCEF3D184"
       },
       {
        "Ref": "AtomicVpcPrivateSubnetSubnet2Subnet21C2DC90"
       }
      ]
     }
    },
    "TaskDefinition": {
     "Ref": "FunctionsTaskDef51ECFDE2"
    }
   },
   "DependsOn": [
    "ECSTaskRoleDefaultPolicy82FC9293",
    "ECSTaskRoleF2ADB362",
    "FunctionsListenerRule333BE9DD"
   ],
   "Metadata": {
    "aws:cdk:path": "AwsStack/FunctionsService/Service"
   }
  },
  "FunctionsTargetGroup7D789BB7": {
   "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
   "Properties": {
    "HealthCheckIntervalSeconds": 30,
    "HealthCheckPath": "/v1/functions/healthz",
    "HealthCheckTimeoutSeconds": 5,
    "Port": 80,
    "Protocol": "HTTP",
    "TargetGroupAttributes": [
     {
      "Key": "stickiness.enabled",
      "Value": "false"
     }
    ],
    "TargetType": "ip",
    "VpcId": {
     "Ref": "AtomicVpcD404E496"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/FunctionsTargetGroup/Resource"
   }
  },
  "FunctionsListenerRule333BE9DD": {
   "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
   "Properties": {
    "Actions": [
     {
      "TargetGroupArn": {
       "Ref": "FunctionsTargetGroup7D789BB7"
      },
      "Type": "forward"
     }
    ],
    "Conditions": [
     {
      "Field": "path-pattern",
      "PathPatternConfig": {
       "Values": [
        "/v1/functions/*"
       ]
      }
     }
    ],
    "ListenerArn": {
     "Ref": "AtomicAlbHttpListener370F09B3"
    },
    "Priority": 30
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/FunctionsListenerRule/Resource"
   }
  },
  "AppSG652848D9": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "AwsStack/AppSG",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "AtomicVpcD404E496"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/AppSG/Resource"
   }
  },
  "AppSGfromAwsStackAlbSecurityGroupFEFFD71B300050A217E7": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "Description": "Allow App from ALB on its container port",
    "FromPort": 3000,
    "GroupId": {
     "Fn::GetAtt": [
      "AppSG652848D9",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "AlbSecurityGroup86A59E99",
      "GroupId"
     ]
    },
    "ToPort": 3000
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/AppSG/from AwsStackAlbSecurityGroupFEFFD71B:3000"
   }
  },
  "AppTaskDef32F3E122": {
   "Type": "AWS::ECS::TaskDefinition",
   "Properties": {
    "ContainerDefinitions": [
     {
      "Environment": [
       {
        "Name": "NEXT_PUBLIC_HASURA_GRAPHQL_GRAPHQL_URL",
        "Value": {
         "Fn::Join": [
          "",
          [
           "http://",
           {
            "Fn::GetAtt": [
             "AtomicAlbF873927A",
             "DNSName"
            ]
           },
           "/v1/graphql"
          ]
         ]
        }
       },
       {
        "Name": "NEXT_PUBLIC_HASURA_GRAPHQL_GRAPHQL_WS_URL",
        "Value": {
         "Fn::Join": [
          "",
          [
           "ws://",
           {
            "Fn::GetAtt": [
             "AtomicAlbF873927A",
             "DNSName"
            ]
           },
           "/v1/graphql"
          ]
         ]
        }
       },
       {
        "Name": "NEXT_PUBLIC_SUPERTOKENS_API_DOMAIN",
        "Value": {
         "Fn::Join": [
          "",
          [
           "http://",
           {
            "Fn::GetAtt": [
             "AtomicAlbF873927A",
             "DNSName"
            ]
           },
           "/v1/auth"
          ]
         ]
        }
       },
       {
        "Name": "NEXT_PUBLIC_HANDSHAKE_URL",
        "Value": {
         "Fn::Join": [
          "",
          [
           "http://",
           {
            "Fn::GetAtt": [
             "AtomicAlbF873927A",
             "DNSName"
            ]
           },
           "/v1/handshake/"
          ]
         ]
        }
       },
       {
        "Name": "NEXT_PUBLIC_EVENT_TO_QUEUE_AUTH_URL",
        "Value": {
         "Fn::Join": [
          "",
          [
           "http://",
           {
            "Fn::GetAtt": [
             "AtomicAlbF873927A",
             "DNSName"
            ]
           },
           "/v1/functions/eventToQueueAuth"
          ]
         ]
        }
       }
      ],
      "Essential": true,
      "Image": {
       "Fn::Join": [
        "",
        [
         {
          "Fn::Select": [
           4,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "AtomicAppRepo2D8E1244",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".dkr.ecr.",
         {
          "Fn::Select": [
           3,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "AtomicAppRepo2D8E1244",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".",
         {
          "Ref": "AWS::URLSuffix"
         },
         "/",
         {
          "Ref": "AtomicAppRepo2D8E1244"
         },
         ":latest"
        ]
       ]
      },
      "LogConfiguration": {
       "LogDriver": "awslogs",
       "Options": {
        "awslogs-group": {
         "Ref": "AppLogGroup7D8CD952"
        },
        "awslogs-stream-prefix": "app-ecs",
        "awslogs-region": {
         "Ref": "AWS::Region"
        }
       }
      },
      "Name": "AppContainer",
      "PortMappings": [
       {
        "ContainerPort": 3000,
        "Protocol": "tcp"
       }
      ]
     }
    ],
    "Cpu": "256",
    "ExecutionRoleArn": {
     "Fn::GetAtt": [
      "ECSTaskRoleF2ADB362",
      "Arn"
     ]
    },
    "Family": "app-fargate",
    "Memory": "512",
    "NetworkMode": "awsvpc",
    "RequiresCompatibilities": [
     "FARGATE"
    ],
    "RuntimePlatform": {
     "CpuArchitecture": "X86_64",
     "OperatingSystemFamily": "LINUX"
    },
    "TaskRoleArn": {
     "Fn::GetAtt": [
      "ECSTaskRoleF2ADB362",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/AppTaskDef/Resource"
   }
  },
  "AppLogGroup7D8CD952": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/ecs/",
       {
        "Ref": "AtomicCluster0DDF655C"
       },
       "/app"
      ]
     ]
    },
    "RetentionInDays": 731
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/AppLogGroup/Resource"
   }
  },
  "AppServiceA2F9036C": {
   "Type": "AWS::ECS::Service",
   "Properties": {
    "Cluster": {
     "Ref": "AtomicCluster0DDF655C"
    },
    "DeploymentConfiguration": {
     "MaximumPercent": 200,
     "MinimumHealthyPercent": 50
    },
    "DesiredCount": 1,
    "EnableECSManagedTags": false,
    "HealthCheckGracePeriodSeconds": 60,
    "LaunchType": "FARGATE",
    "LoadBalancers": [
     {
      "ContainerName": "AppContainer",
      "ContainerPort": 3000,
      "TargetGroupArn": {
       "Ref": "AppTargetGroup3D716DB6"
      }
     }
    ],
    "NetworkConfiguration": {
     "AwsvpcConfiguration": {
      "AssignPublicIp": "DISABLED",
      "SecurityGroups": [
       {
        "Fn::GetAtt": [
         "AppSG652848D9",
         "GroupId"
        ]
       }
      ],
      "Subnets": [
       {
        "Ref": "AtomicVpcPrivateSubnetSubnet1SubnetCEF3D184"
       },
       {
        "Ref": "AtomicVpcPrivateSubnetSubnet2Subnet21C2DC90"
       }
      ]
     }
    },
    "TaskDefinition": {
     "Ref": "AppTaskDef32F3E122"
    }
   },
   "DependsOn": [
    "AppListenerRuleD269CB8A",
    "ECSTaskRoleDefaultPolicy82FC9293",
    "ECSTaskRoleF2ADB362"
   ],
   "Metadata": {
    "aws:cdk:path": "AwsStack/AppService/Service"
   }
  },
  "AppTargetGroup3D716DB6": {
   "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
   "Properties": {
    "HealthCheckIntervalSeconds": 30,
    "HealthCheckPath": "/",
    "HealthCheckTimeoutSeconds": 5,
    "Port": 3000,
    "Protocol": "HTTP",
    "TargetGroupAttributes": [
     {
      "Key": "stickiness.enabled",
      "Value": "false"
     }
    ],
    "TargetType": "ip",
    "VpcId": {
     "Ref": "AtomicVpcD404E496"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/AppTargetGroup/Resource"
   }
  },
  "AppListenerRuleD269CB8A": {
   "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
   "Properties": {
    "Actions": [
     {
      "TargetGroupArn": {
       "Ref": "AppTargetGroup3D716DB6"
      },
      "Type": "forward"
     }
    ],
    "Conditions": [
     {
      "Field": "path-pattern",
      "PathPatternConfig": {
       "Values": [
        "/*"
       ]
      }
     }
    ],
    "ListenerArn": {
     "Ref": "AtomicAlbHttpListener370F09B3"
    },
    "Priority": 100
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/AppListenerRule/Resource"
   }
  },
  "HandshakeSGAE954E91": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "AwsStack/HandshakeSG",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "AtomicVpcD404E496"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/HandshakeSG/Resource"
   }
  },
  "HandshakeSGfromAwsStackAlbSecurityGroupFEFFD71B805DA16F73": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "Description": "Allow Handshake from ALB on its container port",
    "FromPort": 80,
    "GroupId": {
     "Fn::GetAtt": [
      "HandshakeSGAE954E91",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "AlbSecurityGroup86A59E99",
      "GroupId"
     ]
    },
    "ToPort": 80
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/HandshakeSG/from AwsStackAlbSecurityGroupFEFFD71B:80"
   }
  },
  "HandshakeSGfromAwsStackOAuthSG55F90F09803C8F8F6F": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "Description": "Allow OAuth to connect to Handshake",
    "FromPort": 80,
    "GroupId": {
     "Fn::GetAtt": [
      "HandshakeSGAE954E91",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "OAuthSGCA2E2DFC",
      "GroupId"
     ]
    },
    "ToPort": 80
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/HandshakeSG/from AwsStackOAuthSG55F90F09:80"
   }
  },
  "HandshakeTaskDef12148854": {
   "Type": "AWS::ECS::TaskDefinition",
   "Properties": {
    "ContainerDefinitions": [
     {
      "Environment": [
       {
        "Name": "HASURA_GRAPHQL_GRAPHQL_URL",
        "Value": {
         "Fn::Join": [
          "",
          [
           "http://",
           {
            "Fn::GetAtt": [
             "AtomicAlbF873927A",
             "DNSName"
            ]
           },
           "/v1/graphql"
          ]
         ]
        }
       },
       {
        "Name": "MEETING_ASSIST_ADMIN_URL",
        "Value": {
         "Fn::Join": [
          "",
          [
           "http://",
           {
            "Fn::GetAtt": [
             "AtomicAlbF873927A",
             "DNSName"
            ]
           },
           "/v1/functions/schedule-assist/placeholder"
          ]
         ]
        }
       }
      ],
      "Essential": true,
      "Image": {
       "Fn::Join": [
        "",
        [
         {
          "Fn::Select": [
           4,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "AtomicHandshakeRepo7FD56D21",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".dkr.ecr.",
         {
          "Fn::Select": [
           3,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "AtomicHandshakeRepo7FD56D21",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".",
         {
          "Ref": "AWS::URLSuffix"
         },
         "/",
         {
          "Ref": "AtomicHandshakeRepo7FD56D21"
         },
         ":latest"
        ]
       ]
      },
      "LogConfiguration": {
       "LogDriver": "awslogs",
       "Options": {
        "awslogs-group": {
         "Ref": "HandshakeLogGroup90831F6C"
        },
        "awslogs-stream-prefix": "handshake-ecs",
        "awslogs-region": {
         "Ref": "AWS::Region"
        }
       }
      },
      "Name": "HandshakeContainer",
      "PortMappings": [
       {
        "ContainerPort": 80,
        "Protocol": "tcp"
       }
      ],
      "Secrets": [
       {
        "Name": "API_TOKEN",
        "ValueFrom": {
         "Ref": "ApiTokenSecret3A926DEB"
        }
       },
       {
        "Name": "HASURA_GRAPHQL_ADMIN_SECRET",
        "ValueFrom": {
         "Ref": "HasuraAdminSecret359C72F3"
        }
       }
      ]
     }
    ],
    "Cpu": "256",
    "ExecutionRoleArn": {
     "Fn::GetAtt": [
      "ECSTaskRoleF2ADB362",
      "Arn"
     ]
    },
    "Family": "handshake-fargate",
    "Memory": "512",
    "NetworkMode": "awsvpc",
    "RequiresCompatibilities": [
     "FARGATE"
    ],
    "RuntimePlatform": {
     "CpuArchitecture": "X86_64",
     "OperatingSystemFamily": "LINUX"
    },
    "TaskRoleArn": {
     "Fn::GetAtt": [
      "ECSTaskRoleF2ADB362",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/HandshakeTaskDef/Resource"
   }
  },
  "HandshakeLogGroup90831F6C": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/ecs/",
       {
        "Ref": "AtomicCluster0DDF655C"
       },
       "/handshake"
      ]
     ]
    },
    "RetentionInDays": 731
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/HandshakeLogGroup/Resource"
   }
  },
  "HandshakeService90A46F3C": {
   "Type": "AWS::ECS::Service",
   "Properties": {
    "Cluster": {
     "Ref": "AtomicCluster0DDF655C"
    },
    "DeploymentConfiguration": {
     "MaximumPercent": 200,
     "MinimumHealthyPercent": 50
    },
    "DesiredCount": 1,
    "EnableECSManagedTags": false,
    "HealthCheckGracePeriodSeconds": 60,
    "LaunchType": "FARGATE",
    "LoadBalancers": [
     {
      "ContainerName": "HandshakeContainer",
      "ContainerPort": 80,
      "TargetGroupArn": {
       "Ref": "HandshakeTargetGroupB0E5C2E0"
      }
     }
    ],
    "NetworkConfiguration": {
     "AwsvpcConfiguration": {
      "AssignPublicIp": "DISABLED",
      "SecurityGroups": [
       {
        "Fn::GetAtt": [
         "HandshakeSGAE954E91",
         "GroupId"
        ]
       }
      ],
      "Subnets": [
       {
        "Ref": "AtomicVpcPrivateSubnetSubnet1SubnetCEF3D184"
       },
       {
        "Ref": "AtomicVpcPrivateSubnetSubnet2Subnet21C2DC90"
       }
      ]
     }
    },
    "TaskDefinition": {
     "Ref": "HandshakeTaskDef12148854"
    }
   },
   "DependsOn": [
    "ECSTaskRoleDefaultPolicy82FC9293",
    "ECSTaskRoleF2ADB362",
    "HandshakeListenerRule3CECC926"
   ],
   "Metadata": {
    "aws:cdk:path": "AwsStack/HandshakeService/Service"
   }
  },
  "HandshakeTargetGroupB0E5C2E0": {
   "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
   "Properties": {
    "HealthCheckIntervalSeconds": 30,
    "HealthCheckPath": "/health",
    "Port": 80,
    "Protocol": "HTTP",
    "TargetGroupAttributes": [
     {
      "Key": "stickiness.enabled",
      "Value": "false"
     }
    ],
    "TargetType": "ip",
    "VpcId": {
     "Ref": "AtomicVpcD404E496"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/HandshakeTargetGroup/Resource"
   }
  },
  "HandshakeListenerRule3CECC926": {
   "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
   "Properties": {
    "Actions": [
     {
      "TargetGroupArn": {
       "Ref": "HandshakeTargetGroupB0E5C2E0"
      },
      "Type": "forward"
     }
    ],
    "Conditions": [
     {
      "Field": "path-pattern",
      "PathPatternConfig": {
       "Values": [
        "/v1/handshake/*"
       ]
      }
     }
    ],
    "ListenerArn": {
     "Ref": "AtomicAlbHttpListener370F09B3"
    },
    "Priority": 40
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/HandshakeListenerRule/Resource"
   }
  },
  "OAuthSGCA2E2DFC": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "AwsStack/OAuthSG",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "AtomicVpcD404E496"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/OAuthSG/Resource"
   }
  },
  "OAuthSGfromAwsStackAlbSecurityGroupFEFFD71B8094475810": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "Description": "Allow OAuth from ALB on its container port",
    "FromPort": 80,
    "GroupId": {
     "Fn::GetAtt": [
      "OAuthSGCA2E2DFC",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "AlbSecurityGroup86A59E99",
      "GroupId"
     ]
    },
    "ToPort": 80
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/OAuthSG/from AwsStackAlbSecurityGroupFEFFD71B:80"
   }
  },
  "OAuthTaskDef19B6669A": {
   "Type": "AWS::ECS::TaskDefinition",
   "Properties": {
    "ContainerDefinitions": [
     {
      "Environment": [
       {
        "Name": "HASURA_GRAPHQL_GRAPHQL_URL",
        "Value": {
         "Fn::Join": [
          "",
          [
           "http://",
           {
            "Fn::GetAtt": [
             "AtomicAlbF873927A",
             "DNSName"
            ]
           },
           "/v1/graphql"
          ]
         ]
        }
       },
       {
        "Name": "HANDSHAKE_URL",
        "Value": {
         "Fn::Join": [
          "",
          [
           "http://",
           {
            "Fn::GetAtt": [
             "AtomicAlbF873927A",
             "DNSName"
            ]
           },
           "/v1/handshake"
          ]
         ]
        }
       }
      ],
      "Essential": true,
      "Image": {
       "Fn::Join": [
        "",
        [
         {
          "Fn::Select": [
           4,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "AtomicOauthRepoCAF08457",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".dkr.ecr.",
         {
          "Fn::Select": [
           3,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "AtomicOauthRepoCAF08457",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".",
         {
          "Ref": "AWS::URLSuffix"
         },
         "/",
         {
          "Ref": "AtomicOauthRepoCAF08457"
         },
         ":latest"
        ]
       ]
      },
      "LogConfiguration": {
       "LogDriver": "awslogs",
       "Options": {
        "awslogs-group": {
         "Ref": "OAuthLogGroupF9A7E869"
        },
        "awslogs-stream-prefix": "oauth-ecs",
        "awslogs-region": {
         "Ref": "AWS::Region"
        }
       }
      },
      "Name": "OAuthContainer",
      "PortMappings": [
       {
        "ContainerPort": 80,
        "Protocol": "tcp"
       }
      ],
      "Secrets": [
       {
        "Name": "HASURA_GRAPHQL_ADMIN_SECRET",
        "ValueFrom": {
         "Ref": "HasuraAdminSecret359C72F3"
        }
       }
      ]
     }
    ],
    "Cpu": "256",
    "ExecutionRoleArn": {
     "Fn::GetAtt": [
      "ECSTaskRoleF2ADB362",
      "Arn"
     ]
    },
    "Family": "oauth-fargate",
    "Memory": "512",
    "NetworkMode": "awsvpc",
    "RequiresCompatibilities": [
     "FARGATE"
    ],
    "RuntimePlatform": {
     "CpuArchitecture": "X86_64",
     "OperatingSystemFamily": "LINUX"
    },
    "TaskRoleArn": {
     "Fn::GetAtt": [
      "ECSTaskRoleF2ADB362",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/OAuthTaskDef/Resource"
   }
  },
  "OAuthLogGroupF9A7E869": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/ecs/",
       {
        "Ref": "AtomicCluster0DDF655C"
       },
       "/oauth"
      ]
     ]
    },
    "RetentionInDays": 731
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/OAuthLogGroup/Resource"
   }
  },
  "OAuthService4E623EC0": {
   "Type": "AWS::ECS::Service",
   "Properties": {
    "Cluster": {
     "Ref": "AtomicCluster0DDF655C"
    },
    "DeploymentConfiguration": {
     "MaximumPercent": 200,
     "MinimumHealthyPercent": 50
    },
    "DesiredCount": 1,
    "EnableECSManagedTags": false,
    "HealthCheckGracePeriodSeconds": 60,
    "LaunchType": "FARGATE",
    "LoadBalancers": [
     {
      "ContainerName": "OAuthContainer",
      "ContainerPort": 80,
      "TargetGroupArn": {
       "Ref": "OAuthTargetGroup82179AC8"
      }
     }
    ],
    "NetworkConfiguration": {
     "AwsvpcConfiguration": {
      "AssignPublicIp": "DISABLED",
      "SecurityGroups": [
       {
        "Fn::GetAtt": [
         "OAuthSGCA2E2DFC",
         "GroupId"
        ]
       }
      ],
      "Subnets": [
       {
        "Ref": "AtomicVpcPrivateSubnetSubnet1SubnetCEF3D184"
       },
       {
        "Ref": "AtomicVpcPrivateSubnetSubnet2Subnet21C2DC90"
       }
      ]
     }
    },
    "TaskDefinition": {
     "Ref": "OAuthTaskDef19B6669A"
    }
   },
   "DependsOn": [
    "ECSTaskRoleDefaultPolicy82FC9293",
    "ECSTaskRoleF2ADB362",
    "OAuthListenerRuleBC6350B9"
   ],
   "Metadata": {
    "aws:cdk:path": "AwsStack/OAuthService/Service"
   }
  },
  "OAuthTargetGroup82179AC8": {
   "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
   "Properties": {
    "HealthCheckIntervalSeconds": 30,
    "HealthCheckPath": "/health",
    "Port": 80,
    "Protocol": "HTTP",
    "TargetGroupAttributes": [
     {
      "Key": "stickiness.enabled",
      "Value": "false"
     }
    ],
    "TargetType": "ip",
    "VpcId": {
     "Ref": "AtomicVpcD404E496"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/OAuthTargetGroup/Resource"
   }
  },
  "OAuthListenerRuleBC6350B9": {
   "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
   "Properties": {
    "Actions": [
     {
      "TargetGroupArn": {
       "Ref": "OAuthTargetGroup82179AC8"
      },
      "Type": "forward"
     }
    ],
    "Conditions": [
     {
      "Field": "path-pattern",
      "PathPatternConfig": {
       "Values": [
        "/v1/oauth/*"
       ]
      }
     }
    ],
    "ListenerArn": {
     "Ref": "AtomicAlbHttpListener370F09B3"
    },
    "Priority": 50
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/OAuthListenerRule/Resource"
   }
  },
  "OptaplannerSG10E13F9F": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "AwsStack/OptaplannerSG",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "AtomicVpcD404E496"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/OptaplannerSG/Resource"
   }
  },
  "OptaplannerSGfromAwsStackAlbSecurityGroupFEFFD71B808191604EED": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "Description": "Load balancer to target",
    "FromPort": 8081,
    "GroupId": {
     "Fn::GetAtt": [
      "OptaplannerSG10E13F9F",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "AlbSecurityGroup86A59E99",
      "GroupId"
     ]
    },
    "ToPort": 8081
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/OptaplannerSG/from AwsStackAlbSecurityGroupFEFFD71B:8081"
   }
  },
  "OptaplannerTaskDef99156FA2": {
   "Type": "AWS::ECS::TaskDefinition",
   "Properties": {
    "ContainerDefinitions": [
     {
      "Environment": [
       {
        "Name": "QUARKUS_DATASOURCE_DB_KIND",
        "Value": "postgresql"
       },
       {
        "Name": "USERNAME",
        "Value": "admin"
       }
      ],
      "Essential": true,
      "Image": {
       "Fn::Join": [
        "",
        [
         {
          "Fn::Select": [
           4,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "AtomicOptaplannerRepo893F41D8",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".dkr.ecr.",
         {
          "Fn::Select": [
           3,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::GetAtt": [
               "AtomicOptaplannerRepo893F41D8",
               "Arn"
              ]
             }
            ]
           }
          ]
         },
         ".",
         {
          "Ref": "AWS::URLSuffix"
         },
         "/",
         {
          "Ref": "AtomicOptaplannerRepo893F41D8"
         },
         ":latest"
        ]
       ]
      },
      "LogConfiguration": {
       "LogDriver": "awslogs",
       "Options": {
        "awslogs-group": {
         "Ref": "OptaplannerLogGroup6EFDA77B"
        },
        "awslogs-stream-prefix": "AwsStack/optaplanner",
        "awslogs-region": {
         "Ref": "AWS::Region"
        }
       }
      },
      "Name": "OptaplannerContainer",
      "PortMappings": [
       {
        "ContainerPort": 8081,
        "HostPort": 8081,
        "Protocol": "tcp"
       }
      ],
      "Secrets": [
       {
        "Name": "QUARKUS_DATASOURCE_JDBC_URL",
        "ValueFrom": {
         "Ref": "OptaplannerDbConnString28A909E6"
        }
       },
       {
        "Name": "QUARKUS_DATASOURCE_USERNAME",
        "ValueFrom": {
         "Fn::Join": [
          "",
          [
           {
            "Ref": "AtomicPostgresDBSecretAttachmentDB0B9A31"
           },
           ":username::"
          ]
         ]
        }
       },
       {
        "Name": "QUARKUS_DATASOURCE_PASSWORD",
        "ValueFrom": {
         "Fn::Join": [
          "",
          [
           {
            "Ref": "AtomicPostgresDBSecretAttachmentDB0B9A31"
           },
           ":password::"
          ]
         ]
        }
       },
       {
        "Name": "PASSWORD",
        "ValueFrom": {
         "Ref": "ApiTokenSecret3A926DEB"
        }
       }
      ]
     }
    ],
    "Cpu": "1024",
    "ExecutionRoleArn": {
     "Fn::GetAtt": [
      "ECSTaskRoleF2ADB362",
      "Arn"
     ]
    },
    "Family": "AwsStack-optaplanner",
    "Memory": "2048",
    "NetworkMode": "awsvpc",
    "RequiresCompatibilities": [
     "FARGATE"
    ],
    "RuntimePlatform": {
     "CpuArchitecture": "X86_64",
     "OperatingSystemFamily": "LINUX"
    },
    "TaskRoleArn": {
     "Fn::GetAtt": [
      "ECSTaskRoleF2ADB362",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/OptaplannerTaskDef/Resource"
   }
  },
  "OptaplannerLogGroup6EFDA77B": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/ecs/",
       {
        "Ref": "AtomicCluster0DDF655C"
       },
       "/optaplanner"
      ]
     ]
    },
    "RetentionInDays": 731
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "AwsStack/OptaplannerLogGroup/Resource"
   }
  },
  "OptaplannerServiceB1009854": {
   "Type": "AWS::ECS::Service",
   "Properties": {
    "Cluster": {
     "Ref": "AtomicCluster0DDF655C"
    },
    "DeploymentConfiguration": {
     "MaximumPercent": 200,
     "MinimumHealthyPercent": 50
    },
    "DesiredCount": 1,
    "EnableECSManagedTags": false,
    "HealthCheckGracePeriodSeconds": 60,
    "LaunchType": "FARGATE",
    "LoadBalancers": [
     {
      "ContainerName": "OptaplannerContainer",
      "ContainerPort": 8081,
      "TargetGroupArn": {
       "Ref": "OptaplannerTargetGroupDF19B4DA"
      }
     }
    ],
    "NetworkConfiguration": {
     "AwsvpcConfiguration": {
      "AssignPublicIp": "DISABLED",
      "SecurityGroups": [
       {
        "Fn::GetAtt": [
         "OptaplannerSG10E13F9F",
         "GroupId"
        ]
       }
      ],
      "Subnets": [
       {
        "Ref": "AtomicVpcPrivateSubnetSubnet1SubnetCEF3D184"
       },
       {
        "Ref": "AtomicVpcPrivateSubnetSubnet2Subnet21C2DC90"
       }
      ]
     }
    },
    "TaskDefinition": {
     "Ref": "OptaplannerTaskDef99156FA2"
    }
   },
   "DependsOn": [
    "ECSTaskRoleDefaultPolicy82FC9293",
    "ECSTaskRoleF2ADB362",
    "OptaplannerListenerRuleF51E8FB5"
   ],
   "Metadata": {
    "aws:cdk:path": "AwsStack/OptaplannerService/Service"
   }
  },
  "OptaplannerTargetGroupDF19B4DA": {
   "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
   "Properties": {
    "HealthCheckIntervalSeconds": 30,
    "HealthCheckPath": "/q/health",
    "Port": 8081,
    "Protocol": "HTTP",
    "TargetGroupAttributes": [
     {
      "Key": "stickiness.enabled",
      "Value": "false"
     }
    ],
    "TargetType": "ip",
    "VpcId": {
     "Ref": "AtomicVpcD404E496"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/OptaplannerTargetGroup/Resource"
   }
  },
  "OptaplannerListenerRuleF51E8FB5": {
   "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
   "Properties": {
    "Actions": [
     {
      "TargetGroupArn": {
       "Ref": "OptaplannerTargetGroupDF19B4DA"
      },
      "Type": "forward"
     }
    ],
    "Conditions": [
     {
      "Field": "path-pattern",
      "PathPatternConfig": {
       "Values": [
        "/v1/optaplanner/*"
       ]
      }
     }
    ],
    "ListenerArn": {
     "Ref": "AtomicAlbHttpListener370F09B3"
    },
    "Priority": 60
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/OptaplannerListenerRule/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/+1ZS2/bOBD+LeWxYLVtCvSQm+O0hbFpY9jeHNYwijE5UZhQpJYPp15B/31BUpKVxNsmaTb1Fj4EkebFb14kRz7IDl6/yV6/gGv7ivGrV1Iss2rqgF1RuLZfKvs2q448u0I3r8gyPnyGAskheUkoMVjoFcixloKtySHhaJ3Ra0IJeKePUaLD0+UlMmfJoTMeKVmhsUIr5OTwHKRFSkq/lIJNEPiAMbS2YyylZlfjyG05cVVUzKxLJ7Qih2T69sunwefBx/fHpF7Q4blKaGn6l5B10KOBvlji1xSZyaoJltoKp01QMN3LA/0dFZBj425N94a+ayimYxP7kIyDrDor2bwiBXwd/N3mXYH7CA6vYd1SrF8qdEOtzkXuDaSSmFeECW4+gb3qFDt0SWO2LgMh1RYJrtxXw4gVOCT1IsE+Gw9psjKNYvOKwAqEhKWQwq3/1Ko1syrZiDfPYbGjUNzNewFlMjIqT9UJeMUu2nYR5erd8JY4WCtyNSpX7wacG7T2VA0NNt6HAqc7giIC4fxzlzdyOCcvyWJnAO4GilRKqYBiL2jvcAZLiRv6hjawVjMRDXTC4eH9aBz+bYJNm2J98spstuefHfMfg7E7SHYERqrCkXJoFHY1lPa45m3gHLCLApWjU2TeCLf+aLQv51UA2yzF0TIjys40JSClvh5IeerdUnvFNwcIcD5SecAz8RLT7hBS020Sj+fTGI0o9UTYKsJAjZQUChMlNT3TSiELJttTySvxl8cmd/UtvO//BW4wtpf5RWU2FfioXujV8kMr/nnWe36pJ/XwPjnewajvYgx2FPnzZvj5Yplujv2z+A6hMVFTw21WHYODJVgcKetAMZxXBFUuwqWjfWpGnTj7CJVL/MOimWgXbwuDspSCQe8ETUpnaawPVs69lN1rc1u51KZPqikpwUCBDk0E+QEKIdc3LN4gcTwHL11A0o1mNSWi8aIHeZOiVdkMZTag2j7GUWL7sbLNgEIJM8hROQGyPdV5E7l7jbrpm4Zcp+8WYhnSF1NWL2gC1V6c7l5JHurBbRTtF47jo95KtE38FJmJ08DmK8rv2IbZRuYND2O6J5h395tQmb6fhy1q22zjVyY9x+EFGGAOje0tAQxP1RisvdaGD41waAQML0B1Xwm2Q2n8bIu5pgmJLUBBjiarUjMYjBdWg24GJke3ucfOqwZ8A8ZFfs/4djXaRfGO67fzGcL1NEJtnKfOCJWfgfT4EOUcFZowDvaMhLIqm7CfoMrdxc1kjb1izjfdHje4p3PnB2H3YzHDopShG26pROamAh/o6SJ8ibJZNZTeOjS9ISeVRkOnM7BXx3gulAjacZP+H/5Fl266QodaORAKTY/2AUwe02FWguG3vG36J8rVFCVYJ5jUwJcgQTGh8tVBVvUOlBMN/Cjy0Mz7RvoM2lcQ1oVcfy/myUgj3DeQ+ro7N/uvW5YJp3DfUnivqYAiqyZahqMUrPUF8qN1bCwjFBMlyAFj2qt2i0kyQWHAes2wtT+A85luN/Z5VS82xNb4HW7cpNKY2vG6+fObzG/bfQSUx6rsuXvuL8L9gQ3BaLm5bP7Exv8FXHgsN/00pSXS5ofEOIE1UGY6cO4gvEvmfOrAYbg42hvL7sl78nOQ/+uq3amuiD3b/q4vdW6z6kTn7bgtm8d7TPFhgb34VvHmVp4U6poOvXW6mKDV3txjKGgFb+mNjV4JjuYILNKBtWG8g1yoPOiceld6R7etsaip0hyzS/vb6uAge/Mue/3i0grxynjlRIHZJP3/B7w5XgzsIgAA"
   },
   "Metadata": {
    "aws:cdk:path": "AwsStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Outputs": {
  "DataBucketName": {
   "Value": {
    "Ref": "AtomicDataBucketE642B1DA"
   }
  },
  "FunctionsRepoUri": {
   "Value": {
    "Fn::Join": [
     "",
     [
      {
       "Fn::Select": [
        4,
        {
         "Fn::Split": [
          ":",
          {
           "Fn::GetAtt": [
            "AtomicFunctionsRepoCA9ADB29",
            "Arn"
           ]
          }
         ]
        }
       ]
      },
      ".dkr.ecr.",
      {
       "Fn::Select": [
        3,
        {
         "Fn::Split": [
          ":",
          {
           "Fn::GetAtt": [
            "AtomicFunctionsRepoCA9ADB29",
            "Arn"
           ]
          }
         ]
        }
       ]
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "AtomicFunctionsRepoCA9ADB29"
      }
     ]
    ]
   }
  },
  "HandshakeRepoUri": {
   "Value": {
    "Fn::Join": [
     "",
     [
      {
       "Fn::Select": [
        4,
        {
         "Fn::Split": [
          ":",
          {
           "Fn::GetAtt": [
            "AtomicHandshakeRepo7FD56D21",
            "Arn"
           ]
          }
         ]
        }
       ]
      },
      ".dkr.ecr.",
      {
       "Fn::Select": [
        3,
        {
         "Fn::Split": [
          ":",
          {
           "Fn::GetAtt": [
            "AtomicHandshakeRepo7FD56D21",
            "Arn"
           ]
          }
         ]
        }
       ]
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "AtomicHandshakeRepo7FD56D21"
      }
     ]
    ]
   }
  },
  "OauthRepoUri": {
   "Value": {
    "Fn::Join": [
     "",
     [
      {
       "Fn::Select": [
        4,
        {
         "Fn::Split": [
          ":",
          {
           "Fn::GetAtt": [
            "AtomicOauthRepoCAF08457",
            "Arn"
           ]
          }
         ]
        }
       ]
      },
      ".dkr.ecr.",
      {
       "Fn::Select": [
        3,
        {
         "Fn::Split": [
          ":",
          {
           "Fn::GetAtt": [
            "AtomicOauthRepoCAF08457",
            "Arn"
           ]
          }
         ]
        }
       ]
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "AtomicOauthRepoCAF08457"
      }
     ]
    ]
   }
  },
  "AppRepoUri": {
   "Value": {
    "Fn::Join": [
     "",
     [
      {
       "Fn::Select": [
        4,
        {
         "Fn::Split": [
          ":",
          {
           "Fn::GetAtt": [
            "AtomicAppRepo2D8E1244",
            "Arn"
           ]
          }
         ]
        }
       ]
      },
      ".dkr.ecr.",
      {
       "Fn::Select": [
        3,
        {
         "Fn::Split": [
          ":",
          {
           "Fn::GetAtt": [
            "AtomicAppRepo2D8E1244",
            "Arn"
           ]
          }
         ]
        }
       ]
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "AtomicAppRepo2D8E1244"
      }
     ]
    ]
   }
  },
  "OptaplannerRepoUri": {
   "Value": {
    "Fn::Join": [
     "",
     [
      {
       "Fn::Select": [
        4,
        {
         "Fn::Split": [
          ":",
          {
           "Fn::GetAtt": [
            "AtomicOptaplannerRepo893F41D8",
            "Arn"
           ]
          }
         ]
        }
       ]
      },
      ".dkr.ecr.",
      {
       "Fn::Select": [
        3,
        {
         "Fn::Split": [
          ":",
          {
           "Fn::GetAtt": [
            "AtomicOptaplannerRepo893F41D8",
            "Arn"
           ]
          }
         ]
        }
       ]
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "AtomicOptaplannerRepo893F41D8"
      }
     ]
    ]
   }
  },
  "VpcId": {
   "Value": {
    "Ref": "AtomicVpcD404E496"
   }
  },
  "DbInstanceEndpoint": {
   "Value": {
    "Fn::GetAtt": [
     "AtomicPostgresDB2E9D697F",
     "Endpoint.Address"
    ]
   }
  },
  "DbSecretArn": {
   "Value": {
    "Ref": "AtomicPostgresDBSecretAttachmentDB0B9A31"
   }
  },
  "ClusterName": {
   "Value": {
    "Ref": "AtomicCluster0DDF655C"
   }
  },
  "AlbDnsName": {
   "Value": {
    "Fn::GetAtt": [
     "AtomicAlbF873927A",
     "DNSName"
    ]
   }
  },
  "AlbHttpListenerArn": {
   "Value": {
    "Ref": "AtomicAlbHttpListener370F09B3"
   }
  },
  "SupertokensDbConnStringSecretArn": {
   "Value": {
    "Ref": "SupertokensDbConnStringSecretC2E71EE2"
   }
  },
  "HasuraDbConnStringSecretArn": {
   "Value": {
    "Ref": "HasuraDbConnStringSecret6DFFC41D"
   }
  },
  "PlaceholderHasuraJwtSecretArn": {
   "Value": {
    "Ref": "PlaceholderHasuraJwtSecret5A36E06E"
   }
  },
  "ApiTokenSecretArn": {
   "Value": {
    "Ref": "ApiTokenSecret3A926DEB"
   }
  },
  "OpenAiApiKeySecretArn": {
   "Value": {
    "Ref": "OpenAiApiKeySecret05681F66"
   }
  },
  "OptaplannerDbConnStringArn": {
   "Value": {
    "Ref": "OptaplannerDbConnString28A909E6"
   }
  },
  "HasuraAdminSecretOutput": {
   "Value": {
    "Ref": "HasuraAdminSecret359C72F3"
   }
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-3"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-4"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "il-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      }
     ]
    },
    {
     "Fn::Equals": [
      {
       "Ref": "AWS::Region"
      },
      "us-west-2"
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}